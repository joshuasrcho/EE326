
WebcamFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000091c4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004091c4  004091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  004091cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00018bb4  200009c0  00409b8c  000209c0  2**2
                  ALLOC
  4 .stack        00003004  20019574  00422740  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  7 .debug_info   000171f5  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f90  00000000  00000000  00037c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006fa2  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c68  00000000  00000000  00041b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b90  00000000  00000000  000427d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007c84  00000000  00000000  00043362  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f31c  00000000  00000000  0004afe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051f74  00000000  00000000  0005a302  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000040c4  00000000  00000000  000ac278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 c5 01 20 19 2c 40 00 e1 2c 40 00 e1 2c 40 00     x.. .,@..,@..,@.
  400010:	e1 2c 40 00 e1 2c 40 00 e1 2c 40 00 00 00 00 00     .,@..,@..,@.....
	...
  40002c:	e1 2c 40 00 e1 2c 40 00 00 00 00 00 e1 2c 40 00     .,@..,@......,@.
  40003c:	e1 2c 40 00 e1 2c 40 00 e1 2c 40 00 e1 2c 40 00     .,@..,@..,@..,@.
  40004c:	e1 2c 40 00 e1 2c 40 00 e1 2c 40 00 e1 2c 40 00     .,@..,@..,@..,@.
  40005c:	00 00 00 00 e1 2c 40 00 e1 2c 40 00 00 00 00 00     .....,@..,@.....
  40006c:	49 0b 40 00 61 0b 40 00 00 00 00 00 89 25 40 00     I.@.a.@......%@.
  40007c:	e1 2c 40 00 00 00 00 00 00 00 00 00 e1 2c 40 00     .,@..........,@.
  40008c:	e1 2c 40 00 e1 2c 40 00 e1 2c 40 00 e1 2c 40 00     .,@..,@..,@..,@.
  40009c:	b5 23 40 00 e1 2c 40 00 e1 2c 40 00 00 00 00 00     .#@..,@..,@.....
	...
  4000b4:	e1 2c 40 00 e1 2c 40 00 e1 2c 40 00 e1 2c 40 00     .,@..,@..,@..,@.
  4000c4:	e1 2c 40 00 e1 2c 40 00                             .,@..,@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004091cc 	.word	0x004091cc

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004091cc 	.word	0x004091cc
  40012c:	200009c4 	.word	0x200009c4
  400130:	004091cc 	.word	0x004091cc
  400134:	00000000 	.word	0x00000000

00400138 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400138:	b480      	push	{r7}
  40013a:	b087      	sub	sp, #28
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400144:	68fa      	ldr	r2, [r7, #12]
  400146:	68bb      	ldr	r3, [r7, #8]
  400148:	019b      	lsls	r3, r3, #6
  40014a:	4413      	add	r3, r2
  40014c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40014e:	697b      	ldr	r3, [r7, #20]
  400150:	2202      	movs	r2, #2
  400152:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f04f 32ff 	mov.w	r2, #4294967295
  40015a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40015c:	697b      	ldr	r3, [r7, #20]
  40015e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400160:	697b      	ldr	r3, [r7, #20]
  400162:	687a      	ldr	r2, [r7, #4]
  400164:	605a      	str	r2, [r3, #4]
}
  400166:	bf00      	nop
  400168:	371c      	adds	r7, #28
  40016a:	46bd      	mov	sp, r7
  40016c:	bc80      	pop	{r7}
  40016e:	4770      	bx	lr

00400170 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
  400178:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40017a:	687a      	ldr	r2, [r7, #4]
  40017c:	683b      	ldr	r3, [r7, #0]
  40017e:	019b      	lsls	r3, r3, #6
  400180:	4413      	add	r3, r2
  400182:	2205      	movs	r2, #5
  400184:	601a      	str	r2, [r3, #0]
}
  400186:	bf00      	nop
  400188:	370c      	adds	r7, #12
  40018a:	46bd      	mov	sp, r7
  40018c:	bc80      	pop	{r7}
  40018e:	4770      	bx	lr

00400190 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400190:	b480      	push	{r7}
  400192:	b085      	sub	sp, #20
  400194:	af00      	add	r7, sp, #0
  400196:	60f8      	str	r0, [r7, #12]
  400198:	60b9      	str	r1, [r7, #8]
  40019a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40019c:	68fa      	ldr	r2, [r7, #12]
  40019e:	68bb      	ldr	r3, [r7, #8]
  4001a0:	019b      	lsls	r3, r3, #6
  4001a2:	4413      	add	r3, r2
  4001a4:	331c      	adds	r3, #28
  4001a6:	687a      	ldr	r2, [r7, #4]
  4001a8:	601a      	str	r2, [r3, #0]
}
  4001aa:	bf00      	nop
  4001ac:	3714      	adds	r7, #20
  4001ae:	46bd      	mov	sp, r7
  4001b0:	bc80      	pop	{r7}
  4001b2:	4770      	bx	lr

004001b4 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4001b4:	b480      	push	{r7}
  4001b6:	b087      	sub	sp, #28
  4001b8:	af00      	add	r7, sp, #0
  4001ba:	60f8      	str	r0, [r7, #12]
  4001bc:	60b9      	str	r1, [r7, #8]
  4001be:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001c0:	68fa      	ldr	r2, [r7, #12]
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	019b      	lsls	r3, r3, #6
  4001c6:	4413      	add	r3, r2
  4001c8:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  4001ca:	697b      	ldr	r3, [r7, #20]
  4001cc:	687a      	ldr	r2, [r7, #4]
  4001ce:	625a      	str	r2, [r3, #36]	; 0x24
}
  4001d0:	bf00      	nop
  4001d2:	371c      	adds	r7, #28
  4001d4:	46bd      	mov	sp, r7
  4001d6:	bc80      	pop	{r7}
  4001d8:	4770      	bx	lr

004001da <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4001da:	b480      	push	{r7}
  4001dc:	b085      	sub	sp, #20
  4001de:	af00      	add	r7, sp, #0
  4001e0:	6078      	str	r0, [r7, #4]
  4001e2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001e4:	687a      	ldr	r2, [r7, #4]
  4001e6:	683b      	ldr	r3, [r7, #0]
  4001e8:	019b      	lsls	r3, r3, #6
  4001ea:	4413      	add	r3, r2
  4001ec:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4001ee:	68fb      	ldr	r3, [r7, #12]
  4001f0:	6a1b      	ldr	r3, [r3, #32]
}
  4001f2:	4618      	mov	r0, r3
  4001f4:	3714      	adds	r7, #20
  4001f6:	46bd      	mov	sp, r7
  4001f8:	bc80      	pop	{r7}
  4001fa:	4770      	bx	lr

004001fc <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4001fc:	b480      	push	{r7}
  4001fe:	b08d      	sub	sp, #52	; 0x34
  400200:	af00      	add	r7, sp, #0
  400202:	60f8      	str	r0, [r7, #12]
  400204:	60b9      	str	r1, [r7, #8]
  400206:	607a      	str	r2, [r7, #4]
  400208:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40020a:	2302      	movs	r3, #2
  40020c:	613b      	str	r3, [r7, #16]
  40020e:	2308      	movs	r3, #8
  400210:	617b      	str	r3, [r7, #20]
  400212:	2320      	movs	r3, #32
  400214:	61bb      	str	r3, [r7, #24]
  400216:	2380      	movs	r3, #128	; 0x80
  400218:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40021c:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40021e:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400220:	2300      	movs	r3, #0
  400222:	62fb      	str	r3, [r7, #44]	; 0x2c
  400224:	e01a      	b.n	40025c <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400228:	009b      	lsls	r3, r3, #2
  40022a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40022e:	4413      	add	r3, r2
  400230:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400234:	68ba      	ldr	r2, [r7, #8]
  400236:	fbb2 f3f3 	udiv	r3, r2, r3
  40023a:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  40023c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40023e:	0c1b      	lsrs	r3, r3, #16
  400240:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400242:	68fa      	ldr	r2, [r7, #12]
  400244:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400246:	429a      	cmp	r2, r3
  400248:	d901      	bls.n	40024e <tc_find_mck_divisor+0x52>
			return 0;
  40024a:	2300      	movs	r3, #0
  40024c:	e023      	b.n	400296 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40024e:	68fa      	ldr	r2, [r7, #12]
  400250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400252:	429a      	cmp	r2, r3
  400254:	d206      	bcs.n	400264 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400258:	3301      	adds	r3, #1
  40025a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  40025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40025e:	2b04      	cmp	r3, #4
  400260:	d9e1      	bls.n	400226 <tc_find_mck_divisor+0x2a>
  400262:	e000      	b.n	400266 <tc_find_mck_divisor+0x6a>
			break;
  400264:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400268:	2b04      	cmp	r3, #4
  40026a:	d901      	bls.n	400270 <tc_find_mck_divisor+0x74>
		return 0;
  40026c:	2300      	movs	r3, #0
  40026e:	e012      	b.n	400296 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400270:	687b      	ldr	r3, [r7, #4]
  400272:	2b00      	cmp	r3, #0
  400274:	d008      	beq.n	400288 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400278:	009b      	lsls	r3, r3, #2
  40027a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40027e:	4413      	add	r3, r2
  400280:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400288:	683b      	ldr	r3, [r7, #0]
  40028a:	2b00      	cmp	r3, #0
  40028c:	d002      	beq.n	400294 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40028e:	683b      	ldr	r3, [r7, #0]
  400290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400292:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400294:	2301      	movs	r3, #1
}
  400296:	4618      	mov	r0, r3
  400298:	3734      	adds	r7, #52	; 0x34
  40029a:	46bd      	mov	sp, r7
  40029c:	bc80      	pop	{r7}
  40029e:	4770      	bx	lr

004002a0 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4002a0:	b480      	push	{r7}
  4002a2:	b083      	sub	sp, #12
  4002a4:	af00      	add	r7, sp, #0
  4002a6:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4002a8:	687b      	ldr	r3, [r7, #4]
  4002aa:	2208      	movs	r2, #8
  4002ac:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4002ae:	687b      	ldr	r3, [r7, #4]
  4002b0:	2220      	movs	r2, #32
  4002b2:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2204      	movs	r2, #4
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	b084      	sub	sp, #16
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	6078      	str	r0, [r7, #4]
  4002cc:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4002ce:	2300      	movs	r3, #0
  4002d0:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4002d2:	687b      	ldr	r3, [r7, #4]
  4002d4:	f04f 32ff 	mov.w	r2, #4294967295
  4002d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4002da:	687b      	ldr	r3, [r7, #4]
  4002dc:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4002de:	6878      	ldr	r0, [r7, #4]
  4002e0:	4b0e      	ldr	r3, [pc, #56]	; (40031c <twi_master_init+0x58>)
  4002e2:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4002e4:	6878      	ldr	r0, [r7, #4]
  4002e6:	4b0e      	ldr	r3, [pc, #56]	; (400320 <twi_master_init+0x5c>)
  4002e8:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4002ea:	683b      	ldr	r3, [r7, #0]
  4002ec:	6859      	ldr	r1, [r3, #4]
  4002ee:	683b      	ldr	r3, [r7, #0]
  4002f0:	681b      	ldr	r3, [r3, #0]
  4002f2:	461a      	mov	r2, r3
  4002f4:	6878      	ldr	r0, [r7, #4]
  4002f6:	4b0b      	ldr	r3, [pc, #44]	; (400324 <twi_master_init+0x60>)
  4002f8:	4798      	blx	r3
  4002fa:	4603      	mov	r3, r0
  4002fc:	2b01      	cmp	r3, #1
  4002fe:	d101      	bne.n	400304 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400300:	2301      	movs	r3, #1
  400302:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400304:	683b      	ldr	r3, [r7, #0]
  400306:	7a5b      	ldrb	r3, [r3, #9]
  400308:	2b01      	cmp	r3, #1
  40030a:	d102      	bne.n	400312 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  40030c:	687b      	ldr	r3, [r7, #4]
  40030e:	2240      	movs	r2, #64	; 0x40
  400310:	601a      	str	r2, [r3, #0]
	}

	return status;
  400312:	68fb      	ldr	r3, [r7, #12]
}
  400314:	4618      	mov	r0, r3
  400316:	3710      	adds	r7, #16
  400318:	46bd      	mov	sp, r7
  40031a:	bd80      	pop	{r7, pc}
  40031c:	00400661 	.word	0x00400661
  400320:	004002a1 	.word	0x004002a1
  400324:	00400329 	.word	0x00400329

00400328 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400328:	b480      	push	{r7}
  40032a:	b089      	sub	sp, #36	; 0x24
  40032c:	af00      	add	r7, sp, #0
  40032e:	60f8      	str	r0, [r7, #12]
  400330:	60b9      	str	r1, [r7, #8]
  400332:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400334:	2300      	movs	r3, #0
  400336:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400338:	68bb      	ldr	r3, [r7, #8]
  40033a:	4a34      	ldr	r2, [pc, #208]	; (40040c <twi_set_speed+0xe4>)
  40033c:	4293      	cmp	r3, r2
  40033e:	d901      	bls.n	400344 <twi_set_speed+0x1c>
		return FAIL;
  400340:	2301      	movs	r3, #1
  400342:	e05d      	b.n	400400 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400344:	68bb      	ldr	r3, [r7, #8]
  400346:	4a32      	ldr	r2, [pc, #200]	; (400410 <twi_set_speed+0xe8>)
  400348:	4293      	cmp	r3, r2
  40034a:	d937      	bls.n	4003bc <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	4a31      	ldr	r2, [pc, #196]	; (400414 <twi_set_speed+0xec>)
  400350:	fba2 2303 	umull	r2, r3, r2, r3
  400354:	0b9b      	lsrs	r3, r3, #14
  400356:	3b04      	subs	r3, #4
  400358:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40035a:	68ba      	ldr	r2, [r7, #8]
  40035c:	4b2e      	ldr	r3, [pc, #184]	; (400418 <twi_set_speed+0xf0>)
  40035e:	4413      	add	r3, r2
  400360:	009b      	lsls	r3, r3, #2
  400362:	687a      	ldr	r2, [r7, #4]
  400364:	fbb2 f3f3 	udiv	r3, r2, r3
  400368:	3b04      	subs	r3, #4
  40036a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40036c:	e005      	b.n	40037a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  40036e:	69fb      	ldr	r3, [r7, #28]
  400370:	3301      	adds	r3, #1
  400372:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400374:	697b      	ldr	r3, [r7, #20]
  400376:	085b      	lsrs	r3, r3, #1
  400378:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40037a:	697b      	ldr	r3, [r7, #20]
  40037c:	2bff      	cmp	r3, #255	; 0xff
  40037e:	d909      	bls.n	400394 <twi_set_speed+0x6c>
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	2b06      	cmp	r3, #6
  400384:	d9f3      	bls.n	40036e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400386:	e005      	b.n	400394 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400388:	69fb      	ldr	r3, [r7, #28]
  40038a:	3301      	adds	r3, #1
  40038c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40038e:	693b      	ldr	r3, [r7, #16]
  400390:	085b      	lsrs	r3, r3, #1
  400392:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400394:	693b      	ldr	r3, [r7, #16]
  400396:	2bff      	cmp	r3, #255	; 0xff
  400398:	d902      	bls.n	4003a0 <twi_set_speed+0x78>
  40039a:	69fb      	ldr	r3, [r7, #28]
  40039c:	2b06      	cmp	r3, #6
  40039e:	d9f3      	bls.n	400388 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003a0:	697b      	ldr	r3, [r7, #20]
  4003a2:	b2da      	uxtb	r2, r3
  4003a4:	693b      	ldr	r3, [r7, #16]
  4003a6:	021b      	lsls	r3, r3, #8
  4003a8:	b29b      	uxth	r3, r3
  4003aa:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4003ac:	69fb      	ldr	r3, [r7, #28]
  4003ae:	041b      	lsls	r3, r3, #16
  4003b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003b4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4003b6:	68fb      	ldr	r3, [r7, #12]
  4003b8:	611a      	str	r2, [r3, #16]
  4003ba:	e020      	b.n	4003fe <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4003bc:	68bb      	ldr	r3, [r7, #8]
  4003be:	005b      	lsls	r3, r3, #1
  4003c0:	687a      	ldr	r2, [r7, #4]
  4003c2:	fbb2 f3f3 	udiv	r3, r2, r3
  4003c6:	3b04      	subs	r3, #4
  4003c8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003ca:	e005      	b.n	4003d8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4003cc:	69fb      	ldr	r3, [r7, #28]
  4003ce:	3301      	adds	r3, #1
  4003d0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4003d2:	69bb      	ldr	r3, [r7, #24]
  4003d4:	085b      	lsrs	r3, r3, #1
  4003d6:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003d8:	69bb      	ldr	r3, [r7, #24]
  4003da:	2bff      	cmp	r3, #255	; 0xff
  4003dc:	d902      	bls.n	4003e4 <twi_set_speed+0xbc>
  4003de:	69fb      	ldr	r3, [r7, #28]
  4003e0:	2b06      	cmp	r3, #6
  4003e2:	d9f3      	bls.n	4003cc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4003e4:	69bb      	ldr	r3, [r7, #24]
  4003e6:	b2da      	uxtb	r2, r3
  4003e8:	69bb      	ldr	r3, [r7, #24]
  4003ea:	021b      	lsls	r3, r3, #8
  4003ec:	b29b      	uxth	r3, r3
  4003ee:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  4003f0:	69fb      	ldr	r3, [r7, #28]
  4003f2:	041b      	lsls	r3, r3, #16
  4003f4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4003f8:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4003fa:	68fb      	ldr	r3, [r7, #12]
  4003fc:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  4003fe:	2300      	movs	r3, #0
}
  400400:	4618      	mov	r0, r3
  400402:	3724      	adds	r7, #36	; 0x24
  400404:	46bd      	mov	sp, r7
  400406:	bc80      	pop	{r7}
  400408:	4770      	bx	lr
  40040a:	bf00      	nop
  40040c:	00061a80 	.word	0x00061a80
  400410:	0005dc00 	.word	0x0005dc00
  400414:	057619f1 	.word	0x057619f1
  400418:	3ffd1200 	.word	0x3ffd1200

0040041c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  40041c:	b480      	push	{r7}
  40041e:	b085      	sub	sp, #20
  400420:	af00      	add	r7, sp, #0
  400422:	6078      	str	r0, [r7, #4]
  400424:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  400426:	683b      	ldr	r3, [r7, #0]
  400428:	2b00      	cmp	r3, #0
  40042a:	d101      	bne.n	400430 <twi_mk_addr+0x14>
		return 0;
  40042c:	2300      	movs	r3, #0
  40042e:	e01d      	b.n	40046c <twi_mk_addr+0x50>

	val = addr[0];
  400430:	687b      	ldr	r3, [r7, #4]
  400432:	781b      	ldrb	r3, [r3, #0]
  400434:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  400436:	683b      	ldr	r3, [r7, #0]
  400438:	2b01      	cmp	r3, #1
  40043a:	dd09      	ble.n	400450 <twi_mk_addr+0x34>
		val <<= 8;
  40043c:	68fb      	ldr	r3, [r7, #12]
  40043e:	021b      	lsls	r3, r3, #8
  400440:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  400442:	687b      	ldr	r3, [r7, #4]
  400444:	3301      	adds	r3, #1
  400446:	781b      	ldrb	r3, [r3, #0]
  400448:	461a      	mov	r2, r3
  40044a:	68fb      	ldr	r3, [r7, #12]
  40044c:	4313      	orrs	r3, r2
  40044e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400450:	683b      	ldr	r3, [r7, #0]
  400452:	2b02      	cmp	r3, #2
  400454:	dd09      	ble.n	40046a <twi_mk_addr+0x4e>
		val <<= 8;
  400456:	68fb      	ldr	r3, [r7, #12]
  400458:	021b      	lsls	r3, r3, #8
  40045a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  40045c:	687b      	ldr	r3, [r7, #4]
  40045e:	3302      	adds	r3, #2
  400460:	781b      	ldrb	r3, [r3, #0]
  400462:	461a      	mov	r2, r3
  400464:	68fb      	ldr	r3, [r7, #12]
  400466:	4313      	orrs	r3, r2
  400468:	60fb      	str	r3, [r7, #12]
	}
	return val;
  40046a:	68fb      	ldr	r3, [r7, #12]
}
  40046c:	4618      	mov	r0, r3
  40046e:	3714      	adds	r7, #20
  400470:	46bd      	mov	sp, r7
  400472:	bc80      	pop	{r7}
  400474:	4770      	bx	lr
	...

00400478 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400478:	b580      	push	{r7, lr}
  40047a:	b088      	sub	sp, #32
  40047c:	af00      	add	r7, sp, #0
  40047e:	6078      	str	r0, [r7, #4]
  400480:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400482:	683b      	ldr	r3, [r7, #0]
  400484:	68db      	ldr	r3, [r3, #12]
  400486:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  400488:	683b      	ldr	r3, [r7, #0]
  40048a:	689b      	ldr	r3, [r3, #8]
  40048c:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  40048e:	2300      	movs	r3, #0
  400490:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  400492:	f247 5330 	movw	r3, #30000	; 0x7530
  400496:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  400498:	69fb      	ldr	r3, [r7, #28]
  40049a:	2b00      	cmp	r3, #0
  40049c:	d101      	bne.n	4004a2 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  40049e:	2301      	movs	r3, #1
  4004a0:	e069      	b.n	400576 <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4004a2:	687b      	ldr	r3, [r7, #4]
  4004a4:	2200      	movs	r2, #0
  4004a6:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4004a8:	683b      	ldr	r3, [r7, #0]
  4004aa:	7c1b      	ldrb	r3, [r3, #16]
  4004ac:	041b      	lsls	r3, r3, #16
  4004ae:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4004b2:	683b      	ldr	r3, [r7, #0]
  4004b4:	685b      	ldr	r3, [r3, #4]
  4004b6:	021b      	lsls	r3, r3, #8
  4004b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4004bc:	4313      	orrs	r3, r2
  4004be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  4004c2:	687b      	ldr	r3, [r7, #4]
  4004c4:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4004c6:	687b      	ldr	r3, [r7, #4]
  4004c8:	2200      	movs	r2, #0
  4004ca:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4004cc:	683a      	ldr	r2, [r7, #0]
  4004ce:	683b      	ldr	r3, [r7, #0]
  4004d0:	685b      	ldr	r3, [r3, #4]
  4004d2:	4619      	mov	r1, r3
  4004d4:	4610      	mov	r0, r2
  4004d6:	4b2a      	ldr	r3, [pc, #168]	; (400580 <twi_master_read+0x108>)
  4004d8:	4798      	blx	r3
  4004da:	4602      	mov	r2, r0
  4004dc:	687b      	ldr	r3, [r7, #4]
  4004de:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4004e0:	69fb      	ldr	r3, [r7, #28]
  4004e2:	2b01      	cmp	r3, #1
  4004e4:	d105      	bne.n	4004f2 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4004e6:	687b      	ldr	r3, [r7, #4]
  4004e8:	2203      	movs	r2, #3
  4004ea:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  4004ec:	2301      	movs	r3, #1
  4004ee:	75fb      	strb	r3, [r7, #23]
  4004f0:	e034      	b.n	40055c <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4004f2:	687b      	ldr	r3, [r7, #4]
  4004f4:	2201      	movs	r2, #1
  4004f6:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  4004f8:	2300      	movs	r3, #0
  4004fa:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  4004fc:	e02e      	b.n	40055c <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  4004fe:	687b      	ldr	r3, [r7, #4]
  400500:	6a1b      	ldr	r3, [r3, #32]
  400502:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400504:	68fb      	ldr	r3, [r7, #12]
  400506:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40050a:	2b00      	cmp	r3, #0
  40050c:	d001      	beq.n	400512 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  40050e:	2305      	movs	r3, #5
  400510:	e031      	b.n	400576 <twi_master_read+0xfe>
		}

		if (!timeout--) {
  400512:	693b      	ldr	r3, [r7, #16]
  400514:	1e5a      	subs	r2, r3, #1
  400516:	613a      	str	r2, [r7, #16]
  400518:	2b00      	cmp	r3, #0
  40051a:	d101      	bne.n	400520 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  40051c:	2309      	movs	r3, #9
  40051e:	e02a      	b.n	400576 <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400520:	69fb      	ldr	r3, [r7, #28]
  400522:	2b01      	cmp	r3, #1
  400524:	d107      	bne.n	400536 <twi_master_read+0xbe>
  400526:	7dfb      	ldrb	r3, [r7, #23]
  400528:	2b00      	cmp	r3, #0
  40052a:	d104      	bne.n	400536 <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  40052c:	687b      	ldr	r3, [r7, #4]
  40052e:	2202      	movs	r2, #2
  400530:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  400532:	2301      	movs	r3, #1
  400534:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	f003 0302 	and.w	r3, r3, #2
  40053c:	2b00      	cmp	r3, #0
  40053e:	d100      	bne.n	400542 <twi_master_read+0xca>
			continue;
  400540:	e00c      	b.n	40055c <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  400542:	69bb      	ldr	r3, [r7, #24]
  400544:	1c5a      	adds	r2, r3, #1
  400546:	61ba      	str	r2, [r7, #24]
  400548:	687a      	ldr	r2, [r7, #4]
  40054a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40054c:	b2d2      	uxtb	r2, r2
  40054e:	701a      	strb	r2, [r3, #0]

		cnt--;
  400550:	69fb      	ldr	r3, [r7, #28]
  400552:	3b01      	subs	r3, #1
  400554:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  400556:	f247 5330 	movw	r3, #30000	; 0x7530
  40055a:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  40055c:	69fb      	ldr	r3, [r7, #28]
  40055e:	2b00      	cmp	r3, #0
  400560:	d1cd      	bne.n	4004fe <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400562:	bf00      	nop
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	6a1b      	ldr	r3, [r3, #32]
  400568:	f003 0301 	and.w	r3, r3, #1
  40056c:	2b00      	cmp	r3, #0
  40056e:	d0f9      	beq.n	400564 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  400570:	687b      	ldr	r3, [r7, #4]
  400572:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  400574:	2300      	movs	r3, #0
}
  400576:	4618      	mov	r0, r3
  400578:	3720      	adds	r7, #32
  40057a:	46bd      	mov	sp, r7
  40057c:	bd80      	pop	{r7, pc}
  40057e:	bf00      	nop
  400580:	0040041d 	.word	0x0040041d

00400584 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400584:	b580      	push	{r7, lr}
  400586:	b086      	sub	sp, #24
  400588:	af00      	add	r7, sp, #0
  40058a:	6078      	str	r0, [r7, #4]
  40058c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40058e:	683b      	ldr	r3, [r7, #0]
  400590:	68db      	ldr	r3, [r3, #12]
  400592:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  400594:	683b      	ldr	r3, [r7, #0]
  400596:	689b      	ldr	r3, [r3, #8]
  400598:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  40059a:	697b      	ldr	r3, [r7, #20]
  40059c:	2b00      	cmp	r3, #0
  40059e:	d101      	bne.n	4005a4 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  4005a0:	2301      	movs	r3, #1
  4005a2:	e056      	b.n	400652 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4005a4:	687b      	ldr	r3, [r7, #4]
  4005a6:	2200      	movs	r2, #0
  4005a8:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4005aa:	683b      	ldr	r3, [r7, #0]
  4005ac:	7c1b      	ldrb	r3, [r3, #16]
  4005ae:	041b      	lsls	r3, r3, #16
  4005b0:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4005b4:	683b      	ldr	r3, [r7, #0]
  4005b6:	685b      	ldr	r3, [r3, #4]
  4005b8:	021b      	lsls	r3, r3, #8
  4005ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4005be:	431a      	orrs	r2, r3
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4005c4:	687b      	ldr	r3, [r7, #4]
  4005c6:	2200      	movs	r2, #0
  4005c8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4005ca:	683a      	ldr	r2, [r7, #0]
  4005cc:	683b      	ldr	r3, [r7, #0]
  4005ce:	685b      	ldr	r3, [r3, #4]
  4005d0:	4619      	mov	r1, r3
  4005d2:	4610      	mov	r0, r2
  4005d4:	4b21      	ldr	r3, [pc, #132]	; (40065c <twi_master_write+0xd8>)
  4005d6:	4798      	blx	r3
  4005d8:	4602      	mov	r2, r0
  4005da:	687b      	ldr	r3, [r7, #4]
  4005dc:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  4005de:	e019      	b.n	400614 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  4005e0:	687b      	ldr	r3, [r7, #4]
  4005e2:	6a1b      	ldr	r3, [r3, #32]
  4005e4:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4005ec:	2b00      	cmp	r3, #0
  4005ee:	d001      	beq.n	4005f4 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  4005f0:	2305      	movs	r3, #5
  4005f2:	e02e      	b.n	400652 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	f003 0304 	and.w	r3, r3, #4
  4005fa:	2b00      	cmp	r3, #0
  4005fc:	d100      	bne.n	400600 <twi_master_write+0x7c>
			continue;
  4005fe:	e009      	b.n	400614 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  400600:	693b      	ldr	r3, [r7, #16]
  400602:	1c5a      	adds	r2, r3, #1
  400604:	613a      	str	r2, [r7, #16]
  400606:	781b      	ldrb	r3, [r3, #0]
  400608:	461a      	mov	r2, r3
  40060a:	687b      	ldr	r3, [r7, #4]
  40060c:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  40060e:	697b      	ldr	r3, [r7, #20]
  400610:	3b01      	subs	r3, #1
  400612:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  400614:	697b      	ldr	r3, [r7, #20]
  400616:	2b00      	cmp	r3, #0
  400618:	d1e2      	bne.n	4005e0 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40061a:	687b      	ldr	r3, [r7, #4]
  40061c:	6a1b      	ldr	r3, [r3, #32]
  40061e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400620:	68fb      	ldr	r3, [r7, #12]
  400622:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400626:	2b00      	cmp	r3, #0
  400628:	d001      	beq.n	40062e <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  40062a:	2305      	movs	r3, #5
  40062c:	e011      	b.n	400652 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	f003 0304 	and.w	r3, r3, #4
  400634:	2b00      	cmp	r3, #0
  400636:	d100      	bne.n	40063a <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  400638:	e7ef      	b.n	40061a <twi_master_write+0x96>
			break;
  40063a:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	2202      	movs	r2, #2
  400640:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400642:	bf00      	nop
  400644:	687b      	ldr	r3, [r7, #4]
  400646:	6a1b      	ldr	r3, [r3, #32]
  400648:	f003 0301 	and.w	r3, r3, #1
  40064c:	2b00      	cmp	r3, #0
  40064e:	d0f9      	beq.n	400644 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  400650:	2300      	movs	r3, #0
}
  400652:	4618      	mov	r0, r3
  400654:	3718      	adds	r7, #24
  400656:	46bd      	mov	sp, r7
  400658:	bd80      	pop	{r7, pc}
  40065a:	bf00      	nop
  40065c:	0040041d 	.word	0x0040041d

00400660 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400660:	b480      	push	{r7}
  400662:	b083      	sub	sp, #12
  400664:	af00      	add	r7, sp, #0
  400666:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400668:	687b      	ldr	r3, [r7, #4]
  40066a:	2280      	movs	r2, #128	; 0x80
  40066c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40066e:	687b      	ldr	r3, [r7, #4]
  400670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400672:	bf00      	nop
  400674:	370c      	adds	r7, #12
  400676:	46bd      	mov	sp, r7
  400678:	bc80      	pop	{r7}
  40067a:	4770      	bx	lr

0040067c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40067c:	b480      	push	{r7}
  40067e:	b089      	sub	sp, #36	; 0x24
  400680:	af00      	add	r7, sp, #0
  400682:	60f8      	str	r0, [r7, #12]
  400684:	60b9      	str	r1, [r7, #8]
  400686:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400688:	68bb      	ldr	r3, [r7, #8]
  40068a:	011a      	lsls	r2, r3, #4
  40068c:	687b      	ldr	r3, [r7, #4]
  40068e:	429a      	cmp	r2, r3
  400690:	d802      	bhi.n	400698 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400692:	2310      	movs	r3, #16
  400694:	61fb      	str	r3, [r7, #28]
  400696:	e001      	b.n	40069c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400698:	2308      	movs	r3, #8
  40069a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40069c:	687b      	ldr	r3, [r7, #4]
  40069e:	00da      	lsls	r2, r3, #3
  4006a0:	69fb      	ldr	r3, [r7, #28]
  4006a2:	68b9      	ldr	r1, [r7, #8]
  4006a4:	fb01 f303 	mul.w	r3, r1, r3
  4006a8:	085b      	lsrs	r3, r3, #1
  4006aa:	441a      	add	r2, r3
  4006ac:	69fb      	ldr	r3, [r7, #28]
  4006ae:	68b9      	ldr	r1, [r7, #8]
  4006b0:	fb01 f303 	mul.w	r3, r1, r3
  4006b4:	fbb2 f3f3 	udiv	r3, r2, r3
  4006b8:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4006ba:	69bb      	ldr	r3, [r7, #24]
  4006bc:	08db      	lsrs	r3, r3, #3
  4006be:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4006c0:	69bb      	ldr	r3, [r7, #24]
  4006c2:	f003 0307 	and.w	r3, r3, #7
  4006c6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d003      	beq.n	4006d6 <usart_set_async_baudrate+0x5a>
  4006ce:	697b      	ldr	r3, [r7, #20]
  4006d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4006d4:	d301      	bcc.n	4006da <usart_set_async_baudrate+0x5e>
		return 1;
  4006d6:	2301      	movs	r3, #1
  4006d8:	e00f      	b.n	4006fa <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4006da:	69fb      	ldr	r3, [r7, #28]
  4006dc:	2b08      	cmp	r3, #8
  4006de:	d105      	bne.n	4006ec <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4006e0:	68fb      	ldr	r3, [r7, #12]
  4006e2:	685b      	ldr	r3, [r3, #4]
  4006e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4006e8:	68fb      	ldr	r3, [r7, #12]
  4006ea:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4006ec:	693b      	ldr	r3, [r7, #16]
  4006ee:	041a      	lsls	r2, r3, #16
  4006f0:	697b      	ldr	r3, [r7, #20]
  4006f2:	431a      	orrs	r2, r3
  4006f4:	68fb      	ldr	r3, [r7, #12]
  4006f6:	621a      	str	r2, [r3, #32]

	return 0;
  4006f8:	2300      	movs	r3, #0
}
  4006fa:	4618      	mov	r0, r3
  4006fc:	3724      	adds	r7, #36	; 0x24
  4006fe:	46bd      	mov	sp, r7
  400700:	bc80      	pop	{r7}
  400702:	4770      	bx	lr

00400704 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400704:	b580      	push	{r7, lr}
  400706:	b082      	sub	sp, #8
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40070c:	6878      	ldr	r0, [r7, #4]
  40070e:	4b0f      	ldr	r3, [pc, #60]	; (40074c <usart_reset+0x48>)
  400710:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400712:	687b      	ldr	r3, [r7, #4]
  400714:	2200      	movs	r2, #0
  400716:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400718:	687b      	ldr	r3, [r7, #4]
  40071a:	2200      	movs	r2, #0
  40071c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40071e:	687b      	ldr	r3, [r7, #4]
  400720:	2200      	movs	r2, #0
  400722:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400724:	6878      	ldr	r0, [r7, #4]
  400726:	4b0a      	ldr	r3, [pc, #40]	; (400750 <usart_reset+0x4c>)
  400728:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40072a:	6878      	ldr	r0, [r7, #4]
  40072c:	4b09      	ldr	r3, [pc, #36]	; (400754 <usart_reset+0x50>)
  40072e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400730:	6878      	ldr	r0, [r7, #4]
  400732:	4b09      	ldr	r3, [pc, #36]	; (400758 <usart_reset+0x54>)
  400734:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400736:	6878      	ldr	r0, [r7, #4]
  400738:	4b08      	ldr	r3, [pc, #32]	; (40075c <usart_reset+0x58>)
  40073a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  40073c:	6878      	ldr	r0, [r7, #4]
  40073e:	4b08      	ldr	r3, [pc, #32]	; (400760 <usart_reset+0x5c>)
  400740:	4798      	blx	r3
#endif
}
  400742:	bf00      	nop
  400744:	3708      	adds	r7, #8
  400746:	46bd      	mov	sp, r7
  400748:	bd80      	pop	{r7, pc}
  40074a:	bf00      	nop
  40074c:	004009b5 	.word	0x004009b5
  400750:	00400841 	.word	0x00400841
  400754:	00400871 	.word	0x00400871
  400758:	004008d3 	.word	0x004008d3
  40075c:	00400907 	.word	0x00400907
  400760:	004008ed 	.word	0x004008ed

00400764 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400764:	b580      	push	{r7, lr}
  400766:	b084      	sub	sp, #16
  400768:	af00      	add	r7, sp, #0
  40076a:	60f8      	str	r0, [r7, #12]
  40076c:	60b9      	str	r1, [r7, #8]
  40076e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400770:	68f8      	ldr	r0, [r7, #12]
  400772:	4b1a      	ldr	r3, [pc, #104]	; (4007dc <usart_init_rs232+0x78>)
  400774:	4798      	blx	r3

	ul_reg_val = 0;
  400776:	4b1a      	ldr	r3, [pc, #104]	; (4007e0 <usart_init_rs232+0x7c>)
  400778:	2200      	movs	r2, #0
  40077a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40077c:	68bb      	ldr	r3, [r7, #8]
  40077e:	2b00      	cmp	r3, #0
  400780:	d009      	beq.n	400796 <usart_init_rs232+0x32>
  400782:	68bb      	ldr	r3, [r7, #8]
  400784:	681b      	ldr	r3, [r3, #0]
  400786:	687a      	ldr	r2, [r7, #4]
  400788:	4619      	mov	r1, r3
  40078a:	68f8      	ldr	r0, [r7, #12]
  40078c:	4b15      	ldr	r3, [pc, #84]	; (4007e4 <usart_init_rs232+0x80>)
  40078e:	4798      	blx	r3
  400790:	4603      	mov	r3, r0
  400792:	2b00      	cmp	r3, #0
  400794:	d001      	beq.n	40079a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400796:	2301      	movs	r3, #1
  400798:	e01b      	b.n	4007d2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40079a:	68bb      	ldr	r3, [r7, #8]
  40079c:	685a      	ldr	r2, [r3, #4]
  40079e:	68bb      	ldr	r3, [r7, #8]
  4007a0:	689b      	ldr	r3, [r3, #8]
  4007a2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007a4:	68bb      	ldr	r3, [r7, #8]
  4007a6:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007a8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007aa:	68bb      	ldr	r3, [r7, #8]
  4007ac:	68db      	ldr	r3, [r3, #12]
  4007ae:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007b0:	4b0b      	ldr	r3, [pc, #44]	; (4007e0 <usart_init_rs232+0x7c>)
  4007b2:	681b      	ldr	r3, [r3, #0]
  4007b4:	4313      	orrs	r3, r2
  4007b6:	4a0a      	ldr	r2, [pc, #40]	; (4007e0 <usart_init_rs232+0x7c>)
  4007b8:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4007ba:	4b09      	ldr	r3, [pc, #36]	; (4007e0 <usart_init_rs232+0x7c>)
  4007bc:	681b      	ldr	r3, [r3, #0]
  4007be:	4a08      	ldr	r2, [pc, #32]	; (4007e0 <usart_init_rs232+0x7c>)
  4007c0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4007c2:	68fb      	ldr	r3, [r7, #12]
  4007c4:	685a      	ldr	r2, [r3, #4]
  4007c6:	4b06      	ldr	r3, [pc, #24]	; (4007e0 <usart_init_rs232+0x7c>)
  4007c8:	681b      	ldr	r3, [r3, #0]
  4007ca:	431a      	orrs	r2, r3
  4007cc:	68fb      	ldr	r3, [r7, #12]
  4007ce:	605a      	str	r2, [r3, #4]

	return 0;
  4007d0:	2300      	movs	r3, #0
}
  4007d2:	4618      	mov	r0, r3
  4007d4:	3710      	adds	r7, #16
  4007d6:	46bd      	mov	sp, r7
  4007d8:	bd80      	pop	{r7, pc}
  4007da:	bf00      	nop
  4007dc:	00400705 	.word	0x00400705
  4007e0:	200009dc 	.word	0x200009dc
  4007e4:	0040067d 	.word	0x0040067d

004007e8 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4007e8:	b580      	push	{r7, lr}
  4007ea:	b084      	sub	sp, #16
  4007ec:	af00      	add	r7, sp, #0
  4007ee:	60f8      	str	r0, [r7, #12]
  4007f0:	60b9      	str	r1, [r7, #8]
  4007f2:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4007f4:	687a      	ldr	r2, [r7, #4]
  4007f6:	68b9      	ldr	r1, [r7, #8]
  4007f8:	68f8      	ldr	r0, [r7, #12]
  4007fa:	4b0a      	ldr	r3, [pc, #40]	; (400824 <usart_init_hw_handshaking+0x3c>)
  4007fc:	4798      	blx	r3
  4007fe:	4603      	mov	r3, r0
  400800:	2b00      	cmp	r3, #0
  400802:	d001      	beq.n	400808 <usart_init_hw_handshaking+0x20>
		return 1;
  400804:	2301      	movs	r3, #1
  400806:	e008      	b.n	40081a <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400808:	68fb      	ldr	r3, [r7, #12]
  40080a:	685b      	ldr	r3, [r3, #4]
  40080c:	f023 030f 	bic.w	r3, r3, #15
  400810:	f043 0202 	orr.w	r2, r3, #2
  400814:	68fb      	ldr	r3, [r7, #12]
  400816:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400818:	2300      	movs	r3, #0
}
  40081a:	4618      	mov	r0, r3
  40081c:	3710      	adds	r7, #16
  40081e:	46bd      	mov	sp, r7
  400820:	bd80      	pop	{r7, pc}
  400822:	bf00      	nop
  400824:	00400765 	.word	0x00400765

00400828 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400828:	b480      	push	{r7}
  40082a:	b083      	sub	sp, #12
  40082c:	af00      	add	r7, sp, #0
  40082e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400830:	687b      	ldr	r3, [r7, #4]
  400832:	2240      	movs	r2, #64	; 0x40
  400834:	601a      	str	r2, [r3, #0]
}
  400836:	bf00      	nop
  400838:	370c      	adds	r7, #12
  40083a:	46bd      	mov	sp, r7
  40083c:	bc80      	pop	{r7}
  40083e:	4770      	bx	lr

00400840 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400840:	b480      	push	{r7}
  400842:	b083      	sub	sp, #12
  400844:	af00      	add	r7, sp, #0
  400846:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	2288      	movs	r2, #136	; 0x88
  40084c:	601a      	str	r2, [r3, #0]
}
  40084e:	bf00      	nop
  400850:	370c      	adds	r7, #12
  400852:	46bd      	mov	sp, r7
  400854:	bc80      	pop	{r7}
  400856:	4770      	bx	lr

00400858 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400858:	b480      	push	{r7}
  40085a:	b083      	sub	sp, #12
  40085c:	af00      	add	r7, sp, #0
  40085e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400860:	687b      	ldr	r3, [r7, #4]
  400862:	2210      	movs	r2, #16
  400864:	601a      	str	r2, [r3, #0]
}
  400866:	bf00      	nop
  400868:	370c      	adds	r7, #12
  40086a:	46bd      	mov	sp, r7
  40086c:	bc80      	pop	{r7}
  40086e:	4770      	bx	lr

00400870 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400870:	b480      	push	{r7}
  400872:	b083      	sub	sp, #12
  400874:	af00      	add	r7, sp, #0
  400876:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400878:	687b      	ldr	r3, [r7, #4]
  40087a:	2224      	movs	r2, #36	; 0x24
  40087c:	601a      	str	r2, [r3, #0]
}
  40087e:	bf00      	nop
  400880:	370c      	adds	r7, #12
  400882:	46bd      	mov	sp, r7
  400884:	bc80      	pop	{r7}
  400886:	4770      	bx	lr

00400888 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400888:	b480      	push	{r7}
  40088a:	b083      	sub	sp, #12
  40088c:	af00      	add	r7, sp, #0
  40088e:	6078      	str	r0, [r7, #4]
  400890:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400892:	687b      	ldr	r3, [r7, #4]
  400894:	683a      	ldr	r2, [r7, #0]
  400896:	609a      	str	r2, [r3, #8]
}
  400898:	bf00      	nop
  40089a:	370c      	adds	r7, #12
  40089c:	46bd      	mov	sp, r7
  40089e:	bc80      	pop	{r7}
  4008a0:	4770      	bx	lr

004008a2 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4008a2:	b480      	push	{r7}
  4008a4:	b083      	sub	sp, #12
  4008a6:	af00      	add	r7, sp, #0
  4008a8:	6078      	str	r0, [r7, #4]
  4008aa:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4008ac:	687b      	ldr	r3, [r7, #4]
  4008ae:	683a      	ldr	r2, [r7, #0]
  4008b0:	60da      	str	r2, [r3, #12]
}
  4008b2:	bf00      	nop
  4008b4:	370c      	adds	r7, #12
  4008b6:	46bd      	mov	sp, r7
  4008b8:	bc80      	pop	{r7}
  4008ba:	4770      	bx	lr

004008bc <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4008bc:	b480      	push	{r7}
  4008be:	b083      	sub	sp, #12
  4008c0:	af00      	add	r7, sp, #0
  4008c2:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4008c4:	687b      	ldr	r3, [r7, #4]
  4008c6:	695b      	ldr	r3, [r3, #20]
}
  4008c8:	4618      	mov	r0, r3
  4008ca:	370c      	adds	r7, #12
  4008cc:	46bd      	mov	sp, r7
  4008ce:	bc80      	pop	{r7}
  4008d0:	4770      	bx	lr

004008d2 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4008d2:	b480      	push	{r7}
  4008d4:	b083      	sub	sp, #12
  4008d6:	af00      	add	r7, sp, #0
  4008d8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008e0:	601a      	str	r2, [r3, #0]
}
  4008e2:	bf00      	nop
  4008e4:	370c      	adds	r7, #12
  4008e6:	46bd      	mov	sp, r7
  4008e8:	bc80      	pop	{r7}
  4008ea:	4770      	bx	lr

004008ec <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4008ec:	b480      	push	{r7}
  4008ee:	b083      	sub	sp, #12
  4008f0:	af00      	add	r7, sp, #0
  4008f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4008f4:	687b      	ldr	r3, [r7, #4]
  4008f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4008fa:	601a      	str	r2, [r3, #0]
}
  4008fc:	bf00      	nop
  4008fe:	370c      	adds	r7, #12
  400900:	46bd      	mov	sp, r7
  400902:	bc80      	pop	{r7}
  400904:	4770      	bx	lr

00400906 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400906:	b480      	push	{r7}
  400908:	b083      	sub	sp, #12
  40090a:	af00      	add	r7, sp, #0
  40090c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40090e:	687b      	ldr	r3, [r7, #4]
  400910:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400914:	601a      	str	r2, [r3, #0]
}
  400916:	bf00      	nop
  400918:	370c      	adds	r7, #12
  40091a:	46bd      	mov	sp, r7
  40091c:	bc80      	pop	{r7}
  40091e:	4770      	bx	lr

00400920 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400920:	b480      	push	{r7}
  400922:	b083      	sub	sp, #12
  400924:	af00      	add	r7, sp, #0
  400926:	6078      	str	r0, [r7, #4]
  400928:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40092a:	bf00      	nop
  40092c:	687b      	ldr	r3, [r7, #4]
  40092e:	695b      	ldr	r3, [r3, #20]
  400930:	f003 0302 	and.w	r3, r3, #2
  400934:	2b00      	cmp	r3, #0
  400936:	d0f9      	beq.n	40092c <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400938:	683b      	ldr	r3, [r7, #0]
  40093a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40093e:	687b      	ldr	r3, [r7, #4]
  400940:	61da      	str	r2, [r3, #28]

	return 0;
  400942:	2300      	movs	r3, #0
}
  400944:	4618      	mov	r0, r3
  400946:	370c      	adds	r7, #12
  400948:	46bd      	mov	sp, r7
  40094a:	bc80      	pop	{r7}
  40094c:	4770      	bx	lr
	...

00400950 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400950:	b580      	push	{r7, lr}
  400952:	b082      	sub	sp, #8
  400954:	af00      	add	r7, sp, #0
  400956:	6078      	str	r0, [r7, #4]
  400958:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  40095a:	e007      	b.n	40096c <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  40095c:	683b      	ldr	r3, [r7, #0]
  40095e:	1c5a      	adds	r2, r3, #1
  400960:	603a      	str	r2, [r7, #0]
  400962:	781b      	ldrb	r3, [r3, #0]
  400964:	4619      	mov	r1, r3
  400966:	6878      	ldr	r0, [r7, #4]
  400968:	4b04      	ldr	r3, [pc, #16]	; (40097c <usart_write_line+0x2c>)
  40096a:	4798      	blx	r3
	while (*string != '\0') {
  40096c:	683b      	ldr	r3, [r7, #0]
  40096e:	781b      	ldrb	r3, [r3, #0]
  400970:	2b00      	cmp	r3, #0
  400972:	d1f3      	bne.n	40095c <usart_write_line+0xc>
	}
}
  400974:	bf00      	nop
  400976:	3708      	adds	r7, #8
  400978:	46bd      	mov	sp, r7
  40097a:	bd80      	pop	{r7, pc}
  40097c:	00400921 	.word	0x00400921

00400980 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400980:	b480      	push	{r7}
  400982:	b083      	sub	sp, #12
  400984:	af00      	add	r7, sp, #0
  400986:	6078      	str	r0, [r7, #4]
  400988:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40098a:	687b      	ldr	r3, [r7, #4]
  40098c:	695b      	ldr	r3, [r3, #20]
  40098e:	f003 0301 	and.w	r3, r3, #1
  400992:	2b00      	cmp	r3, #0
  400994:	d101      	bne.n	40099a <usart_read+0x1a>
		return 1;
  400996:	2301      	movs	r3, #1
  400998:	e006      	b.n	4009a8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40099a:	687b      	ldr	r3, [r7, #4]
  40099c:	699b      	ldr	r3, [r3, #24]
  40099e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4009a2:	683b      	ldr	r3, [r7, #0]
  4009a4:	601a      	str	r2, [r3, #0]

	return 0;
  4009a6:	2300      	movs	r3, #0
}
  4009a8:	4618      	mov	r0, r3
  4009aa:	370c      	adds	r7, #12
  4009ac:	46bd      	mov	sp, r7
  4009ae:	bc80      	pop	{r7}
  4009b0:	4770      	bx	lr
	...

004009b4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4009b4:	b480      	push	{r7}
  4009b6:	b083      	sub	sp, #12
  4009b8:	af00      	add	r7, sp, #0
  4009ba:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009bc:	687b      	ldr	r3, [r7, #4]
  4009be:	4a04      	ldr	r2, [pc, #16]	; (4009d0 <usart_disable_writeprotect+0x1c>)
  4009c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4009c4:	bf00      	nop
  4009c6:	370c      	adds	r7, #12
  4009c8:	46bd      	mov	sp, r7
  4009ca:	bc80      	pop	{r7}
  4009cc:	4770      	bx	lr
  4009ce:	bf00      	nop
  4009d0:	55534100 	.word	0x55534100

004009d4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009d4:	b580      	push	{r7, lr}
  4009d6:	b084      	sub	sp, #16
  4009d8:	af00      	add	r7, sp, #0
  4009da:	6078      	str	r0, [r7, #4]
  4009dc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009de:	6878      	ldr	r0, [r7, #4]
  4009e0:	4b2c      	ldr	r3, [pc, #176]	; (400a94 <pio_handler_process+0xc0>)
  4009e2:	4798      	blx	r3
  4009e4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4009e6:	6878      	ldr	r0, [r7, #4]
  4009e8:	4b2b      	ldr	r3, [pc, #172]	; (400a98 <pio_handler_process+0xc4>)
  4009ea:	4798      	blx	r3
  4009ec:	4602      	mov	r2, r0
  4009ee:	68fb      	ldr	r3, [r7, #12]
  4009f0:	4013      	ands	r3, r2
  4009f2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4009f4:	68fb      	ldr	r3, [r7, #12]
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d03c      	beq.n	400a74 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4009fa:	2300      	movs	r3, #0
  4009fc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4009fe:	e034      	b.n	400a6a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a00:	4a26      	ldr	r2, [pc, #152]	; (400a9c <pio_handler_process+0xc8>)
  400a02:	68bb      	ldr	r3, [r7, #8]
  400a04:	011b      	lsls	r3, r3, #4
  400a06:	4413      	add	r3, r2
  400a08:	681a      	ldr	r2, [r3, #0]
  400a0a:	683b      	ldr	r3, [r7, #0]
  400a0c:	429a      	cmp	r2, r3
  400a0e:	d126      	bne.n	400a5e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a10:	4a22      	ldr	r2, [pc, #136]	; (400a9c <pio_handler_process+0xc8>)
  400a12:	68bb      	ldr	r3, [r7, #8]
  400a14:	011b      	lsls	r3, r3, #4
  400a16:	4413      	add	r3, r2
  400a18:	3304      	adds	r3, #4
  400a1a:	681a      	ldr	r2, [r3, #0]
  400a1c:	68fb      	ldr	r3, [r7, #12]
  400a1e:	4013      	ands	r3, r2
  400a20:	2b00      	cmp	r3, #0
  400a22:	d01c      	beq.n	400a5e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a24:	4a1d      	ldr	r2, [pc, #116]	; (400a9c <pio_handler_process+0xc8>)
  400a26:	68bb      	ldr	r3, [r7, #8]
  400a28:	011b      	lsls	r3, r3, #4
  400a2a:	4413      	add	r3, r2
  400a2c:	330c      	adds	r3, #12
  400a2e:	681b      	ldr	r3, [r3, #0]
  400a30:	491a      	ldr	r1, [pc, #104]	; (400a9c <pio_handler_process+0xc8>)
  400a32:	68ba      	ldr	r2, [r7, #8]
  400a34:	0112      	lsls	r2, r2, #4
  400a36:	440a      	add	r2, r1
  400a38:	6810      	ldr	r0, [r2, #0]
  400a3a:	4918      	ldr	r1, [pc, #96]	; (400a9c <pio_handler_process+0xc8>)
  400a3c:	68ba      	ldr	r2, [r7, #8]
  400a3e:	0112      	lsls	r2, r2, #4
  400a40:	440a      	add	r2, r1
  400a42:	3204      	adds	r2, #4
  400a44:	6812      	ldr	r2, [r2, #0]
  400a46:	4611      	mov	r1, r2
  400a48:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a4a:	4a14      	ldr	r2, [pc, #80]	; (400a9c <pio_handler_process+0xc8>)
  400a4c:	68bb      	ldr	r3, [r7, #8]
  400a4e:	011b      	lsls	r3, r3, #4
  400a50:	4413      	add	r3, r2
  400a52:	3304      	adds	r3, #4
  400a54:	681b      	ldr	r3, [r3, #0]
  400a56:	43db      	mvns	r3, r3
  400a58:	68fa      	ldr	r2, [r7, #12]
  400a5a:	4013      	ands	r3, r2
  400a5c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a5e:	68bb      	ldr	r3, [r7, #8]
  400a60:	3301      	adds	r3, #1
  400a62:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a64:	68bb      	ldr	r3, [r7, #8]
  400a66:	2b06      	cmp	r3, #6
  400a68:	d803      	bhi.n	400a72 <pio_handler_process+0x9e>
		while (status != 0) {
  400a6a:	68fb      	ldr	r3, [r7, #12]
  400a6c:	2b00      	cmp	r3, #0
  400a6e:	d1c7      	bne.n	400a00 <pio_handler_process+0x2c>
  400a70:	e000      	b.n	400a74 <pio_handler_process+0xa0>
				break;
  400a72:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400a74:	4b0a      	ldr	r3, [pc, #40]	; (400aa0 <pio_handler_process+0xcc>)
  400a76:	681b      	ldr	r3, [r3, #0]
  400a78:	2b00      	cmp	r3, #0
  400a7a:	d007      	beq.n	400a8c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400a7c:	4b09      	ldr	r3, [pc, #36]	; (400aa4 <pio_handler_process+0xd0>)
  400a7e:	681b      	ldr	r3, [r3, #0]
  400a80:	2b00      	cmp	r3, #0
  400a82:	d003      	beq.n	400a8c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400a84:	4b07      	ldr	r3, [pc, #28]	; (400aa4 <pio_handler_process+0xd0>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	6878      	ldr	r0, [r7, #4]
  400a8a:	4798      	blx	r3
		}
	}
#endif
}
  400a8c:	bf00      	nop
  400a8e:	3710      	adds	r7, #16
  400a90:	46bd      	mov	sp, r7
  400a92:	bd80      	pop	{r7, pc}
  400a94:	004011df 	.word	0x004011df
  400a98:	004011f5 	.word	0x004011f5
  400a9c:	200009e0 	.word	0x200009e0
  400aa0:	20000ab4 	.word	0x20000ab4
  400aa4:	20000a54 	.word	0x20000a54

00400aa8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400aa8:	b580      	push	{r7, lr}
  400aaa:	b086      	sub	sp, #24
  400aac:	af00      	add	r7, sp, #0
  400aae:	60f8      	str	r0, [r7, #12]
  400ab0:	60b9      	str	r1, [r7, #8]
  400ab2:	607a      	str	r2, [r7, #4]
  400ab4:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400ab6:	4b21      	ldr	r3, [pc, #132]	; (400b3c <pio_handler_set+0x94>)
  400ab8:	681b      	ldr	r3, [r3, #0]
  400aba:	2b06      	cmp	r3, #6
  400abc:	d901      	bls.n	400ac2 <pio_handler_set+0x1a>
		return 1;
  400abe:	2301      	movs	r3, #1
  400ac0:	e038      	b.n	400b34 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400ac2:	2300      	movs	r3, #0
  400ac4:	75fb      	strb	r3, [r7, #23]
  400ac6:	e011      	b.n	400aec <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400ac8:	7dfb      	ldrb	r3, [r7, #23]
  400aca:	011b      	lsls	r3, r3, #4
  400acc:	4a1c      	ldr	r2, [pc, #112]	; (400b40 <pio_handler_set+0x98>)
  400ace:	4413      	add	r3, r2
  400ad0:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400ad2:	693b      	ldr	r3, [r7, #16]
  400ad4:	681a      	ldr	r2, [r3, #0]
  400ad6:	68bb      	ldr	r3, [r7, #8]
  400ad8:	429a      	cmp	r2, r3
  400ada:	d104      	bne.n	400ae6 <pio_handler_set+0x3e>
  400adc:	693b      	ldr	r3, [r7, #16]
  400ade:	685a      	ldr	r2, [r3, #4]
  400ae0:	687b      	ldr	r3, [r7, #4]
  400ae2:	429a      	cmp	r2, r3
  400ae4:	d008      	beq.n	400af8 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400ae6:	7dfb      	ldrb	r3, [r7, #23]
  400ae8:	3301      	adds	r3, #1
  400aea:	75fb      	strb	r3, [r7, #23]
  400aec:	7dfa      	ldrb	r2, [r7, #23]
  400aee:	4b13      	ldr	r3, [pc, #76]	; (400b3c <pio_handler_set+0x94>)
  400af0:	681b      	ldr	r3, [r3, #0]
  400af2:	429a      	cmp	r2, r3
  400af4:	d9e8      	bls.n	400ac8 <pio_handler_set+0x20>
  400af6:	e000      	b.n	400afa <pio_handler_set+0x52>
			break;
  400af8:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400afa:	693b      	ldr	r3, [r7, #16]
  400afc:	68ba      	ldr	r2, [r7, #8]
  400afe:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400b00:	693b      	ldr	r3, [r7, #16]
  400b02:	687a      	ldr	r2, [r7, #4]
  400b04:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400b06:	693b      	ldr	r3, [r7, #16]
  400b08:	683a      	ldr	r2, [r7, #0]
  400b0a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400b0c:	693b      	ldr	r3, [r7, #16]
  400b0e:	6a3a      	ldr	r2, [r7, #32]
  400b10:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400b12:	7dfa      	ldrb	r2, [r7, #23]
  400b14:	4b09      	ldr	r3, [pc, #36]	; (400b3c <pio_handler_set+0x94>)
  400b16:	681b      	ldr	r3, [r3, #0]
  400b18:	3301      	adds	r3, #1
  400b1a:	429a      	cmp	r2, r3
  400b1c:	d104      	bne.n	400b28 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400b1e:	4b07      	ldr	r3, [pc, #28]	; (400b3c <pio_handler_set+0x94>)
  400b20:	681b      	ldr	r3, [r3, #0]
  400b22:	3301      	adds	r3, #1
  400b24:	4a05      	ldr	r2, [pc, #20]	; (400b3c <pio_handler_set+0x94>)
  400b26:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400b28:	683a      	ldr	r2, [r7, #0]
  400b2a:	6879      	ldr	r1, [r7, #4]
  400b2c:	68f8      	ldr	r0, [r7, #12]
  400b2e:	4b05      	ldr	r3, [pc, #20]	; (400b44 <pio_handler_set+0x9c>)
  400b30:	4798      	blx	r3

	return 0;
  400b32:	2300      	movs	r3, #0
}
  400b34:	4618      	mov	r0, r3
  400b36:	3718      	adds	r7, #24
  400b38:	46bd      	mov	sp, r7
  400b3a:	bd80      	pop	{r7, pc}
  400b3c:	20000a50 	.word	0x20000a50
  400b40:	200009e0 	.word	0x200009e0
  400b44:	00401141 	.word	0x00401141

00400b48 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b48:	b580      	push	{r7, lr}
  400b4a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400b4c:	210b      	movs	r1, #11
  400b4e:	4802      	ldr	r0, [pc, #8]	; (400b58 <PIOA_Handler+0x10>)
  400b50:	4b02      	ldr	r3, [pc, #8]	; (400b5c <PIOA_Handler+0x14>)
  400b52:	4798      	blx	r3
}
  400b54:	bf00      	nop
  400b56:	bd80      	pop	{r7, pc}
  400b58:	400e0e00 	.word	0x400e0e00
  400b5c:	004009d5 	.word	0x004009d5

00400b60 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b60:	b580      	push	{r7, lr}
  400b62:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400b64:	210c      	movs	r1, #12
  400b66:	4802      	ldr	r0, [pc, #8]	; (400b70 <PIOB_Handler+0x10>)
  400b68:	4b02      	ldr	r3, [pc, #8]	; (400b74 <PIOB_Handler+0x14>)
  400b6a:	4798      	blx	r3
}
  400b6c:	bf00      	nop
  400b6e:	bd80      	pop	{r7, pc}
  400b70:	400e1000 	.word	0x400e1000
  400b74:	004009d5 	.word	0x004009d5

00400b78 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400b78:	b480      	push	{r7}
  400b7a:	b083      	sub	sp, #12
  400b7c:	af00      	add	r7, sp, #0
  400b7e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b86:	605a      	str	r2, [r3, #4]

}
  400b88:	bf00      	nop
  400b8a:	370c      	adds	r7, #12
  400b8c:	46bd      	mov	sp, r7
  400b8e:	bc80      	pop	{r7}
  400b90:	4770      	bx	lr
	...

00400b94 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400b94:	b580      	push	{r7, lr}
  400b96:	b082      	sub	sp, #8
  400b98:	af00      	add	r7, sp, #0
  400b9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b9c:	687b      	ldr	r3, [r7, #4]
  400b9e:	2b07      	cmp	r3, #7
  400ba0:	d831      	bhi.n	400c06 <osc_enable+0x72>
  400ba2:	a201      	add	r2, pc, #4	; (adr r2, 400ba8 <osc_enable+0x14>)
  400ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ba8:	00400c05 	.word	0x00400c05
  400bac:	00400bc9 	.word	0x00400bc9
  400bb0:	00400bd1 	.word	0x00400bd1
  400bb4:	00400bd9 	.word	0x00400bd9
  400bb8:	00400be1 	.word	0x00400be1
  400bbc:	00400be9 	.word	0x00400be9
  400bc0:	00400bf1 	.word	0x00400bf1
  400bc4:	00400bfb 	.word	0x00400bfb
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400bc8:	2000      	movs	r0, #0
  400bca:	4b11      	ldr	r3, [pc, #68]	; (400c10 <osc_enable+0x7c>)
  400bcc:	4798      	blx	r3
		break;
  400bce:	e01a      	b.n	400c06 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400bd0:	2001      	movs	r0, #1
  400bd2:	4b0f      	ldr	r3, [pc, #60]	; (400c10 <osc_enable+0x7c>)
  400bd4:	4798      	blx	r3
		break;
  400bd6:	e016      	b.n	400c06 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400bd8:	2000      	movs	r0, #0
  400bda:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <osc_enable+0x80>)
  400bdc:	4798      	blx	r3
		break;
  400bde:	e012      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400be0:	2010      	movs	r0, #16
  400be2:	4b0c      	ldr	r3, [pc, #48]	; (400c14 <osc_enable+0x80>)
  400be4:	4798      	blx	r3
		break;
  400be6:	e00e      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400be8:	2020      	movs	r0, #32
  400bea:	4b0a      	ldr	r3, [pc, #40]	; (400c14 <osc_enable+0x80>)
  400bec:	4798      	blx	r3
		break;
  400bee:	e00a      	b.n	400c06 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bf0:	213e      	movs	r1, #62	; 0x3e
  400bf2:	2000      	movs	r0, #0
  400bf4:	4b08      	ldr	r3, [pc, #32]	; (400c18 <osc_enable+0x84>)
  400bf6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400bf8:	e005      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400bfa:	213e      	movs	r1, #62	; 0x3e
  400bfc:	2001      	movs	r0, #1
  400bfe:	4b06      	ldr	r3, [pc, #24]	; (400c18 <osc_enable+0x84>)
  400c00:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400c02:	e000      	b.n	400c06 <osc_enable+0x72>
		break;
  400c04:	bf00      	nop
	}
}
  400c06:	bf00      	nop
  400c08:	3708      	adds	r7, #8
  400c0a:	46bd      	mov	sp, r7
  400c0c:	bd80      	pop	{r7, pc}
  400c0e:	bf00      	nop
  400c10:	004014b9 	.word	0x004014b9
  400c14:	00401525 	.word	0x00401525
  400c18:	00401595 	.word	0x00401595

00400c1c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400c1c:	b580      	push	{r7, lr}
  400c1e:	b082      	sub	sp, #8
  400c20:	af00      	add	r7, sp, #0
  400c22:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c24:	687b      	ldr	r3, [r7, #4]
  400c26:	2b07      	cmp	r3, #7
  400c28:	d826      	bhi.n	400c78 <osc_is_ready+0x5c>
  400c2a:	a201      	add	r2, pc, #4	; (adr r2, 400c30 <osc_is_ready+0x14>)
  400c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c30:	00400c51 	.word	0x00400c51
  400c34:	00400c55 	.word	0x00400c55
  400c38:	00400c55 	.word	0x00400c55
  400c3c:	00400c67 	.word	0x00400c67
  400c40:	00400c67 	.word	0x00400c67
  400c44:	00400c67 	.word	0x00400c67
  400c48:	00400c67 	.word	0x00400c67
  400c4c:	00400c67 	.word	0x00400c67
	case OSC_SLCK_32K_RC:
		return 1;
  400c50:	2301      	movs	r3, #1
  400c52:	e012      	b.n	400c7a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400c54:	4b0b      	ldr	r3, [pc, #44]	; (400c84 <osc_is_ready+0x68>)
  400c56:	4798      	blx	r3
  400c58:	4603      	mov	r3, r0
  400c5a:	2b00      	cmp	r3, #0
  400c5c:	bf14      	ite	ne
  400c5e:	2301      	movne	r3, #1
  400c60:	2300      	moveq	r3, #0
  400c62:	b2db      	uxtb	r3, r3
  400c64:	e009      	b.n	400c7a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c66:	4b08      	ldr	r3, [pc, #32]	; (400c88 <osc_is_ready+0x6c>)
  400c68:	4798      	blx	r3
  400c6a:	4603      	mov	r3, r0
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	bf14      	ite	ne
  400c70:	2301      	movne	r3, #1
  400c72:	2300      	moveq	r3, #0
  400c74:	b2db      	uxtb	r3, r3
  400c76:	e000      	b.n	400c7a <osc_is_ready+0x5e>
	}

	return 0;
  400c78:	2300      	movs	r3, #0
}
  400c7a:	4618      	mov	r0, r3
  400c7c:	3708      	adds	r7, #8
  400c7e:	46bd      	mov	sp, r7
  400c80:	bd80      	pop	{r7, pc}
  400c82:	bf00      	nop
  400c84:	004014f1 	.word	0x004014f1
  400c88:	0040160d 	.word	0x0040160d

00400c8c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c8c:	b480      	push	{r7}
  400c8e:	b083      	sub	sp, #12
  400c90:	af00      	add	r7, sp, #0
  400c92:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c94:	687b      	ldr	r3, [r7, #4]
  400c96:	2b07      	cmp	r3, #7
  400c98:	d825      	bhi.n	400ce6 <osc_get_rate+0x5a>
  400c9a:	a201      	add	r2, pc, #4	; (adr r2, 400ca0 <osc_get_rate+0x14>)
  400c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ca0:	00400cc1 	.word	0x00400cc1
  400ca4:	00400cc7 	.word	0x00400cc7
  400ca8:	00400ccd 	.word	0x00400ccd
  400cac:	00400cd3 	.word	0x00400cd3
  400cb0:	00400cd7 	.word	0x00400cd7
  400cb4:	00400cdb 	.word	0x00400cdb
  400cb8:	00400cdf 	.word	0x00400cdf
  400cbc:	00400ce3 	.word	0x00400ce3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400cc0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400cc4:	e010      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cca:	e00d      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cd0:	e00a      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400cd2:	4b08      	ldr	r3, [pc, #32]	; (400cf4 <osc_get_rate+0x68>)
  400cd4:	e008      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400cd6:	4b08      	ldr	r3, [pc, #32]	; (400cf8 <osc_get_rate+0x6c>)
  400cd8:	e006      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400cda:	4b08      	ldr	r3, [pc, #32]	; (400cfc <osc_get_rate+0x70>)
  400cdc:	e004      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400cde:	4b07      	ldr	r3, [pc, #28]	; (400cfc <osc_get_rate+0x70>)
  400ce0:	e002      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400ce2:	4b06      	ldr	r3, [pc, #24]	; (400cfc <osc_get_rate+0x70>)
  400ce4:	e000      	b.n	400ce8 <osc_get_rate+0x5c>
	}

	return 0;
  400ce6:	2300      	movs	r3, #0
}
  400ce8:	4618      	mov	r0, r3
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	bc80      	pop	{r7}
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop
  400cf4:	003d0900 	.word	0x003d0900
  400cf8:	007a1200 	.word	0x007a1200
  400cfc:	00b71b00 	.word	0x00b71b00

00400d00 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400d00:	b580      	push	{r7, lr}
  400d02:	b082      	sub	sp, #8
  400d04:	af00      	add	r7, sp, #0
  400d06:	4603      	mov	r3, r0
  400d08:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400d0a:	bf00      	nop
  400d0c:	79fb      	ldrb	r3, [r7, #7]
  400d0e:	4618      	mov	r0, r3
  400d10:	4b05      	ldr	r3, [pc, #20]	; (400d28 <osc_wait_ready+0x28>)
  400d12:	4798      	blx	r3
  400d14:	4603      	mov	r3, r0
  400d16:	f083 0301 	eor.w	r3, r3, #1
  400d1a:	b2db      	uxtb	r3, r3
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d1f5      	bne.n	400d0c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400d20:	bf00      	nop
  400d22:	3708      	adds	r7, #8
  400d24:	46bd      	mov	sp, r7
  400d26:	bd80      	pop	{r7, pc}
  400d28:	00400c1d 	.word	0x00400c1d

00400d2c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400d2c:	b580      	push	{r7, lr}
  400d2e:	b086      	sub	sp, #24
  400d30:	af00      	add	r7, sp, #0
  400d32:	60f8      	str	r0, [r7, #12]
  400d34:	607a      	str	r2, [r7, #4]
  400d36:	603b      	str	r3, [r7, #0]
  400d38:	460b      	mov	r3, r1
  400d3a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400d3c:	7afb      	ldrb	r3, [r7, #11]
  400d3e:	4618      	mov	r0, r3
  400d40:	4b0d      	ldr	r3, [pc, #52]	; (400d78 <pll_config_init+0x4c>)
  400d42:	4798      	blx	r3
  400d44:	4602      	mov	r2, r0
  400d46:	687b      	ldr	r3, [r7, #4]
  400d48:	fbb2 f3f3 	udiv	r3, r2, r3
  400d4c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400d4e:	697b      	ldr	r3, [r7, #20]
  400d50:	683a      	ldr	r2, [r7, #0]
  400d52:	fb02 f303 	mul.w	r3, r2, r3
  400d56:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400d58:	683b      	ldr	r3, [r7, #0]
  400d5a:	3b01      	subs	r3, #1
  400d5c:	041a      	lsls	r2, r3, #16
  400d5e:	4b07      	ldr	r3, [pc, #28]	; (400d7c <pll_config_init+0x50>)
  400d60:	4013      	ands	r3, r2
  400d62:	687a      	ldr	r2, [r7, #4]
  400d64:	b2d2      	uxtb	r2, r2
  400d66:	4313      	orrs	r3, r2
  400d68:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400d6c:	68fb      	ldr	r3, [r7, #12]
  400d6e:	601a      	str	r2, [r3, #0]
}
  400d70:	bf00      	nop
  400d72:	3718      	adds	r7, #24
  400d74:	46bd      	mov	sp, r7
  400d76:	bd80      	pop	{r7, pc}
  400d78:	00400c8d 	.word	0x00400c8d
  400d7c:	07ff0000 	.word	0x07ff0000

00400d80 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400d80:	b580      	push	{r7, lr}
  400d82:	b082      	sub	sp, #8
  400d84:	af00      	add	r7, sp, #0
  400d86:	6078      	str	r0, [r7, #4]
  400d88:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400d8a:	683b      	ldr	r3, [r7, #0]
  400d8c:	2b00      	cmp	r3, #0
  400d8e:	d108      	bne.n	400da2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400d90:	4b09      	ldr	r3, [pc, #36]	; (400db8 <pll_enable+0x38>)
  400d92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d94:	4a09      	ldr	r2, [pc, #36]	; (400dbc <pll_enable+0x3c>)
  400d96:	687b      	ldr	r3, [r7, #4]
  400d98:	681b      	ldr	r3, [r3, #0]
  400d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400d9e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400da0:	e005      	b.n	400dae <pll_enable+0x2e>
		pmc_disable_pllbck();
  400da2:	4b07      	ldr	r3, [pc, #28]	; (400dc0 <pll_enable+0x40>)
  400da4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400da6:	4a05      	ldr	r2, [pc, #20]	; (400dbc <pll_enable+0x3c>)
  400da8:	687b      	ldr	r3, [r7, #4]
  400daa:	681b      	ldr	r3, [r3, #0]
  400dac:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400dae:	bf00      	nop
  400db0:	3708      	adds	r7, #8
  400db2:	46bd      	mov	sp, r7
  400db4:	bd80      	pop	{r7, pc}
  400db6:	bf00      	nop
  400db8:	00401625 	.word	0x00401625
  400dbc:	400e0400 	.word	0x400e0400
  400dc0:	004016a5 	.word	0x004016a5

00400dc4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400dc4:	b580      	push	{r7, lr}
  400dc6:	b082      	sub	sp, #8
  400dc8:	af00      	add	r7, sp, #0
  400dca:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400dcc:	687b      	ldr	r3, [r7, #4]
  400dce:	2b00      	cmp	r3, #0
  400dd0:	d103      	bne.n	400dda <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400dd2:	4b05      	ldr	r3, [pc, #20]	; (400de8 <pll_is_locked+0x24>)
  400dd4:	4798      	blx	r3
  400dd6:	4603      	mov	r3, r0
  400dd8:	e002      	b.n	400de0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400dda:	4b04      	ldr	r3, [pc, #16]	; (400dec <pll_is_locked+0x28>)
  400ddc:	4798      	blx	r3
  400dde:	4603      	mov	r3, r0
	}
}
  400de0:	4618      	mov	r0, r3
  400de2:	3708      	adds	r7, #8
  400de4:	46bd      	mov	sp, r7
  400de6:	bd80      	pop	{r7, pc}
  400de8:	0040163d 	.word	0x0040163d
  400dec:	004016bd 	.word	0x004016bd

00400df0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400df0:	b580      	push	{r7, lr}
  400df2:	b082      	sub	sp, #8
  400df4:	af00      	add	r7, sp, #0
  400df6:	4603      	mov	r3, r0
  400df8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400dfa:	79fb      	ldrb	r3, [r7, #7]
  400dfc:	3b03      	subs	r3, #3
  400dfe:	2b04      	cmp	r3, #4
  400e00:	d808      	bhi.n	400e14 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400e02:	79fb      	ldrb	r3, [r7, #7]
  400e04:	4618      	mov	r0, r3
  400e06:	4b06      	ldr	r3, [pc, #24]	; (400e20 <pll_enable_source+0x30>)
  400e08:	4798      	blx	r3
		osc_wait_ready(e_src);
  400e0a:	79fb      	ldrb	r3, [r7, #7]
  400e0c:	4618      	mov	r0, r3
  400e0e:	4b05      	ldr	r3, [pc, #20]	; (400e24 <pll_enable_source+0x34>)
  400e10:	4798      	blx	r3
		break;
  400e12:	e000      	b.n	400e16 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400e14:	bf00      	nop
	}
}
  400e16:	bf00      	nop
  400e18:	3708      	adds	r7, #8
  400e1a:	46bd      	mov	sp, r7
  400e1c:	bd80      	pop	{r7, pc}
  400e1e:	bf00      	nop
  400e20:	00400b95 	.word	0x00400b95
  400e24:	00400d01 	.word	0x00400d01

00400e28 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400e28:	b580      	push	{r7, lr}
  400e2a:	b082      	sub	sp, #8
  400e2c:	af00      	add	r7, sp, #0
  400e2e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e30:	bf00      	nop
  400e32:	6878      	ldr	r0, [r7, #4]
  400e34:	4b04      	ldr	r3, [pc, #16]	; (400e48 <pll_wait_for_lock+0x20>)
  400e36:	4798      	blx	r3
  400e38:	4603      	mov	r3, r0
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	d0f9      	beq.n	400e32 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400e3e:	2300      	movs	r3, #0
}
  400e40:	4618      	mov	r0, r3
  400e42:	3708      	adds	r7, #8
  400e44:	46bd      	mov	sp, r7
  400e46:	bd80      	pop	{r7, pc}
  400e48:	00400dc5 	.word	0x00400dc5

00400e4c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400e4c:	b580      	push	{r7, lr}
  400e4e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400e50:	2006      	movs	r0, #6
  400e52:	4b04      	ldr	r3, [pc, #16]	; (400e64 <sysclk_get_main_hz+0x18>)
  400e54:	4798      	blx	r3
  400e56:	4602      	mov	r2, r0
  400e58:	4613      	mov	r3, r2
  400e5a:	009b      	lsls	r3, r3, #2
  400e5c:	4413      	add	r3, r2
  400e5e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400e60:	4618      	mov	r0, r3
  400e62:	bd80      	pop	{r7, pc}
  400e64:	00400c8d 	.word	0x00400c8d

00400e68 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400e68:	b580      	push	{r7, lr}
  400e6a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400e6c:	4b02      	ldr	r3, [pc, #8]	; (400e78 <sysclk_get_cpu_hz+0x10>)
  400e6e:	4798      	blx	r3
  400e70:	4603      	mov	r3, r0
  400e72:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400e74:	4618      	mov	r0, r3
  400e76:	bd80      	pop	{r7, pc}
  400e78:	00400e4d 	.word	0x00400e4d

00400e7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e7c:	b590      	push	{r4, r7, lr}
  400e7e:	b083      	sub	sp, #12
  400e80:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e82:	4811      	ldr	r0, [pc, #68]	; (400ec8 <sysclk_init+0x4c>)
  400e84:	4b11      	ldr	r3, [pc, #68]	; (400ecc <sysclk_init+0x50>)
  400e86:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400e88:	2006      	movs	r0, #6
  400e8a:	4b11      	ldr	r3, [pc, #68]	; (400ed0 <sysclk_init+0x54>)
  400e8c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400e8e:	1d38      	adds	r0, r7, #4
  400e90:	2314      	movs	r3, #20
  400e92:	2201      	movs	r2, #1
  400e94:	2106      	movs	r1, #6
  400e96:	4c0f      	ldr	r4, [pc, #60]	; (400ed4 <sysclk_init+0x58>)
  400e98:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400e9a:	1d3b      	adds	r3, r7, #4
  400e9c:	2100      	movs	r1, #0
  400e9e:	4618      	mov	r0, r3
  400ea0:	4b0d      	ldr	r3, [pc, #52]	; (400ed8 <sysclk_init+0x5c>)
  400ea2:	4798      	blx	r3
		pll_wait_for_lock(0);
  400ea4:	2000      	movs	r0, #0
  400ea6:	4b0d      	ldr	r3, [pc, #52]	; (400edc <sysclk_init+0x60>)
  400ea8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400eaa:	2010      	movs	r0, #16
  400eac:	4b0c      	ldr	r3, [pc, #48]	; (400ee0 <sysclk_init+0x64>)
  400eae:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400eb0:	4b0c      	ldr	r3, [pc, #48]	; (400ee4 <sysclk_init+0x68>)
  400eb2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400eb4:	4b0c      	ldr	r3, [pc, #48]	; (400ee8 <sysclk_init+0x6c>)
  400eb6:	4798      	blx	r3
  400eb8:	4603      	mov	r3, r0
  400eba:	4618      	mov	r0, r3
  400ebc:	4b03      	ldr	r3, [pc, #12]	; (400ecc <sysclk_init+0x50>)
  400ebe:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400ec0:	bf00      	nop
  400ec2:	370c      	adds	r7, #12
  400ec4:	46bd      	mov	sp, r7
  400ec6:	bd90      	pop	{r4, r7, pc}
  400ec8:	07270e00 	.word	0x07270e00
  400ecc:	00402e81 	.word	0x00402e81
  400ed0:	00400df1 	.word	0x00400df1
  400ed4:	00400d2d 	.word	0x00400d2d
  400ed8:	00400d81 	.word	0x00400d81
  400edc:	00400e29 	.word	0x00400e29
  400ee0:	00401439 	.word	0x00401439
  400ee4:	00402ce9 	.word	0x00402ce9
  400ee8:	00400e69 	.word	0x00400e69

00400eec <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400eec:	b480      	push	{r7}
  400eee:	b085      	sub	sp, #20
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	60f8      	str	r0, [r7, #12]
  400ef4:	60b9      	str	r1, [r7, #8]
  400ef6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ef8:	687b      	ldr	r3, [r7, #4]
  400efa:	2b00      	cmp	r3, #0
  400efc:	d003      	beq.n	400f06 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	68ba      	ldr	r2, [r7, #8]
  400f02:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400f04:	e002      	b.n	400f0c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400f06:	68fb      	ldr	r3, [r7, #12]
  400f08:	68ba      	ldr	r2, [r7, #8]
  400f0a:	661a      	str	r2, [r3, #96]	; 0x60
}
  400f0c:	bf00      	nop
  400f0e:	3714      	adds	r7, #20
  400f10:	46bd      	mov	sp, r7
  400f12:	bc80      	pop	{r7}
  400f14:	4770      	bx	lr

00400f16 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400f16:	b480      	push	{r7}
  400f18:	b085      	sub	sp, #20
  400f1a:	af00      	add	r7, sp, #0
  400f1c:	60f8      	str	r0, [r7, #12]
  400f1e:	60b9      	str	r1, [r7, #8]
  400f20:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400f22:	68fb      	ldr	r3, [r7, #12]
  400f24:	68ba      	ldr	r2, [r7, #8]
  400f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400f2a:	687b      	ldr	r3, [r7, #4]
  400f2c:	005b      	lsls	r3, r3, #1
  400f2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f32:	fbb2 f3f3 	udiv	r3, r2, r3
  400f36:	3b01      	subs	r3, #1
  400f38:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400f42:	bf00      	nop
  400f44:	3714      	adds	r7, #20
  400f46:	46bd      	mov	sp, r7
  400f48:	bc80      	pop	{r7}
  400f4a:	4770      	bx	lr

00400f4c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400f4c:	b480      	push	{r7}
  400f4e:	b087      	sub	sp, #28
  400f50:	af00      	add	r7, sp, #0
  400f52:	60f8      	str	r0, [r7, #12]
  400f54:	60b9      	str	r1, [r7, #8]
  400f56:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f58:	68fb      	ldr	r3, [r7, #12]
  400f5a:	687a      	ldr	r2, [r7, #4]
  400f5c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f5e:	68bb      	ldr	r3, [r7, #8]
  400f60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f64:	d04a      	beq.n	400ffc <pio_set_peripheral+0xb0>
  400f66:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f6a:	d808      	bhi.n	400f7e <pio_set_peripheral+0x32>
  400f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400f70:	d016      	beq.n	400fa0 <pio_set_peripheral+0x54>
  400f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400f76:	d02c      	beq.n	400fd2 <pio_set_peripheral+0x86>
  400f78:	2b00      	cmp	r3, #0
  400f7a:	d069      	beq.n	401050 <pio_set_peripheral+0x104>
  400f7c:	e064      	b.n	401048 <pio_set_peripheral+0xfc>
  400f7e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f82:	d065      	beq.n	401050 <pio_set_peripheral+0x104>
  400f84:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f88:	d803      	bhi.n	400f92 <pio_set_peripheral+0x46>
  400f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400f8e:	d04a      	beq.n	401026 <pio_set_peripheral+0xda>
  400f90:	e05a      	b.n	401048 <pio_set_peripheral+0xfc>
  400f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400f96:	d05b      	beq.n	401050 <pio_set_peripheral+0x104>
  400f98:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400f9c:	d058      	beq.n	401050 <pio_set_peripheral+0x104>
  400f9e:	e053      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fa0:	68fb      	ldr	r3, [r7, #12]
  400fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400fa4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400fa6:	68fb      	ldr	r3, [r7, #12]
  400fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	43d9      	mvns	r1, r3
  400fae:	697b      	ldr	r3, [r7, #20]
  400fb0:	400b      	ands	r3, r1
  400fb2:	401a      	ands	r2, r3
  400fb4:	68fb      	ldr	r3, [r7, #12]
  400fb6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fb8:	68fb      	ldr	r3, [r7, #12]
  400fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400fbc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fbe:	68fb      	ldr	r3, [r7, #12]
  400fc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400fc2:	687b      	ldr	r3, [r7, #4]
  400fc4:	43d9      	mvns	r1, r3
  400fc6:	697b      	ldr	r3, [r7, #20]
  400fc8:	400b      	ands	r3, r1
  400fca:	401a      	ands	r2, r3
  400fcc:	68fb      	ldr	r3, [r7, #12]
  400fce:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400fd0:	e03a      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fd2:	68fb      	ldr	r3, [r7, #12]
  400fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400fd6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fd8:	687a      	ldr	r2, [r7, #4]
  400fda:	697b      	ldr	r3, [r7, #20]
  400fdc:	431a      	orrs	r2, r3
  400fde:	68fb      	ldr	r3, [r7, #12]
  400fe0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fe2:	68fb      	ldr	r3, [r7, #12]
  400fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400fe6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fe8:	68fb      	ldr	r3, [r7, #12]
  400fea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400fec:	687b      	ldr	r3, [r7, #4]
  400fee:	43d9      	mvns	r1, r3
  400ff0:	697b      	ldr	r3, [r7, #20]
  400ff2:	400b      	ands	r3, r1
  400ff4:	401a      	ands	r2, r3
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ffa:	e025      	b.n	401048 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ffc:	68fb      	ldr	r3, [r7, #12]
  400ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401000:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401002:	68fb      	ldr	r3, [r7, #12]
  401004:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401006:	687b      	ldr	r3, [r7, #4]
  401008:	43d9      	mvns	r1, r3
  40100a:	697b      	ldr	r3, [r7, #20]
  40100c:	400b      	ands	r3, r1
  40100e:	401a      	ands	r2, r3
  401010:	68fb      	ldr	r3, [r7, #12]
  401012:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401014:	68fb      	ldr	r3, [r7, #12]
  401016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401018:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40101a:	687a      	ldr	r2, [r7, #4]
  40101c:	697b      	ldr	r3, [r7, #20]
  40101e:	431a      	orrs	r2, r3
  401020:	68fb      	ldr	r3, [r7, #12]
  401022:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401024:	e010      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401026:	68fb      	ldr	r3, [r7, #12]
  401028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40102a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40102c:	687a      	ldr	r2, [r7, #4]
  40102e:	697b      	ldr	r3, [r7, #20]
  401030:	431a      	orrs	r2, r3
  401032:	68fb      	ldr	r3, [r7, #12]
  401034:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401036:	68fb      	ldr	r3, [r7, #12]
  401038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40103a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40103c:	687a      	ldr	r2, [r7, #4]
  40103e:	697b      	ldr	r3, [r7, #20]
  401040:	431a      	orrs	r2, r3
  401042:	68fb      	ldr	r3, [r7, #12]
  401044:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401046:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401048:	68fb      	ldr	r3, [r7, #12]
  40104a:	687a      	ldr	r2, [r7, #4]
  40104c:	605a      	str	r2, [r3, #4]
  40104e:	e000      	b.n	401052 <pio_set_peripheral+0x106>
		return;
  401050:	bf00      	nop
}
  401052:	371c      	adds	r7, #28
  401054:	46bd      	mov	sp, r7
  401056:	bc80      	pop	{r7}
  401058:	4770      	bx	lr
	...

0040105c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40105c:	b580      	push	{r7, lr}
  40105e:	b084      	sub	sp, #16
  401060:	af00      	add	r7, sp, #0
  401062:	60f8      	str	r0, [r7, #12]
  401064:	60b9      	str	r1, [r7, #8]
  401066:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401068:	68b9      	ldr	r1, [r7, #8]
  40106a:	68f8      	ldr	r0, [r7, #12]
  40106c:	4b19      	ldr	r3, [pc, #100]	; (4010d4 <pio_set_input+0x78>)
  40106e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	f003 0301 	and.w	r3, r3, #1
  401076:	461a      	mov	r2, r3
  401078:	68b9      	ldr	r1, [r7, #8]
  40107a:	68f8      	ldr	r0, [r7, #12]
  40107c:	4b16      	ldr	r3, [pc, #88]	; (4010d8 <pio_set_input+0x7c>)
  40107e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401080:	687b      	ldr	r3, [r7, #4]
  401082:	f003 030a 	and.w	r3, r3, #10
  401086:	2b00      	cmp	r3, #0
  401088:	d003      	beq.n	401092 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40108a:	68fb      	ldr	r3, [r7, #12]
  40108c:	68ba      	ldr	r2, [r7, #8]
  40108e:	621a      	str	r2, [r3, #32]
  401090:	e002      	b.n	401098 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401092:	68fb      	ldr	r3, [r7, #12]
  401094:	68ba      	ldr	r2, [r7, #8]
  401096:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401098:	687b      	ldr	r3, [r7, #4]
  40109a:	f003 0302 	and.w	r3, r3, #2
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d004      	beq.n	4010ac <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4010a2:	68fb      	ldr	r3, [r7, #12]
  4010a4:	68ba      	ldr	r2, [r7, #8]
  4010a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4010aa:	e008      	b.n	4010be <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4010ac:	687b      	ldr	r3, [r7, #4]
  4010ae:	f003 0308 	and.w	r3, r3, #8
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d003      	beq.n	4010be <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4010b6:	68fb      	ldr	r3, [r7, #12]
  4010b8:	68ba      	ldr	r2, [r7, #8]
  4010ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4010be:	68fb      	ldr	r3, [r7, #12]
  4010c0:	68ba      	ldr	r2, [r7, #8]
  4010c2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	68ba      	ldr	r2, [r7, #8]
  4010c8:	601a      	str	r2, [r3, #0]
}
  4010ca:	bf00      	nop
  4010cc:	3710      	adds	r7, #16
  4010ce:	46bd      	mov	sp, r7
  4010d0:	bd80      	pop	{r7, pc}
  4010d2:	bf00      	nop
  4010d4:	004011c5 	.word	0x004011c5
  4010d8:	00400eed 	.word	0x00400eed

004010dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4010dc:	b580      	push	{r7, lr}
  4010de:	b084      	sub	sp, #16
  4010e0:	af00      	add	r7, sp, #0
  4010e2:	60f8      	str	r0, [r7, #12]
  4010e4:	60b9      	str	r1, [r7, #8]
  4010e6:	607a      	str	r2, [r7, #4]
  4010e8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4010ea:	68b9      	ldr	r1, [r7, #8]
  4010ec:	68f8      	ldr	r0, [r7, #12]
  4010ee:	4b12      	ldr	r3, [pc, #72]	; (401138 <pio_set_output+0x5c>)
  4010f0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4010f2:	69ba      	ldr	r2, [r7, #24]
  4010f4:	68b9      	ldr	r1, [r7, #8]
  4010f6:	68f8      	ldr	r0, [r7, #12]
  4010f8:	4b10      	ldr	r3, [pc, #64]	; (40113c <pio_set_output+0x60>)
  4010fa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4010fc:	683b      	ldr	r3, [r7, #0]
  4010fe:	2b00      	cmp	r3, #0
  401100:	d003      	beq.n	40110a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401102:	68fb      	ldr	r3, [r7, #12]
  401104:	68ba      	ldr	r2, [r7, #8]
  401106:	651a      	str	r2, [r3, #80]	; 0x50
  401108:	e002      	b.n	401110 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40110a:	68fb      	ldr	r3, [r7, #12]
  40110c:	68ba      	ldr	r2, [r7, #8]
  40110e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401110:	687b      	ldr	r3, [r7, #4]
  401112:	2b00      	cmp	r3, #0
  401114:	d003      	beq.n	40111e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401116:	68fb      	ldr	r3, [r7, #12]
  401118:	68ba      	ldr	r2, [r7, #8]
  40111a:	631a      	str	r2, [r3, #48]	; 0x30
  40111c:	e002      	b.n	401124 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40111e:	68fb      	ldr	r3, [r7, #12]
  401120:	68ba      	ldr	r2, [r7, #8]
  401122:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401124:	68fb      	ldr	r3, [r7, #12]
  401126:	68ba      	ldr	r2, [r7, #8]
  401128:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40112a:	68fb      	ldr	r3, [r7, #12]
  40112c:	68ba      	ldr	r2, [r7, #8]
  40112e:	601a      	str	r2, [r3, #0]
}
  401130:	bf00      	nop
  401132:	3710      	adds	r7, #16
  401134:	46bd      	mov	sp, r7
  401136:	bd80      	pop	{r7, pc}
  401138:	004011c5 	.word	0x004011c5
  40113c:	00400eed 	.word	0x00400eed

00401140 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401140:	b480      	push	{r7}
  401142:	b085      	sub	sp, #20
  401144:	af00      	add	r7, sp, #0
  401146:	60f8      	str	r0, [r7, #12]
  401148:	60b9      	str	r1, [r7, #8]
  40114a:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	f003 0310 	and.w	r3, r3, #16
  401152:	2b00      	cmp	r3, #0
  401154:	d020      	beq.n	401198 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401156:	68fb      	ldr	r3, [r7, #12]
  401158:	68ba      	ldr	r2, [r7, #8]
  40115a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	f003 0320 	and.w	r3, r3, #32
  401164:	2b00      	cmp	r3, #0
  401166:	d004      	beq.n	401172 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401168:	68fb      	ldr	r3, [r7, #12]
  40116a:	68ba      	ldr	r2, [r7, #8]
  40116c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401170:	e003      	b.n	40117a <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401172:	68fb      	ldr	r3, [r7, #12]
  401174:	68ba      	ldr	r2, [r7, #8]
  401176:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40117a:	687b      	ldr	r3, [r7, #4]
  40117c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401180:	2b00      	cmp	r3, #0
  401182:	d004      	beq.n	40118e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401184:	68fb      	ldr	r3, [r7, #12]
  401186:	68ba      	ldr	r2, [r7, #8]
  401188:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40118c:	e008      	b.n	4011a0 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40118e:	68fb      	ldr	r3, [r7, #12]
  401190:	68ba      	ldr	r2, [r7, #8]
  401192:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401196:	e003      	b.n	4011a0 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401198:	68fb      	ldr	r3, [r7, #12]
  40119a:	68ba      	ldr	r2, [r7, #8]
  40119c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4011a0:	bf00      	nop
  4011a2:	3714      	adds	r7, #20
  4011a4:	46bd      	mov	sp, r7
  4011a6:	bc80      	pop	{r7}
  4011a8:	4770      	bx	lr

004011aa <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011aa:	b480      	push	{r7}
  4011ac:	b083      	sub	sp, #12
  4011ae:	af00      	add	r7, sp, #0
  4011b0:	6078      	str	r0, [r7, #4]
  4011b2:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4011b4:	687b      	ldr	r3, [r7, #4]
  4011b6:	683a      	ldr	r2, [r7, #0]
  4011b8:	641a      	str	r2, [r3, #64]	; 0x40
}
  4011ba:	bf00      	nop
  4011bc:	370c      	adds	r7, #12
  4011be:	46bd      	mov	sp, r7
  4011c0:	bc80      	pop	{r7}
  4011c2:	4770      	bx	lr

004011c4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011c4:	b480      	push	{r7}
  4011c6:	b083      	sub	sp, #12
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
  4011cc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4011ce:	687b      	ldr	r3, [r7, #4]
  4011d0:	683a      	ldr	r2, [r7, #0]
  4011d2:	645a      	str	r2, [r3, #68]	; 0x44
}
  4011d4:	bf00      	nop
  4011d6:	370c      	adds	r7, #12
  4011d8:	46bd      	mov	sp, r7
  4011da:	bc80      	pop	{r7}
  4011dc:	4770      	bx	lr

004011de <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4011de:	b480      	push	{r7}
  4011e0:	b083      	sub	sp, #12
  4011e2:	af00      	add	r7, sp, #0
  4011e4:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4011e6:	687b      	ldr	r3, [r7, #4]
  4011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4011ea:	4618      	mov	r0, r3
  4011ec:	370c      	adds	r7, #12
  4011ee:	46bd      	mov	sp, r7
  4011f0:	bc80      	pop	{r7}
  4011f2:	4770      	bx	lr

004011f4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4011f4:	b480      	push	{r7}
  4011f6:	b083      	sub	sp, #12
  4011f8:	af00      	add	r7, sp, #0
  4011fa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401200:	4618      	mov	r0, r3
  401202:	370c      	adds	r7, #12
  401204:	46bd      	mov	sp, r7
  401206:	bc80      	pop	{r7}
  401208:	4770      	bx	lr
	...

0040120c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40120c:	b590      	push	{r4, r7, lr}
  40120e:	b087      	sub	sp, #28
  401210:	af02      	add	r7, sp, #8
  401212:	6078      	str	r0, [r7, #4]
  401214:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401216:	6878      	ldr	r0, [r7, #4]
  401218:	4b63      	ldr	r3, [pc, #396]	; (4013a8 <pio_configure_pin+0x19c>)
  40121a:	4798      	blx	r3
  40121c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40121e:	683b      	ldr	r3, [r7, #0]
  401220:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401228:	d067      	beq.n	4012fa <pio_configure_pin+0xee>
  40122a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40122e:	d809      	bhi.n	401244 <pio_configure_pin+0x38>
  401230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401234:	d02b      	beq.n	40128e <pio_configure_pin+0x82>
  401236:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40123a:	d043      	beq.n	4012c4 <pio_configure_pin+0xb8>
  40123c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401240:	d00a      	beq.n	401258 <pio_configure_pin+0x4c>
  401242:	e0a9      	b.n	401398 <pio_configure_pin+0x18c>
  401244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401248:	d07e      	beq.n	401348 <pio_configure_pin+0x13c>
  40124a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40124e:	d07b      	beq.n	401348 <pio_configure_pin+0x13c>
  401250:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401254:	d06c      	beq.n	401330 <pio_configure_pin+0x124>
  401256:	e09f      	b.n	401398 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401258:	687b      	ldr	r3, [r7, #4]
  40125a:	f003 031f 	and.w	r3, r3, #31
  40125e:	2201      	movs	r2, #1
  401260:	fa02 f303 	lsl.w	r3, r2, r3
  401264:	461a      	mov	r2, r3
  401266:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40126a:	68f8      	ldr	r0, [r7, #12]
  40126c:	4b4f      	ldr	r3, [pc, #316]	; (4013ac <pio_configure_pin+0x1a0>)
  40126e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401270:	687b      	ldr	r3, [r7, #4]
  401272:	f003 031f 	and.w	r3, r3, #31
  401276:	2201      	movs	r2, #1
  401278:	fa02 f303 	lsl.w	r3, r2, r3
  40127c:	4619      	mov	r1, r3
  40127e:	683b      	ldr	r3, [r7, #0]
  401280:	f003 0301 	and.w	r3, r3, #1
  401284:	461a      	mov	r2, r3
  401286:	68f8      	ldr	r0, [r7, #12]
  401288:	4b49      	ldr	r3, [pc, #292]	; (4013b0 <pio_configure_pin+0x1a4>)
  40128a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40128c:	e086      	b.n	40139c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40128e:	687b      	ldr	r3, [r7, #4]
  401290:	f003 031f 	and.w	r3, r3, #31
  401294:	2201      	movs	r2, #1
  401296:	fa02 f303 	lsl.w	r3, r2, r3
  40129a:	461a      	mov	r2, r3
  40129c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b42      	ldr	r3, [pc, #264]	; (4013ac <pio_configure_pin+0x1a0>)
  4012a4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4012a6:	687b      	ldr	r3, [r7, #4]
  4012a8:	f003 031f 	and.w	r3, r3, #31
  4012ac:	2201      	movs	r2, #1
  4012ae:	fa02 f303 	lsl.w	r3, r2, r3
  4012b2:	4619      	mov	r1, r3
  4012b4:	683b      	ldr	r3, [r7, #0]
  4012b6:	f003 0301 	and.w	r3, r3, #1
  4012ba:	461a      	mov	r2, r3
  4012bc:	68f8      	ldr	r0, [r7, #12]
  4012be:	4b3c      	ldr	r3, [pc, #240]	; (4013b0 <pio_configure_pin+0x1a4>)
  4012c0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4012c2:	e06b      	b.n	40139c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4012c4:	687b      	ldr	r3, [r7, #4]
  4012c6:	f003 031f 	and.w	r3, r3, #31
  4012ca:	2201      	movs	r2, #1
  4012cc:	fa02 f303 	lsl.w	r3, r2, r3
  4012d0:	461a      	mov	r2, r3
  4012d2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4012d6:	68f8      	ldr	r0, [r7, #12]
  4012d8:	4b34      	ldr	r3, [pc, #208]	; (4013ac <pio_configure_pin+0x1a0>)
  4012da:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4012dc:	687b      	ldr	r3, [r7, #4]
  4012de:	f003 031f 	and.w	r3, r3, #31
  4012e2:	2201      	movs	r2, #1
  4012e4:	fa02 f303 	lsl.w	r3, r2, r3
  4012e8:	4619      	mov	r1, r3
  4012ea:	683b      	ldr	r3, [r7, #0]
  4012ec:	f003 0301 	and.w	r3, r3, #1
  4012f0:	461a      	mov	r2, r3
  4012f2:	68f8      	ldr	r0, [r7, #12]
  4012f4:	4b2e      	ldr	r3, [pc, #184]	; (4013b0 <pio_configure_pin+0x1a4>)
  4012f6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4012f8:	e050      	b.n	40139c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4012fa:	687b      	ldr	r3, [r7, #4]
  4012fc:	f003 031f 	and.w	r3, r3, #31
  401300:	2201      	movs	r2, #1
  401302:	fa02 f303 	lsl.w	r3, r2, r3
  401306:	461a      	mov	r2, r3
  401308:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40130c:	68f8      	ldr	r0, [r7, #12]
  40130e:	4b27      	ldr	r3, [pc, #156]	; (4013ac <pio_configure_pin+0x1a0>)
  401310:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401312:	687b      	ldr	r3, [r7, #4]
  401314:	f003 031f 	and.w	r3, r3, #31
  401318:	2201      	movs	r2, #1
  40131a:	fa02 f303 	lsl.w	r3, r2, r3
  40131e:	4619      	mov	r1, r3
  401320:	683b      	ldr	r3, [r7, #0]
  401322:	f003 0301 	and.w	r3, r3, #1
  401326:	461a      	mov	r2, r3
  401328:	68f8      	ldr	r0, [r7, #12]
  40132a:	4b21      	ldr	r3, [pc, #132]	; (4013b0 <pio_configure_pin+0x1a4>)
  40132c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40132e:	e035      	b.n	40139c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	f003 031f 	and.w	r3, r3, #31
  401336:	2201      	movs	r2, #1
  401338:	fa02 f303 	lsl.w	r3, r2, r3
  40133c:	683a      	ldr	r2, [r7, #0]
  40133e:	4619      	mov	r1, r3
  401340:	68f8      	ldr	r0, [r7, #12]
  401342:	4b1c      	ldr	r3, [pc, #112]	; (4013b4 <pio_configure_pin+0x1a8>)
  401344:	4798      	blx	r3
		break;
  401346:	e029      	b.n	40139c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	f003 031f 	and.w	r3, r3, #31
  40134e:	2201      	movs	r2, #1
  401350:	fa02 f303 	lsl.w	r3, r2, r3
  401354:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401356:	683b      	ldr	r3, [r7, #0]
  401358:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40135c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401360:	bf0c      	ite	eq
  401362:	2301      	moveq	r3, #1
  401364:	2300      	movne	r3, #0
  401366:	b2db      	uxtb	r3, r3
  401368:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40136a:	683b      	ldr	r3, [r7, #0]
  40136c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401370:	2b00      	cmp	r3, #0
  401372:	bf14      	ite	ne
  401374:	2301      	movne	r3, #1
  401376:	2300      	moveq	r3, #0
  401378:	b2db      	uxtb	r3, r3
  40137a:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40137c:	683b      	ldr	r3, [r7, #0]
  40137e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401382:	2b00      	cmp	r3, #0
  401384:	bf14      	ite	ne
  401386:	2301      	movne	r3, #1
  401388:	2300      	moveq	r3, #0
  40138a:	b2db      	uxtb	r3, r3
  40138c:	9300      	str	r3, [sp, #0]
  40138e:	4603      	mov	r3, r0
  401390:	68f8      	ldr	r0, [r7, #12]
  401392:	4c09      	ldr	r4, [pc, #36]	; (4013b8 <pio_configure_pin+0x1ac>)
  401394:	47a0      	blx	r4
		break;
  401396:	e001      	b.n	40139c <pio_configure_pin+0x190>

	default:
		return 0;
  401398:	2300      	movs	r3, #0
  40139a:	e000      	b.n	40139e <pio_configure_pin+0x192>
	}

	return 1;
  40139c:	2301      	movs	r3, #1
}
  40139e:	4618      	mov	r0, r3
  4013a0:	3714      	adds	r7, #20
  4013a2:	46bd      	mov	sp, r7
  4013a4:	bd90      	pop	{r4, r7, pc}
  4013a6:	bf00      	nop
  4013a8:	004013bd 	.word	0x004013bd
  4013ac:	00400f4d 	.word	0x00400f4d
  4013b0:	00400eed 	.word	0x00400eed
  4013b4:	0040105d 	.word	0x0040105d
  4013b8:	004010dd 	.word	0x004010dd

004013bc <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4013bc:	b480      	push	{r7}
  4013be:	b085      	sub	sp, #20
  4013c0:	af00      	add	r7, sp, #0
  4013c2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013c4:	687b      	ldr	r3, [r7, #4]
  4013c6:	095b      	lsrs	r3, r3, #5
  4013c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4013cc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4013d0:	025b      	lsls	r3, r3, #9
  4013d2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4013d4:	68fb      	ldr	r3, [r7, #12]
}
  4013d6:	4618      	mov	r0, r3
  4013d8:	3714      	adds	r7, #20
  4013da:	46bd      	mov	sp, r7
  4013dc:	bc80      	pop	{r7}
  4013de:	4770      	bx	lr

004013e0 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  4013e0:	b480      	push	{r7}
  4013e2:	b083      	sub	sp, #12
  4013e4:	af00      	add	r7, sp, #0
  4013e6:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  4013e8:	687b      	ldr	r3, [r7, #4]
  4013ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013ee:	f043 0201 	orr.w	r2, r3, #1
  4013f2:	687b      	ldr	r3, [r7, #4]
  4013f4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  4013f8:	4b03      	ldr	r3, [pc, #12]	; (401408 <pio_capture_enable+0x28>)
  4013fa:	2201      	movs	r2, #1
  4013fc:	601a      	str	r2, [r3, #0]
}
  4013fe:	bf00      	nop
  401400:	370c      	adds	r7, #12
  401402:	46bd      	mov	sp, r7
  401404:	bc80      	pop	{r7}
  401406:	4770      	bx	lr
  401408:	20000ab4 	.word	0x20000ab4

0040140c <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  40140c:	b480      	push	{r7}
  40140e:	b083      	sub	sp, #12
  401410:	af00      	add	r7, sp, #0
  401412:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  401414:	687b      	ldr	r3, [r7, #4]
  401416:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40141a:	f023 0201 	bic.w	r2, r3, #1
  40141e:	687b      	ldr	r3, [r7, #4]
  401420:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  401424:	4b03      	ldr	r3, [pc, #12]	; (401434 <pio_capture_disable+0x28>)
  401426:	2200      	movs	r2, #0
  401428:	601a      	str	r2, [r3, #0]
}
  40142a:	bf00      	nop
  40142c:	370c      	adds	r7, #12
  40142e:	46bd      	mov	sp, r7
  401430:	bc80      	pop	{r7}
  401432:	4770      	bx	lr
  401434:	20000ab4 	.word	0x20000ab4

00401438 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401438:	b480      	push	{r7}
  40143a:	b085      	sub	sp, #20
  40143c:	af00      	add	r7, sp, #0
  40143e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401440:	491c      	ldr	r1, [pc, #112]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401442:	4b1c      	ldr	r3, [pc, #112]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40144a:	687b      	ldr	r3, [r7, #4]
  40144c:	4313      	orrs	r3, r2
  40144e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401450:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401454:	60fb      	str	r3, [r7, #12]
  401456:	e007      	b.n	401468 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	2b00      	cmp	r3, #0
  40145c:	d101      	bne.n	401462 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40145e:	2301      	movs	r3, #1
  401460:	e023      	b.n	4014aa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401462:	68fb      	ldr	r3, [r7, #12]
  401464:	3b01      	subs	r3, #1
  401466:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401468:	4b12      	ldr	r3, [pc, #72]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  40146a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40146c:	f003 0308 	and.w	r3, r3, #8
  401470:	2b00      	cmp	r3, #0
  401472:	d0f1      	beq.n	401458 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401474:	4a0f      	ldr	r2, [pc, #60]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401476:	4b0f      	ldr	r3, [pc, #60]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40147a:	f023 0303 	bic.w	r3, r3, #3
  40147e:	f043 0302 	orr.w	r3, r3, #2
  401482:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401484:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401488:	60fb      	str	r3, [r7, #12]
  40148a:	e007      	b.n	40149c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40148c:	68fb      	ldr	r3, [r7, #12]
  40148e:	2b00      	cmp	r3, #0
  401490:	d101      	bne.n	401496 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401492:	2301      	movs	r3, #1
  401494:	e009      	b.n	4014aa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401496:	68fb      	ldr	r3, [r7, #12]
  401498:	3b01      	subs	r3, #1
  40149a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40149c:	4b05      	ldr	r3, [pc, #20]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  40149e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014a0:	f003 0308 	and.w	r3, r3, #8
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d0f1      	beq.n	40148c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4014a8:	2300      	movs	r3, #0
}
  4014aa:	4618      	mov	r0, r3
  4014ac:	3714      	adds	r7, #20
  4014ae:	46bd      	mov	sp, r7
  4014b0:	bc80      	pop	{r7}
  4014b2:	4770      	bx	lr
  4014b4:	400e0400 	.word	0x400e0400

004014b8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4014b8:	b480      	push	{r7}
  4014ba:	b083      	sub	sp, #12
  4014bc:	af00      	add	r7, sp, #0
  4014be:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2b01      	cmp	r3, #1
  4014c4:	d107      	bne.n	4014d6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4014c6:	4a08      	ldr	r2, [pc, #32]	; (4014e8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014c8:	4b07      	ldr	r3, [pc, #28]	; (4014e8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014ca:	689b      	ldr	r3, [r3, #8]
  4014cc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4014d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4014d4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4014d6:	4b04      	ldr	r3, [pc, #16]	; (4014e8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014d8:	4a04      	ldr	r2, [pc, #16]	; (4014ec <pmc_switch_sclk_to_32kxtal+0x34>)
  4014da:	601a      	str	r2, [r3, #0]
}
  4014dc:	bf00      	nop
  4014de:	370c      	adds	r7, #12
  4014e0:	46bd      	mov	sp, r7
  4014e2:	bc80      	pop	{r7}
  4014e4:	4770      	bx	lr
  4014e6:	bf00      	nop
  4014e8:	400e1410 	.word	0x400e1410
  4014ec:	a5000008 	.word	0xa5000008

004014f0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4014f0:	b480      	push	{r7}
  4014f2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4014f4:	4b09      	ldr	r3, [pc, #36]	; (40151c <pmc_osc_is_ready_32kxtal+0x2c>)
  4014f6:	695b      	ldr	r3, [r3, #20]
  4014f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4014fc:	2b00      	cmp	r3, #0
  4014fe:	d007      	beq.n	401510 <pmc_osc_is_ready_32kxtal+0x20>
  401500:	4b07      	ldr	r3, [pc, #28]	; (401520 <pmc_osc_is_ready_32kxtal+0x30>)
  401502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401504:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401508:	2b00      	cmp	r3, #0
  40150a:	d001      	beq.n	401510 <pmc_osc_is_ready_32kxtal+0x20>
  40150c:	2301      	movs	r3, #1
  40150e:	e000      	b.n	401512 <pmc_osc_is_ready_32kxtal+0x22>
  401510:	2300      	movs	r3, #0
}
  401512:	4618      	mov	r0, r3
  401514:	46bd      	mov	sp, r7
  401516:	bc80      	pop	{r7}
  401518:	4770      	bx	lr
  40151a:	bf00      	nop
  40151c:	400e1410 	.word	0x400e1410
  401520:	400e0400 	.word	0x400e0400

00401524 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401524:	b480      	push	{r7}
  401526:	b083      	sub	sp, #12
  401528:	af00      	add	r7, sp, #0
  40152a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40152c:	4a18      	ldr	r2, [pc, #96]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  40152e:	4b18      	ldr	r3, [pc, #96]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401530:	6a1b      	ldr	r3, [r3, #32]
  401532:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401536:	f043 0308 	orr.w	r3, r3, #8
  40153a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40153c:	bf00      	nop
  40153e:	4b14      	ldr	r3, [pc, #80]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401546:	2b00      	cmp	r3, #0
  401548:	d0f9      	beq.n	40153e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40154a:	4911      	ldr	r1, [pc, #68]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  40154c:	4b10      	ldr	r3, [pc, #64]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  40154e:	6a1b      	ldr	r3, [r3, #32]
  401550:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401558:	687a      	ldr	r2, [r7, #4]
  40155a:	4313      	orrs	r3, r2
  40155c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401560:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401562:	bf00      	nop
  401564:	4b0a      	ldr	r3, [pc, #40]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40156c:	2b00      	cmp	r3, #0
  40156e:	d0f9      	beq.n	401564 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401570:	4a07      	ldr	r2, [pc, #28]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401572:	4b07      	ldr	r3, [pc, #28]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401574:	6a1b      	ldr	r3, [r3, #32]
  401576:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40157a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40157e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401582:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401584:	bf00      	nop
  401586:	370c      	adds	r7, #12
  401588:	46bd      	mov	sp, r7
  40158a:	bc80      	pop	{r7}
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop
  401590:	400e0400 	.word	0x400e0400

00401594 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401594:	b480      	push	{r7}
  401596:	b083      	sub	sp, #12
  401598:	af00      	add	r7, sp, #0
  40159a:	6078      	str	r0, [r7, #4]
  40159c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40159e:	687b      	ldr	r3, [r7, #4]
  4015a0:	2b00      	cmp	r3, #0
  4015a2:	d008      	beq.n	4015b6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015a4:	4916      	ldr	r1, [pc, #88]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015a6:	4b16      	ldr	r3, [pc, #88]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015a8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015aa:	4a16      	ldr	r2, [pc, #88]	; (401604 <pmc_switch_mainck_to_xtal+0x70>)
  4015ac:	401a      	ands	r2, r3
  4015ae:	4b16      	ldr	r3, [pc, #88]	; (401608 <pmc_switch_mainck_to_xtal+0x74>)
  4015b0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015b2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4015b4:	e01e      	b.n	4015f4 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015b6:	4912      	ldr	r1, [pc, #72]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015b8:	4b11      	ldr	r3, [pc, #68]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015ba:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015bc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4015c0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4015c4:	683a      	ldr	r2, [r7, #0]
  4015c6:	0212      	lsls	r2, r2, #8
  4015c8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015ca:	4313      	orrs	r3, r2
  4015cc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015d0:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015d4:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4015d6:	bf00      	nop
  4015d8:	4b09      	ldr	r3, [pc, #36]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015dc:	f003 0301 	and.w	r3, r3, #1
  4015e0:	2b00      	cmp	r3, #0
  4015e2:	d0f9      	beq.n	4015d8 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4015e4:	4a06      	ldr	r2, [pc, #24]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015e6:	4b06      	ldr	r3, [pc, #24]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015e8:	6a1b      	ldr	r3, [r3, #32]
  4015ea:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4015f2:	6213      	str	r3, [r2, #32]
}
  4015f4:	bf00      	nop
  4015f6:	370c      	adds	r7, #12
  4015f8:	46bd      	mov	sp, r7
  4015fa:	bc80      	pop	{r7}
  4015fc:	4770      	bx	lr
  4015fe:	bf00      	nop
  401600:	400e0400 	.word	0x400e0400
  401604:	fec8fffc 	.word	0xfec8fffc
  401608:	01370002 	.word	0x01370002

0040160c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40160c:	b480      	push	{r7}
  40160e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401610:	4b03      	ldr	r3, [pc, #12]	; (401620 <pmc_osc_is_ready_mainck+0x14>)
  401612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401618:	4618      	mov	r0, r3
  40161a:	46bd      	mov	sp, r7
  40161c:	bc80      	pop	{r7}
  40161e:	4770      	bx	lr
  401620:	400e0400 	.word	0x400e0400

00401624 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401624:	b480      	push	{r7}
  401626:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401628:	4b03      	ldr	r3, [pc, #12]	; (401638 <pmc_disable_pllack+0x14>)
  40162a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40162e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401630:	bf00      	nop
  401632:	46bd      	mov	sp, r7
  401634:	bc80      	pop	{r7}
  401636:	4770      	bx	lr
  401638:	400e0400 	.word	0x400e0400

0040163c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40163c:	b480      	push	{r7}
  40163e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401640:	4b03      	ldr	r3, [pc, #12]	; (401650 <pmc_is_locked_pllack+0x14>)
  401642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401644:	f003 0302 	and.w	r3, r3, #2
}
  401648:	4618      	mov	r0, r3
  40164a:	46bd      	mov	sp, r7
  40164c:	bc80      	pop	{r7}
  40164e:	4770      	bx	lr
  401650:	400e0400 	.word	0x400e0400

00401654 <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  401654:	b580      	push	{r7, lr}
  401656:	b084      	sub	sp, #16
  401658:	af00      	add	r7, sp, #0
  40165a:	60f8      	str	r0, [r7, #12]
  40165c:	60b9      	str	r1, [r7, #8]
  40165e:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  401660:	4b0d      	ldr	r3, [pc, #52]	; (401698 <pmc_enable_pllbck+0x44>)
  401662:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  401664:	480d      	ldr	r0, [pc, #52]	; (40169c <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  401666:	687b      	ldr	r3, [r7, #4]
  401668:	b2da      	uxtb	r2, r3
  40166a:	68bb      	ldr	r3, [r7, #8]
  40166c:	021b      	lsls	r3, r3, #8
  40166e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  401672:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  401674:	68fb      	ldr	r3, [r7, #12]
  401676:	0419      	lsls	r1, r3, #16
  401678:	4b09      	ldr	r3, [pc, #36]	; (4016a0 <pmc_enable_pllbck+0x4c>)
  40167a:	400b      	ands	r3, r1
  40167c:	4313      	orrs	r3, r2
	PMC->CKGR_PLLBR =
  40167e:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  401680:	bf00      	nop
  401682:	4b06      	ldr	r3, [pc, #24]	; (40169c <pmc_enable_pllbck+0x48>)
  401684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401686:	f003 0304 	and.w	r3, r3, #4
  40168a:	2b00      	cmp	r3, #0
  40168c:	d0f9      	beq.n	401682 <pmc_enable_pllbck+0x2e>
}
  40168e:	bf00      	nop
  401690:	3710      	adds	r7, #16
  401692:	46bd      	mov	sp, r7
  401694:	bd80      	pop	{r7, pc}
  401696:	bf00      	nop
  401698:	004016a5 	.word	0x004016a5
  40169c:	400e0400 	.word	0x400e0400
  4016a0:	07ff0000 	.word	0x07ff0000

004016a4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4016a4:	b480      	push	{r7}
  4016a6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4016a8:	4b03      	ldr	r3, [pc, #12]	; (4016b8 <pmc_disable_pllbck+0x14>)
  4016aa:	2200      	movs	r2, #0
  4016ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4016ae:	bf00      	nop
  4016b0:	46bd      	mov	sp, r7
  4016b2:	bc80      	pop	{r7}
  4016b4:	4770      	bx	lr
  4016b6:	bf00      	nop
  4016b8:	400e0400 	.word	0x400e0400

004016bc <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4016bc:	b480      	push	{r7}
  4016be:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4016c0:	4b03      	ldr	r3, [pc, #12]	; (4016d0 <pmc_is_locked_pllbck+0x14>)
  4016c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016c4:	f003 0304 	and.w	r3, r3, #4
}
  4016c8:	4618      	mov	r0, r3
  4016ca:	46bd      	mov	sp, r7
  4016cc:	bc80      	pop	{r7}
  4016ce:	4770      	bx	lr
  4016d0:	400e0400 	.word	0x400e0400

004016d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4016d4:	b480      	push	{r7}
  4016d6:	b083      	sub	sp, #12
  4016d8:	af00      	add	r7, sp, #0
  4016da:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4016dc:	687b      	ldr	r3, [r7, #4]
  4016de:	2b22      	cmp	r3, #34	; 0x22
  4016e0:	d901      	bls.n	4016e6 <pmc_enable_periph_clk+0x12>
		return 1;
  4016e2:	2301      	movs	r3, #1
  4016e4:	e02f      	b.n	401746 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016e6:	687b      	ldr	r3, [r7, #4]
  4016e8:	2b1f      	cmp	r3, #31
  4016ea:	d813      	bhi.n	401714 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016ec:	4b18      	ldr	r3, [pc, #96]	; (401750 <pmc_enable_periph_clk+0x7c>)
  4016ee:	699a      	ldr	r2, [r3, #24]
  4016f0:	2101      	movs	r1, #1
  4016f2:	687b      	ldr	r3, [r7, #4]
  4016f4:	fa01 f303 	lsl.w	r3, r1, r3
  4016f8:	401a      	ands	r2, r3
  4016fa:	2101      	movs	r1, #1
  4016fc:	687b      	ldr	r3, [r7, #4]
  4016fe:	fa01 f303 	lsl.w	r3, r1, r3
  401702:	429a      	cmp	r2, r3
  401704:	d01e      	beq.n	401744 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401706:	4a12      	ldr	r2, [pc, #72]	; (401750 <pmc_enable_periph_clk+0x7c>)
  401708:	2101      	movs	r1, #1
  40170a:	687b      	ldr	r3, [r7, #4]
  40170c:	fa01 f303 	lsl.w	r3, r1, r3
  401710:	6113      	str	r3, [r2, #16]
  401712:	e017      	b.n	401744 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401714:	687b      	ldr	r3, [r7, #4]
  401716:	3b20      	subs	r3, #32
  401718:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40171a:	4b0d      	ldr	r3, [pc, #52]	; (401750 <pmc_enable_periph_clk+0x7c>)
  40171c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401720:	2101      	movs	r1, #1
  401722:	687b      	ldr	r3, [r7, #4]
  401724:	fa01 f303 	lsl.w	r3, r1, r3
  401728:	401a      	ands	r2, r3
  40172a:	2101      	movs	r1, #1
  40172c:	687b      	ldr	r3, [r7, #4]
  40172e:	fa01 f303 	lsl.w	r3, r1, r3
  401732:	429a      	cmp	r2, r3
  401734:	d006      	beq.n	401744 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401736:	4a06      	ldr	r2, [pc, #24]	; (401750 <pmc_enable_periph_clk+0x7c>)
  401738:	2101      	movs	r1, #1
  40173a:	687b      	ldr	r3, [r7, #4]
  40173c:	fa01 f303 	lsl.w	r3, r1, r3
  401740:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401744:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401746:	4618      	mov	r0, r3
  401748:	370c      	adds	r7, #12
  40174a:	46bd      	mov	sp, r7
  40174c:	bc80      	pop	{r7}
  40174e:	4770      	bx	lr
  401750:	400e0400 	.word	0x400e0400

00401754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401754:	b480      	push	{r7}
  401756:	b083      	sub	sp, #12
  401758:	af00      	add	r7, sp, #0
  40175a:	4603      	mov	r3, r0
  40175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401762:	2b00      	cmp	r3, #0
  401764:	db0b      	blt.n	40177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401766:	4908      	ldr	r1, [pc, #32]	; (401788 <__NVIC_EnableIRQ+0x34>)
  401768:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40176c:	095b      	lsrs	r3, r3, #5
  40176e:	79fa      	ldrb	r2, [r7, #7]
  401770:	f002 021f 	and.w	r2, r2, #31
  401774:	2001      	movs	r0, #1
  401776:	fa00 f202 	lsl.w	r2, r0, r2
  40177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  40177e:	bf00      	nop
  401780:	370c      	adds	r7, #12
  401782:	46bd      	mov	sp, r7
  401784:	bc80      	pop	{r7}
  401786:	4770      	bx	lr
  401788:	e000e100 	.word	0xe000e100

0040178c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40178c:	b480      	push	{r7}
  40178e:	b083      	sub	sp, #12
  401790:	af00      	add	r7, sp, #0
  401792:	4603      	mov	r3, r0
  401794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401796:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40179a:	2b00      	cmp	r3, #0
  40179c:	db10      	blt.n	4017c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40179e:	490b      	ldr	r1, [pc, #44]	; (4017cc <__NVIC_DisableIRQ+0x40>)
  4017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017a4:	095b      	lsrs	r3, r3, #5
  4017a6:	79fa      	ldrb	r2, [r7, #7]
  4017a8:	f002 021f 	and.w	r2, r2, #31
  4017ac:	2001      	movs	r0, #1
  4017ae:	fa00 f202 	lsl.w	r2, r0, r2
  4017b2:	3320      	adds	r3, #32
  4017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4017b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  4017c0:	bf00      	nop
  4017c2:	370c      	adds	r7, #12
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bc80      	pop	{r7}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	e000e100 	.word	0xe000e100

004017d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4017d0:	b480      	push	{r7}
  4017d2:	b083      	sub	sp, #12
  4017d4:	af00      	add	r7, sp, #0
  4017d6:	4603      	mov	r3, r0
  4017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017de:	2b00      	cmp	r3, #0
  4017e0:	db0c      	blt.n	4017fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017e2:	4909      	ldr	r1, [pc, #36]	; (401808 <__NVIC_ClearPendingIRQ+0x38>)
  4017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017e8:	095b      	lsrs	r3, r3, #5
  4017ea:	79fa      	ldrb	r2, [r7, #7]
  4017ec:	f002 021f 	and.w	r2, r2, #31
  4017f0:	2001      	movs	r0, #1
  4017f2:	fa00 f202 	lsl.w	r2, r0, r2
  4017f6:	3360      	adds	r3, #96	; 0x60
  4017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4017fc:	bf00      	nop
  4017fe:	370c      	adds	r7, #12
  401800:	46bd      	mov	sp, r7
  401802:	bc80      	pop	{r7}
  401804:	4770      	bx	lr
  401806:	bf00      	nop
  401808:	e000e100 	.word	0xe000e100

0040180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40180c:	b480      	push	{r7}
  40180e:	b083      	sub	sp, #12
  401810:	af00      	add	r7, sp, #0
  401812:	4603      	mov	r3, r0
  401814:	6039      	str	r1, [r7, #0]
  401816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401818:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40181c:	2b00      	cmp	r3, #0
  40181e:	db0a      	blt.n	401836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401820:	490d      	ldr	r1, [pc, #52]	; (401858 <__NVIC_SetPriority+0x4c>)
  401822:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401826:	683a      	ldr	r2, [r7, #0]
  401828:	b2d2      	uxtb	r2, r2
  40182a:	0112      	lsls	r2, r2, #4
  40182c:	b2d2      	uxtb	r2, r2
  40182e:	440b      	add	r3, r1
  401830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  401834:	e00a      	b.n	40184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401836:	4909      	ldr	r1, [pc, #36]	; (40185c <__NVIC_SetPriority+0x50>)
  401838:	79fb      	ldrb	r3, [r7, #7]
  40183a:	f003 030f 	and.w	r3, r3, #15
  40183e:	3b04      	subs	r3, #4
  401840:	683a      	ldr	r2, [r7, #0]
  401842:	b2d2      	uxtb	r2, r2
  401844:	0112      	lsls	r2, r2, #4
  401846:	b2d2      	uxtb	r2, r2
  401848:	440b      	add	r3, r1
  40184a:	761a      	strb	r2, [r3, #24]
}
  40184c:	bf00      	nop
  40184e:	370c      	adds	r7, #12
  401850:	46bd      	mov	sp, r7
  401852:	bc80      	pop	{r7}
  401854:	4770      	bx	lr
  401856:	bf00      	nop
  401858:	e000e100 	.word	0xe000e100
  40185c:	e000ed00 	.word	0xe000ed00

00401860 <osc_get_rate>:
{
  401860:	b480      	push	{r7}
  401862:	b083      	sub	sp, #12
  401864:	af00      	add	r7, sp, #0
  401866:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401868:	687b      	ldr	r3, [r7, #4]
  40186a:	2b07      	cmp	r3, #7
  40186c:	d825      	bhi.n	4018ba <osc_get_rate+0x5a>
  40186e:	a201      	add	r2, pc, #4	; (adr r2, 401874 <osc_get_rate+0x14>)
  401870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401874:	00401895 	.word	0x00401895
  401878:	0040189b 	.word	0x0040189b
  40187c:	004018a1 	.word	0x004018a1
  401880:	004018a7 	.word	0x004018a7
  401884:	004018ab 	.word	0x004018ab
  401888:	004018af 	.word	0x004018af
  40188c:	004018b3 	.word	0x004018b3
  401890:	004018b7 	.word	0x004018b7
		return OSC_SLCK_32K_RC_HZ;
  401894:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401898:	e010      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40189a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40189e:	e00d      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4018a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018a4:	e00a      	b.n	4018bc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4018a6:	4b08      	ldr	r3, [pc, #32]	; (4018c8 <osc_get_rate+0x68>)
  4018a8:	e008      	b.n	4018bc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4018aa:	4b08      	ldr	r3, [pc, #32]	; (4018cc <osc_get_rate+0x6c>)
  4018ac:	e006      	b.n	4018bc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4018ae:	4b08      	ldr	r3, [pc, #32]	; (4018d0 <osc_get_rate+0x70>)
  4018b0:	e004      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4018b2:	4b07      	ldr	r3, [pc, #28]	; (4018d0 <osc_get_rate+0x70>)
  4018b4:	e002      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4018b6:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <osc_get_rate+0x70>)
  4018b8:	e000      	b.n	4018bc <osc_get_rate+0x5c>
	return 0;
  4018ba:	2300      	movs	r3, #0
}
  4018bc:	4618      	mov	r0, r3
  4018be:	370c      	adds	r7, #12
  4018c0:	46bd      	mov	sp, r7
  4018c2:	bc80      	pop	{r7}
  4018c4:	4770      	bx	lr
  4018c6:	bf00      	nop
  4018c8:	003d0900 	.word	0x003d0900
  4018cc:	007a1200 	.word	0x007a1200
  4018d0:	00b71b00 	.word	0x00b71b00

004018d4 <sysclk_get_main_hz>:
{
  4018d4:	b580      	push	{r7, lr}
  4018d6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4018d8:	2006      	movs	r0, #6
  4018da:	4b04      	ldr	r3, [pc, #16]	; (4018ec <sysclk_get_main_hz+0x18>)
  4018dc:	4798      	blx	r3
  4018de:	4602      	mov	r2, r0
  4018e0:	4613      	mov	r3, r2
  4018e2:	009b      	lsls	r3, r3, #2
  4018e4:	4413      	add	r3, r2
  4018e6:	009b      	lsls	r3, r3, #2
}
  4018e8:	4618      	mov	r0, r3
  4018ea:	bd80      	pop	{r7, pc}
  4018ec:	00401861 	.word	0x00401861

004018f0 <sysclk_get_cpu_hz>:
{
  4018f0:	b580      	push	{r7, lr}
  4018f2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4018f4:	4b02      	ldr	r3, [pc, #8]	; (401900 <sysclk_get_cpu_hz+0x10>)
  4018f6:	4798      	blx	r3
  4018f8:	4603      	mov	r3, r0
  4018fa:	085b      	lsrs	r3, r3, #1
}
  4018fc:	4618      	mov	r0, r3
  4018fe:	bd80      	pop	{r7, pc}
  401900:	004018d5 	.word	0x004018d5

00401904 <vsync_handler>:

volatile uint32_t vsync_flag = false;
int IMG_LENGTH = 0 ;

void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401904:	b480      	push	{r7}
  401906:	b083      	sub	sp, #12
  401908:	af00      	add	r7, sp, #0
  40190a:	6078      	str	r0, [r7, #4]
  40190c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	vsync_flag = true;
  40190e:	4b04      	ldr	r3, [pc, #16]	; (401920 <vsync_handler+0x1c>)
  401910:	2201      	movs	r2, #1
  401912:	601a      	str	r2, [r3, #0]
}
  401914:	bf00      	nop
  401916:	370c      	adds	r7, #12
  401918:	46bd      	mov	sp, r7
  40191a:	bc80      	pop	{r7}
  40191c:	4770      	bx	lr
  40191e:	bf00      	nop
  401920:	20000a5c 	.word	0x20000a5c

00401924 <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  401924:	b590      	push	{r4, r7, lr}
  401926:	b083      	sub	sp, #12
  401928:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(CAM_VSYNC_ID);
  40192a:	200b      	movs	r0, #11
  40192c:	4b0b      	ldr	r3, [pc, #44]	; (40195c <init_vsync_interrupts+0x38>)
  40192e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(CAM_VSYNC_PIO, CAM_VSYNC_ID, CAM_VSYNC_MASK,
  401930:	4b0b      	ldr	r3, [pc, #44]	; (401960 <init_vsync_interrupts+0x3c>)
  401932:	9300      	str	r3, [sp, #0]
  401934:	2301      	movs	r3, #1
  401936:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40193a:	210b      	movs	r1, #11
  40193c:	4809      	ldr	r0, [pc, #36]	; (401964 <init_vsync_interrupts+0x40>)
  40193e:	4c0a      	ldr	r4, [pc, #40]	; (401968 <init_vsync_interrupts+0x44>)
  401940:	47a0      	blx	r4
			CAM_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)CAM_VSYNC_ID);
  401942:	200b      	movs	r0, #11
  401944:	4b09      	ldr	r3, [pc, #36]	; (40196c <init_vsync_interrupts+0x48>)
  401946:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(CAM_VSYNC_PIO, CAM_VSYNC_MASK);
  401948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40194c:	4805      	ldr	r0, [pc, #20]	; (401964 <init_vsync_interrupts+0x40>)
  40194e:	4b08      	ldr	r3, [pc, #32]	; (401970 <init_vsync_interrupts+0x4c>)
  401950:	4798      	blx	r3
}
  401952:	bf00      	nop
  401954:	3704      	adds	r7, #4
  401956:	46bd      	mov	sp, r7
  401958:	bd90      	pop	{r4, r7, pc}
  40195a:	bf00      	nop
  40195c:	004016d5 	.word	0x004016d5
  401960:	00401905 	.word	0x00401905
  401964:	400e0e00 	.word	0x400e0e00
  401968:	00400aa9 	.word	0x00400aa9
  40196c:	00401755 	.word	0x00401755
  401970:	004011ab 	.word	0x004011ab

00401974 <pio_capture_init>:



void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  401974:	b580      	push	{r7, lr}
  401976:	b082      	sub	sp, #8
  401978:	af00      	add	r7, sp, #0
  40197a:	6078      	str	r0, [r7, #4]
  40197c:	6039      	str	r1, [r7, #0]
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  40197e:	6838      	ldr	r0, [r7, #0]
  401980:	4b1a      	ldr	r3, [pc, #104]	; (4019ec <pio_capture_init+0x78>)
  401982:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  401984:	687b      	ldr	r3, [r7, #4]
  401986:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40198a:	f023 0201 	bic.w	r2, r3, #1
  40198e:	687b      	ldr	r3, [r7, #4]
  401990:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  401994:	687b      	ldr	r3, [r7, #4]
  401996:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  40199a:	f043 0208 	orr.w	r2, r3, #8
  40199e:	687b      	ldr	r3, [r7, #4]
  4019a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  4019ae:	687b      	ldr	r3, [r7, #4]
  4019b0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4019b4:	687b      	ldr	r3, [r7, #4]
  4019b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019ba:	f043 0220 	orr.w	r2, r3, #32
  4019be:	687b      	ldr	r3, [r7, #4]
  4019c0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4019c4:	687b      	ldr	r3, [r7, #4]
  4019c6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019ca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4019d4:	687b      	ldr	r3, [r7, #4]
  4019d6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  4019de:	687b      	ldr	r3, [r7, #4]
  4019e0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	//#if !defined(DEFAULT_MODE_COLORED)
	///* Samples only data with even index */
	//p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
	//p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
	//#endif
}
  4019e4:	bf00      	nop
  4019e6:	3708      	adds	r7, #8
  4019e8:	46bd      	mov	sp, r7
  4019ea:	bd80      	pop	{r7, pc}
  4019ec:	004016d5 	.word	0x004016d5

004019f0 <pio_capture_to_buffer>:

uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
uint32_t ul_size)
{
  4019f0:	b480      	push	{r7}
  4019f2:	b085      	sub	sp, #20
  4019f4:	af00      	add	r7, sp, #0
  4019f6:	60f8      	str	r0, [r7, #12]
  4019f8:	60b9      	str	r1, [r7, #8]
  4019fa:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  4019fc:	68fb      	ldr	r3, [r7, #12]
  4019fe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  401a02:	2b00      	cmp	r3, #0
  401a04:	d112      	bne.n	401a2c <pio_capture_to_buffer+0x3c>
  401a06:	68fb      	ldr	r3, [r7, #12]
  401a08:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401a0c:	2b00      	cmp	r3, #0
  401a0e:	d10d      	bne.n	401a2c <pio_capture_to_buffer+0x3c>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  401a10:	68ba      	ldr	r2, [r7, #8]
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  401a18:	68fb      	ldr	r3, [r7, #12]
  401a1a:	687a      	ldr	r2, [r7, #4]
  401a1c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	2201      	movs	r2, #1
  401a24:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  401a28:	2301      	movs	r3, #1
  401a2a:	e00f      	b.n	401a4c <pio_capture_to_buffer+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  401a2c:	68fb      	ldr	r3, [r7, #12]
  401a2e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401a32:	2b00      	cmp	r3, #0
  401a34:	d109      	bne.n	401a4a <pio_capture_to_buffer+0x5a>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  401a36:	68ba      	ldr	r2, [r7, #8]
  401a38:	68fb      	ldr	r3, [r7, #12]
  401a3a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  401a3e:	68fb      	ldr	r3, [r7, #12]
  401a40:	687a      	ldr	r2, [r7, #4]
  401a42:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  401a46:	2301      	movs	r3, #1
  401a48:	e000      	b.n	401a4c <pio_capture_to_buffer+0x5c>
		} else {
		return 0;
  401a4a:	2300      	movs	r3, #0
	}
}
  401a4c:	4618      	mov	r0, r3
  401a4e:	3714      	adds	r7, #20
  401a50:	46bd      	mov	sp, r7
  401a52:	bc80      	pop	{r7}
  401a54:	4770      	bx	lr
	...

00401a58 <init_camera>:

void init_camera(void)
{
  401a58:	b580      	push	{r7, lr}
  401a5a:	af00      	add	r7, sp, #0

	/* Init Vsync handler*/
	init_vsync_interrupts();
  401a5c:	4b24      	ldr	r3, [pc, #144]	; (401af0 <init_camera+0x98>)
  401a5e:	4798      	blx	r3

	/* Init PIO capture*/
	pio_capture_init(CAM_DATA_BUS_PIO, CAM_DATA_BUS_ID);
  401a60:	210b      	movs	r1, #11
  401a62:	4824      	ldr	r0, [pc, #144]	; (401af4 <init_camera+0x9c>)
  401a64:	4b24      	ldr	r3, [pc, #144]	; (401af8 <init_camera+0xa0>)
  401a66:	4798      	blx	r3

	/* Init PCK1 to work at 24 Mhz */
	/* 96/4= 24 Mhz */
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLB_CLK);
  401a68:	4b24      	ldr	r3, [pc, #144]	; (401afc <init_camera+0xa4>)
  401a6a:	2223      	movs	r2, #35	; 0x23
  401a6c:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  401a6e:	4b23      	ldr	r3, [pc, #140]	; (401afc <init_camera+0xa4>)
  401a70:	f44f 7200 	mov.w	r2, #512	; 0x200
  401a74:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {
  401a76:	bf00      	nop
  401a78:	4b20      	ldr	r3, [pc, #128]	; (401afc <init_camera+0xa4>)
  401a7a:	689b      	ldr	r3, [r3, #8]
  401a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401a80:	2b00      	cmp	r3, #0
  401a82:	d0f9      	beq.n	401a78 <init_camera+0x20>
	}
	
	// Enable & Configure PClock
	pmc_enable_pllbck(7,0x1,1); /* PLLA work at 96 Mhz */
  401a84:	2201      	movs	r2, #1
  401a86:	2101      	movs	r1, #1
  401a88:	2007      	movs	r0, #7
  401a8a:	4b1d      	ldr	r3, [pc, #116]	; (401b00 <init_camera+0xa8>)
  401a8c:	4798      	blx	r3
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401a8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401a92:	2011      	movs	r0, #17
  401a94:	4b1b      	ldr	r3, [pc, #108]	; (401b04 <init_camera+0xac>)
  401a96:	4798      	blx	r3
	
	/* Configure Image sensor pins */
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401a98:	2171      	movs	r1, #113	; 0x71
  401a9a:	2010      	movs	r0, #16
  401a9c:	4b19      	ldr	r3, [pc, #100]	; (401b04 <init_camera+0xac>)
  401a9e:	4798      	blx	r3
	gpio_configure_pin(CAM_VSYNC_GPIO, CAM_VSYNC_FLAGS);
  401aa0:	2171      	movs	r1, #113	; 0x71
  401aa2:	200f      	movs	r0, #15
  401aa4:	4b17      	ldr	r3, [pc, #92]	; (401b04 <init_camera+0xac>)
  401aa6:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D0, CAM_DATA_BUS_FLAGS);
  401aa8:	4917      	ldr	r1, [pc, #92]	; (401b08 <init_camera+0xb0>)
  401aaa:	2018      	movs	r0, #24
  401aac:	4b15      	ldr	r3, [pc, #84]	; (401b04 <init_camera+0xac>)
  401aae:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D1, CAM_DATA_BUS_FLAGS);
  401ab0:	4915      	ldr	r1, [pc, #84]	; (401b08 <init_camera+0xb0>)
  401ab2:	2019      	movs	r0, #25
  401ab4:	4b13      	ldr	r3, [pc, #76]	; (401b04 <init_camera+0xac>)
  401ab6:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D2, CAM_DATA_BUS_FLAGS);
  401ab8:	4913      	ldr	r1, [pc, #76]	; (401b08 <init_camera+0xb0>)
  401aba:	201a      	movs	r0, #26
  401abc:	4b11      	ldr	r3, [pc, #68]	; (401b04 <init_camera+0xac>)
  401abe:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D3, CAM_DATA_BUS_FLAGS);
  401ac0:	4911      	ldr	r1, [pc, #68]	; (401b08 <init_camera+0xb0>)
  401ac2:	201b      	movs	r0, #27
  401ac4:	4b0f      	ldr	r3, [pc, #60]	; (401b04 <init_camera+0xac>)
  401ac6:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D4, CAM_DATA_BUS_FLAGS);
  401ac8:	490f      	ldr	r1, [pc, #60]	; (401b08 <init_camera+0xb0>)
  401aca:	201c      	movs	r0, #28
  401acc:	4b0d      	ldr	r3, [pc, #52]	; (401b04 <init_camera+0xac>)
  401ace:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D5, CAM_DATA_BUS_FLAGS);
  401ad0:	490d      	ldr	r1, [pc, #52]	; (401b08 <init_camera+0xb0>)
  401ad2:	201d      	movs	r0, #29
  401ad4:	4b0b      	ldr	r3, [pc, #44]	; (401b04 <init_camera+0xac>)
  401ad6:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D6, CAM_DATA_BUS_FLAGS);
  401ad8:	490b      	ldr	r1, [pc, #44]	; (401b08 <init_camera+0xb0>)
  401ada:	201e      	movs	r0, #30
  401adc:	4b09      	ldr	r3, [pc, #36]	; (401b04 <init_camera+0xac>)
  401ade:	4798      	blx	r3
	gpio_configure_pin(CAM_DATA_BUS_D7, CAM_DATA_BUS_FLAGS);
  401ae0:	4909      	ldr	r1, [pc, #36]	; (401b08 <init_camera+0xb0>)
  401ae2:	201f      	movs	r0, #31
  401ae4:	4b07      	ldr	r3, [pc, #28]	; (401b04 <init_camera+0xac>)
  401ae6:	4798      	blx	r3

	configure_twi();
  401ae8:	4b08      	ldr	r3, [pc, #32]	; (401b0c <init_camera+0xb4>)
  401aea:	4798      	blx	r3

}
  401aec:	bf00      	nop
  401aee:	bd80      	pop	{r7, pc}
  401af0:	00401925 	.word	0x00401925
  401af4:	400e0e00 	.word	0x400e0e00
  401af8:	00401975 	.word	0x00401975
  401afc:	400e0400 	.word	0x400e0400
  401b00:	00401655 	.word	0x00401655
  401b04:	0040120d 	.word	0x0040120d
  401b08:	28000001 	.word	0x28000001
  401b0c:	00401b11 	.word	0x00401b11

00401b10 <configure_twi>:

void configure_twi(void){
  401b10:	b580      	push	{r7, lr}
  401b12:	b084      	sub	sp, #16
  401b14:	af00      	add	r7, sp, #0
	twi_options_t opt;
	
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  401b16:	2013      	movs	r0, #19
  401b18:	4b13      	ldr	r3, [pc, #76]	; (401b68 <configure_twi+0x58>)
  401b1a:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401b1c:	4b13      	ldr	r3, [pc, #76]	; (401b6c <configure_twi+0x5c>)
  401b1e:	4798      	blx	r3
  401b20:	4603      	mov	r3, r0
  401b22:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  401b24:	4b12      	ldr	r3, [pc, #72]	; (401b70 <configure_twi+0x60>)
  401b26:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  401b28:	1d3b      	adds	r3, r7, #4
  401b2a:	4619      	mov	r1, r3
  401b2c:	4811      	ldr	r0, [pc, #68]	; (401b74 <configure_twi+0x64>)
  401b2e:	4b12      	ldr	r3, [pc, #72]	; (401b78 <configure_twi+0x68>)
  401b30:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  401b32:	2013      	movs	r0, #19
  401b34:	4b11      	ldr	r3, [pc, #68]	; (401b7c <configure_twi+0x6c>)
  401b36:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  401b38:	2013      	movs	r0, #19
  401b3a:	4b11      	ldr	r3, [pc, #68]	; (401b80 <configure_twi+0x70>)
  401b3c:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  401b3e:	2100      	movs	r1, #0
  401b40:	2013      	movs	r0, #19
  401b42:	4b10      	ldr	r3, [pc, #64]	; (401b84 <configure_twi+0x74>)
  401b44:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  401b46:	2013      	movs	r0, #19
  401b48:	4b0f      	ldr	r3, [pc, #60]	; (401b88 <configure_twi+0x78>)
  401b4a:	4798      	blx	r3
		
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401b4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b50:	2003      	movs	r0, #3
  401b52:	4b0e      	ldr	r3, [pc, #56]	; (401b8c <configure_twi+0x7c>)
  401b54:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401b56:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b5a:	2004      	movs	r0, #4
  401b5c:	4b0b      	ldr	r3, [pc, #44]	; (401b8c <configure_twi+0x7c>)
  401b5e:	4798      	blx	r3
}
  401b60:	bf00      	nop
  401b62:	3710      	adds	r7, #16
  401b64:	46bd      	mov	sp, r7
  401b66:	bd80      	pop	{r7, pc}
  401b68:	004016d5 	.word	0x004016d5
  401b6c:	004018f1 	.word	0x004018f1
  401b70:	00061a80 	.word	0x00061a80
  401b74:	40018000 	.word	0x40018000
  401b78:	004002c5 	.word	0x004002c5
  401b7c:	0040178d 	.word	0x0040178d
  401b80:	004017d1 	.word	0x004017d1
  401b84:	0040180d 	.word	0x0040180d
  401b88:	00401755 	.word	0x00401755
  401b8c:	0040120d 	.word	0x0040120d

00401b90 <configure_camera>:

void configure_camera(void){
  401b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b94:	af00      	add	r7, sp, #0
	/* ov2640 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  401b96:	bf00      	nop
  401b98:	482c      	ldr	r0, [pc, #176]	; (401c4c <configure_camera+0xbc>)
  401b9a:	4b2d      	ldr	r3, [pc, #180]	; (401c50 <configure_camera+0xc0>)
  401b9c:	4798      	blx	r3
  401b9e:	4603      	mov	r3, r0
  401ba0:	2b01      	cmp	r3, #1
  401ba2:	d0f9      	beq.n	401b98 <configure_camera+0x8>
	}

	/* ov2640 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  401ba4:	2100      	movs	r1, #0
  401ba6:	4829      	ldr	r0, [pc, #164]	; (401c4c <configure_camera+0xbc>)
  401ba8:	4b2a      	ldr	r3, [pc, #168]	; (401c54 <configure_camera+0xc4>)
  401baa:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);//QVGA_YUV422_20FPS);
  401bac:	2101      	movs	r1, #1
  401bae:	4827      	ldr	r0, [pc, #156]	; (401c4c <configure_camera+0xbc>)
  401bb0:	4b28      	ldr	r3, [pc, #160]	; (401c54 <configure_camera+0xc4>)
  401bb2:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  401bb4:	2102      	movs	r1, #2
  401bb6:	4825      	ldr	r0, [pc, #148]	; (401c4c <configure_camera+0xbc>)
  401bb8:	4b26      	ldr	r3, [pc, #152]	; (401c54 <configure_camera+0xc4>)
  401bba:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_320x240);
  401bbc:	2103      	movs	r1, #3
  401bbe:	4823      	ldr	r0, [pc, #140]	; (401c4c <configure_camera+0xbc>)
  401bc0:	4b24      	ldr	r3, [pc, #144]	; (401c54 <configure_camera+0xc4>)
  401bc2:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  401bc4:	4b24      	ldr	r3, [pc, #144]	; (401c58 <configure_camera+0xc8>)
  401bc6:	4798      	blx	r3
  401bc8:	4603      	mov	r3, r0
  401bca:	4619      	mov	r1, r3
  401bcc:	f04f 0200 	mov.w	r2, #0
  401bd0:	460b      	mov	r3, r1
  401bd2:	4614      	mov	r4, r2
  401bd4:	18db      	adds	r3, r3, r3
  401bd6:	eb44 0404 	adc.w	r4, r4, r4
  401bda:	185b      	adds	r3, r3, r1
  401bdc:	eb44 0402 	adc.w	r4, r4, r2
  401be0:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  401be4:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  401be8:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  401bec:	4653      	mov	r3, sl
  401bee:	465c      	mov	r4, fp
  401bf0:	1a5b      	subs	r3, r3, r1
  401bf2:	eb64 0402 	sbc.w	r4, r4, r2
  401bf6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401bfa:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401bfe:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401c02:	4643      	mov	r3, r8
  401c04:	464c      	mov	r4, r9
  401c06:	1a5b      	subs	r3, r3, r1
  401c08:	eb64 0402 	sbc.w	r4, r4, r2
  401c0c:	00e6      	lsls	r6, r4, #3
  401c0e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401c12:	00dd      	lsls	r5, r3, #3
  401c14:	462b      	mov	r3, r5
  401c16:	4634      	mov	r4, r6
  401c18:	4619      	mov	r1, r3
  401c1a:	4622      	mov	r2, r4
  401c1c:	f243 63af 	movw	r3, #13999	; 0x36af
  401c20:	f04f 0400 	mov.w	r4, #0
  401c24:	18cd      	adds	r5, r1, r3
  401c26:	eb42 0604 	adc.w	r6, r2, r4
  401c2a:	4628      	mov	r0, r5
  401c2c:	4631      	mov	r1, r6
  401c2e:	4c0b      	ldr	r4, [pc, #44]	; (401c5c <configure_camera+0xcc>)
  401c30:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401c34:	f04f 0300 	mov.w	r3, #0
  401c38:	47a0      	blx	r4
  401c3a:	4603      	mov	r3, r0
  401c3c:	460c      	mov	r4, r1
  401c3e:	4618      	mov	r0, r3
  401c40:	4b07      	ldr	r3, [pc, #28]	; (401c60 <configure_camera+0xd0>)
  401c42:	4798      	blx	r3
}
  401c44:	bf00      	nop
  401c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c4a:	bf00      	nop
  401c4c:	40018000 	.word	0x40018000
  401c50:	00402111 	.word	0x00402111
  401c54:	0040219d 	.word	0x0040219d
  401c58:	004018f1 	.word	0x004018f1
  401c5c:	00403349 	.word	0x00403349
  401c60:	20000001 	.word	0x20000001

00401c64 <start_capture>:


uint8_t start_capture(void)
{
  401c64:	b580      	push	{r7, lr}
  401c66:	af00      	add	r7, sp, #0
	/* Enable vsync interrupt*/
	pio_enable_interrupt(CAM_VSYNC_PIO, CAM_VSYNC_MASK);
  401c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c6c:	4816      	ldr	r0, [pc, #88]	; (401cc8 <start_capture+0x64>)
  401c6e:	4b17      	ldr	r3, [pc, #92]	; (401ccc <start_capture+0x68>)
  401c70:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!vsync_flag) {
  401c72:	bf00      	nop
  401c74:	4b16      	ldr	r3, [pc, #88]	; (401cd0 <start_capture+0x6c>)
  401c76:	681b      	ldr	r3, [r3, #0]
  401c78:	2b00      	cmp	r3, #0
  401c7a:	d0fb      	beq.n	401c74 <start_capture+0x10>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(CAM_VSYNC_PIO, CAM_VSYNC_MASK);
  401c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c80:	4811      	ldr	r0, [pc, #68]	; (401cc8 <start_capture+0x64>)
  401c82:	4b14      	ldr	r3, [pc, #80]	; (401cd4 <start_capture+0x70>)
  401c84:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(CAM_DATA_BUS_PIO);
  401c86:	4810      	ldr	r0, [pc, #64]	; (401cc8 <start_capture+0x64>)
  401c88:	4b13      	ldr	r3, [pc, #76]	; (401cd8 <start_capture+0x74>)
  401c8a:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(CAM_DATA_BUS_PIO, IMG_BUFFER,
  401c8c:	f246 12a8 	movw	r2, #25000	; 0x61a8
  401c90:	4912      	ldr	r1, [pc, #72]	; (401cdc <start_capture+0x78>)
  401c92:	480d      	ldr	r0, [pc, #52]	; (401cc8 <start_capture+0x64>)
  401c94:	4b12      	ldr	r3, [pc, #72]	; (401ce0 <start_capture+0x7c>)
  401c96:	4798      	blx	r3
			(IMG_PRED_SIZE)>>2);

	/* Wait end of capture*/
	while (!((CAM_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  401c98:	bf00      	nop
  401c9a:	4b0b      	ldr	r3, [pc, #44]	; (401cc8 <start_capture+0x64>)
  401c9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401ca0:	f003 0308 	and.w	r3, r3, #8
  401ca4:	2b08      	cmp	r3, #8
  401ca6:	d1f8      	bne.n	401c9a <start_capture+0x36>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(CAM_DATA_BUS_PIO);
  401ca8:	4807      	ldr	r0, [pc, #28]	; (401cc8 <start_capture+0x64>)
  401caa:	4b0e      	ldr	r3, [pc, #56]	; (401ce4 <start_capture+0x80>)
  401cac:	4798      	blx	r3

	/* Reset vsync flag*/
	vsync_flag = false;
  401cae:	4b08      	ldr	r3, [pc, #32]	; (401cd0 <start_capture+0x6c>)
  401cb0:	2200      	movs	r2, #0
  401cb2:	601a      	str	r2, [r3, #0]
	
	if(find_image_len()){
  401cb4:	4b0c      	ldr	r3, [pc, #48]	; (401ce8 <start_capture+0x84>)
  401cb6:	4798      	blx	r3
  401cb8:	4603      	mov	r3, r0
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d001      	beq.n	401cc2 <start_capture+0x5e>
		return 1;
  401cbe:	2301      	movs	r3, #1
  401cc0:	e000      	b.n	401cc4 <start_capture+0x60>
	}
	else{
		return 0;
  401cc2:	2300      	movs	r3, #0
	}
	
}
  401cc4:	4618      	mov	r0, r3
  401cc6:	bd80      	pop	{r7, pc}
  401cc8:	400e0e00 	.word	0x400e0e00
  401ccc:	004011ab 	.word	0x004011ab
  401cd0:	20000a5c 	.word	0x20000a5c
  401cd4:	004011c5 	.word	0x004011c5
  401cd8:	004013e1 	.word	0x004013e1
  401cdc:	20000ab8 	.word	0x20000ab8
  401ce0:	004019f1 	.word	0x004019f1
  401ce4:	0040140d 	.word	0x0040140d
  401ce8:	00401ced 	.word	0x00401ced

00401cec <find_image_len>:

uint8_t find_image_len(void){ 
  401cec:	b480      	push	{r7}
  401cee:	af00      	add	r7, sp, #0
	IMG_START = 0;
  401cf0:	4b2b      	ldr	r3, [pc, #172]	; (401da0 <find_image_len+0xb4>)
  401cf2:	2200      	movs	r2, #0
  401cf4:	601a      	str	r2, [r3, #0]
	while (IMG_START<IMG_PRED_SIZE){
  401cf6:	e011      	b.n	401d1c <find_image_len+0x30>
		if ((IMG_BUFFER[IMG_START] == 0xFF) && (IMG_BUFFER[IMG_START+1] == 0xD8)){
  401cf8:	4b29      	ldr	r3, [pc, #164]	; (401da0 <find_image_len+0xb4>)
  401cfa:	681b      	ldr	r3, [r3, #0]
  401cfc:	4a29      	ldr	r2, [pc, #164]	; (401da4 <find_image_len+0xb8>)
  401cfe:	5cd3      	ldrb	r3, [r2, r3]
  401d00:	2bff      	cmp	r3, #255	; 0xff
  401d02:	d106      	bne.n	401d12 <find_image_len+0x26>
  401d04:	4b26      	ldr	r3, [pc, #152]	; (401da0 <find_image_len+0xb4>)
  401d06:	681b      	ldr	r3, [r3, #0]
  401d08:	3301      	adds	r3, #1
  401d0a:	4a26      	ldr	r2, [pc, #152]	; (401da4 <find_image_len+0xb8>)
  401d0c:	5cd3      	ldrb	r3, [r2, r3]
  401d0e:	2bd8      	cmp	r3, #216	; 0xd8
  401d10:	d00a      	beq.n	401d28 <find_image_len+0x3c>
			break;
		}
		IMG_START++; //Start recording how many bytes until the end of image
  401d12:	4b23      	ldr	r3, [pc, #140]	; (401da0 <find_image_len+0xb4>)
  401d14:	681b      	ldr	r3, [r3, #0]
  401d16:	3301      	adds	r3, #1
  401d18:	4a21      	ldr	r2, [pc, #132]	; (401da0 <find_image_len+0xb4>)
  401d1a:	6013      	str	r3, [r2, #0]
	while (IMG_START<IMG_PRED_SIZE){
  401d1c:	4b20      	ldr	r3, [pc, #128]	; (401da0 <find_image_len+0xb4>)
  401d1e:	681b      	ldr	r3, [r3, #0]
  401d20:	4a21      	ldr	r2, [pc, #132]	; (401da8 <find_image_len+0xbc>)
  401d22:	4293      	cmp	r3, r2
  401d24:	dde8      	ble.n	401cf8 <find_image_len+0xc>
  401d26:	e000      	b.n	401d2a <find_image_len+0x3e>
			break;
  401d28:	bf00      	nop
	}
	if (IMG_START==IMG_PRED_SIZE){
  401d2a:	4b1d      	ldr	r3, [pc, #116]	; (401da0 <find_image_len+0xb4>)
  401d2c:	681b      	ldr	r3, [r3, #0]
  401d2e:	4a1f      	ldr	r2, [pc, #124]	; (401dac <find_image_len+0xc0>)
  401d30:	4293      	cmp	r3, r2
  401d32:	d101      	bne.n	401d38 <find_image_len+0x4c>
		return 0;
  401d34:	2300      	movs	r3, #0
  401d36:	e02e      	b.n	401d96 <find_image_len+0xaa>
	}
	IMG_END = IMG_START+2;
  401d38:	4b19      	ldr	r3, [pc, #100]	; (401da0 <find_image_len+0xb4>)
  401d3a:	681b      	ldr	r3, [r3, #0]
  401d3c:	3302      	adds	r3, #2
  401d3e:	4a1c      	ldr	r2, [pc, #112]	; (401db0 <find_image_len+0xc4>)
  401d40:	6013      	str	r3, [r2, #0]
	while (IMG_END<IMG_PRED_SIZE){
  401d42:	e011      	b.n	401d68 <find_image_len+0x7c>
		if ((IMG_BUFFER[IMG_END] == 0xFF) && (IMG_BUFFER[IMG_END+1] == 0xD9)){
  401d44:	4b1a      	ldr	r3, [pc, #104]	; (401db0 <find_image_len+0xc4>)
  401d46:	681b      	ldr	r3, [r3, #0]
  401d48:	4a16      	ldr	r2, [pc, #88]	; (401da4 <find_image_len+0xb8>)
  401d4a:	5cd3      	ldrb	r3, [r2, r3]
  401d4c:	2bff      	cmp	r3, #255	; 0xff
  401d4e:	d106      	bne.n	401d5e <find_image_len+0x72>
  401d50:	4b17      	ldr	r3, [pc, #92]	; (401db0 <find_image_len+0xc4>)
  401d52:	681b      	ldr	r3, [r3, #0]
  401d54:	3301      	adds	r3, #1
  401d56:	4a13      	ldr	r2, [pc, #76]	; (401da4 <find_image_len+0xb8>)
  401d58:	5cd3      	ldrb	r3, [r2, r3]
  401d5a:	2bd9      	cmp	r3, #217	; 0xd9
  401d5c:	d00a      	beq.n	401d74 <find_image_len+0x88>
			break;
		}
		IMG_END++;
  401d5e:	4b14      	ldr	r3, [pc, #80]	; (401db0 <find_image_len+0xc4>)
  401d60:	681b      	ldr	r3, [r3, #0]
  401d62:	3301      	adds	r3, #1
  401d64:	4a12      	ldr	r2, [pc, #72]	; (401db0 <find_image_len+0xc4>)
  401d66:	6013      	str	r3, [r2, #0]
	while (IMG_END<IMG_PRED_SIZE){
  401d68:	4b11      	ldr	r3, [pc, #68]	; (401db0 <find_image_len+0xc4>)
  401d6a:	681b      	ldr	r3, [r3, #0]
  401d6c:	4a0e      	ldr	r2, [pc, #56]	; (401da8 <find_image_len+0xbc>)
  401d6e:	4293      	cmp	r3, r2
  401d70:	dde8      	ble.n	401d44 <find_image_len+0x58>
  401d72:	e000      	b.n	401d76 <find_image_len+0x8a>
			break;
  401d74:	bf00      	nop
	}
	if (IMG_END==IMG_PRED_SIZE){
  401d76:	4b0e      	ldr	r3, [pc, #56]	; (401db0 <find_image_len+0xc4>)
  401d78:	681b      	ldr	r3, [r3, #0]
  401d7a:	4a0c      	ldr	r2, [pc, #48]	; (401dac <find_image_len+0xc0>)
  401d7c:	4293      	cmp	r3, r2
  401d7e:	d101      	bne.n	401d84 <find_image_len+0x98>
		return 0;
  401d80:	2300      	movs	r3, #0
  401d82:	e008      	b.n	401d96 <find_image_len+0xaa>
	}
	IMG_LENGTH = IMG_END - IMG_START + 1;
  401d84:	4b0a      	ldr	r3, [pc, #40]	; (401db0 <find_image_len+0xc4>)
  401d86:	681a      	ldr	r2, [r3, #0]
  401d88:	4b05      	ldr	r3, [pc, #20]	; (401da0 <find_image_len+0xb4>)
  401d8a:	681b      	ldr	r3, [r3, #0]
  401d8c:	1ad3      	subs	r3, r2, r3
  401d8e:	3301      	adds	r3, #1
  401d90:	4a08      	ldr	r2, [pc, #32]	; (401db4 <find_image_len+0xc8>)
  401d92:	6013      	str	r3, [r2, #0]
	return 1;
  401d94:	2301      	movs	r3, #1
  401d96:	4618      	mov	r0, r3
  401d98:	46bd      	mov	sp, r7
  401d9a:	bc80      	pop	{r7}
  401d9c:	4770      	bx	lr
  401d9e:	bf00      	nop
  401da0:	20019158 	.word	0x20019158
  401da4:	20000ab8 	.word	0x20000ab8
  401da8:	0001869f 	.word	0x0001869f
  401dac:	000186a0 	.word	0x000186a0
  401db0:	2001915c 	.word	0x2001915c
  401db4:	20000a58 	.word	0x20000a58

00401db8 <osc_get_rate>:
{
  401db8:	b480      	push	{r7}
  401dba:	b083      	sub	sp, #12
  401dbc:	af00      	add	r7, sp, #0
  401dbe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401dc0:	687b      	ldr	r3, [r7, #4]
  401dc2:	2b07      	cmp	r3, #7
  401dc4:	d825      	bhi.n	401e12 <osc_get_rate+0x5a>
  401dc6:	a201      	add	r2, pc, #4	; (adr r2, 401dcc <osc_get_rate+0x14>)
  401dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401dcc:	00401ded 	.word	0x00401ded
  401dd0:	00401df3 	.word	0x00401df3
  401dd4:	00401df9 	.word	0x00401df9
  401dd8:	00401dff 	.word	0x00401dff
  401ddc:	00401e03 	.word	0x00401e03
  401de0:	00401e07 	.word	0x00401e07
  401de4:	00401e0b 	.word	0x00401e0b
  401de8:	00401e0f 	.word	0x00401e0f
		return OSC_SLCK_32K_RC_HZ;
  401dec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401df0:	e010      	b.n	401e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401df6:	e00d      	b.n	401e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401dfc:	e00a      	b.n	401e14 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401dfe:	4b08      	ldr	r3, [pc, #32]	; (401e20 <osc_get_rate+0x68>)
  401e00:	e008      	b.n	401e14 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401e02:	4b08      	ldr	r3, [pc, #32]	; (401e24 <osc_get_rate+0x6c>)
  401e04:	e006      	b.n	401e14 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401e06:	4b08      	ldr	r3, [pc, #32]	; (401e28 <osc_get_rate+0x70>)
  401e08:	e004      	b.n	401e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401e0a:	4b07      	ldr	r3, [pc, #28]	; (401e28 <osc_get_rate+0x70>)
  401e0c:	e002      	b.n	401e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401e0e:	4b06      	ldr	r3, [pc, #24]	; (401e28 <osc_get_rate+0x70>)
  401e10:	e000      	b.n	401e14 <osc_get_rate+0x5c>
	return 0;
  401e12:	2300      	movs	r3, #0
}
  401e14:	4618      	mov	r0, r3
  401e16:	370c      	adds	r7, #12
  401e18:	46bd      	mov	sp, r7
  401e1a:	bc80      	pop	{r7}
  401e1c:	4770      	bx	lr
  401e1e:	bf00      	nop
  401e20:	003d0900 	.word	0x003d0900
  401e24:	007a1200 	.word	0x007a1200
  401e28:	00b71b00 	.word	0x00b71b00

00401e2c <sysclk_get_main_hz>:
{
  401e2c:	b580      	push	{r7, lr}
  401e2e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401e30:	2006      	movs	r0, #6
  401e32:	4b04      	ldr	r3, [pc, #16]	; (401e44 <sysclk_get_main_hz+0x18>)
  401e34:	4798      	blx	r3
  401e36:	4602      	mov	r2, r0
  401e38:	4613      	mov	r3, r2
  401e3a:	009b      	lsls	r3, r3, #2
  401e3c:	4413      	add	r3, r2
  401e3e:	009b      	lsls	r3, r3, #2
}
  401e40:	4618      	mov	r0, r3
  401e42:	bd80      	pop	{r7, pc}
  401e44:	00401db9 	.word	0x00401db9

00401e48 <sysclk_get_cpu_hz>:
{
  401e48:	b580      	push	{r7, lr}
  401e4a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401e4c:	4b02      	ldr	r3, [pc, #8]	; (401e58 <sysclk_get_cpu_hz+0x10>)
  401e4e:	4798      	blx	r3
  401e50:	4603      	mov	r3, r0
  401e52:	085b      	lsrs	r3, r3, #1
}
  401e54:	4618      	mov	r0, r3
  401e56:	bd80      	pop	{r7, pc}
  401e58:	00401e2d 	.word	0x00401e2d

00401e5c <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  401e5c:	b580      	push	{r7, lr}
  401e5e:	b08e      	sub	sp, #56	; 0x38
  401e60:	af00      	add	r7, sp, #0
  401e62:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  401e64:	2300      	movs	r3, #0
  401e66:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  401e68:	2300      	movs	r3, #0
  401e6a:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401e6c:	2330      	movs	r3, #48	; 0x30
  401e6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  401e72:	230a      	movs	r3, #10
  401e74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  401e78:	2301      	movs	r3, #1
  401e7a:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  401e7c:	f107 030c 	add.w	r3, r7, #12
  401e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  401e82:	2301      	movs	r3, #1
  401e84:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  401e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401e8a:	4619      	mov	r1, r3
  401e8c:	6878      	ldr	r0, [r7, #4]
  401e8e:	4b0e      	ldr	r3, [pc, #56]	; (401ec8 <ov_id+0x6c>)
  401e90:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401e92:	2330      	movs	r3, #48	; 0x30
  401e94:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  401e98:	230b      	movs	r3, #11
  401e9a:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401e9c:	2301      	movs	r3, #1
  401e9e:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  401ea0:	f107 0308 	add.w	r3, r7, #8
  401ea4:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  401ea6:	2301      	movs	r3, #1
  401ea8:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  401eaa:	f107 0310 	add.w	r3, r7, #16
  401eae:	4619      	mov	r1, r3
  401eb0:	6878      	ldr	r0, [r7, #4]
  401eb2:	4b05      	ldr	r3, [pc, #20]	; (401ec8 <ov_id+0x6c>)
  401eb4:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  401eb6:	68fb      	ldr	r3, [r7, #12]
  401eb8:	021a      	lsls	r2, r3, #8
  401eba:	68bb      	ldr	r3, [r7, #8]
  401ebc:	4313      	orrs	r3, r2
}
  401ebe:	4618      	mov	r0, r3
  401ec0:	3738      	adds	r7, #56	; 0x38
  401ec2:	46bd      	mov	sp, r7
  401ec4:	bd80      	pop	{r7, pc}
  401ec6:	bf00      	nop
  401ec8:	00401ff5 	.word	0x00401ff5

00401ecc <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  401ecc:	b580      	push	{r7, lr}
  401ece:	b08a      	sub	sp, #40	; 0x28
  401ed0:	af00      	add	r7, sp, #0
  401ed2:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  401ed4:	2300      	movs	r3, #0
  401ed6:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  401ed8:	2300      	movs	r3, #0
  401eda:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  401edc:	231c      	movs	r3, #28
  401ede:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401ee0:	2301      	movs	r3, #1
  401ee2:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401ee4:	2330      	movs	r3, #48	; 0x30
  401ee6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  401eea:	f107 0310 	add.w	r3, r7, #16
  401eee:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401ef0:	2301      	movs	r3, #1
  401ef2:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401ef4:	f107 0314 	add.w	r3, r7, #20
  401ef8:	4619      	mov	r1, r3
  401efa:	6878      	ldr	r0, [r7, #4]
  401efc:	4b10      	ldr	r3, [pc, #64]	; (401f40 <ov_manufacturer+0x74>)
  401efe:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  401f00:	231d      	movs	r3, #29
  401f02:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401f04:	2301      	movs	r3, #1
  401f06:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401f08:	2330      	movs	r3, #48	; 0x30
  401f0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  401f0e:	f107 030c 	add.w	r3, r7, #12
  401f12:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401f14:	2301      	movs	r3, #1
  401f16:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401f18:	f107 0314 	add.w	r3, r7, #20
  401f1c:	4619      	mov	r1, r3
  401f1e:	6878      	ldr	r0, [r7, #4]
  401f20:	4b07      	ldr	r3, [pc, #28]	; (401f40 <ov_manufacturer+0x74>)
  401f22:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  401f24:	693b      	ldr	r3, [r7, #16]
  401f26:	2b7f      	cmp	r3, #127	; 0x7f
  401f28:	d104      	bne.n	401f34 <ov_manufacturer+0x68>
  401f2a:	68fb      	ldr	r3, [r7, #12]
  401f2c:	2ba2      	cmp	r3, #162	; 0xa2
  401f2e:	d101      	bne.n	401f34 <ov_manufacturer+0x68>
		return 0;
  401f30:	2300      	movs	r3, #0
  401f32:	e000      	b.n	401f36 <ov_manufacturer+0x6a>
	}

	return 1;
  401f34:	2301      	movs	r3, #1
}
  401f36:	4618      	mov	r0, r3
  401f38:	3728      	adds	r7, #40	; 0x28
  401f3a:	46bd      	mov	sp, r7
  401f3c:	bd80      	pop	{r7, pc}
  401f3e:	bf00      	nop
  401f40:	00401ff5 	.word	0x00401ff5

00401f44 <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  401f44:	b580      	push	{r7, lr}
  401f46:	b08a      	sub	sp, #40	; 0x28
  401f48:	af00      	add	r7, sp, #0
  401f4a:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  401f4c:	2300      	movs	r3, #0
  401f4e:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  401f50:	2300      	movs	r3, #0
  401f52:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  401f54:	2300      	movs	r3, #0
  401f56:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  401f58:	2301      	movs	r3, #1
  401f5a:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401f5c:	2301      	movs	r3, #1
  401f5e:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401f60:	2330      	movs	r3, #48	; 0x30
  401f62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  401f66:	2301      	movs	r3, #1
  401f68:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  401f6a:	f107 030c 	add.w	r3, r7, #12
  401f6e:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401f70:	f107 0314 	add.w	r3, r7, #20
  401f74:	4619      	mov	r1, r3
  401f76:	6878      	ldr	r0, [r7, #4]
  401f78:	4b1c      	ldr	r3, [pc, #112]	; (401fec <ov_test_write+0xa8>)
  401f7a:	4798      	blx	r3

	ul_entervalue = 0xAD;
  401f7c:	23ad      	movs	r3, #173	; 0xad
  401f7e:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  401f80:	f107 0308 	add.w	r3, r7, #8
  401f84:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401f86:	f107 0314 	add.w	r3, r7, #20
  401f8a:	4619      	mov	r1, r3
  401f8c:	6878      	ldr	r0, [r7, #4]
  401f8e:	4b18      	ldr	r3, [pc, #96]	; (401ff0 <ov_test_write+0xac>)
  401f90:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401f92:	f107 0310 	add.w	r3, r7, #16
  401f96:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401f98:	f107 0314 	add.w	r3, r7, #20
  401f9c:	4619      	mov	r1, r3
  401f9e:	6878      	ldr	r0, [r7, #4]
  401fa0:	4b12      	ldr	r3, [pc, #72]	; (401fec <ov_test_write+0xa8>)
  401fa2:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  401fa4:	693a      	ldr	r2, [r7, #16]
  401fa6:	68bb      	ldr	r3, [r7, #8]
  401fa8:	429a      	cmp	r2, r3
  401faa:	d001      	beq.n	401fb0 <ov_test_write+0x6c>
		return 1;
  401fac:	2301      	movs	r3, #1
  401fae:	e018      	b.n	401fe2 <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  401fb0:	f107 030c 	add.w	r3, r7, #12
  401fb4:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401fb6:	f107 0314 	add.w	r3, r7, #20
  401fba:	4619      	mov	r1, r3
  401fbc:	6878      	ldr	r0, [r7, #4]
  401fbe:	4b0c      	ldr	r3, [pc, #48]	; (401ff0 <ov_test_write+0xac>)
  401fc0:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401fc2:	f107 0310 	add.w	r3, r7, #16
  401fc6:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401fc8:	f107 0314 	add.w	r3, r7, #20
  401fcc:	4619      	mov	r1, r3
  401fce:	6878      	ldr	r0, [r7, #4]
  401fd0:	4b06      	ldr	r3, [pc, #24]	; (401fec <ov_test_write+0xa8>)
  401fd2:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401fd4:	693a      	ldr	r2, [r7, #16]
  401fd6:	68fb      	ldr	r3, [r7, #12]
  401fd8:	429a      	cmp	r2, r3
  401fda:	d001      	beq.n	401fe0 <ov_test_write+0x9c>
		return 1;
  401fdc:	2301      	movs	r3, #1
  401fde:	e000      	b.n	401fe2 <ov_test_write+0x9e>
	}

	return 0;
  401fe0:	2300      	movs	r3, #0
}
  401fe2:	4618      	mov	r0, r3
  401fe4:	3728      	adds	r7, #40	; 0x28
  401fe6:	46bd      	mov	sp, r7
  401fe8:	bd80      	pop	{r7, pc}
  401fea:	bf00      	nop
  401fec:	00401ff5 	.word	0x00401ff5
  401ff0:	00402019 	.word	0x00402019

00401ff4 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401ff4:	b580      	push	{r7, lr}
  401ff6:	b084      	sub	sp, #16
  401ff8:	af00      	add	r7, sp, #0
  401ffa:	6078      	str	r0, [r7, #4]
  401ffc:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  401ffe:	6839      	ldr	r1, [r7, #0]
  402000:	6878      	ldr	r0, [r7, #4]
  402002:	4b04      	ldr	r3, [pc, #16]	; (402014 <ov_read_reg+0x20>)
  402004:	4798      	blx	r3
  402006:	60f8      	str	r0, [r7, #12]

	return ul_status;
  402008:	68fb      	ldr	r3, [r7, #12]
}
  40200a:	4618      	mov	r0, r3
  40200c:	3710      	adds	r7, #16
  40200e:	46bd      	mov	sp, r7
  402010:	bd80      	pop	{r7, pc}
  402012:	bf00      	nop
  402014:	00400479 	.word	0x00400479

00402018 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  402018:	b580      	push	{r7, lr}
  40201a:	b084      	sub	sp, #16
  40201c:	af00      	add	r7, sp, #0
  40201e:	6078      	str	r0, [r7, #4]
  402020:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  402022:	6839      	ldr	r1, [r7, #0]
  402024:	6878      	ldr	r0, [r7, #4]
  402026:	4b04      	ldr	r3, [pc, #16]	; (402038 <ov_write_reg+0x20>)
  402028:	4798      	blx	r3
  40202a:	60f8      	str	r0, [r7, #12]

	return ul_status;
  40202c:	68fb      	ldr	r3, [r7, #12]
}
  40202e:	4618      	mov	r0, r3
  402030:	3710      	adds	r7, #16
  402032:	46bd      	mov	sp, r7
  402034:	bd80      	pop	{r7, pc}
  402036:	bf00      	nop
  402038:	00400585 	.word	0x00400585

0040203c <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  40203c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  402040:	b08a      	sub	sp, #40	; 0x28
  402042:	af00      	add	r7, sp, #0
  402044:	6078      	str	r0, [r7, #4]
  402046:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  402048:	2300      	movs	r3, #0
  40204a:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  40204c:	683b      	ldr	r3, [r7, #0]
  40204e:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  402050:	e048      	b.n	4020e4 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  402052:	6a3b      	ldr	r3, [r7, #32]
  402054:	781b      	ldrb	r3, [r3, #0]
  402056:	2bfe      	cmp	r3, #254	; 0xfe
  402058:	d126      	bne.n	4020a8 <ov_write_regs+0x6c>
			delay_ms(5);
  40205a:	4b29      	ldr	r3, [pc, #164]	; (402100 <ov_write_regs+0xc4>)
  40205c:	4798      	blx	r3
  40205e:	4603      	mov	r3, r0
  402060:	4619      	mov	r1, r3
  402062:	f04f 0200 	mov.w	r2, #0
  402066:	460b      	mov	r3, r1
  402068:	4614      	mov	r4, r2
  40206a:	00a6      	lsls	r6, r4, #2
  40206c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402070:	009d      	lsls	r5, r3, #2
  402072:	462b      	mov	r3, r5
  402074:	4634      	mov	r4, r6
  402076:	185b      	adds	r3, r3, r1
  402078:	eb44 0402 	adc.w	r4, r4, r2
  40207c:	f243 61af 	movw	r1, #13999	; 0x36af
  402080:	f04f 0200 	mov.w	r2, #0
  402084:	eb13 0b01 	adds.w	fp, r3, r1
  402088:	eb44 0c02 	adc.w	ip, r4, r2
  40208c:	4658      	mov	r0, fp
  40208e:	4661      	mov	r1, ip
  402090:	4c1c      	ldr	r4, [pc, #112]	; (402104 <ov_write_regs+0xc8>)
  402092:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402096:	f04f 0300 	mov.w	r3, #0
  40209a:	47a0      	blx	r4
  40209c:	4603      	mov	r3, r0
  40209e:	460c      	mov	r4, r1
  4020a0:	4618      	mov	r0, r3
  4020a2:	4b19      	ldr	r3, [pc, #100]	; (402108 <ov_write_regs+0xcc>)
  4020a4:	4798      	blx	r3
  4020a6:	e01a      	b.n	4020de <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  4020a8:	6a3b      	ldr	r3, [r7, #32]
  4020aa:	781b      	ldrb	r3, [r3, #0]
  4020ac:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  4020ae:	2301      	movs	r3, #1
  4020b0:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  4020b2:	2330      	movs	r3, #48	; 0x30
  4020b4:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  4020b6:	2301      	movs	r3, #1
  4020b8:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  4020ba:	6a3b      	ldr	r3, [r7, #32]
  4020bc:	3301      	adds	r3, #1
  4020be:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4020c0:	f107 0308 	add.w	r3, r7, #8
  4020c4:	4619      	mov	r1, r3
  4020c6:	6878      	ldr	r0, [r7, #4]
  4020c8:	4b10      	ldr	r3, [pc, #64]	; (40210c <ov_write_regs+0xd0>)
  4020ca:	4798      	blx	r3
  4020cc:	61f8      	str	r0, [r7, #28]
			ul_size++;
  4020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020d0:	3301      	adds	r3, #1
  4020d2:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  4020d4:	69fb      	ldr	r3, [r7, #28]
  4020d6:	2b08      	cmp	r3, #8
  4020d8:	d101      	bne.n	4020de <ov_write_regs+0xa2>
				return ul_err;
  4020da:	69fb      	ldr	r3, [r7, #28]
  4020dc:	e00b      	b.n	4020f6 <ov_write_regs+0xba>
			}
		}

		p_next++;
  4020de:	6a3b      	ldr	r3, [r7, #32]
  4020e0:	3302      	adds	r3, #2
  4020e2:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  4020e4:	6a3b      	ldr	r3, [r7, #32]
  4020e6:	781b      	ldrb	r3, [r3, #0]
  4020e8:	2bff      	cmp	r3, #255	; 0xff
  4020ea:	d1b2      	bne.n	402052 <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  4020ec:	6a3b      	ldr	r3, [r7, #32]
  4020ee:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  4020f0:	2bff      	cmp	r3, #255	; 0xff
  4020f2:	d1ae      	bne.n	402052 <ov_write_regs+0x16>
	}
	return 0;
  4020f4:	2300      	movs	r3, #0
}
  4020f6:	4618      	mov	r0, r3
  4020f8:	3728      	adds	r7, #40	; 0x28
  4020fa:	46bd      	mov	sp, r7
  4020fc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  402100:	00401e49 	.word	0x00401e49
  402104:	00403349 	.word	0x00403349
  402108:	20000001 	.word	0x20000001
  40210c:	00402019 	.word	0x00402019

00402110 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  402110:	b580      	push	{r7, lr}
  402112:	b08a      	sub	sp, #40	; 0x28
  402114:	af00      	add	r7, sp, #0
  402116:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  402118:	2301      	movs	r3, #1
  40211a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  40211e:	f107 030c 	add.w	r3, r7, #12
  402122:	2200      	movs	r2, #0
  402124:	601a      	str	r2, [r3, #0]
  402126:	605a      	str	r2, [r3, #4]
  402128:	609a      	str	r2, [r3, #8]
  40212a:	60da      	str	r2, [r3, #12]
  40212c:	611a      	str	r2, [r3, #16]
  40212e:	23ff      	movs	r3, #255	; 0xff
  402130:	733b      	strb	r3, [r7, #12]
  402132:	2301      	movs	r3, #1
  402134:	613b      	str	r3, [r7, #16]
  402136:	f107 0323 	add.w	r3, r7, #35	; 0x23
  40213a:	617b      	str	r3, [r7, #20]
  40213c:	2301      	movs	r3, #1
  40213e:	61bb      	str	r3, [r7, #24]
  402140:	2330      	movs	r3, #48	; 0x30
  402142:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  402144:	f107 030c 	add.w	r3, r7, #12
  402148:	4619      	mov	r1, r3
  40214a:	6878      	ldr	r0, [r7, #4]
  40214c:	4b0f      	ldr	r3, [pc, #60]	; (40218c <ov_init+0x7c>)
  40214e:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  402150:	2300      	movs	r3, #0
  402152:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  402154:	6878      	ldr	r0, [r7, #4]
  402156:	4b0e      	ldr	r3, [pc, #56]	; (402190 <ov_init+0x80>)
  402158:	4798      	blx	r3
  40215a:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  40215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40215e:	0a1b      	lsrs	r3, r3, #8
  402160:	b2db      	uxtb	r3, r3
  402162:	2b26      	cmp	r3, #38	; 0x26
  402164:	d10d      	bne.n	402182 <ov_init+0x72>
		if (ov_manufacturer( p_twi ) == 0) {
  402166:	6878      	ldr	r0, [r7, #4]
  402168:	4b0a      	ldr	r3, [pc, #40]	; (402194 <ov_init+0x84>)
  40216a:	4798      	blx	r3
  40216c:	4603      	mov	r3, r0
  40216e:	2b00      	cmp	r3, #0
  402170:	d107      	bne.n	402182 <ov_init+0x72>
			if (ov_test_write( p_twi ) == 0) {
  402172:	6878      	ldr	r0, [r7, #4]
  402174:	4b08      	ldr	r3, [pc, #32]	; (402198 <ov_init+0x88>)
  402176:	4798      	blx	r3
  402178:	4603      	mov	r3, r0
  40217a:	2b00      	cmp	r3, #0
  40217c:	d101      	bne.n	402182 <ov_init+0x72>
				return 0;
  40217e:	2300      	movs	r3, #0
  402180:	e000      	b.n	402184 <ov_init+0x74>
			}
		}
	}

	return 1;
  402182:	2301      	movs	r3, #1
}
  402184:	4618      	mov	r0, r3
  402186:	3728      	adds	r7, #40	; 0x28
  402188:	46bd      	mov	sp, r7
  40218a:	bd80      	pop	{r7, pc}
  40218c:	00402019 	.word	0x00402019
  402190:	00401e5d 	.word	0x00401e5d
  402194:	00401ecd 	.word	0x00401ecd
  402198:	00401f45 	.word	0x00401f45

0040219c <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  40219c:	b580      	push	{r7, lr}
  40219e:	b084      	sub	sp, #16
  4021a0:	af00      	add	r7, sp, #0
  4021a2:	6078      	str	r0, [r7, #4]
  4021a4:	460b      	mov	r3, r1
  4021a6:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  4021a8:	2300      	movs	r3, #0
  4021aa:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  4021ac:	78fb      	ldrb	r3, [r7, #3]
  4021ae:	2b11      	cmp	r3, #17
  4021b0:	d85c      	bhi.n	40226c <ov_configure+0xd0>
  4021b2:	a201      	add	r2, pc, #4	; (adr r2, 4021b8 <ov_configure+0x1c>)
  4021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4021b8:	00402201 	.word	0x00402201
  4021bc:	00402207 	.word	0x00402207
  4021c0:	0040220d 	.word	0x0040220d
  4021c4:	00402213 	.word	0x00402213
  4021c8:	00402219 	.word	0x00402219
  4021cc:	0040221f 	.word	0x0040221f
  4021d0:	00402225 	.word	0x00402225
  4021d4:	0040222b 	.word	0x0040222b
  4021d8:	00402231 	.word	0x00402231
  4021dc:	00402237 	.word	0x00402237
  4021e0:	0040223d 	.word	0x0040223d
  4021e4:	00402243 	.word	0x00402243
  4021e8:	00402249 	.word	0x00402249
  4021ec:	0040224f 	.word	0x0040224f
  4021f0:	00402255 	.word	0x00402255
  4021f4:	0040225b 	.word	0x0040225b
  4021f8:	00402261 	.word	0x00402261
  4021fc:	00402267 	.word	0x00402267
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  402200:	4b22      	ldr	r3, [pc, #136]	; (40228c <ov_configure+0xf0>)
  402202:	60fb      	str	r3, [r7, #12]
		break;
  402204:	e033      	b.n	40226e <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  402206:	4b22      	ldr	r3, [pc, #136]	; (402290 <ov_configure+0xf4>)
  402208:	60fb      	str	r3, [r7, #12]
		break;
  40220a:	e030      	b.n	40226e <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  40220c:	4b21      	ldr	r3, [pc, #132]	; (402294 <ov_configure+0xf8>)
  40220e:	60fb      	str	r3, [r7, #12]
		break;
  402210:	e02d      	b.n	40226e <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  402212:	4b21      	ldr	r3, [pc, #132]	; (402298 <ov_configure+0xfc>)
  402214:	60fb      	str	r3, [r7, #12]
		break;
  402216:	e02a      	b.n	40226e <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  402218:	4b20      	ldr	r3, [pc, #128]	; (40229c <ov_configure+0x100>)
  40221a:	60fb      	str	r3, [r7, #12]
		break;
  40221c:	e027      	b.n	40226e <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  40221e:	4b20      	ldr	r3, [pc, #128]	; (4022a0 <ov_configure+0x104>)
  402220:	60fb      	str	r3, [r7, #12]
		break;
  402222:	e024      	b.n	40226e <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  402224:	4b1f      	ldr	r3, [pc, #124]	; (4022a4 <ov_configure+0x108>)
  402226:	60fb      	str	r3, [r7, #12]
		break;
  402228:	e021      	b.n	40226e <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  40222a:	4b1f      	ldr	r3, [pc, #124]	; (4022a8 <ov_configure+0x10c>)
  40222c:	60fb      	str	r3, [r7, #12]
		break;
  40222e:	e01e      	b.n	40226e <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  402230:	4b1e      	ldr	r3, [pc, #120]	; (4022ac <ov_configure+0x110>)
  402232:	60fb      	str	r3, [r7, #12]
		break;
  402234:	e01b      	b.n	40226e <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  402236:	4b1e      	ldr	r3, [pc, #120]	; (4022b0 <ov_configure+0x114>)
  402238:	60fb      	str	r3, [r7, #12]
		break;
  40223a:	e018      	b.n	40226e <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  40223c:	4b1d      	ldr	r3, [pc, #116]	; (4022b4 <ov_configure+0x118>)
  40223e:	60fb      	str	r3, [r7, #12]
		break;
  402240:	e015      	b.n	40226e <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  402242:	4b1d      	ldr	r3, [pc, #116]	; (4022b8 <ov_configure+0x11c>)
  402244:	60fb      	str	r3, [r7, #12]
		break;
  402246:	e012      	b.n	40226e <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  402248:	4b1c      	ldr	r3, [pc, #112]	; (4022bc <ov_configure+0x120>)
  40224a:	60fb      	str	r3, [r7, #12]
		break;
  40224c:	e00f      	b.n	40226e <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  40224e:	4b1c      	ldr	r3, [pc, #112]	; (4022c0 <ov_configure+0x124>)
  402250:	60fb      	str	r3, [r7, #12]
		break;
  402252:	e00c      	b.n	40226e <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  402254:	4b1b      	ldr	r3, [pc, #108]	; (4022c4 <ov_configure+0x128>)
  402256:	60fb      	str	r3, [r7, #12]
		break;
  402258:	e009      	b.n	40226e <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  40225a:	4b1b      	ldr	r3, [pc, #108]	; (4022c8 <ov_configure+0x12c>)
  40225c:	60fb      	str	r3, [r7, #12]
		break;
  40225e:	e006      	b.n	40226e <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  402260:	4b1a      	ldr	r3, [pc, #104]	; (4022cc <ov_configure+0x130>)
  402262:	60fb      	str	r3, [r7, #12]
		break;
  402264:	e003      	b.n	40226e <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  402266:	4b1a      	ldr	r3, [pc, #104]	; (4022d0 <ov_configure+0x134>)
  402268:	60fb      	str	r3, [r7, #12]
		break;
  40226a:	e000      	b.n	40226e <ov_configure+0xd2>

	default:
		break;
  40226c:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  40226e:	68fb      	ldr	r3, [r7, #12]
  402270:	2b00      	cmp	r3, #0
  402272:	d005      	beq.n	402280 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  402274:	68f9      	ldr	r1, [r7, #12]
  402276:	6878      	ldr	r0, [r7, #4]
  402278:	4b16      	ldr	r3, [pc, #88]	; (4022d4 <ov_configure+0x138>)
  40227a:	4798      	blx	r3
		return 0;
  40227c:	2300      	movs	r3, #0
  40227e:	e000      	b.n	402282 <ov_configure+0xe6>
	}

	return 1;
  402280:	2301      	movs	r3, #1
}
  402282:	4618      	mov	r0, r3
  402284:	3710      	adds	r7, #16
  402286:	46bd      	mov	sp, r7
  402288:	bd80      	pop	{r7, pc}
  40228a:	bf00      	nop
  40228c:	00408264 	.word	0x00408264
  402290:	004083e4 	.word	0x004083e4
  402294:	004083f8 	.word	0x004083f8
  402298:	0040840c 	.word	0x0040840c
  40229c:	0040845c 	.word	0x0040845c
  4022a0:	004084b0 	.word	0x004084b0
  4022a4:	00408504 	.word	0x00408504
  4022a8:	00408554 	.word	0x00408554
  4022ac:	004085a8 	.word	0x004085a8
  4022b0:	004085fc 	.word	0x004085fc
  4022b4:	004086ec 	.word	0x004086ec
  4022b8:	004087dc 	.word	0x004087dc
  4022bc:	004088cc 	.word	0x004088cc
  4022c0:	004089bc 	.word	0x004089bc
  4022c4:	00408ab0 	.word	0x00408ab0
  4022c8:	00408ba4 	.word	0x00408ba4
  4022cc:	00408c98 	.word	0x00408c98
  4022d0:	00408d8c 	.word	0x00408d8c
  4022d4:	0040203d 	.word	0x0040203d

004022d8 <__NVIC_EnableIRQ>:
{
  4022d8:	b480      	push	{r7}
  4022da:	b083      	sub	sp, #12
  4022dc:	af00      	add	r7, sp, #0
  4022de:	4603      	mov	r3, r0
  4022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022e6:	2b00      	cmp	r3, #0
  4022e8:	db0b      	blt.n	402302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4022ea:	4908      	ldr	r1, [pc, #32]	; (40230c <__NVIC_EnableIRQ+0x34>)
  4022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022f0:	095b      	lsrs	r3, r3, #5
  4022f2:	79fa      	ldrb	r2, [r7, #7]
  4022f4:	f002 021f 	and.w	r2, r2, #31
  4022f8:	2001      	movs	r0, #1
  4022fa:	fa00 f202 	lsl.w	r2, r0, r2
  4022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402302:	bf00      	nop
  402304:	370c      	adds	r7, #12
  402306:	46bd      	mov	sp, r7
  402308:	bc80      	pop	{r7}
  40230a:	4770      	bx	lr
  40230c:	e000e100 	.word	0xe000e100

00402310 <osc_get_rate>:
{
  402310:	b480      	push	{r7}
  402312:	b083      	sub	sp, #12
  402314:	af00      	add	r7, sp, #0
  402316:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402318:	687b      	ldr	r3, [r7, #4]
  40231a:	2b07      	cmp	r3, #7
  40231c:	d825      	bhi.n	40236a <osc_get_rate+0x5a>
  40231e:	a201      	add	r2, pc, #4	; (adr r2, 402324 <osc_get_rate+0x14>)
  402320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402324:	00402345 	.word	0x00402345
  402328:	0040234b 	.word	0x0040234b
  40232c:	00402351 	.word	0x00402351
  402330:	00402357 	.word	0x00402357
  402334:	0040235b 	.word	0x0040235b
  402338:	0040235f 	.word	0x0040235f
  40233c:	00402363 	.word	0x00402363
  402340:	00402367 	.word	0x00402367
		return OSC_SLCK_32K_RC_HZ;
  402344:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402348:	e010      	b.n	40236c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40234a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40234e:	e00d      	b.n	40236c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402354:	e00a      	b.n	40236c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402356:	4b08      	ldr	r3, [pc, #32]	; (402378 <osc_get_rate+0x68>)
  402358:	e008      	b.n	40236c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40235a:	4b08      	ldr	r3, [pc, #32]	; (40237c <osc_get_rate+0x6c>)
  40235c:	e006      	b.n	40236c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40235e:	4b08      	ldr	r3, [pc, #32]	; (402380 <osc_get_rate+0x70>)
  402360:	e004      	b.n	40236c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402362:	4b07      	ldr	r3, [pc, #28]	; (402380 <osc_get_rate+0x70>)
  402364:	e002      	b.n	40236c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402366:	4b06      	ldr	r3, [pc, #24]	; (402380 <osc_get_rate+0x70>)
  402368:	e000      	b.n	40236c <osc_get_rate+0x5c>
	return 0;
  40236a:	2300      	movs	r3, #0
}
  40236c:	4618      	mov	r0, r3
  40236e:	370c      	adds	r7, #12
  402370:	46bd      	mov	sp, r7
  402372:	bc80      	pop	{r7}
  402374:	4770      	bx	lr
  402376:	bf00      	nop
  402378:	003d0900 	.word	0x003d0900
  40237c:	007a1200 	.word	0x007a1200
  402380:	00b71b00 	.word	0x00b71b00

00402384 <sysclk_get_main_hz>:
{
  402384:	b580      	push	{r7, lr}
  402386:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402388:	2006      	movs	r0, #6
  40238a:	4b04      	ldr	r3, [pc, #16]	; (40239c <sysclk_get_main_hz+0x18>)
  40238c:	4798      	blx	r3
  40238e:	4602      	mov	r2, r0
  402390:	4613      	mov	r3, r2
  402392:	009b      	lsls	r3, r3, #2
  402394:	4413      	add	r3, r2
  402396:	009b      	lsls	r3, r3, #2
}
  402398:	4618      	mov	r0, r3
  40239a:	bd80      	pop	{r7, pc}
  40239c:	00402311 	.word	0x00402311

004023a0 <sysclk_get_cpu_hz>:
{
  4023a0:	b580      	push	{r7, lr}
  4023a2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4023a4:	4b02      	ldr	r3, [pc, #8]	; (4023b0 <sysclk_get_cpu_hz+0x10>)
  4023a6:	4798      	blx	r3
  4023a8:	4603      	mov	r3, r0
  4023aa:	085b      	lsrs	r3, r3, #1
}
  4023ac:	4618      	mov	r0, r3
  4023ae:	bd80      	pop	{r7, pc}
  4023b0:	00402385 	.word	0x00402385

004023b4 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4023b4:	b580      	push	{r7, lr}
  4023b6:	b082      	sub	sp, #8
  4023b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  4023ba:	2100      	movs	r1, #0
  4023bc:	4809      	ldr	r0, [pc, #36]	; (4023e4 <TC0_Handler+0x30>)
  4023be:	4b0a      	ldr	r3, [pc, #40]	; (4023e8 <TC0_Handler+0x34>)
  4023c0:	4798      	blx	r3
  4023c2:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4023c4:	687b      	ldr	r3, [r7, #4]
  4023c6:	f003 0310 	and.w	r3, r3, #16
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	d006      	beq.n	4023dc <TC0_Handler+0x28>
		counts++;
  4023ce:	4b07      	ldr	r3, [pc, #28]	; (4023ec <TC0_Handler+0x38>)
  4023d0:	781b      	ldrb	r3, [r3, #0]
  4023d2:	b2db      	uxtb	r3, r3
  4023d4:	3301      	adds	r3, #1
  4023d6:	b2da      	uxtb	r2, r3
  4023d8:	4b04      	ldr	r3, [pc, #16]	; (4023ec <TC0_Handler+0x38>)
  4023da:	701a      	strb	r2, [r3, #0]
	}
}
  4023dc:	bf00      	nop
  4023de:	3708      	adds	r7, #8
  4023e0:	46bd      	mov	sp, r7
  4023e2:	bd80      	pop	{r7, pc}
  4023e4:	40010000 	.word	0x40010000
  4023e8:	004001db 	.word	0x004001db
  4023ec:	20019160 	.word	0x20019160

004023f0 <configure_tc>:

void configure_tc(void)
{
  4023f0:	b590      	push	{r4, r7, lr}
  4023f2:	b087      	sub	sp, #28
  4023f4:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  4023f6:	4b18      	ldr	r3, [pc, #96]	; (402458 <configure_tc+0x68>)
  4023f8:	4798      	blx	r3
  4023fa:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  4023fc:	2017      	movs	r0, #23
  4023fe:	4b17      	ldr	r3, [pc, #92]	; (40245c <configure_tc+0x6c>)
  402400:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402402:	1d39      	adds	r1, r7, #4
  402404:	f107 0208 	add.w	r2, r7, #8
  402408:	68fb      	ldr	r3, [r7, #12]
  40240a:	9300      	str	r3, [sp, #0]
  40240c:	460b      	mov	r3, r1
  40240e:	68f9      	ldr	r1, [r7, #12]
  402410:	2001      	movs	r0, #1
  402412:	4c13      	ldr	r4, [pc, #76]	; (402460 <configure_tc+0x70>)
  402414:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  402416:	687b      	ldr	r3, [r7, #4]
  402418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40241c:	461a      	mov	r2, r3
  40241e:	2100      	movs	r1, #0
  402420:	4810      	ldr	r0, [pc, #64]	; (402464 <configure_tc+0x74>)
  402422:	4b11      	ldr	r3, [pc, #68]	; (402468 <configure_tc+0x78>)
  402424:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  402426:	68bb      	ldr	r3, [r7, #8]
  402428:	68fa      	ldr	r2, [r7, #12]
  40242a:	fbb2 f3f3 	udiv	r3, r2, r3
  40242e:	461a      	mov	r2, r3
  402430:	2100      	movs	r1, #0
  402432:	480c      	ldr	r0, [pc, #48]	; (402464 <configure_tc+0x74>)
  402434:	4b0d      	ldr	r3, [pc, #52]	; (40246c <configure_tc+0x7c>)
  402436:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  402438:	2017      	movs	r0, #23
  40243a:	4b0d      	ldr	r3, [pc, #52]	; (402470 <configure_tc+0x80>)
  40243c:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40243e:	2210      	movs	r2, #16
  402440:	2100      	movs	r1, #0
  402442:	4808      	ldr	r0, [pc, #32]	; (402464 <configure_tc+0x74>)
  402444:	4b0b      	ldr	r3, [pc, #44]	; (402474 <configure_tc+0x84>)
  402446:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  402448:	2100      	movs	r1, #0
  40244a:	4806      	ldr	r0, [pc, #24]	; (402464 <configure_tc+0x74>)
  40244c:	4b0a      	ldr	r3, [pc, #40]	; (402478 <configure_tc+0x88>)
  40244e:	4798      	blx	r3
  402450:	bf00      	nop
  402452:	3714      	adds	r7, #20
  402454:	46bd      	mov	sp, r7
  402456:	bd90      	pop	{r4, r7, pc}
  402458:	004023a1 	.word	0x004023a1
  40245c:	004016d5 	.word	0x004016d5
  402460:	004001fd 	.word	0x004001fd
  402464:	40010000 	.word	0x40010000
  402468:	00400139 	.word	0x00400139
  40246c:	00400191 	.word	0x00400191
  402470:	004022d9 	.word	0x004022d9
  402474:	004001b5 	.word	0x004001b5
  402478:	00400171 	.word	0x00400171

0040247c <__NVIC_EnableIRQ>:
{
  40247c:	b480      	push	{r7}
  40247e:	b083      	sub	sp, #12
  402480:	af00      	add	r7, sp, #0
  402482:	4603      	mov	r3, r0
  402484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402486:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40248a:	2b00      	cmp	r3, #0
  40248c:	db0b      	blt.n	4024a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40248e:	4908      	ldr	r1, [pc, #32]	; (4024b0 <__NVIC_EnableIRQ+0x34>)
  402490:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402494:	095b      	lsrs	r3, r3, #5
  402496:	79fa      	ldrb	r2, [r7, #7]
  402498:	f002 021f 	and.w	r2, r2, #31
  40249c:	2001      	movs	r0, #1
  40249e:	fa00 f202 	lsl.w	r2, r0, r2
  4024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4024a6:	bf00      	nop
  4024a8:	370c      	adds	r7, #12
  4024aa:	46bd      	mov	sp, r7
  4024ac:	bc80      	pop	{r7}
  4024ae:	4770      	bx	lr
  4024b0:	e000e100 	.word	0xe000e100

004024b4 <osc_get_rate>:
{
  4024b4:	b480      	push	{r7}
  4024b6:	b083      	sub	sp, #12
  4024b8:	af00      	add	r7, sp, #0
  4024ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4024bc:	687b      	ldr	r3, [r7, #4]
  4024be:	2b07      	cmp	r3, #7
  4024c0:	d825      	bhi.n	40250e <osc_get_rate+0x5a>
  4024c2:	a201      	add	r2, pc, #4	; (adr r2, 4024c8 <osc_get_rate+0x14>)
  4024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4024c8:	004024e9 	.word	0x004024e9
  4024cc:	004024ef 	.word	0x004024ef
  4024d0:	004024f5 	.word	0x004024f5
  4024d4:	004024fb 	.word	0x004024fb
  4024d8:	004024ff 	.word	0x004024ff
  4024dc:	00402503 	.word	0x00402503
  4024e0:	00402507 	.word	0x00402507
  4024e4:	0040250b 	.word	0x0040250b
		return OSC_SLCK_32K_RC_HZ;
  4024e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4024ec:	e010      	b.n	402510 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4024ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4024f2:	e00d      	b.n	402510 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4024f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4024f8:	e00a      	b.n	402510 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4024fa:	4b08      	ldr	r3, [pc, #32]	; (40251c <osc_get_rate+0x68>)
  4024fc:	e008      	b.n	402510 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4024fe:	4b08      	ldr	r3, [pc, #32]	; (402520 <osc_get_rate+0x6c>)
  402500:	e006      	b.n	402510 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402502:	4b08      	ldr	r3, [pc, #32]	; (402524 <osc_get_rate+0x70>)
  402504:	e004      	b.n	402510 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402506:	4b07      	ldr	r3, [pc, #28]	; (402524 <osc_get_rate+0x70>)
  402508:	e002      	b.n	402510 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40250a:	4b06      	ldr	r3, [pc, #24]	; (402524 <osc_get_rate+0x70>)
  40250c:	e000      	b.n	402510 <osc_get_rate+0x5c>
	return 0;
  40250e:	2300      	movs	r3, #0
}
  402510:	4618      	mov	r0, r3
  402512:	370c      	adds	r7, #12
  402514:	46bd      	mov	sp, r7
  402516:	bc80      	pop	{r7}
  402518:	4770      	bx	lr
  40251a:	bf00      	nop
  40251c:	003d0900 	.word	0x003d0900
  402520:	007a1200 	.word	0x007a1200
  402524:	00b71b00 	.word	0x00b71b00

00402528 <sysclk_get_main_hz>:
{
  402528:	b580      	push	{r7, lr}
  40252a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40252c:	2006      	movs	r0, #6
  40252e:	4b04      	ldr	r3, [pc, #16]	; (402540 <sysclk_get_main_hz+0x18>)
  402530:	4798      	blx	r3
  402532:	4602      	mov	r2, r0
  402534:	4613      	mov	r3, r2
  402536:	009b      	lsls	r3, r3, #2
  402538:	4413      	add	r3, r2
  40253a:	009b      	lsls	r3, r3, #2
}
  40253c:	4618      	mov	r0, r3
  40253e:	bd80      	pop	{r7, pc}
  402540:	004024b5 	.word	0x004024b5

00402544 <sysclk_get_cpu_hz>:
{
  402544:	b580      	push	{r7, lr}
  402546:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402548:	4b02      	ldr	r3, [pc, #8]	; (402554 <sysclk_get_cpu_hz+0x10>)
  40254a:	4798      	blx	r3
  40254c:	4603      	mov	r3, r0
  40254e:	085b      	lsrs	r3, r3, #1
}
  402550:	4618      	mov	r0, r3
  402552:	bd80      	pop	{r7, pc}
  402554:	00402529 	.word	0x00402529

00402558 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402558:	b580      	push	{r7, lr}
  40255a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40255c:	4b02      	ldr	r3, [pc, #8]	; (402568 <sysclk_get_peripheral_hz+0x10>)
  40255e:	4798      	blx	r3
  402560:	4603      	mov	r3, r0
  402562:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402564:	4618      	mov	r0, r3
  402566:	bd80      	pop	{r7, pc}
  402568:	00402529 	.word	0x00402529

0040256c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40256c:	b580      	push	{r7, lr}
  40256e:	b082      	sub	sp, #8
  402570:	af00      	add	r7, sp, #0
  402572:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402574:	6878      	ldr	r0, [r7, #4]
  402576:	4b03      	ldr	r3, [pc, #12]	; (402584 <sysclk_enable_peripheral_clock+0x18>)
  402578:	4798      	blx	r3
}
  40257a:	bf00      	nop
  40257c:	3708      	adds	r7, #8
  40257e:	46bd      	mov	sp, r7
  402580:	bd80      	pop	{r7, pc}
  402582:	bf00      	nop
  402584:	004016d5 	.word	0x004016d5

00402588 <USART0_Handler>:
volatile unsigned int input_pos_wifi = 0;
volatile uint32_t Ready2TransferFlag = 0;
volatile uint32_t StreamOpen = 0;

void wifi_usart_handler(void)
{
  402588:	b580      	push	{r7, lr}
  40258a:	b082      	sub	sp, #8
  40258c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(WIFI_USART);
  40258e:	480b      	ldr	r0, [pc, #44]	; (4025bc <USART0_Handler+0x34>)
  402590:	4b0b      	ldr	r3, [pc, #44]	; (4025c0 <USART0_Handler+0x38>)
  402592:	4798      	blx	r3
  402594:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF){
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40259c:	2b00      	cmp	r3, #0
  40259e:	d009      	beq.n	4025b4 <USART0_Handler+0x2c>
		usart_read(WIFI_USART, &received_byte_wifi);
  4025a0:	4908      	ldr	r1, [pc, #32]	; (4025c4 <USART0_Handler+0x3c>)
  4025a2:	4806      	ldr	r0, [pc, #24]	; (4025bc <USART0_Handler+0x34>)
  4025a4:	4b08      	ldr	r3, [pc, #32]	; (4025c8 <USART0_Handler+0x40>)
  4025a6:	4798      	blx	r3
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4025a8:	4b06      	ldr	r3, [pc, #24]	; (4025c4 <USART0_Handler+0x3c>)
  4025aa:	681b      	ldr	r3, [r3, #0]
  4025ac:	b2db      	uxtb	r3, r3
  4025ae:	4618      	mov	r0, r3
  4025b0:	4b06      	ldr	r3, [pc, #24]	; (4025cc <USART0_Handler+0x44>)
  4025b2:	4798      	blx	r3
	}
}
  4025b4:	bf00      	nop
  4025b6:	3708      	adds	r7, #8
  4025b8:	46bd      	mov	sp, r7
  4025ba:	bd80      	pop	{r7, pc}
  4025bc:	40024000 	.word	0x40024000
  4025c0:	004008bd 	.word	0x004008bd
  4025c4:	20000a60 	.word	0x20000a60
  4025c8:	00400981 	.word	0x00400981
  4025cc:	00402799 	.word	0x00402799

004025d0 <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  4025d0:	b580      	push	{r7, lr}
  4025d2:	b084      	sub	sp, #16
  4025d4:	af00      	add	r7, sp, #0
  4025d6:	6078      	str	r0, [r7, #4]
  4025d8:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_comm_flag = true;
  4025da:	4b0d      	ldr	r3, [pc, #52]	; (402610 <wifi_command_response_handler+0x40>)
  4025dc:	2201      	movs	r2, #1
  4025de:	601a      	str	r2, [r3, #0]
	process_data_wifi();
  4025e0:	4b0c      	ldr	r3, [pc, #48]	; (402614 <wifi_command_response_handler+0x44>)
  4025e2:	4798      	blx	r3
	for(int jj=0; jj<1000; jj++) input_line_wifi[jj] = 0;
  4025e4:	2300      	movs	r3, #0
  4025e6:	60fb      	str	r3, [r7, #12]
  4025e8:	e007      	b.n	4025fa <wifi_command_response_handler+0x2a>
  4025ea:	4a0b      	ldr	r2, [pc, #44]	; (402618 <wifi_command_response_handler+0x48>)
  4025ec:	68fb      	ldr	r3, [r7, #12]
  4025ee:	4413      	add	r3, r2
  4025f0:	2200      	movs	r2, #0
  4025f2:	701a      	strb	r2, [r3, #0]
  4025f4:	68fb      	ldr	r3, [r7, #12]
  4025f6:	3301      	adds	r3, #1
  4025f8:	60fb      	str	r3, [r7, #12]
  4025fa:	68fb      	ldr	r3, [r7, #12]
  4025fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402600:	dbf3      	blt.n	4025ea <wifi_command_response_handler+0x1a>
	input_pos_wifi = 0;
  402602:	4b06      	ldr	r3, [pc, #24]	; (40261c <wifi_command_response_handler+0x4c>)
  402604:	2200      	movs	r2, #0
  402606:	601a      	str	r2, [r3, #0]
}
  402608:	bf00      	nop
  40260a:	3710      	adds	r7, #16
  40260c:	46bd      	mov	sp, r7
  40260e:	bd80      	pop	{r7, pc}
  402610:	20000a74 	.word	0x20000a74
  402614:	004027c5 	.word	0x004027c5
  402618:	20019164 	.word	0x20019164
  40261c:	20000a68 	.word	0x20000a68

00402620 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402620:	b480      	push	{r7}
  402622:	b083      	sub	sp, #12
  402624:	af00      	add	r7, sp, #0
  402626:	6078      	str	r0, [r7, #4]
  402628:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_web_setup_flag = true;
  40262a:	4b04      	ldr	r3, [pc, #16]	; (40263c <wifi_web_setup_handler+0x1c>)
  40262c:	2201      	movs	r2, #1
  40262e:	601a      	str	r2, [r3, #0]
}
  402630:	bf00      	nop
  402632:	370c      	adds	r7, #12
  402634:	46bd      	mov	sp, r7
  402636:	bc80      	pop	{r7}
  402638:	4770      	bx	lr
  40263a:	bf00      	nop
  40263c:	20000a64 	.word	0x20000a64

00402640 <configure_usart_wifi>:

void configure_usart_wifi(void)
{
  402640:	b5b0      	push	{r4, r5, r7, lr}
  402642:	b086      	sub	sp, #24
  402644:	af00      	add	r7, sp, #0
	
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  402646:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40264a:	2005      	movs	r0, #5
  40264c:	4b1c      	ldr	r3, [pc, #112]	; (4026c0 <configure_usart_wifi+0x80>)
  40264e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  402650:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402654:	2006      	movs	r0, #6
  402656:	4b1a      	ldr	r3, [pc, #104]	; (4026c0 <configure_usart_wifi+0x80>)
  402658:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  40265a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40265e:	2008      	movs	r0, #8
  402660:	4b17      	ldr	r3, [pc, #92]	; (4026c0 <configure_usart_wifi+0x80>)
  402662:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  402664:	4b17      	ldr	r3, [pc, #92]	; (4026c4 <configure_usart_wifi+0x84>)
  402666:	463c      	mov	r4, r7
  402668:	461d      	mov	r5, r3
  40266a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40266c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40266e:	e895 0003 	ldmia.w	r5, {r0, r1}
  402672:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  402676:	4b14      	ldr	r3, [pc, #80]	; (4026c8 <configure_usart_wifi+0x88>)
  402678:	4798      	blx	r3
  40267a:	4602      	mov	r2, r0
  40267c:	4b13      	ldr	r3, [pc, #76]	; (4026cc <configure_usart_wifi+0x8c>)
  40267e:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(WIFI_ID_USART);
  402680:	200e      	movs	r0, #14
  402682:	4b13      	ldr	r3, [pc, #76]	; (4026d0 <configure_usart_wifi+0x90>)
  402684:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(WIFI_USART, &usart_console_settings, ul_sysclk);
  402686:	4b11      	ldr	r3, [pc, #68]	; (4026cc <configure_usart_wifi+0x8c>)
  402688:	681a      	ldr	r2, [r3, #0]
  40268a:	463b      	mov	r3, r7
  40268c:	4619      	mov	r1, r3
  40268e:	4811      	ldr	r0, [pc, #68]	; (4026d4 <configure_usart_wifi+0x94>)
  402690:	4b11      	ldr	r3, [pc, #68]	; (4026d8 <configure_usart_wifi+0x98>)
  402692:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  402694:	f04f 31ff 	mov.w	r1, #4294967295
  402698:	480e      	ldr	r0, [pc, #56]	; (4026d4 <configure_usart_wifi+0x94>)
  40269a:	4b10      	ldr	r3, [pc, #64]	; (4026dc <configure_usart_wifi+0x9c>)
  40269c:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  40269e:	480d      	ldr	r0, [pc, #52]	; (4026d4 <configure_usart_wifi+0x94>)
  4026a0:	4b0f      	ldr	r3, [pc, #60]	; (4026e0 <configure_usart_wifi+0xa0>)
  4026a2:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  4026a4:	480b      	ldr	r0, [pc, #44]	; (4026d4 <configure_usart_wifi+0x94>)
  4026a6:	4b0f      	ldr	r3, [pc, #60]	; (4026e4 <configure_usart_wifi+0xa4>)
  4026a8:	4798      	blx	r3
	
	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  4026aa:	2101      	movs	r1, #1
  4026ac:	4809      	ldr	r0, [pc, #36]	; (4026d4 <configure_usart_wifi+0x94>)
  4026ae:	4b0e      	ldr	r3, [pc, #56]	; (4026e8 <configure_usart_wifi+0xa8>)
  4026b0:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4026b2:	200e      	movs	r0, #14
  4026b4:	4b0d      	ldr	r3, [pc, #52]	; (4026ec <configure_usart_wifi+0xac>)
  4026b6:	4798      	blx	r3
}
  4026b8:	bf00      	nop
  4026ba:	3718      	adds	r7, #24
  4026bc:	46bd      	mov	sp, r7
  4026be:	bdb0      	pop	{r4, r5, r7, pc}
  4026c0:	0040120d 	.word	0x0040120d
  4026c4:	00408e7c 	.word	0x00408e7c
  4026c8:	00402559 	.word	0x00402559
  4026cc:	20000a78 	.word	0x20000a78
  4026d0:	0040256d 	.word	0x0040256d
  4026d4:	40024000 	.word	0x40024000
  4026d8:	004007e9 	.word	0x004007e9
  4026dc:	004008a3 	.word	0x004008a3
  4026e0:	00400829 	.word	0x00400829
  4026e4:	00400859 	.word	0x00400859
  4026e8:	00400889 	.word	0x00400889
  4026ec:	0040247d 	.word	0x0040247d

004026f0 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  4026f0:	b590      	push	{r4, r7, lr}
  4026f2:	b083      	sub	sp, #12
  4026f4:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  4026f6:	200b      	movs	r0, #11
  4026f8:	4b0b      	ldr	r3, [pc, #44]	; (402728 <configure_wifi_comm_pin+0x38>)
  4026fa:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  4026fc:	4b0b      	ldr	r3, [pc, #44]	; (40272c <configure_wifi_comm_pin+0x3c>)
  4026fe:	9300      	str	r3, [sp, #0]
  402700:	2370      	movs	r3, #112	; 0x70
  402702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402706:	210b      	movs	r1, #11
  402708:	4809      	ldr	r0, [pc, #36]	; (402730 <configure_wifi_comm_pin+0x40>)
  40270a:	4c0a      	ldr	r4, [pc, #40]	; (402734 <configure_wifi_comm_pin+0x44>)
  40270c:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  40270e:	200b      	movs	r0, #11
  402710:	4b09      	ldr	r3, [pc, #36]	; (402738 <configure_wifi_comm_pin+0x48>)
  402712:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  402714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402718:	4805      	ldr	r0, [pc, #20]	; (402730 <configure_wifi_comm_pin+0x40>)
  40271a:	4b08      	ldr	r3, [pc, #32]	; (40273c <configure_wifi_comm_pin+0x4c>)
  40271c:	4798      	blx	r3
}
  40271e:	bf00      	nop
  402720:	3704      	adds	r7, #4
  402722:	46bd      	mov	sp, r7
  402724:	bd90      	pop	{r4, r7, pc}
  402726:	bf00      	nop
  402728:	004016d5 	.word	0x004016d5
  40272c:	004025d1 	.word	0x004025d1
  402730:	400e0e00 	.word	0x400e0e00
  402734:	00400aa9 	.word	0x00400aa9
  402738:	0040247d 	.word	0x0040247d
  40273c:	004011ab 	.word	0x004011ab

00402740 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  402740:	b590      	push	{r4, r7, lr}
  402742:	b083      	sub	sp, #12
  402744:	af02      	add	r7, sp, #8
		/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  402746:	200b      	movs	r0, #11
  402748:	4b0c      	ldr	r3, [pc, #48]	; (40277c <configure_wifi_web_setup_pin+0x3c>)
  40274a:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_PIN_MSK, 10);
  40274c:	220a      	movs	r2, #10
  40274e:	2104      	movs	r1, #4
  402750:	480b      	ldr	r0, [pc, #44]	; (402780 <configure_wifi_web_setup_pin+0x40>)
  402752:	4b0c      	ldr	r3, [pc, #48]	; (402784 <configure_wifi_web_setup_pin+0x44>)
  402754:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_PIN_MSK,
  402756:	4b0c      	ldr	r3, [pc, #48]	; (402788 <configure_wifi_web_setup_pin+0x48>)
  402758:	9300      	str	r3, [sp, #0]
  40275a:	2379      	movs	r3, #121	; 0x79
  40275c:	2204      	movs	r2, #4
  40275e:	210b      	movs	r1, #11
  402760:	4807      	ldr	r0, [pc, #28]	; (402780 <configure_wifi_web_setup_pin+0x40>)
  402762:	4c0a      	ldr	r4, [pc, #40]	; (40278c <configure_wifi_web_setup_pin+0x4c>)
  402764:	47a0      	blx	r4
			WIFI_SETUP_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_SETUP_ID);
  402766:	200b      	movs	r0, #11
  402768:	4b09      	ldr	r3, [pc, #36]	; (402790 <configure_wifi_web_setup_pin+0x50>)
  40276a:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_PIN_MSK);
  40276c:	2104      	movs	r1, #4
  40276e:	4804      	ldr	r0, [pc, #16]	; (402780 <configure_wifi_web_setup_pin+0x40>)
  402770:	4b08      	ldr	r3, [pc, #32]	; (402794 <configure_wifi_web_setup_pin+0x54>)
  402772:	4798      	blx	r3
	
}
  402774:	bf00      	nop
  402776:	3704      	adds	r7, #4
  402778:	46bd      	mov	sp, r7
  40277a:	bd90      	pop	{r4, r7, pc}
  40277c:	004016d5 	.word	0x004016d5
  402780:	400e0e00 	.word	0x400e0e00
  402784:	00400f17 	.word	0x00400f17
  402788:	00402621 	.word	0x00402621
  40278c:	00400aa9 	.word	0x00400aa9
  402790:	0040247d 	.word	0x0040247d
  402794:	004011ab 	.word	0x004011ab

00402798 <process_incoming_byte_wifi>:

void process_incoming_byte_wifi(uint8_t in_byte){
  402798:	b480      	push	{r7}
  40279a:	b083      	sub	sp, #12
  40279c:	af00      	add	r7, sp, #0
  40279e:	4603      	mov	r3, r0
  4027a0:	71fb      	strb	r3, [r7, #7]
	input_line_wifi[input_pos_wifi++] = in_byte;
  4027a2:	4b06      	ldr	r3, [pc, #24]	; (4027bc <process_incoming_byte_wifi+0x24>)
  4027a4:	681b      	ldr	r3, [r3, #0]
  4027a6:	1c5a      	adds	r2, r3, #1
  4027a8:	4904      	ldr	r1, [pc, #16]	; (4027bc <process_incoming_byte_wifi+0x24>)
  4027aa:	600a      	str	r2, [r1, #0]
  4027ac:	4904      	ldr	r1, [pc, #16]	; (4027c0 <process_incoming_byte_wifi+0x28>)
  4027ae:	79fa      	ldrb	r2, [r7, #7]
  4027b0:	54ca      	strb	r2, [r1, r3]
}
  4027b2:	bf00      	nop
  4027b4:	370c      	adds	r7, #12
  4027b6:	46bd      	mov	sp, r7
  4027b8:	bc80      	pop	{r7}
  4027ba:	4770      	bx	lr
  4027bc:	20000a68 	.word	0x20000a68
  4027c0:	20019164 	.word	0x20019164

004027c4 <process_data_wifi>:

void process_data_wifi(){
  4027c4:	b580      	push	{r7, lr}
  4027c6:	af00      	add	r7, sp, #0
	if (strstr(input_line_wifi, "Start transfer")){
  4027c8:	490f      	ldr	r1, [pc, #60]	; (402808 <process_data_wifi+0x44>)
  4027ca:	4810      	ldr	r0, [pc, #64]	; (40280c <process_data_wifi+0x48>)
  4027cc:	4b10      	ldr	r3, [pc, #64]	; (402810 <process_data_wifi+0x4c>)
  4027ce:	4798      	blx	r3
  4027d0:	4603      	mov	r3, r0
  4027d2:	2b00      	cmp	r3, #0
  4027d4:	d002      	beq.n	4027dc <process_data_wifi+0x18>
		Ready2TransferFlag = 1; // Wifi Chip is ready to receive data
  4027d6:	4b0f      	ldr	r3, [pc, #60]	; (402814 <process_data_wifi+0x50>)
  4027d8:	2201      	movs	r2, #1
  4027da:	601a      	str	r2, [r3, #0]
	}
	if (strstr(input_line_wifi, "None")){
  4027dc:	490e      	ldr	r1, [pc, #56]	; (402818 <process_data_wifi+0x54>)
  4027de:	480b      	ldr	r0, [pc, #44]	; (40280c <process_data_wifi+0x48>)
  4027e0:	4b0b      	ldr	r3, [pc, #44]	; (402810 <process_data_wifi+0x4c>)
  4027e2:	4798      	blx	r3
  4027e4:	4603      	mov	r3, r0
  4027e6:	2b00      	cmp	r3, #0
  4027e8:	d002      	beq.n	4027f0 <process_data_wifi+0x2c>
		StreamOpen = 0; // A stream is not open 
  4027ea:	4b0c      	ldr	r3, [pc, #48]	; (40281c <process_data_wifi+0x58>)
  4027ec:	2200      	movs	r2, #0
  4027ee:	601a      	str	r2, [r3, #0]
	}
	if (strstr(input_line_wifi, "Websocket connected")){
  4027f0:	490b      	ldr	r1, [pc, #44]	; (402820 <process_data_wifi+0x5c>)
  4027f2:	4806      	ldr	r0, [pc, #24]	; (40280c <process_data_wifi+0x48>)
  4027f4:	4b06      	ldr	r3, [pc, #24]	; (402810 <process_data_wifi+0x4c>)
  4027f6:	4798      	blx	r3
  4027f8:	4603      	mov	r3, r0
  4027fa:	2b00      	cmp	r3, #0
  4027fc:	d002      	beq.n	402804 <process_data_wifi+0x40>
		StreamOpen = 1; // A stream is open
  4027fe:	4b07      	ldr	r3, [pc, #28]	; (40281c <process_data_wifi+0x58>)
  402800:	2201      	movs	r2, #1
  402802:	601a      	str	r2, [r3, #0]
	}
}
  402804:	bf00      	nop
  402806:	bd80      	pop	{r7, pc}
  402808:	00408e94 	.word	0x00408e94
  40280c:	20019164 	.word	0x20019164
  402810:	00403a41 	.word	0x00403a41
  402814:	20000a6c 	.word	0x20000a6c
  402818:	00408ea4 	.word	0x00408ea4
  40281c:	20000a70 	.word	0x20000a70
  402820:	00408eac 	.word	0x00408eac

00402824 <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt){
  402824:	b580      	push	{r7, lr}
  402826:	b082      	sub	sp, #8
  402828:	af00      	add	r7, sp, #0
  40282a:	6078      	str	r0, [r7, #4]
  40282c:	460b      	mov	r3, r1
  40282e:	70fb      	strb	r3, [r7, #3]
	usart_write_line(WIFI_USART,comm);
  402830:	6879      	ldr	r1, [r7, #4]
  402832:	480f      	ldr	r0, [pc, #60]	; (402870 <write_wifi_command+0x4c>)
  402834:	4b0f      	ldr	r3, [pc, #60]	; (402874 <write_wifi_command+0x50>)
  402836:	4798      	blx	r3
	while ((counts<cnt) & (wifi_comm_flag==0) ){;}
  402838:	bf00      	nop
  40283a:	4b0f      	ldr	r3, [pc, #60]	; (402878 <write_wifi_command+0x54>)
  40283c:	781b      	ldrb	r3, [r3, #0]
  40283e:	b2db      	uxtb	r3, r3
  402840:	78fa      	ldrb	r2, [r7, #3]
  402842:	429a      	cmp	r2, r3
  402844:	bf8c      	ite	hi
  402846:	2301      	movhi	r3, #1
  402848:	2300      	movls	r3, #0
  40284a:	b2da      	uxtb	r2, r3
  40284c:	4b0b      	ldr	r3, [pc, #44]	; (40287c <write_wifi_command+0x58>)
  40284e:	681b      	ldr	r3, [r3, #0]
  402850:	2b00      	cmp	r3, #0
  402852:	bf0c      	ite	eq
  402854:	2301      	moveq	r3, #1
  402856:	2300      	movne	r3, #0
  402858:	b2db      	uxtb	r3, r3
  40285a:	4013      	ands	r3, r2
  40285c:	b2db      	uxtb	r3, r3
  40285e:	2b00      	cmp	r3, #0
  402860:	d1eb      	bne.n	40283a <write_wifi_command+0x16>
		wifi_comm_flag=0;
  402862:	4b06      	ldr	r3, [pc, #24]	; (40287c <write_wifi_command+0x58>)
  402864:	2200      	movs	r2, #0
  402866:	601a      	str	r2, [r3, #0]
		return;
  402868:	bf00      	nop
}
  40286a:	3708      	adds	r7, #8
  40286c:	46bd      	mov	sp, r7
  40286e:	bd80      	pop	{r7, pc}
  402870:	40024000 	.word	0x40024000
  402874:	00400951 	.word	0x00400951
  402878:	20019160 	.word	0x20019160
  40287c:	20000a74 	.word	0x20000a74

00402880 <write_image_to_file>:

void write_image_to_file(void){
  402880:	b5f0      	push	{r4, r5, r6, r7, lr}
  402882:	b09b      	sub	sp, #108	; 0x6c
  402884:	af00      	add	r7, sp, #0
	char image_command[100];
	sprintf(image_command,"image_transfer %d\r\n",IMG_LENGTH);
  402886:	4b2e      	ldr	r3, [pc, #184]	; (402940 <write_image_to_file+0xc0>)
  402888:	681a      	ldr	r2, [r3, #0]
  40288a:	463b      	mov	r3, r7
  40288c:	492d      	ldr	r1, [pc, #180]	; (402944 <write_image_to_file+0xc4>)
  40288e:	4618      	mov	r0, r3
  402890:	4b2d      	ldr	r3, [pc, #180]	; (402948 <write_image_to_file+0xc8>)
  402892:	4798      	blx	r3
	write_wifi_command(image_command,2);
  402894:	463b      	mov	r3, r7
  402896:	2102      	movs	r1, #2
  402898:	4618      	mov	r0, r3
  40289a:	4b2c      	ldr	r3, [pc, #176]	; (40294c <write_image_to_file+0xcc>)
  40289c:	4798      	blx	r3
	
	while(!Ready2TransferFlag){;}
  40289e:	bf00      	nop
  4028a0:	4b2b      	ldr	r3, [pc, #172]	; (402950 <write_image_to_file+0xd0>)
  4028a2:	681b      	ldr	r3, [r3, #0]
  4028a4:	2b00      	cmp	r3, #0
  4028a6:	d0fb      	beq.n	4028a0 <write_image_to_file+0x20>
	
	for(int i=IMG_START;i<=IMG_END;i++){
  4028a8:	4b2a      	ldr	r3, [pc, #168]	; (402954 <write_image_to_file+0xd4>)
  4028aa:	681b      	ldr	r3, [r3, #0]
  4028ac:	667b      	str	r3, [r7, #100]	; 0x64
  4028ae:	e00a      	b.n	4028c6 <write_image_to_file+0x46>
		usart_putchar(WIFI_USART,IMG_BUFFER[i]);
  4028b0:	4a29      	ldr	r2, [pc, #164]	; (402958 <write_image_to_file+0xd8>)
  4028b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4028b4:	4413      	add	r3, r2
  4028b6:	781b      	ldrb	r3, [r3, #0]
  4028b8:	4619      	mov	r1, r3
  4028ba:	4828      	ldr	r0, [pc, #160]	; (40295c <write_image_to_file+0xdc>)
  4028bc:	4b28      	ldr	r3, [pc, #160]	; (402960 <write_image_to_file+0xe0>)
  4028be:	4798      	blx	r3
	for(int i=IMG_START;i<=IMG_END;i++){
  4028c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4028c2:	3301      	adds	r3, #1
  4028c4:	667b      	str	r3, [r7, #100]	; 0x64
  4028c6:	4b27      	ldr	r3, [pc, #156]	; (402964 <write_image_to_file+0xe4>)
  4028c8:	681b      	ldr	r3, [r3, #0]
  4028ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  4028cc:	429a      	cmp	r2, r3
  4028ce:	ddef      	ble.n	4028b0 <write_image_to_file+0x30>
	}
	
	Ready2TransferFlag = 0;
  4028d0:	4b1f      	ldr	r3, [pc, #124]	; (402950 <write_image_to_file+0xd0>)
  4028d2:	2200      	movs	r2, #0
  4028d4:	601a      	str	r2, [r3, #0]
	delay_ms(50);
  4028d6:	4b24      	ldr	r3, [pc, #144]	; (402968 <write_image_to_file+0xe8>)
  4028d8:	4798      	blx	r3
  4028da:	4603      	mov	r3, r0
  4028dc:	4619      	mov	r1, r3
  4028de:	f04f 0200 	mov.w	r2, #0
  4028e2:	460b      	mov	r3, r1
  4028e4:	4614      	mov	r4, r2
  4028e6:	18db      	adds	r3, r3, r3
  4028e8:	eb44 0404 	adc.w	r4, r4, r4
  4028ec:	185b      	adds	r3, r3, r1
  4028ee:	eb44 0402 	adc.w	r4, r4, r2
  4028f2:	00e6      	lsls	r6, r4, #3
  4028f4:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  4028f8:	00dd      	lsls	r5, r3, #3
  4028fa:	462b      	mov	r3, r5
  4028fc:	4634      	mov	r4, r6
  4028fe:	185b      	adds	r3, r3, r1
  402900:	eb44 0402 	adc.w	r4, r4, r2
  402904:	18db      	adds	r3, r3, r3
  402906:	eb44 0404 	adc.w	r4, r4, r4
  40290a:	4619      	mov	r1, r3
  40290c:	4622      	mov	r2, r4
  40290e:	f243 63af 	movw	r3, #13999	; 0x36af
  402912:	f04f 0400 	mov.w	r4, #0
  402916:	18cd      	adds	r5, r1, r3
  402918:	eb42 0604 	adc.w	r6, r2, r4
  40291c:	4628      	mov	r0, r5
  40291e:	4631      	mov	r1, r6
  402920:	4c12      	ldr	r4, [pc, #72]	; (40296c <write_image_to_file+0xec>)
  402922:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402926:	f04f 0300 	mov.w	r3, #0
  40292a:	47a0      	blx	r4
  40292c:	4603      	mov	r3, r0
  40292e:	460c      	mov	r4, r1
  402930:	4618      	mov	r0, r3
  402932:	4b0f      	ldr	r3, [pc, #60]	; (402970 <write_image_to_file+0xf0>)
  402934:	4798      	blx	r3
  402936:	bf00      	nop
  402938:	376c      	adds	r7, #108	; 0x6c
  40293a:	46bd      	mov	sp, r7
  40293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40293e:	bf00      	nop
  402940:	20000a58 	.word	0x20000a58
  402944:	00408ec0 	.word	0x00408ec0
  402948:	00403745 	.word	0x00403745
  40294c:	00402825 	.word	0x00402825
  402950:	20000a6c 	.word	0x20000a6c
  402954:	20019158 	.word	0x20019158
  402958:	20000ab8 	.word	0x20000ab8
  40295c:	40024000 	.word	0x40024000
  402960:	00400921 	.word	0x00400921
  402964:	2001915c 	.word	0x2001915c
  402968:	00402545 	.word	0x00402545
  40296c:	00403349 	.word	0x00403349
  402970:	20000001 	.word	0x20000001

00402974 <sysclk_enable_peripheral_clock>:
{
  402974:	b580      	push	{r7, lr}
  402976:	b082      	sub	sp, #8
  402978:	af00      	add	r7, sp, #0
  40297a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40297c:	6878      	ldr	r0, [r7, #4]
  40297e:	4b03      	ldr	r3, [pc, #12]	; (40298c <sysclk_enable_peripheral_clock+0x18>)
  402980:	4798      	blx	r3
}
  402982:	bf00      	nop
  402984:	3708      	adds	r7, #8
  402986:	46bd      	mov	sp, r7
  402988:	bd80      	pop	{r7, pc}
  40298a:	bf00      	nop
  40298c:	004016d5 	.word	0x004016d5

00402990 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402990:	b580      	push	{r7, lr}
  402992:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402994:	200b      	movs	r0, #11
  402996:	4b03      	ldr	r3, [pc, #12]	; (4029a4 <ioport_init+0x14>)
  402998:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40299a:	200c      	movs	r0, #12
  40299c:	4b01      	ldr	r3, [pc, #4]	; (4029a4 <ioport_init+0x14>)
  40299e:	4798      	blx	r3
	arch_ioport_init();
}
  4029a0:	bf00      	nop
  4029a2:	bd80      	pop	{r7, pc}
  4029a4:	00402975 	.word	0x00402975

004029a8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4029a8:	b480      	push	{r7}
  4029aa:	b08d      	sub	sp, #52	; 0x34
  4029ac:	af00      	add	r7, sp, #0
  4029ae:	6078      	str	r0, [r7, #4]
  4029b0:	6039      	str	r1, [r7, #0]
  4029b2:	687b      	ldr	r3, [r7, #4]
  4029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4029b6:	683b      	ldr	r3, [r7, #0]
  4029b8:	62bb      	str	r3, [r7, #40]	; 0x28
  4029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4029bc:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029c0:	095a      	lsrs	r2, r3, #5
  4029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4029c4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4029c6:	6a3b      	ldr	r3, [r7, #32]
  4029c8:	f003 031f 	and.w	r3, r3, #31
  4029cc:	2101      	movs	r1, #1
  4029ce:	fa01 f303 	lsl.w	r3, r1, r3
  4029d2:	61fa      	str	r2, [r7, #28]
  4029d4:	61bb      	str	r3, [r7, #24]
  4029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4029d8:	617b      	str	r3, [r7, #20]
  4029da:	69fb      	ldr	r3, [r7, #28]
  4029dc:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4029de:	693b      	ldr	r3, [r7, #16]
  4029e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4029e4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4029e8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4029ea:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4029ec:	697b      	ldr	r3, [r7, #20]
  4029ee:	f003 0308 	and.w	r3, r3, #8
  4029f2:	2b00      	cmp	r3, #0
  4029f4:	d003      	beq.n	4029fe <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4029f6:	68fb      	ldr	r3, [r7, #12]
  4029f8:	69ba      	ldr	r2, [r7, #24]
  4029fa:	665a      	str	r2, [r3, #100]	; 0x64
  4029fc:	e002      	b.n	402a04 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4029fe:	68fb      	ldr	r3, [r7, #12]
  402a00:	69ba      	ldr	r2, [r7, #24]
  402a02:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  402a04:	697b      	ldr	r3, [r7, #20]
  402a06:	f003 0310 	and.w	r3, r3, #16
  402a0a:	2b00      	cmp	r3, #0
  402a0c:	d004      	beq.n	402a18 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  402a0e:	68fb      	ldr	r3, [r7, #12]
  402a10:	69ba      	ldr	r2, [r7, #24]
  402a12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  402a16:	e003      	b.n	402a20 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  402a18:	68fb      	ldr	r3, [r7, #12]
  402a1a:	69ba      	ldr	r2, [r7, #24]
  402a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  402a20:	697b      	ldr	r3, [r7, #20]
  402a22:	f003 0320 	and.w	r3, r3, #32
  402a26:	2b00      	cmp	r3, #0
  402a28:	d003      	beq.n	402a32 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  402a2a:	68fb      	ldr	r3, [r7, #12]
  402a2c:	69ba      	ldr	r2, [r7, #24]
  402a2e:	651a      	str	r2, [r3, #80]	; 0x50
  402a30:	e002      	b.n	402a38 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  402a32:	68fb      	ldr	r3, [r7, #12]
  402a34:	69ba      	ldr	r2, [r7, #24]
  402a36:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  402a38:	697b      	ldr	r3, [r7, #20]
  402a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  402a3e:	2b00      	cmp	r3, #0
  402a40:	d003      	beq.n	402a4a <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  402a42:	68fb      	ldr	r3, [r7, #12]
  402a44:	69ba      	ldr	r2, [r7, #24]
  402a46:	621a      	str	r2, [r3, #32]
  402a48:	e002      	b.n	402a50 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  402a4a:	68fb      	ldr	r3, [r7, #12]
  402a4c:	69ba      	ldr	r2, [r7, #24]
  402a4e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  402a50:	697b      	ldr	r3, [r7, #20]
  402a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402a56:	2b00      	cmp	r3, #0
  402a58:	d004      	beq.n	402a64 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402a5a:	68fb      	ldr	r3, [r7, #12]
  402a5c:	69ba      	ldr	r2, [r7, #24]
  402a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402a62:	e003      	b.n	402a6c <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402a64:	68fb      	ldr	r3, [r7, #12]
  402a66:	69ba      	ldr	r2, [r7, #24]
  402a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402a6c:	697b      	ldr	r3, [r7, #20]
  402a6e:	f003 0301 	and.w	r3, r3, #1
  402a72:	2b00      	cmp	r3, #0
  402a74:	d006      	beq.n	402a84 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  402a76:	68fb      	ldr	r3, [r7, #12]
  402a78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402a7a:	69bb      	ldr	r3, [r7, #24]
  402a7c:	431a      	orrs	r2, r3
  402a7e:	68fb      	ldr	r3, [r7, #12]
  402a80:	671a      	str	r2, [r3, #112]	; 0x70
  402a82:	e006      	b.n	402a92 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402a84:	68fb      	ldr	r3, [r7, #12]
  402a86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402a88:	69bb      	ldr	r3, [r7, #24]
  402a8a:	43db      	mvns	r3, r3
  402a8c:	401a      	ands	r2, r3
  402a8e:	68fb      	ldr	r3, [r7, #12]
  402a90:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  402a92:	697b      	ldr	r3, [r7, #20]
  402a94:	f003 0302 	and.w	r3, r3, #2
  402a98:	2b00      	cmp	r3, #0
  402a9a:	d006      	beq.n	402aaa <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402a9c:	68fb      	ldr	r3, [r7, #12]
  402a9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402aa0:	69bb      	ldr	r3, [r7, #24]
  402aa2:	431a      	orrs	r2, r3
  402aa4:	68fb      	ldr	r3, [r7, #12]
  402aa6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  402aa8:	e006      	b.n	402ab8 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402aaa:	68fb      	ldr	r3, [r7, #12]
  402aac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402aae:	69bb      	ldr	r3, [r7, #24]
  402ab0:	43db      	mvns	r3, r3
  402ab2:	401a      	ands	r2, r3
  402ab4:	68fb      	ldr	r3, [r7, #12]
  402ab6:	675a      	str	r2, [r3, #116]	; 0x74
  402ab8:	bf00      	nop
  402aba:	3734      	adds	r7, #52	; 0x34
  402abc:	46bd      	mov	sp, r7
  402abe:	bc80      	pop	{r7}
  402ac0:	4770      	bx	lr

00402ac2 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402ac2:	b480      	push	{r7}
  402ac4:	b08d      	sub	sp, #52	; 0x34
  402ac6:	af00      	add	r7, sp, #0
  402ac8:	6078      	str	r0, [r7, #4]
  402aca:	460b      	mov	r3, r1
  402acc:	70fb      	strb	r3, [r7, #3]
  402ace:	687b      	ldr	r3, [r7, #4]
  402ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  402ad2:	78fb      	ldrb	r3, [r7, #3]
  402ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402ada:	627b      	str	r3, [r7, #36]	; 0x24
  402adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ade:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  402ae0:	6a3b      	ldr	r3, [r7, #32]
  402ae2:	095b      	lsrs	r3, r3, #5
  402ae4:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402ae6:	69fb      	ldr	r3, [r7, #28]
  402ae8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402aec:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402af0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402af2:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402af8:	2b01      	cmp	r3, #1
  402afa:	d109      	bne.n	402b10 <ioport_set_pin_dir+0x4e>
  402afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402afe:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402b00:	697b      	ldr	r3, [r7, #20]
  402b02:	f003 031f 	and.w	r3, r3, #31
  402b06:	2201      	movs	r2, #1
  402b08:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402b0a:	69bb      	ldr	r3, [r7, #24]
  402b0c:	611a      	str	r2, [r3, #16]
  402b0e:	e00c      	b.n	402b2a <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402b10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402b14:	2b00      	cmp	r3, #0
  402b16:	d108      	bne.n	402b2a <ioport_set_pin_dir+0x68>
  402b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b1a:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402b1c:	693b      	ldr	r3, [r7, #16]
  402b1e:	f003 031f 	and.w	r3, r3, #31
  402b22:	2201      	movs	r2, #1
  402b24:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402b26:	69bb      	ldr	r3, [r7, #24]
  402b28:	615a      	str	r2, [r3, #20]
  402b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b2c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402b2e:	68fb      	ldr	r3, [r7, #12]
  402b30:	f003 031f 	and.w	r3, r3, #31
  402b34:	2201      	movs	r2, #1
  402b36:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402b38:	69bb      	ldr	r3, [r7, #24]
  402b3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402b3e:	bf00      	nop
  402b40:	3734      	adds	r7, #52	; 0x34
  402b42:	46bd      	mov	sp, r7
  402b44:	bc80      	pop	{r7}
  402b46:	4770      	bx	lr

00402b48 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402b48:	b480      	push	{r7}
  402b4a:	b08b      	sub	sp, #44	; 0x2c
  402b4c:	af00      	add	r7, sp, #0
  402b4e:	6078      	str	r0, [r7, #4]
  402b50:	460b      	mov	r3, r1
  402b52:	70fb      	strb	r3, [r7, #3]
  402b54:	687b      	ldr	r3, [r7, #4]
  402b56:	627b      	str	r3, [r7, #36]	; 0x24
  402b58:	78fb      	ldrb	r3, [r7, #3]
  402b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b60:	61fb      	str	r3, [r7, #28]
  402b62:	69fb      	ldr	r3, [r7, #28]
  402b64:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402b66:	69bb      	ldr	r3, [r7, #24]
  402b68:	095b      	lsrs	r3, r3, #5
  402b6a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b6c:	697b      	ldr	r3, [r7, #20]
  402b6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402b72:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402b76:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402b78:	613b      	str	r3, [r7, #16]

	if (level) {
  402b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402b7e:	2b00      	cmp	r3, #0
  402b80:	d009      	beq.n	402b96 <ioport_set_pin_level+0x4e>
  402b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b84:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402b86:	68fb      	ldr	r3, [r7, #12]
  402b88:	f003 031f 	and.w	r3, r3, #31
  402b8c:	2201      	movs	r2, #1
  402b8e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402b90:	693b      	ldr	r3, [r7, #16]
  402b92:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  402b94:	e008      	b.n	402ba8 <ioport_set_pin_level+0x60>
  402b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b98:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402b9a:	68bb      	ldr	r3, [r7, #8]
  402b9c:	f003 031f 	and.w	r3, r3, #31
  402ba0:	2201      	movs	r2, #1
  402ba2:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402ba4:	693b      	ldr	r3, [r7, #16]
  402ba6:	635a      	str	r2, [r3, #52]	; 0x34
  402ba8:	bf00      	nop
  402baa:	372c      	adds	r7, #44	; 0x2c
  402bac:	46bd      	mov	sp, r7
  402bae:	bc80      	pop	{r7}
  402bb0:	4770      	bx	lr
	...

00402bb4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  402bb4:	b580      	push	{r7, lr}
  402bb6:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	ioport_init();
  402bb8:	4b13      	ldr	r3, [pc, #76]	; (402c08 <board_init+0x54>)
  402bba:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  402bbc:	2101      	movs	r1, #1
  402bbe:	2013      	movs	r0, #19
  402bc0:	4b12      	ldr	r3, [pc, #72]	; (402c0c <board_init+0x58>)
  402bc2:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  402bc4:	2101      	movs	r1, #1
  402bc6:	2013      	movs	r0, #19
  402bc8:	4b11      	ldr	r3, [pc, #68]	; (402c10 <board_init+0x5c>)
  402bca:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_SETUP_BUTTON_PIN, IOPORT_DIR_INPUT);
  402bcc:	2100      	movs	r1, #0
  402bce:	2002      	movs	r0, #2
  402bd0:	4b0e      	ldr	r3, [pc, #56]	; (402c0c <board_init+0x58>)
  402bd2:	4798      	blx	r3
	ioport_set_pin_mode(WIFI_SETUP_BUTTON_PIN, IOPORT_MODE_PULLUP);
  402bd4:	2108      	movs	r1, #8
  402bd6:	2002      	movs	r0, #2
  402bd8:	4b0e      	ldr	r3, [pc, #56]	; (402c14 <board_init+0x60>)
  402bda:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
  402bdc:	2101      	movs	r1, #1
  402bde:	2007      	movs	r0, #7
  402be0:	4b0a      	ldr	r3, [pc, #40]	; (402c0c <board_init+0x58>)
  402be2:	4798      	blx	r3
	ioport_set_pin_level(WIFI_CTS_PIN, false);
  402be4:	2100      	movs	r1, #0
  402be6:	2007      	movs	r0, #7
  402be8:	4b09      	ldr	r3, [pc, #36]	; (402c10 <board_init+0x5c>)
  402bea:	4798      	blx	r3
	
	//Pull RST pin of Camera high
	ioport_set_pin_dir(CAM_RST_PIN, IOPORT_DIR_OUTPUT);
  402bec:	2101      	movs	r1, #1
  402bee:	2014      	movs	r0, #20
  402bf0:	4b06      	ldr	r3, [pc, #24]	; (402c0c <board_init+0x58>)
  402bf2:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST_PIN, true);
  402bf4:	2101      	movs	r1, #1
  402bf6:	2014      	movs	r0, #20
  402bf8:	4b05      	ldr	r3, [pc, #20]	; (402c10 <board_init+0x5c>)
  402bfa:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_NETWORK_STATUS_PIN, IOPORT_DIR_INPUT);
  402bfc:	2100      	movs	r1, #0
  402bfe:	200b      	movs	r0, #11
  402c00:	4b02      	ldr	r3, [pc, #8]	; (402c0c <board_init+0x58>)
  402c02:	4798      	blx	r3

}
  402c04:	bf00      	nop
  402c06:	bd80      	pop	{r7, pc}
  402c08:	00402991 	.word	0x00402991
  402c0c:	00402ac3 	.word	0x00402ac3
  402c10:	00402b49 	.word	0x00402b49
  402c14:	004029a9 	.word	0x004029a9

00402c18 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402c18:	b580      	push	{r7, lr}
  402c1a:	b084      	sub	sp, #16
  402c1c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  402c1e:	4b27      	ldr	r3, [pc, #156]	; (402cbc <Reset_Handler+0xa4>)
  402c20:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402c22:	4b27      	ldr	r3, [pc, #156]	; (402cc0 <Reset_Handler+0xa8>)
  402c24:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  402c26:	68fa      	ldr	r2, [r7, #12]
  402c28:	68bb      	ldr	r3, [r7, #8]
  402c2a:	429a      	cmp	r2, r3
  402c2c:	d90d      	bls.n	402c4a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402c2e:	e007      	b.n	402c40 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402c30:	68bb      	ldr	r3, [r7, #8]
  402c32:	1d1a      	adds	r2, r3, #4
  402c34:	60ba      	str	r2, [r7, #8]
  402c36:	68fa      	ldr	r2, [r7, #12]
  402c38:	1d11      	adds	r1, r2, #4
  402c3a:	60f9      	str	r1, [r7, #12]
  402c3c:	6812      	ldr	r2, [r2, #0]
  402c3e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402c40:	68bb      	ldr	r3, [r7, #8]
  402c42:	4a20      	ldr	r2, [pc, #128]	; (402cc4 <Reset_Handler+0xac>)
  402c44:	4293      	cmp	r3, r2
  402c46:	d3f3      	bcc.n	402c30 <Reset_Handler+0x18>
  402c48:	e020      	b.n	402c8c <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  402c4a:	68fa      	ldr	r2, [r7, #12]
  402c4c:	68bb      	ldr	r3, [r7, #8]
  402c4e:	429a      	cmp	r2, r3
  402c50:	d21c      	bcs.n	402c8c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402c52:	4a1c      	ldr	r2, [pc, #112]	; (402cc4 <Reset_Handler+0xac>)
  402c54:	4b1a      	ldr	r3, [pc, #104]	; (402cc0 <Reset_Handler+0xa8>)
  402c56:	1ad3      	subs	r3, r2, r3
  402c58:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402c5a:	68fa      	ldr	r2, [r7, #12]
  402c5c:	687b      	ldr	r3, [r7, #4]
  402c5e:	4413      	add	r3, r2
  402c60:	3b04      	subs	r3, #4
  402c62:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402c64:	68ba      	ldr	r2, [r7, #8]
  402c66:	687b      	ldr	r3, [r7, #4]
  402c68:	4413      	add	r3, r2
  402c6a:	3b04      	subs	r3, #4
  402c6c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402c6e:	e00a      	b.n	402c86 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402c70:	68bb      	ldr	r3, [r7, #8]
  402c72:	1f1a      	subs	r2, r3, #4
  402c74:	60ba      	str	r2, [r7, #8]
  402c76:	68fa      	ldr	r2, [r7, #12]
  402c78:	1f11      	subs	r1, r2, #4
  402c7a:	60f9      	str	r1, [r7, #12]
  402c7c:	6812      	ldr	r2, [r2, #0]
  402c7e:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402c80:	687b      	ldr	r3, [r7, #4]
  402c82:	3b04      	subs	r3, #4
  402c84:	607b      	str	r3, [r7, #4]
  402c86:	687b      	ldr	r3, [r7, #4]
  402c88:	2b00      	cmp	r3, #0
  402c8a:	d1f1      	bne.n	402c70 <Reset_Handler+0x58>
		}
	}
	__NOP();
  402c8c:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402c8e:	4b0e      	ldr	r3, [pc, #56]	; (402cc8 <Reset_Handler+0xb0>)
  402c90:	60bb      	str	r3, [r7, #8]
  402c92:	e004      	b.n	402c9e <Reset_Handler+0x86>
		*pDest++ = 0;
  402c94:	68bb      	ldr	r3, [r7, #8]
  402c96:	1d1a      	adds	r2, r3, #4
  402c98:	60ba      	str	r2, [r7, #8]
  402c9a:	2200      	movs	r2, #0
  402c9c:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402c9e:	68bb      	ldr	r3, [r7, #8]
  402ca0:	4a0a      	ldr	r2, [pc, #40]	; (402ccc <Reset_Handler+0xb4>)
  402ca2:	4293      	cmp	r3, r2
  402ca4:	d3f6      	bcc.n	402c94 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402ca6:	4b0a      	ldr	r3, [pc, #40]	; (402cd0 <Reset_Handler+0xb8>)
  402ca8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402caa:	4a0a      	ldr	r2, [pc, #40]	; (402cd4 <Reset_Handler+0xbc>)
  402cac:	68fb      	ldr	r3, [r7, #12]
  402cae:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402cb0:	4b09      	ldr	r3, [pc, #36]	; (402cd8 <Reset_Handler+0xc0>)
  402cb2:	4798      	blx	r3

	/* Branch to main function */
	main();
  402cb4:	4b09      	ldr	r3, [pc, #36]	; (402cdc <Reset_Handler+0xc4>)
  402cb6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402cb8:	e7fe      	b.n	402cb8 <Reset_Handler+0xa0>
  402cba:	bf00      	nop
  402cbc:	004091cc 	.word	0x004091cc
  402cc0:	20000000 	.word	0x20000000
  402cc4:	200009c0 	.word	0x200009c0
  402cc8:	200009c0 	.word	0x200009c0
  402ccc:	20019574 	.word	0x20019574
  402cd0:	00400000 	.word	0x00400000
  402cd4:	e000ed00 	.word	0xe000ed00
  402cd8:	00403659 	.word	0x00403659
  402cdc:	004030c9 	.word	0x004030c9

00402ce0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402ce0:	b480      	push	{r7}
  402ce2:	af00      	add	r7, sp, #0
	while (1) {
  402ce4:	e7fe      	b.n	402ce4 <Dummy_Handler+0x4>
	...

00402ce8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402ce8:	b480      	push	{r7}
  402cea:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402cec:	4b5d      	ldr	r3, [pc, #372]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402cf0:	f003 0303 	and.w	r3, r3, #3
  402cf4:	2b03      	cmp	r3, #3
  402cf6:	f200 8096 	bhi.w	402e26 <SystemCoreClockUpdate+0x13e>
  402cfa:	a201      	add	r2, pc, #4	; (adr r2, 402d00 <SystemCoreClockUpdate+0x18>)
  402cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d00:	00402d11 	.word	0x00402d11
  402d04:	00402d31 	.word	0x00402d31
  402d08:	00402d7b 	.word	0x00402d7b
  402d0c:	00402d7b 	.word	0x00402d7b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402d10:	4b55      	ldr	r3, [pc, #340]	; (402e68 <SystemCoreClockUpdate+0x180>)
  402d12:	695b      	ldr	r3, [r3, #20]
  402d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402d18:	2b00      	cmp	r3, #0
  402d1a:	d004      	beq.n	402d26 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402d1c:	4b53      	ldr	r3, [pc, #332]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d22:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402d24:	e080      	b.n	402e28 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402d26:	4b51      	ldr	r3, [pc, #324]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d28:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402d2c:	601a      	str	r2, [r3, #0]
		break;
  402d2e:	e07b      	b.n	402e28 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402d30:	4b4c      	ldr	r3, [pc, #304]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402d32:	6a1b      	ldr	r3, [r3, #32]
  402d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402d38:	2b00      	cmp	r3, #0
  402d3a:	d003      	beq.n	402d44 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402d3c:	4b4b      	ldr	r3, [pc, #300]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d3e:	4a4c      	ldr	r2, [pc, #304]	; (402e70 <SystemCoreClockUpdate+0x188>)
  402d40:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402d42:	e071      	b.n	402e28 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d44:	4b49      	ldr	r3, [pc, #292]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d46:	4a4b      	ldr	r2, [pc, #300]	; (402e74 <SystemCoreClockUpdate+0x18c>)
  402d48:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402d4a:	4b46      	ldr	r3, [pc, #280]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402d4c:	6a1b      	ldr	r3, [r3, #32]
  402d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d52:	2b10      	cmp	r3, #16
  402d54:	d008      	beq.n	402d68 <SystemCoreClockUpdate+0x80>
  402d56:	2b20      	cmp	r3, #32
  402d58:	d00a      	beq.n	402d70 <SystemCoreClockUpdate+0x88>
  402d5a:	2b00      	cmp	r3, #0
  402d5c:	d000      	beq.n	402d60 <SystemCoreClockUpdate+0x78>
			break;
  402d5e:	e00b      	b.n	402d78 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d60:	4b42      	ldr	r3, [pc, #264]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d62:	4a44      	ldr	r2, [pc, #272]	; (402e74 <SystemCoreClockUpdate+0x18c>)
  402d64:	601a      	str	r2, [r3, #0]
			break;
  402d66:	e007      	b.n	402d78 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402d68:	4b40      	ldr	r3, [pc, #256]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d6a:	4a43      	ldr	r2, [pc, #268]	; (402e78 <SystemCoreClockUpdate+0x190>)
  402d6c:	601a      	str	r2, [r3, #0]
			break;
  402d6e:	e003      	b.n	402d78 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402d70:	4b3e      	ldr	r3, [pc, #248]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d72:	4a3f      	ldr	r2, [pc, #252]	; (402e70 <SystemCoreClockUpdate+0x188>)
  402d74:	601a      	str	r2, [r3, #0]
			break;
  402d76:	bf00      	nop
		break;
  402d78:	e056      	b.n	402e28 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402d7a:	4b3a      	ldr	r3, [pc, #232]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402d7c:	6a1b      	ldr	r3, [r3, #32]
  402d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402d82:	2b00      	cmp	r3, #0
  402d84:	d003      	beq.n	402d8e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402d86:	4b39      	ldr	r3, [pc, #228]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d88:	4a39      	ldr	r2, [pc, #228]	; (402e70 <SystemCoreClockUpdate+0x188>)
  402d8a:	601a      	str	r2, [r3, #0]
  402d8c:	e019      	b.n	402dc2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d8e:	4b37      	ldr	r3, [pc, #220]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402d90:	4a38      	ldr	r2, [pc, #224]	; (402e74 <SystemCoreClockUpdate+0x18c>)
  402d92:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402d94:	4b33      	ldr	r3, [pc, #204]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402d96:	6a1b      	ldr	r3, [r3, #32]
  402d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d9c:	2b10      	cmp	r3, #16
  402d9e:	d008      	beq.n	402db2 <SystemCoreClockUpdate+0xca>
  402da0:	2b20      	cmp	r3, #32
  402da2:	d00a      	beq.n	402dba <SystemCoreClockUpdate+0xd2>
  402da4:	2b00      	cmp	r3, #0
  402da6:	d000      	beq.n	402daa <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402da8:	e00b      	b.n	402dc2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402daa:	4b30      	ldr	r3, [pc, #192]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402dac:	4a31      	ldr	r2, [pc, #196]	; (402e74 <SystemCoreClockUpdate+0x18c>)
  402dae:	601a      	str	r2, [r3, #0]
					break;
  402db0:	e007      	b.n	402dc2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402db2:	4b2e      	ldr	r3, [pc, #184]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402db4:	4a30      	ldr	r2, [pc, #192]	; (402e78 <SystemCoreClockUpdate+0x190>)
  402db6:	601a      	str	r2, [r3, #0]
					break;
  402db8:	e003      	b.n	402dc2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402dba:	4b2c      	ldr	r3, [pc, #176]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402dbc:	4a2c      	ldr	r2, [pc, #176]	; (402e70 <SystemCoreClockUpdate+0x188>)
  402dbe:	601a      	str	r2, [r3, #0]
					break;
  402dc0:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402dc2:	4b28      	ldr	r3, [pc, #160]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402dc6:	f003 0303 	and.w	r3, r3, #3
  402dca:	2b02      	cmp	r3, #2
  402dcc:	d115      	bne.n	402dfa <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402dce:	4b25      	ldr	r3, [pc, #148]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402dd2:	0c1b      	lsrs	r3, r3, #16
  402dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402dd8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402dda:	4a24      	ldr	r2, [pc, #144]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402ddc:	6812      	ldr	r2, [r2, #0]
  402dde:	fb02 f303 	mul.w	r3, r2, r3
  402de2:	4a22      	ldr	r2, [pc, #136]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402de4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402de6:	4b1f      	ldr	r3, [pc, #124]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402dea:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402dec:	4a1f      	ldr	r2, [pc, #124]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402dee:	6812      	ldr	r2, [r2, #0]
  402df0:	fbb2 f3f3 	udiv	r3, r2, r3
  402df4:	4a1d      	ldr	r2, [pc, #116]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402df6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402df8:	e016      	b.n	402e28 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402dfa:	4b1a      	ldr	r3, [pc, #104]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402dfe:	0c1b      	lsrs	r3, r3, #16
  402e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402e04:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402e06:	4a19      	ldr	r2, [pc, #100]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e08:	6812      	ldr	r2, [r2, #0]
  402e0a:	fb02 f303 	mul.w	r3, r2, r3
  402e0e:	4a17      	ldr	r2, [pc, #92]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e10:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402e12:	4b14      	ldr	r3, [pc, #80]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402e16:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402e18:	4a14      	ldr	r2, [pc, #80]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e1a:	6812      	ldr	r2, [r2, #0]
  402e1c:	fbb2 f3f3 	udiv	r3, r2, r3
  402e20:	4a12      	ldr	r2, [pc, #72]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e22:	6013      	str	r3, [r2, #0]
		break;
  402e24:	e000      	b.n	402e28 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402e26:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402e28:	4b0e      	ldr	r3, [pc, #56]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e30:	2b70      	cmp	r3, #112	; 0x70
  402e32:	d108      	bne.n	402e46 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402e34:	4b0d      	ldr	r3, [pc, #52]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e36:	681b      	ldr	r3, [r3, #0]
  402e38:	4a10      	ldr	r2, [pc, #64]	; (402e7c <SystemCoreClockUpdate+0x194>)
  402e3a:	fba2 2303 	umull	r2, r3, r2, r3
  402e3e:	085b      	lsrs	r3, r3, #1
  402e40:	4a0a      	ldr	r2, [pc, #40]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e42:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402e44:	e00a      	b.n	402e5c <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402e46:	4b07      	ldr	r3, [pc, #28]	; (402e64 <SystemCoreClockUpdate+0x17c>)
  402e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e4a:	091b      	lsrs	r3, r3, #4
  402e4c:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402e50:	4a06      	ldr	r2, [pc, #24]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e52:	6812      	ldr	r2, [r2, #0]
  402e54:	fa22 f303 	lsr.w	r3, r2, r3
  402e58:	4a04      	ldr	r2, [pc, #16]	; (402e6c <SystemCoreClockUpdate+0x184>)
  402e5a:	6013      	str	r3, [r2, #0]
}
  402e5c:	bf00      	nop
  402e5e:	46bd      	mov	sp, r7
  402e60:	bc80      	pop	{r7}
  402e62:	4770      	bx	lr
  402e64:	400e0400 	.word	0x400e0400
  402e68:	400e1410 	.word	0x400e1410
  402e6c:	2000000c 	.word	0x2000000c
  402e70:	00b71b00 	.word	0x00b71b00
  402e74:	003d0900 	.word	0x003d0900
  402e78:	007a1200 	.word	0x007a1200
  402e7c:	aaaaaaab 	.word	0xaaaaaaab

00402e80 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402e80:	b480      	push	{r7}
  402e82:	b083      	sub	sp, #12
  402e84:	af00      	add	r7, sp, #0
  402e86:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402e88:	687b      	ldr	r3, [r7, #4]
  402e8a:	4a18      	ldr	r2, [pc, #96]	; (402eec <system_init_flash+0x6c>)
  402e8c:	4293      	cmp	r3, r2
  402e8e:	d804      	bhi.n	402e9a <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402e90:	4b17      	ldr	r3, [pc, #92]	; (402ef0 <system_init_flash+0x70>)
  402e92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402e96:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402e98:	e023      	b.n	402ee2 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402e9a:	687b      	ldr	r3, [r7, #4]
  402e9c:	4a15      	ldr	r2, [pc, #84]	; (402ef4 <system_init_flash+0x74>)
  402e9e:	4293      	cmp	r3, r2
  402ea0:	d803      	bhi.n	402eaa <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402ea2:	4b13      	ldr	r3, [pc, #76]	; (402ef0 <system_init_flash+0x70>)
  402ea4:	4a14      	ldr	r2, [pc, #80]	; (402ef8 <system_init_flash+0x78>)
  402ea6:	601a      	str	r2, [r3, #0]
}
  402ea8:	e01b      	b.n	402ee2 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402eaa:	687b      	ldr	r3, [r7, #4]
  402eac:	4a13      	ldr	r2, [pc, #76]	; (402efc <system_init_flash+0x7c>)
  402eae:	4293      	cmp	r3, r2
  402eb0:	d803      	bhi.n	402eba <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402eb2:	4b0f      	ldr	r3, [pc, #60]	; (402ef0 <system_init_flash+0x70>)
  402eb4:	4a12      	ldr	r2, [pc, #72]	; (402f00 <system_init_flash+0x80>)
  402eb6:	601a      	str	r2, [r3, #0]
}
  402eb8:	e013      	b.n	402ee2 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402eba:	687b      	ldr	r3, [r7, #4]
  402ebc:	4a11      	ldr	r2, [pc, #68]	; (402f04 <system_init_flash+0x84>)
  402ebe:	4293      	cmp	r3, r2
  402ec0:	d803      	bhi.n	402eca <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402ec2:	4b0b      	ldr	r3, [pc, #44]	; (402ef0 <system_init_flash+0x70>)
  402ec4:	4a10      	ldr	r2, [pc, #64]	; (402f08 <system_init_flash+0x88>)
  402ec6:	601a      	str	r2, [r3, #0]
}
  402ec8:	e00b      	b.n	402ee2 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402eca:	687b      	ldr	r3, [r7, #4]
  402ecc:	4a0f      	ldr	r2, [pc, #60]	; (402f0c <system_init_flash+0x8c>)
  402ece:	4293      	cmp	r3, r2
  402ed0:	d804      	bhi.n	402edc <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402ed2:	4b07      	ldr	r3, [pc, #28]	; (402ef0 <system_init_flash+0x70>)
  402ed4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402ed8:	601a      	str	r2, [r3, #0]
}
  402eda:	e002      	b.n	402ee2 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402edc:	4b04      	ldr	r3, [pc, #16]	; (402ef0 <system_init_flash+0x70>)
  402ede:	4a0c      	ldr	r2, [pc, #48]	; (402f10 <system_init_flash+0x90>)
  402ee0:	601a      	str	r2, [r3, #0]
}
  402ee2:	bf00      	nop
  402ee4:	370c      	adds	r7, #12
  402ee6:	46bd      	mov	sp, r7
  402ee8:	bc80      	pop	{r7}
  402eea:	4770      	bx	lr
  402eec:	01312cff 	.word	0x01312cff
  402ef0:	400e0a00 	.word	0x400e0a00
  402ef4:	026259ff 	.word	0x026259ff
  402ef8:	04000100 	.word	0x04000100
  402efc:	039386ff 	.word	0x039386ff
  402f00:	04000200 	.word	0x04000200
  402f04:	04c4b3ff 	.word	0x04c4b3ff
  402f08:	04000300 	.word	0x04000300
  402f0c:	05f5e0ff 	.word	0x05f5e0ff
  402f10:	04000500 	.word	0x04000500

00402f14 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402f14:	b480      	push	{r7}
  402f16:	b085      	sub	sp, #20
  402f18:	af00      	add	r7, sp, #0
  402f1a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402f1c:	4b10      	ldr	r3, [pc, #64]	; (402f60 <_sbrk+0x4c>)
  402f1e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402f20:	4b10      	ldr	r3, [pc, #64]	; (402f64 <_sbrk+0x50>)
  402f22:	681b      	ldr	r3, [r3, #0]
  402f24:	2b00      	cmp	r3, #0
  402f26:	d102      	bne.n	402f2e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402f28:	4b0e      	ldr	r3, [pc, #56]	; (402f64 <_sbrk+0x50>)
  402f2a:	4a0f      	ldr	r2, [pc, #60]	; (402f68 <_sbrk+0x54>)
  402f2c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402f2e:	4b0d      	ldr	r3, [pc, #52]	; (402f64 <_sbrk+0x50>)
  402f30:	681b      	ldr	r3, [r3, #0]
  402f32:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402f34:	68ba      	ldr	r2, [r7, #8]
  402f36:	687b      	ldr	r3, [r7, #4]
  402f38:	441a      	add	r2, r3
  402f3a:	68fb      	ldr	r3, [r7, #12]
  402f3c:	429a      	cmp	r2, r3
  402f3e:	dd02      	ble.n	402f46 <_sbrk+0x32>
		return (caddr_t) -1;	
  402f40:	f04f 33ff 	mov.w	r3, #4294967295
  402f44:	e006      	b.n	402f54 <_sbrk+0x40>
	}

	heap += incr;
  402f46:	4b07      	ldr	r3, [pc, #28]	; (402f64 <_sbrk+0x50>)
  402f48:	681a      	ldr	r2, [r3, #0]
  402f4a:	687b      	ldr	r3, [r7, #4]
  402f4c:	4413      	add	r3, r2
  402f4e:	4a05      	ldr	r2, [pc, #20]	; (402f64 <_sbrk+0x50>)
  402f50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402f52:	68bb      	ldr	r3, [r7, #8]
}
  402f54:	4618      	mov	r0, r3
  402f56:	3714      	adds	r7, #20
  402f58:	46bd      	mov	sp, r7
  402f5a:	bc80      	pop	{r7}
  402f5c:	4770      	bx	lr
  402f5e:	bf00      	nop
  402f60:	2001fffc 	.word	0x2001fffc
  402f64:	20000a7c 	.word	0x20000a7c
  402f68:	2001c578 	.word	0x2001c578

00402f6c <osc_get_rate>:
{
  402f6c:	b480      	push	{r7}
  402f6e:	b083      	sub	sp, #12
  402f70:	af00      	add	r7, sp, #0
  402f72:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402f74:	687b      	ldr	r3, [r7, #4]
  402f76:	2b07      	cmp	r3, #7
  402f78:	d825      	bhi.n	402fc6 <osc_get_rate+0x5a>
  402f7a:	a201      	add	r2, pc, #4	; (adr r2, 402f80 <osc_get_rate+0x14>)
  402f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402f80:	00402fa1 	.word	0x00402fa1
  402f84:	00402fa7 	.word	0x00402fa7
  402f88:	00402fad 	.word	0x00402fad
  402f8c:	00402fb3 	.word	0x00402fb3
  402f90:	00402fb7 	.word	0x00402fb7
  402f94:	00402fbb 	.word	0x00402fbb
  402f98:	00402fbf 	.word	0x00402fbf
  402f9c:	00402fc3 	.word	0x00402fc3
		return OSC_SLCK_32K_RC_HZ;
  402fa0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402fa4:	e010      	b.n	402fc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402faa:	e00d      	b.n	402fc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402fb0:	e00a      	b.n	402fc8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402fb2:	4b08      	ldr	r3, [pc, #32]	; (402fd4 <osc_get_rate+0x68>)
  402fb4:	e008      	b.n	402fc8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402fb6:	4b08      	ldr	r3, [pc, #32]	; (402fd8 <osc_get_rate+0x6c>)
  402fb8:	e006      	b.n	402fc8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402fba:	4b08      	ldr	r3, [pc, #32]	; (402fdc <osc_get_rate+0x70>)
  402fbc:	e004      	b.n	402fc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402fbe:	4b07      	ldr	r3, [pc, #28]	; (402fdc <osc_get_rate+0x70>)
  402fc0:	e002      	b.n	402fc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402fc2:	4b06      	ldr	r3, [pc, #24]	; (402fdc <osc_get_rate+0x70>)
  402fc4:	e000      	b.n	402fc8 <osc_get_rate+0x5c>
	return 0;
  402fc6:	2300      	movs	r3, #0
}
  402fc8:	4618      	mov	r0, r3
  402fca:	370c      	adds	r7, #12
  402fcc:	46bd      	mov	sp, r7
  402fce:	bc80      	pop	{r7}
  402fd0:	4770      	bx	lr
  402fd2:	bf00      	nop
  402fd4:	003d0900 	.word	0x003d0900
  402fd8:	007a1200 	.word	0x007a1200
  402fdc:	00b71b00 	.word	0x00b71b00

00402fe0 <sysclk_get_main_hz>:
{
  402fe0:	b580      	push	{r7, lr}
  402fe2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402fe4:	2006      	movs	r0, #6
  402fe6:	4b04      	ldr	r3, [pc, #16]	; (402ff8 <sysclk_get_main_hz+0x18>)
  402fe8:	4798      	blx	r3
  402fea:	4602      	mov	r2, r0
  402fec:	4613      	mov	r3, r2
  402fee:	009b      	lsls	r3, r3, #2
  402ff0:	4413      	add	r3, r2
  402ff2:	009b      	lsls	r3, r3, #2
}
  402ff4:	4618      	mov	r0, r3
  402ff6:	bd80      	pop	{r7, pc}
  402ff8:	00402f6d 	.word	0x00402f6d

00402ffc <sysclk_get_cpu_hz>:
{
  402ffc:	b580      	push	{r7, lr}
  402ffe:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403000:	4b02      	ldr	r3, [pc, #8]	; (40300c <sysclk_get_cpu_hz+0x10>)
  403002:	4798      	blx	r3
  403004:	4603      	mov	r3, r0
  403006:	085b      	lsrs	r3, r3, #1
}
  403008:	4618      	mov	r0, r3
  40300a:	bd80      	pop	{r7, pc}
  40300c:	00402fe1 	.word	0x00402fe1

00403010 <ioport_set_pin_level>:
{
  403010:	b480      	push	{r7}
  403012:	b08b      	sub	sp, #44	; 0x2c
  403014:	af00      	add	r7, sp, #0
  403016:	6078      	str	r0, [r7, #4]
  403018:	460b      	mov	r3, r1
  40301a:	70fb      	strb	r3, [r7, #3]
  40301c:	687b      	ldr	r3, [r7, #4]
  40301e:	627b      	str	r3, [r7, #36]	; 0x24
  403020:	78fb      	ldrb	r3, [r7, #3]
  403022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  403026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403028:	61fb      	str	r3, [r7, #28]
  40302a:	69fb      	ldr	r3, [r7, #28]
  40302c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40302e:	69bb      	ldr	r3, [r7, #24]
  403030:	095b      	lsrs	r3, r3, #5
  403032:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403034:	697b      	ldr	r3, [r7, #20]
  403036:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40303a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40303e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  403040:	613b      	str	r3, [r7, #16]
	if (level) {
  403042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403046:	2b00      	cmp	r3, #0
  403048:	d009      	beq.n	40305e <ioport_set_pin_level+0x4e>
  40304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40304c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40304e:	68fb      	ldr	r3, [r7, #12]
  403050:	f003 031f 	and.w	r3, r3, #31
  403054:	2201      	movs	r2, #1
  403056:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403058:	693b      	ldr	r3, [r7, #16]
  40305a:	631a      	str	r2, [r3, #48]	; 0x30
}
  40305c:	e008      	b.n	403070 <ioport_set_pin_level+0x60>
  40305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403060:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  403062:	68bb      	ldr	r3, [r7, #8]
  403064:	f003 031f 	and.w	r3, r3, #31
  403068:	2201      	movs	r2, #1
  40306a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40306c:	693b      	ldr	r3, [r7, #16]
  40306e:	635a      	str	r2, [r3, #52]	; 0x34
  403070:	bf00      	nop
  403072:	372c      	adds	r7, #44	; 0x2c
  403074:	46bd      	mov	sp, r7
  403076:	bc80      	pop	{r7}
  403078:	4770      	bx	lr

0040307a <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40307a:	b480      	push	{r7}
  40307c:	b089      	sub	sp, #36	; 0x24
  40307e:	af00      	add	r7, sp, #0
  403080:	6078      	str	r0, [r7, #4]
  403082:	687b      	ldr	r3, [r7, #4]
  403084:	61fb      	str	r3, [r7, #28]
  403086:	69fb      	ldr	r3, [r7, #28]
  403088:	61bb      	str	r3, [r7, #24]
  40308a:	69bb      	ldr	r3, [r7, #24]
  40308c:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  40308e:	697b      	ldr	r3, [r7, #20]
  403090:	095b      	lsrs	r3, r3, #5
  403092:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403094:	693b      	ldr	r3, [r7, #16]
  403096:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40309a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40309e:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4030a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4030a2:	69fb      	ldr	r3, [r7, #28]
  4030a4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4030a6:	68fb      	ldr	r3, [r7, #12]
  4030a8:	f003 031f 	and.w	r3, r3, #31
  4030ac:	2101      	movs	r1, #1
  4030ae:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4030b2:	4013      	ands	r3, r2
  4030b4:	2b00      	cmp	r3, #0
  4030b6:	bf14      	ite	ne
  4030b8:	2301      	movne	r3, #1
  4030ba:	2300      	moveq	r3, #0
  4030bc:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4030be:	4618      	mov	r0, r3
  4030c0:	3724      	adds	r7, #36	; 0x24
  4030c2:	46bd      	mov	sp, r7
  4030c4:	bc80      	pop	{r7}
  4030c6:	4770      	bx	lr

004030c8 <main>:
#include "camera.h"
#include "wifi.h"
#include "timer_interface.h"

int main (void)
{
  4030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030cc:	b085      	sub	sp, #20
  4030ce:	af00      	add	r7, sp, #0
	// Initialization
	sysclk_init();
  4030d0:	4b85      	ldr	r3, [pc, #532]	; (4032e8 <main+0x220>)
  4030d2:	4798      	blx	r3
	wdt_disable(WDT);
  4030d4:	4885      	ldr	r0, [pc, #532]	; (4032ec <main+0x224>)
  4030d6:	4b86      	ldr	r3, [pc, #536]	; (4032f0 <main+0x228>)
  4030d8:	4798      	blx	r3
	board_init();
  4030da:	4b86      	ldr	r3, [pc, #536]	; (4032f4 <main+0x22c>)
  4030dc:	4798      	blx	r3
	init_camera();
  4030de:	4b86      	ldr	r3, [pc, #536]	; (4032f8 <main+0x230>)
  4030e0:	4798      	blx	r3
	
	// Configure peripheral pins, Initialize WiFi and camera modules
	configure_camera();
  4030e2:	4b86      	ldr	r3, [pc, #536]	; (4032fc <main+0x234>)
  4030e4:	4798      	blx	r3
	configure_tc();
  4030e6:	4b86      	ldr	r3, [pc, #536]	; (403300 <main+0x238>)
  4030e8:	4798      	blx	r3
	configure_usart_wifi();
  4030ea:	4b86      	ldr	r3, [pc, #536]	; (403304 <main+0x23c>)
  4030ec:	4798      	blx	r3
	configure_wifi_comm_pin();
  4030ee:	4b86      	ldr	r3, [pc, #536]	; (403308 <main+0x240>)
  4030f0:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  4030f2:	4b86      	ldr	r3, [pc, #536]	; (40330c <main+0x244>)
  4030f4:	4798      	blx	r3
	
	
	// Reset wifi module
	ioport_set_pin_level(WIFI_RESET_PIN, false);
  4030f6:	2100      	movs	r1, #0
  4030f8:	2013      	movs	r0, #19
  4030fa:	4b85      	ldr	r3, [pc, #532]	; (403310 <main+0x248>)
  4030fc:	4798      	blx	r3
	delay_ms(100);
  4030fe:	4b85      	ldr	r3, [pc, #532]	; (403314 <main+0x24c>)
  403100:	4798      	blx	r3
  403102:	4603      	mov	r3, r0
  403104:	4619      	mov	r1, r3
  403106:	f04f 0200 	mov.w	r2, #0
  40310a:	460b      	mov	r3, r1
  40310c:	4614      	mov	r4, r2
  40310e:	18db      	adds	r3, r3, r3
  403110:	eb44 0404 	adc.w	r4, r4, r4
  403114:	185b      	adds	r3, r3, r1
  403116:	eb44 0402 	adc.w	r4, r4, r2
  40311a:	0166      	lsls	r6, r4, #5
  40311c:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  403120:	015d      	lsls	r5, r3, #5
  403122:	195b      	adds	r3, r3, r5
  403124:	eb44 0406 	adc.w	r4, r4, r6
  403128:	185b      	adds	r3, r3, r1
  40312a:	eb44 0402 	adc.w	r4, r4, r2
  40312e:	f243 61af 	movw	r1, #13999	; 0x36af
  403132:	f04f 0200 	mov.w	r2, #0
  403136:	185d      	adds	r5, r3, r1
  403138:	eb44 0602 	adc.w	r6, r4, r2
  40313c:	4628      	mov	r0, r5
  40313e:	4631      	mov	r1, r6
  403140:	4c75      	ldr	r4, [pc, #468]	; (403318 <main+0x250>)
  403142:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403146:	f04f 0300 	mov.w	r3, #0
  40314a:	47a0      	blx	r4
  40314c:	4603      	mov	r3, r0
  40314e:	460c      	mov	r4, r1
  403150:	4618      	mov	r0, r3
  403152:	4b72      	ldr	r3, [pc, #456]	; (40331c <main+0x254>)
  403154:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  403156:	2101      	movs	r1, #1
  403158:	2013      	movs	r0, #19
  40315a:	4b6d      	ldr	r3, [pc, #436]	; (403310 <main+0x248>)
  40315c:	4798      	blx	r3
	
	// Tell the WiFi to turn off the command prompt and command  echo
	write_wifi_command("set sy c p off\r\n",2);
  40315e:	2102      	movs	r1, #2
  403160:	486f      	ldr	r0, [pc, #444]	; (403320 <main+0x258>)
  403162:	4b70      	ldr	r3, [pc, #448]	; (403324 <main+0x25c>)
  403164:	4798      	blx	r3
	write_wifi_command("set sy c e off\r\n",2);
  403166:	2102      	movs	r1, #2
  403168:	486f      	ldr	r0, [pc, #444]	; (403328 <main+0x260>)
  40316a:	4b6e      	ldr	r3, [pc, #440]	; (403324 <main+0x25c>)
  40316c:	4798      	blx	r3
	
	while(!ioport_get_pin_level(WIFI_NETWORK_STATUS_PIN)){
  40316e:	e00a      	b.n	403186 <main+0xbe>
		if (wifi_web_setup_flag){
  403170:	4b6e      	ldr	r3, [pc, #440]	; (40332c <main+0x264>)
  403172:	681b      	ldr	r3, [r3, #0]
  403174:	2b00      	cmp	r3, #0
  403176:	d006      	beq.n	403186 <main+0xbe>
			wifi_web_setup_flag = 0;
  403178:	4b6c      	ldr	r3, [pc, #432]	; (40332c <main+0x264>)
  40317a:	2200      	movs	r2, #0
  40317c:	601a      	str	r2, [r3, #0]
			write_wifi_command("setup web\r\n",2);
  40317e:	2102      	movs	r1, #2
  403180:	486b      	ldr	r0, [pc, #428]	; (403330 <main+0x268>)
  403182:	4b68      	ldr	r3, [pc, #416]	; (403324 <main+0x25c>)
  403184:	4798      	blx	r3
	while(!ioport_get_pin_level(WIFI_NETWORK_STATUS_PIN)){
  403186:	200b      	movs	r0, #11
  403188:	4b6a      	ldr	r3, [pc, #424]	; (403334 <main+0x26c>)
  40318a:	4798      	blx	r3
  40318c:	4603      	mov	r3, r0
  40318e:	f083 0301 	eor.w	r3, r3, #1
  403192:	b2db      	uxtb	r3, r3
  403194:	2b00      	cmp	r3, #0
  403196:	d1eb      	bne.n	403170 <main+0xa8>
		}
	}

	while (1){
		if (wifi_web_setup_flag){
  403198:	4b64      	ldr	r3, [pc, #400]	; (40332c <main+0x264>)
  40319a:	681b      	ldr	r3, [r3, #0]
  40319c:	2b00      	cmp	r3, #0
  40319e:	d011      	beq.n	4031c4 <main+0xfc>
			wifi_web_setup_flag = 0;
  4031a0:	4b62      	ldr	r3, [pc, #392]	; (40332c <main+0x264>)
  4031a2:	2200      	movs	r2, #0
  4031a4:	601a      	str	r2, [r3, #0]
			write_wifi_command("setup web\r\n",2);
  4031a6:	2102      	movs	r1, #2
  4031a8:	4861      	ldr	r0, [pc, #388]	; (403330 <main+0x268>)
  4031aa:	4b5e      	ldr	r3, [pc, #376]	; (403324 <main+0x25c>)
  4031ac:	4798      	blx	r3
			while(!ioport_get_pin_level(WIFI_NETWORK_STATUS_PIN)){
  4031ae:	bf00      	nop
  4031b0:	200b      	movs	r0, #11
  4031b2:	4b60      	ldr	r3, [pc, #384]	; (403334 <main+0x26c>)
  4031b4:	4798      	blx	r3
  4031b6:	4603      	mov	r3, r0
  4031b8:	f083 0301 	eor.w	r3, r3, #1
  4031bc:	b2db      	uxtb	r3, r3
  4031be:	2b00      	cmp	r3, #0
  4031c0:	d1f6      	bne.n	4031b0 <main+0xe8>
  4031c2:	e7e9      	b.n	403198 <main+0xd0>
				// wait 10 seconds. If connected before 10 seconds, break.
				// Else, reset
			}
		}
		else{
			if(!ioport_get_pin_level(WIFI_NETWORK_STATUS_PIN)){
  4031c4:	200b      	movs	r0, #11
  4031c6:	4b5b      	ldr	r3, [pc, #364]	; (403334 <main+0x26c>)
  4031c8:	4798      	blx	r3
  4031ca:	4603      	mov	r3, r0
  4031cc:	f083 0301 	eor.w	r3, r3, #1
  4031d0:	b2db      	uxtb	r3, r3
  4031d2:	2b00      	cmp	r3, #0
  4031d4:	d037      	beq.n	403246 <main+0x17e>
				// Reset wifi module
				ioport_set_pin_level(WIFI_RESET_PIN, false);
  4031d6:	2100      	movs	r1, #0
  4031d8:	2013      	movs	r0, #19
  4031da:	4b4d      	ldr	r3, [pc, #308]	; (403310 <main+0x248>)
  4031dc:	4798      	blx	r3
				delay_ms(100);
  4031de:	4b4d      	ldr	r3, [pc, #308]	; (403314 <main+0x24c>)
  4031e0:	4798      	blx	r3
  4031e2:	4603      	mov	r3, r0
  4031e4:	4619      	mov	r1, r3
  4031e6:	f04f 0200 	mov.w	r2, #0
  4031ea:	460b      	mov	r3, r1
  4031ec:	4614      	mov	r4, r2
  4031ee:	18db      	adds	r3, r3, r3
  4031f0:	eb44 0404 	adc.w	r4, r4, r4
  4031f4:	185b      	adds	r3, r3, r1
  4031f6:	eb44 0402 	adc.w	r4, r4, r2
  4031fa:	ea4f 1944 	mov.w	r9, r4, lsl #5
  4031fe:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  403202:	ea4f 1843 	mov.w	r8, r3, lsl #5
  403206:	eb13 0308 	adds.w	r3, r3, r8
  40320a:	eb44 0409 	adc.w	r4, r4, r9
  40320e:	185b      	adds	r3, r3, r1
  403210:	eb44 0402 	adc.w	r4, r4, r2
  403214:	f243 61af 	movw	r1, #13999	; 0x36af
  403218:	f04f 0200 	mov.w	r2, #0
  40321c:	185d      	adds	r5, r3, r1
  40321e:	eb44 0602 	adc.w	r6, r4, r2
  403222:	4628      	mov	r0, r5
  403224:	4631      	mov	r1, r6
  403226:	4c3c      	ldr	r4, [pc, #240]	; (403318 <main+0x250>)
  403228:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40322c:	f04f 0300 	mov.w	r3, #0
  403230:	47a0      	blx	r4
  403232:	4603      	mov	r3, r0
  403234:	460c      	mov	r4, r1
  403236:	4618      	mov	r0, r3
  403238:	4b38      	ldr	r3, [pc, #224]	; (40331c <main+0x254>)
  40323a:	4798      	blx	r3
				ioport_set_pin_level(WIFI_RESET_PIN, true);
  40323c:	2101      	movs	r1, #1
  40323e:	2013      	movs	r0, #19
  403240:	4b33      	ldr	r3, [pc, #204]	; (403310 <main+0x248>)
  403242:	4798      	blx	r3
  403244:	e7a8      	b.n	403198 <main+0xd0>
			}
			else{
				write_wifi_command("poll all\r\n",2); // checking to see any open stream
  403246:	2102      	movs	r1, #2
  403248:	483b      	ldr	r0, [pc, #236]	; (403338 <main+0x270>)
  40324a:	4b36      	ldr	r3, [pc, #216]	; (403324 <main+0x25c>)
  40324c:	4798      	blx	r3
				if(StreamOpen){
  40324e:	4b3b      	ldr	r3, [pc, #236]	; (40333c <main+0x274>)
  403250:	681b      	ldr	r3, [r3, #0]
  403252:	2b00      	cmp	r3, #0
  403254:	d007      	beq.n	403266 <main+0x19e>
					if(start_capture()){
  403256:	4b3a      	ldr	r3, [pc, #232]	; (403340 <main+0x278>)
  403258:	4798      	blx	r3
  40325a:	4603      	mov	r3, r0
  40325c:	2b00      	cmp	r3, #0
  40325e:	d09b      	beq.n	403198 <main+0xd0>
						write_image_to_file();
  403260:	4b38      	ldr	r3, [pc, #224]	; (403344 <main+0x27c>)
  403262:	4798      	blx	r3
  403264:	e798      	b.n	403198 <main+0xd0>
					}
				}
				else{
					delay_ms(1000);
  403266:	4b2b      	ldr	r3, [pc, #172]	; (403314 <main+0x24c>)
  403268:	4798      	blx	r3
  40326a:	4603      	mov	r3, r0
  40326c:	4619      	mov	r1, r3
  40326e:	f04f 0200 	mov.w	r2, #0
  403272:	460b      	mov	r3, r1
  403274:	4614      	mov	r4, r2
  403276:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  40327a:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  40327e:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  403282:	4653      	mov	r3, sl
  403284:	465c      	mov	r4, fp
  403286:	1a5b      	subs	r3, r3, r1
  403288:	eb64 0402 	sbc.w	r4, r4, r2
  40328c:	00a0      	lsls	r0, r4, #2
  40328e:	60f8      	str	r0, [r7, #12]
  403290:	68f8      	ldr	r0, [r7, #12]
  403292:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  403296:	60f8      	str	r0, [r7, #12]
  403298:	009b      	lsls	r3, r3, #2
  40329a:	60bb      	str	r3, [r7, #8]
  40329c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4032a0:	185b      	adds	r3, r3, r1
  4032a2:	eb44 0402 	adc.w	r4, r4, r2
  4032a6:	00e2      	lsls	r2, r4, #3
  4032a8:	607a      	str	r2, [r7, #4]
  4032aa:	687a      	ldr	r2, [r7, #4]
  4032ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  4032b0:	607a      	str	r2, [r7, #4]
  4032b2:	00db      	lsls	r3, r3, #3
  4032b4:	603b      	str	r3, [r7, #0]
  4032b6:	e9d7 3400 	ldrd	r3, r4, [r7]
  4032ba:	4619      	mov	r1, r3
  4032bc:	4622      	mov	r2, r4
  4032be:	f243 63af 	movw	r3, #13999	; 0x36af
  4032c2:	f04f 0400 	mov.w	r4, #0
  4032c6:	18cd      	adds	r5, r1, r3
  4032c8:	eb42 0604 	adc.w	r6, r2, r4
  4032cc:	4628      	mov	r0, r5
  4032ce:	4631      	mov	r1, r6
  4032d0:	4c11      	ldr	r4, [pc, #68]	; (403318 <main+0x250>)
  4032d2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4032d6:	f04f 0300 	mov.w	r3, #0
  4032da:	47a0      	blx	r4
  4032dc:	4603      	mov	r3, r0
  4032de:	460c      	mov	r4, r1
  4032e0:	4618      	mov	r0, r3
  4032e2:	4b0e      	ldr	r3, [pc, #56]	; (40331c <main+0x254>)
  4032e4:	4798      	blx	r3
		if (wifi_web_setup_flag){
  4032e6:	e757      	b.n	403198 <main+0xd0>
  4032e8:	00400e7d 	.word	0x00400e7d
  4032ec:	400e1450 	.word	0x400e1450
  4032f0:	00400b79 	.word	0x00400b79
  4032f4:	00402bb5 	.word	0x00402bb5
  4032f8:	00401a59 	.word	0x00401a59
  4032fc:	00401b91 	.word	0x00401b91
  403300:	004023f1 	.word	0x004023f1
  403304:	00402641 	.word	0x00402641
  403308:	004026f1 	.word	0x004026f1
  40330c:	00402741 	.word	0x00402741
  403310:	00403011 	.word	0x00403011
  403314:	00402ffd 	.word	0x00402ffd
  403318:	00403349 	.word	0x00403349
  40331c:	20000001 	.word	0x20000001
  403320:	00408ed4 	.word	0x00408ed4
  403324:	00402825 	.word	0x00402825
  403328:	00408ee8 	.word	0x00408ee8
  40332c:	20000a64 	.word	0x20000a64
  403330:	00408efc 	.word	0x00408efc
  403334:	0040307b 	.word	0x0040307b
  403338:	00408f08 	.word	0x00408f08
  40333c:	20000a70 	.word	0x20000a70
  403340:	00401c65 	.word	0x00401c65
  403344:	00402881 	.word	0x00402881

00403348 <__aeabi_uldivmod>:
  403348:	b953      	cbnz	r3, 403360 <__aeabi_uldivmod+0x18>
  40334a:	b94a      	cbnz	r2, 403360 <__aeabi_uldivmod+0x18>
  40334c:	2900      	cmp	r1, #0
  40334e:	bf08      	it	eq
  403350:	2800      	cmpeq	r0, #0
  403352:	bf1c      	itt	ne
  403354:	f04f 31ff 	movne.w	r1, #4294967295
  403358:	f04f 30ff 	movne.w	r0, #4294967295
  40335c:	f000 b97a 	b.w	403654 <__aeabi_idiv0>
  403360:	f1ad 0c08 	sub.w	ip, sp, #8
  403364:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403368:	f000 f806 	bl	403378 <__udivmoddi4>
  40336c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403374:	b004      	add	sp, #16
  403376:	4770      	bx	lr

00403378 <__udivmoddi4>:
  403378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40337c:	468c      	mov	ip, r1
  40337e:	460d      	mov	r5, r1
  403380:	4604      	mov	r4, r0
  403382:	9e08      	ldr	r6, [sp, #32]
  403384:	2b00      	cmp	r3, #0
  403386:	d151      	bne.n	40342c <__udivmoddi4+0xb4>
  403388:	428a      	cmp	r2, r1
  40338a:	4617      	mov	r7, r2
  40338c:	d96d      	bls.n	40346a <__udivmoddi4+0xf2>
  40338e:	fab2 fe82 	clz	lr, r2
  403392:	f1be 0f00 	cmp.w	lr, #0
  403396:	d00b      	beq.n	4033b0 <__udivmoddi4+0x38>
  403398:	f1ce 0c20 	rsb	ip, lr, #32
  40339c:	fa01 f50e 	lsl.w	r5, r1, lr
  4033a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4033a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4033a8:	ea4c 0c05 	orr.w	ip, ip, r5
  4033ac:	fa00 f40e 	lsl.w	r4, r0, lr
  4033b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4033b4:	0c25      	lsrs	r5, r4, #16
  4033b6:	fbbc f8fa 	udiv	r8, ip, sl
  4033ba:	fa1f f987 	uxth.w	r9, r7
  4033be:	fb0a cc18 	mls	ip, sl, r8, ip
  4033c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4033c6:	fb08 f309 	mul.w	r3, r8, r9
  4033ca:	42ab      	cmp	r3, r5
  4033cc:	d90a      	bls.n	4033e4 <__udivmoddi4+0x6c>
  4033ce:	19ed      	adds	r5, r5, r7
  4033d0:	f108 32ff 	add.w	r2, r8, #4294967295
  4033d4:	f080 8123 	bcs.w	40361e <__udivmoddi4+0x2a6>
  4033d8:	42ab      	cmp	r3, r5
  4033da:	f240 8120 	bls.w	40361e <__udivmoddi4+0x2a6>
  4033de:	f1a8 0802 	sub.w	r8, r8, #2
  4033e2:	443d      	add	r5, r7
  4033e4:	1aed      	subs	r5, r5, r3
  4033e6:	b2a4      	uxth	r4, r4
  4033e8:	fbb5 f0fa 	udiv	r0, r5, sl
  4033ec:	fb0a 5510 	mls	r5, sl, r0, r5
  4033f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4033f4:	fb00 f909 	mul.w	r9, r0, r9
  4033f8:	45a1      	cmp	r9, r4
  4033fa:	d909      	bls.n	403410 <__udivmoddi4+0x98>
  4033fc:	19e4      	adds	r4, r4, r7
  4033fe:	f100 33ff 	add.w	r3, r0, #4294967295
  403402:	f080 810a 	bcs.w	40361a <__udivmoddi4+0x2a2>
  403406:	45a1      	cmp	r9, r4
  403408:	f240 8107 	bls.w	40361a <__udivmoddi4+0x2a2>
  40340c:	3802      	subs	r0, #2
  40340e:	443c      	add	r4, r7
  403410:	eba4 0409 	sub.w	r4, r4, r9
  403414:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403418:	2100      	movs	r1, #0
  40341a:	2e00      	cmp	r6, #0
  40341c:	d061      	beq.n	4034e2 <__udivmoddi4+0x16a>
  40341e:	fa24 f40e 	lsr.w	r4, r4, lr
  403422:	2300      	movs	r3, #0
  403424:	6034      	str	r4, [r6, #0]
  403426:	6073      	str	r3, [r6, #4]
  403428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40342c:	428b      	cmp	r3, r1
  40342e:	d907      	bls.n	403440 <__udivmoddi4+0xc8>
  403430:	2e00      	cmp	r6, #0
  403432:	d054      	beq.n	4034de <__udivmoddi4+0x166>
  403434:	2100      	movs	r1, #0
  403436:	e886 0021 	stmia.w	r6, {r0, r5}
  40343a:	4608      	mov	r0, r1
  40343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403440:	fab3 f183 	clz	r1, r3
  403444:	2900      	cmp	r1, #0
  403446:	f040 808e 	bne.w	403566 <__udivmoddi4+0x1ee>
  40344a:	42ab      	cmp	r3, r5
  40344c:	d302      	bcc.n	403454 <__udivmoddi4+0xdc>
  40344e:	4282      	cmp	r2, r0
  403450:	f200 80fa 	bhi.w	403648 <__udivmoddi4+0x2d0>
  403454:	1a84      	subs	r4, r0, r2
  403456:	eb65 0503 	sbc.w	r5, r5, r3
  40345a:	2001      	movs	r0, #1
  40345c:	46ac      	mov	ip, r5
  40345e:	2e00      	cmp	r6, #0
  403460:	d03f      	beq.n	4034e2 <__udivmoddi4+0x16a>
  403462:	e886 1010 	stmia.w	r6, {r4, ip}
  403466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40346a:	b912      	cbnz	r2, 403472 <__udivmoddi4+0xfa>
  40346c:	2701      	movs	r7, #1
  40346e:	fbb7 f7f2 	udiv	r7, r7, r2
  403472:	fab7 fe87 	clz	lr, r7
  403476:	f1be 0f00 	cmp.w	lr, #0
  40347a:	d134      	bne.n	4034e6 <__udivmoddi4+0x16e>
  40347c:	1beb      	subs	r3, r5, r7
  40347e:	0c3a      	lsrs	r2, r7, #16
  403480:	fa1f fc87 	uxth.w	ip, r7
  403484:	2101      	movs	r1, #1
  403486:	fbb3 f8f2 	udiv	r8, r3, r2
  40348a:	0c25      	lsrs	r5, r4, #16
  40348c:	fb02 3318 	mls	r3, r2, r8, r3
  403490:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403494:	fb0c f308 	mul.w	r3, ip, r8
  403498:	42ab      	cmp	r3, r5
  40349a:	d907      	bls.n	4034ac <__udivmoddi4+0x134>
  40349c:	19ed      	adds	r5, r5, r7
  40349e:	f108 30ff 	add.w	r0, r8, #4294967295
  4034a2:	d202      	bcs.n	4034aa <__udivmoddi4+0x132>
  4034a4:	42ab      	cmp	r3, r5
  4034a6:	f200 80d1 	bhi.w	40364c <__udivmoddi4+0x2d4>
  4034aa:	4680      	mov	r8, r0
  4034ac:	1aed      	subs	r5, r5, r3
  4034ae:	b2a3      	uxth	r3, r4
  4034b0:	fbb5 f0f2 	udiv	r0, r5, r2
  4034b4:	fb02 5510 	mls	r5, r2, r0, r5
  4034b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4034bc:	fb0c fc00 	mul.w	ip, ip, r0
  4034c0:	45a4      	cmp	ip, r4
  4034c2:	d907      	bls.n	4034d4 <__udivmoddi4+0x15c>
  4034c4:	19e4      	adds	r4, r4, r7
  4034c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4034ca:	d202      	bcs.n	4034d2 <__udivmoddi4+0x15a>
  4034cc:	45a4      	cmp	ip, r4
  4034ce:	f200 80b8 	bhi.w	403642 <__udivmoddi4+0x2ca>
  4034d2:	4618      	mov	r0, r3
  4034d4:	eba4 040c 	sub.w	r4, r4, ip
  4034d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4034dc:	e79d      	b.n	40341a <__udivmoddi4+0xa2>
  4034de:	4631      	mov	r1, r6
  4034e0:	4630      	mov	r0, r6
  4034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034e6:	f1ce 0420 	rsb	r4, lr, #32
  4034ea:	fa05 f30e 	lsl.w	r3, r5, lr
  4034ee:	fa07 f70e 	lsl.w	r7, r7, lr
  4034f2:	fa20 f804 	lsr.w	r8, r0, r4
  4034f6:	0c3a      	lsrs	r2, r7, #16
  4034f8:	fa25 f404 	lsr.w	r4, r5, r4
  4034fc:	ea48 0803 	orr.w	r8, r8, r3
  403500:	fbb4 f1f2 	udiv	r1, r4, r2
  403504:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403508:	fb02 4411 	mls	r4, r2, r1, r4
  40350c:	fa1f fc87 	uxth.w	ip, r7
  403510:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403514:	fb01 f30c 	mul.w	r3, r1, ip
  403518:	42ab      	cmp	r3, r5
  40351a:	fa00 f40e 	lsl.w	r4, r0, lr
  40351e:	d909      	bls.n	403534 <__udivmoddi4+0x1bc>
  403520:	19ed      	adds	r5, r5, r7
  403522:	f101 30ff 	add.w	r0, r1, #4294967295
  403526:	f080 808a 	bcs.w	40363e <__udivmoddi4+0x2c6>
  40352a:	42ab      	cmp	r3, r5
  40352c:	f240 8087 	bls.w	40363e <__udivmoddi4+0x2c6>
  403530:	3902      	subs	r1, #2
  403532:	443d      	add	r5, r7
  403534:	1aeb      	subs	r3, r5, r3
  403536:	fa1f f588 	uxth.w	r5, r8
  40353a:	fbb3 f0f2 	udiv	r0, r3, r2
  40353e:	fb02 3310 	mls	r3, r2, r0, r3
  403542:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403546:	fb00 f30c 	mul.w	r3, r0, ip
  40354a:	42ab      	cmp	r3, r5
  40354c:	d907      	bls.n	40355e <__udivmoddi4+0x1e6>
  40354e:	19ed      	adds	r5, r5, r7
  403550:	f100 38ff 	add.w	r8, r0, #4294967295
  403554:	d26f      	bcs.n	403636 <__udivmoddi4+0x2be>
  403556:	42ab      	cmp	r3, r5
  403558:	d96d      	bls.n	403636 <__udivmoddi4+0x2be>
  40355a:	3802      	subs	r0, #2
  40355c:	443d      	add	r5, r7
  40355e:	1aeb      	subs	r3, r5, r3
  403560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403564:	e78f      	b.n	403486 <__udivmoddi4+0x10e>
  403566:	f1c1 0720 	rsb	r7, r1, #32
  40356a:	fa22 f807 	lsr.w	r8, r2, r7
  40356e:	408b      	lsls	r3, r1
  403570:	fa05 f401 	lsl.w	r4, r5, r1
  403574:	ea48 0303 	orr.w	r3, r8, r3
  403578:	fa20 fe07 	lsr.w	lr, r0, r7
  40357c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403580:	40fd      	lsrs	r5, r7
  403582:	ea4e 0e04 	orr.w	lr, lr, r4
  403586:	fbb5 f9fc 	udiv	r9, r5, ip
  40358a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40358e:	fb0c 5519 	mls	r5, ip, r9, r5
  403592:	fa1f f883 	uxth.w	r8, r3
  403596:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40359a:	fb09 f408 	mul.w	r4, r9, r8
  40359e:	42ac      	cmp	r4, r5
  4035a0:	fa02 f201 	lsl.w	r2, r2, r1
  4035a4:	fa00 fa01 	lsl.w	sl, r0, r1
  4035a8:	d908      	bls.n	4035bc <__udivmoddi4+0x244>
  4035aa:	18ed      	adds	r5, r5, r3
  4035ac:	f109 30ff 	add.w	r0, r9, #4294967295
  4035b0:	d243      	bcs.n	40363a <__udivmoddi4+0x2c2>
  4035b2:	42ac      	cmp	r4, r5
  4035b4:	d941      	bls.n	40363a <__udivmoddi4+0x2c2>
  4035b6:	f1a9 0902 	sub.w	r9, r9, #2
  4035ba:	441d      	add	r5, r3
  4035bc:	1b2d      	subs	r5, r5, r4
  4035be:	fa1f fe8e 	uxth.w	lr, lr
  4035c2:	fbb5 f0fc 	udiv	r0, r5, ip
  4035c6:	fb0c 5510 	mls	r5, ip, r0, r5
  4035ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4035ce:	fb00 f808 	mul.w	r8, r0, r8
  4035d2:	45a0      	cmp	r8, r4
  4035d4:	d907      	bls.n	4035e6 <__udivmoddi4+0x26e>
  4035d6:	18e4      	adds	r4, r4, r3
  4035d8:	f100 35ff 	add.w	r5, r0, #4294967295
  4035dc:	d229      	bcs.n	403632 <__udivmoddi4+0x2ba>
  4035de:	45a0      	cmp	r8, r4
  4035e0:	d927      	bls.n	403632 <__udivmoddi4+0x2ba>
  4035e2:	3802      	subs	r0, #2
  4035e4:	441c      	add	r4, r3
  4035e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4035ea:	eba4 0408 	sub.w	r4, r4, r8
  4035ee:	fba0 8902 	umull	r8, r9, r0, r2
  4035f2:	454c      	cmp	r4, r9
  4035f4:	46c6      	mov	lr, r8
  4035f6:	464d      	mov	r5, r9
  4035f8:	d315      	bcc.n	403626 <__udivmoddi4+0x2ae>
  4035fa:	d012      	beq.n	403622 <__udivmoddi4+0x2aa>
  4035fc:	b156      	cbz	r6, 403614 <__udivmoddi4+0x29c>
  4035fe:	ebba 030e 	subs.w	r3, sl, lr
  403602:	eb64 0405 	sbc.w	r4, r4, r5
  403606:	fa04 f707 	lsl.w	r7, r4, r7
  40360a:	40cb      	lsrs	r3, r1
  40360c:	431f      	orrs	r7, r3
  40360e:	40cc      	lsrs	r4, r1
  403610:	6037      	str	r7, [r6, #0]
  403612:	6074      	str	r4, [r6, #4]
  403614:	2100      	movs	r1, #0
  403616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40361a:	4618      	mov	r0, r3
  40361c:	e6f8      	b.n	403410 <__udivmoddi4+0x98>
  40361e:	4690      	mov	r8, r2
  403620:	e6e0      	b.n	4033e4 <__udivmoddi4+0x6c>
  403622:	45c2      	cmp	sl, r8
  403624:	d2ea      	bcs.n	4035fc <__udivmoddi4+0x284>
  403626:	ebb8 0e02 	subs.w	lr, r8, r2
  40362a:	eb69 0503 	sbc.w	r5, r9, r3
  40362e:	3801      	subs	r0, #1
  403630:	e7e4      	b.n	4035fc <__udivmoddi4+0x284>
  403632:	4628      	mov	r0, r5
  403634:	e7d7      	b.n	4035e6 <__udivmoddi4+0x26e>
  403636:	4640      	mov	r0, r8
  403638:	e791      	b.n	40355e <__udivmoddi4+0x1e6>
  40363a:	4681      	mov	r9, r0
  40363c:	e7be      	b.n	4035bc <__udivmoddi4+0x244>
  40363e:	4601      	mov	r1, r0
  403640:	e778      	b.n	403534 <__udivmoddi4+0x1bc>
  403642:	3802      	subs	r0, #2
  403644:	443c      	add	r4, r7
  403646:	e745      	b.n	4034d4 <__udivmoddi4+0x15c>
  403648:	4608      	mov	r0, r1
  40364a:	e708      	b.n	40345e <__udivmoddi4+0xe6>
  40364c:	f1a8 0802 	sub.w	r8, r8, #2
  403650:	443d      	add	r5, r7
  403652:	e72b      	b.n	4034ac <__udivmoddi4+0x134>

00403654 <__aeabi_idiv0>:
  403654:	4770      	bx	lr
  403656:	bf00      	nop

00403658 <__libc_init_array>:
  403658:	b570      	push	{r4, r5, r6, lr}
  40365a:	4e0f      	ldr	r6, [pc, #60]	; (403698 <__libc_init_array+0x40>)
  40365c:	4d0f      	ldr	r5, [pc, #60]	; (40369c <__libc_init_array+0x44>)
  40365e:	1b76      	subs	r6, r6, r5
  403660:	10b6      	asrs	r6, r6, #2
  403662:	bf18      	it	ne
  403664:	2400      	movne	r4, #0
  403666:	d005      	beq.n	403674 <__libc_init_array+0x1c>
  403668:	3401      	adds	r4, #1
  40366a:	f855 3b04 	ldr.w	r3, [r5], #4
  40366e:	4798      	blx	r3
  403670:	42a6      	cmp	r6, r4
  403672:	d1f9      	bne.n	403668 <__libc_init_array+0x10>
  403674:	4e0a      	ldr	r6, [pc, #40]	; (4036a0 <__libc_init_array+0x48>)
  403676:	4d0b      	ldr	r5, [pc, #44]	; (4036a4 <__libc_init_array+0x4c>)
  403678:	1b76      	subs	r6, r6, r5
  40367a:	f005 fd91 	bl	4091a0 <_init>
  40367e:	10b6      	asrs	r6, r6, #2
  403680:	bf18      	it	ne
  403682:	2400      	movne	r4, #0
  403684:	d006      	beq.n	403694 <__libc_init_array+0x3c>
  403686:	3401      	adds	r4, #1
  403688:	f855 3b04 	ldr.w	r3, [r5], #4
  40368c:	4798      	blx	r3
  40368e:	42a6      	cmp	r6, r4
  403690:	d1f9      	bne.n	403686 <__libc_init_array+0x2e>
  403692:	bd70      	pop	{r4, r5, r6, pc}
  403694:	bd70      	pop	{r4, r5, r6, pc}
  403696:	bf00      	nop
  403698:	004091ac 	.word	0x004091ac
  40369c:	004091ac 	.word	0x004091ac
  4036a0:	004091b4 	.word	0x004091b4
  4036a4:	004091ac 	.word	0x004091ac

004036a8 <memset>:
  4036a8:	b470      	push	{r4, r5, r6}
  4036aa:	0786      	lsls	r6, r0, #30
  4036ac:	d046      	beq.n	40373c <memset+0x94>
  4036ae:	1e54      	subs	r4, r2, #1
  4036b0:	2a00      	cmp	r2, #0
  4036b2:	d041      	beq.n	403738 <memset+0x90>
  4036b4:	b2ca      	uxtb	r2, r1
  4036b6:	4603      	mov	r3, r0
  4036b8:	e002      	b.n	4036c0 <memset+0x18>
  4036ba:	f114 34ff 	adds.w	r4, r4, #4294967295
  4036be:	d33b      	bcc.n	403738 <memset+0x90>
  4036c0:	f803 2b01 	strb.w	r2, [r3], #1
  4036c4:	079d      	lsls	r5, r3, #30
  4036c6:	d1f8      	bne.n	4036ba <memset+0x12>
  4036c8:	2c03      	cmp	r4, #3
  4036ca:	d92e      	bls.n	40372a <memset+0x82>
  4036cc:	b2cd      	uxtb	r5, r1
  4036ce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4036d2:	2c0f      	cmp	r4, #15
  4036d4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4036d8:	d919      	bls.n	40370e <memset+0x66>
  4036da:	f103 0210 	add.w	r2, r3, #16
  4036de:	4626      	mov	r6, r4
  4036e0:	3e10      	subs	r6, #16
  4036e2:	2e0f      	cmp	r6, #15
  4036e4:	f842 5c10 	str.w	r5, [r2, #-16]
  4036e8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4036ec:	f842 5c08 	str.w	r5, [r2, #-8]
  4036f0:	f842 5c04 	str.w	r5, [r2, #-4]
  4036f4:	f102 0210 	add.w	r2, r2, #16
  4036f8:	d8f2      	bhi.n	4036e0 <memset+0x38>
  4036fa:	f1a4 0210 	sub.w	r2, r4, #16
  4036fe:	f022 020f 	bic.w	r2, r2, #15
  403702:	f004 040f 	and.w	r4, r4, #15
  403706:	3210      	adds	r2, #16
  403708:	2c03      	cmp	r4, #3
  40370a:	4413      	add	r3, r2
  40370c:	d90d      	bls.n	40372a <memset+0x82>
  40370e:	461e      	mov	r6, r3
  403710:	4622      	mov	r2, r4
  403712:	3a04      	subs	r2, #4
  403714:	2a03      	cmp	r2, #3
  403716:	f846 5b04 	str.w	r5, [r6], #4
  40371a:	d8fa      	bhi.n	403712 <memset+0x6a>
  40371c:	1f22      	subs	r2, r4, #4
  40371e:	f022 0203 	bic.w	r2, r2, #3
  403722:	3204      	adds	r2, #4
  403724:	4413      	add	r3, r2
  403726:	f004 0403 	and.w	r4, r4, #3
  40372a:	b12c      	cbz	r4, 403738 <memset+0x90>
  40372c:	b2c9      	uxtb	r1, r1
  40372e:	441c      	add	r4, r3
  403730:	f803 1b01 	strb.w	r1, [r3], #1
  403734:	429c      	cmp	r4, r3
  403736:	d1fb      	bne.n	403730 <memset+0x88>
  403738:	bc70      	pop	{r4, r5, r6}
  40373a:	4770      	bx	lr
  40373c:	4614      	mov	r4, r2
  40373e:	4603      	mov	r3, r0
  403740:	e7c2      	b.n	4036c8 <memset+0x20>
  403742:	bf00      	nop

00403744 <sprintf>:
  403744:	b40e      	push	{r1, r2, r3}
  403746:	b5f0      	push	{r4, r5, r6, r7, lr}
  403748:	b09c      	sub	sp, #112	; 0x70
  40374a:	ab21      	add	r3, sp, #132	; 0x84
  40374c:	490f      	ldr	r1, [pc, #60]	; (40378c <sprintf+0x48>)
  40374e:	f853 2b04 	ldr.w	r2, [r3], #4
  403752:	9301      	str	r3, [sp, #4]
  403754:	4605      	mov	r5, r0
  403756:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40375a:	6808      	ldr	r0, [r1, #0]
  40375c:	9502      	str	r5, [sp, #8]
  40375e:	f44f 7702 	mov.w	r7, #520	; 0x208
  403762:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403766:	a902      	add	r1, sp, #8
  403768:	9506      	str	r5, [sp, #24]
  40376a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40376e:	9404      	str	r4, [sp, #16]
  403770:	9407      	str	r4, [sp, #28]
  403772:	f8ad 6016 	strh.w	r6, [sp, #22]
  403776:	f000 fa6f 	bl	403c58 <_svfprintf_r>
  40377a:	9b02      	ldr	r3, [sp, #8]
  40377c:	2200      	movs	r2, #0
  40377e:	701a      	strb	r2, [r3, #0]
  403780:	b01c      	add	sp, #112	; 0x70
  403782:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403786:	b003      	add	sp, #12
  403788:	4770      	bx	lr
  40378a:	bf00      	nop
  40378c:	20000010 	.word	0x20000010

00403790 <critical_factorization>:
  403790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403794:	f04f 0e01 	mov.w	lr, #1
  403798:	4674      	mov	r4, lr
  40379a:	2500      	movs	r5, #0
  40379c:	f04f 36ff 	mov.w	r6, #4294967295
  4037a0:	192b      	adds	r3, r5, r4
  4037a2:	428b      	cmp	r3, r1
  4037a4:	eb00 0706 	add.w	r7, r0, r6
  4037a8:	d20d      	bcs.n	4037c6 <critical_factorization+0x36>
  4037aa:	5d3f      	ldrb	r7, [r7, r4]
  4037ac:	f810 c003 	ldrb.w	ip, [r0, r3]
  4037b0:	45bc      	cmp	ip, r7
  4037b2:	d22d      	bcs.n	403810 <critical_factorization+0x80>
  4037b4:	461d      	mov	r5, r3
  4037b6:	2401      	movs	r4, #1
  4037b8:	eba3 0e06 	sub.w	lr, r3, r6
  4037bc:	192b      	adds	r3, r5, r4
  4037be:	428b      	cmp	r3, r1
  4037c0:	eb00 0706 	add.w	r7, r0, r6
  4037c4:	d3f1      	bcc.n	4037aa <critical_factorization+0x1a>
  4037c6:	f04f 0801 	mov.w	r8, #1
  4037ca:	f8c2 e000 	str.w	lr, [r2]
  4037ce:	4644      	mov	r4, r8
  4037d0:	2500      	movs	r5, #0
  4037d2:	f04f 37ff 	mov.w	r7, #4294967295
  4037d6:	192b      	adds	r3, r5, r4
  4037d8:	4299      	cmp	r1, r3
  4037da:	eb00 0e07 	add.w	lr, r0, r7
  4037de:	d90e      	bls.n	4037fe <critical_factorization+0x6e>
  4037e0:	f81e e004 	ldrb.w	lr, [lr, r4]
  4037e4:	f810 c003 	ldrb.w	ip, [r0, r3]
  4037e8:	45f4      	cmp	ip, lr
  4037ea:	d918      	bls.n	40381e <critical_factorization+0x8e>
  4037ec:	461d      	mov	r5, r3
  4037ee:	2401      	movs	r4, #1
  4037f0:	eba3 0807 	sub.w	r8, r3, r7
  4037f4:	192b      	adds	r3, r5, r4
  4037f6:	4299      	cmp	r1, r3
  4037f8:	eb00 0e07 	add.w	lr, r0, r7
  4037fc:	d8f0      	bhi.n	4037e0 <critical_factorization+0x50>
  4037fe:	3701      	adds	r7, #1
  403800:	1c70      	adds	r0, r6, #1
  403802:	4287      	cmp	r7, r0
  403804:	bf24      	itt	cs
  403806:	f8c2 8000 	strcs.w	r8, [r2]
  40380a:	4638      	movcs	r0, r7
  40380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403810:	d00c      	beq.n	40382c <critical_factorization+0x9c>
  403812:	f04f 0e01 	mov.w	lr, #1
  403816:	462e      	mov	r6, r5
  403818:	4674      	mov	r4, lr
  40381a:	4475      	add	r5, lr
  40381c:	e7c0      	b.n	4037a0 <critical_factorization+0x10>
  40381e:	d00b      	beq.n	403838 <critical_factorization+0xa8>
  403820:	f04f 0801 	mov.w	r8, #1
  403824:	462f      	mov	r7, r5
  403826:	4644      	mov	r4, r8
  403828:	4445      	add	r5, r8
  40382a:	e7d4      	b.n	4037d6 <critical_factorization+0x46>
  40382c:	4574      	cmp	r4, lr
  40382e:	bf12      	itee	ne
  403830:	3401      	addne	r4, #1
  403832:	461d      	moveq	r5, r3
  403834:	2401      	moveq	r4, #1
  403836:	e7b3      	b.n	4037a0 <critical_factorization+0x10>
  403838:	4544      	cmp	r4, r8
  40383a:	bf12      	itee	ne
  40383c:	3401      	addne	r4, #1
  40383e:	461d      	moveq	r5, r3
  403840:	2401      	moveq	r4, #1
  403842:	e7c8      	b.n	4037d6 <critical_factorization+0x46>

00403844 <two_way_long_needle>:
  403844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403848:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  40384c:	4616      	mov	r6, r2
  40384e:	4605      	mov	r5, r0
  403850:	468b      	mov	fp, r1
  403852:	4610      	mov	r0, r2
  403854:	4619      	mov	r1, r3
  403856:	aa03      	add	r2, sp, #12
  403858:	461c      	mov	r4, r3
  40385a:	f7ff ff99 	bl	403790 <critical_factorization>
  40385e:	ab03      	add	r3, sp, #12
  403860:	4681      	mov	r9, r0
  403862:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  403866:	f843 4f04 	str.w	r4, [r3, #4]!
  40386a:	4293      	cmp	r3, r2
  40386c:	d1fb      	bne.n	403866 <two_way_long_needle+0x22>
  40386e:	b14c      	cbz	r4, 403884 <two_way_long_needle+0x40>
  403870:	1e63      	subs	r3, r4, #1
  403872:	1e72      	subs	r2, r6, #1
  403874:	a804      	add	r0, sp, #16
  403876:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40387a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40387e:	f113 33ff 	adds.w	r3, r3, #4294967295
  403882:	d2f8      	bcs.n	403876 <two_way_long_needle+0x32>
  403884:	9903      	ldr	r1, [sp, #12]
  403886:	464a      	mov	r2, r9
  403888:	4431      	add	r1, r6
  40388a:	4630      	mov	r0, r6
  40388c:	f002 ff10 	bl	4066b0 <memcmp>
  403890:	2800      	cmp	r0, #0
  403892:	d16f      	bne.n	403974 <two_way_long_needle+0x130>
  403894:	f109 33ff 	add.w	r3, r9, #4294967295
  403898:	9300      	str	r3, [sp, #0]
  40389a:	18f3      	adds	r3, r6, r3
  40389c:	4682      	mov	sl, r0
  40389e:	9301      	str	r3, [sp, #4]
  4038a0:	4623      	mov	r3, r4
  4038a2:	4680      	mov	r8, r0
  4038a4:	4654      	mov	r4, sl
  4038a6:	4658      	mov	r0, fp
  4038a8:	469a      	mov	sl, r3
  4038aa:	eb08 070a 	add.w	r7, r8, sl
  4038ae:	1a3a      	subs	r2, r7, r0
  4038b0:	2100      	movs	r1, #0
  4038b2:	4428      	add	r0, r5
  4038b4:	f002 feac 	bl	406610 <memchr>
  4038b8:	2800      	cmp	r0, #0
  4038ba:	d156      	bne.n	40396a <two_way_long_needle+0x126>
  4038bc:	2f00      	cmp	r7, #0
  4038be:	d054      	beq.n	40396a <two_way_long_needle+0x126>
  4038c0:	19eb      	adds	r3, r5, r7
  4038c2:	aa04      	add	r2, sp, #16
  4038c4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4038c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4038cc:	b14b      	cbz	r3, 4038e2 <two_way_long_needle+0x9e>
  4038ce:	b124      	cbz	r4, 4038da <two_way_long_needle+0x96>
  4038d0:	9a03      	ldr	r2, [sp, #12]
  4038d2:	4293      	cmp	r3, r2
  4038d4:	d201      	bcs.n	4038da <two_way_long_needle+0x96>
  4038d6:	ebaa 0302 	sub.w	r3, sl, r2
  4038da:	4498      	add	r8, r3
  4038dc:	2400      	movs	r4, #0
  4038de:	4638      	mov	r0, r7
  4038e0:	e7e3      	b.n	4038aa <two_way_long_needle+0x66>
  4038e2:	454c      	cmp	r4, r9
  4038e4:	4623      	mov	r3, r4
  4038e6:	f10a 3eff 	add.w	lr, sl, #4294967295
  4038ea:	bf38      	it	cc
  4038ec:	464b      	movcc	r3, r9
  4038ee:	4573      	cmp	r3, lr
  4038f0:	d213      	bcs.n	40391a <two_way_long_needle+0xd6>
  4038f2:	eb08 0203 	add.w	r2, r8, r3
  4038f6:	f816 c003 	ldrb.w	ip, [r6, r3]
  4038fa:	5ca8      	ldrb	r0, [r5, r2]
  4038fc:	4584      	cmp	ip, r0
  4038fe:	442a      	add	r2, r5
  403900:	eb06 0103 	add.w	r1, r6, r3
  403904:	d006      	beq.n	403914 <two_way_long_needle+0xd0>
  403906:	e02c      	b.n	403962 <two_way_long_needle+0x11e>
  403908:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40390c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403910:	4584      	cmp	ip, r0
  403912:	d126      	bne.n	403962 <two_way_long_needle+0x11e>
  403914:	3301      	adds	r3, #1
  403916:	4573      	cmp	r3, lr
  403918:	d3f6      	bcc.n	403908 <two_way_long_needle+0xc4>
  40391a:	454c      	cmp	r4, r9
  40391c:	9900      	ldr	r1, [sp, #0]
  40391e:	f080 8089 	bcs.w	403a34 <two_way_long_needle+0x1f0>
  403922:	9b00      	ldr	r3, [sp, #0]
  403924:	eb08 0203 	add.w	r2, r8, r3
  403928:	9b01      	ldr	r3, [sp, #4]
  40392a:	5ca8      	ldrb	r0, [r5, r2]
  40392c:	781b      	ldrb	r3, [r3, #0]
  40392e:	4298      	cmp	r0, r3
  403930:	442a      	add	r2, r5
  403932:	d17f      	bne.n	403a34 <two_way_long_needle+0x1f0>
  403934:	9801      	ldr	r0, [sp, #4]
  403936:	f104 3bff 	add.w	fp, r4, #4294967295
  40393a:	e006      	b.n	40394a <two_way_long_needle+0x106>
  40393c:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403940:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403944:	45f4      	cmp	ip, lr
  403946:	d103      	bne.n	403950 <two_way_long_needle+0x10c>
  403948:	4619      	mov	r1, r3
  40394a:	1e4b      	subs	r3, r1, #1
  40394c:	459b      	cmp	fp, r3
  40394e:	d1f5      	bne.n	40393c <two_way_long_needle+0xf8>
  403950:	3401      	adds	r4, #1
  403952:	428c      	cmp	r4, r1
  403954:	d870      	bhi.n	403a38 <two_way_long_needle+0x1f4>
  403956:	9c03      	ldr	r4, [sp, #12]
  403958:	4638      	mov	r0, r7
  40395a:	44a0      	add	r8, r4
  40395c:	ebaa 0404 	sub.w	r4, sl, r4
  403960:	e7a3      	b.n	4038aa <two_way_long_needle+0x66>
  403962:	f1c9 0201 	rsb	r2, r9, #1
  403966:	4490      	add	r8, r2
  403968:	e7b7      	b.n	4038da <two_way_long_needle+0x96>
  40396a:	2000      	movs	r0, #0
  40396c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403974:	eba4 0309 	sub.w	r3, r4, r9
  403978:	454b      	cmp	r3, r9
  40397a:	bf38      	it	cc
  40397c:	464b      	movcc	r3, r9
  40397e:	3301      	adds	r3, #1
  403980:	f109 38ff 	add.w	r8, r9, #4294967295
  403984:	9303      	str	r3, [sp, #12]
  403986:	eb06 0308 	add.w	r3, r6, r8
  40398a:	4658      	mov	r0, fp
  40398c:	f04f 0a00 	mov.w	sl, #0
  403990:	46cb      	mov	fp, r9
  403992:	4699      	mov	r9, r3
  403994:	eb0a 0704 	add.w	r7, sl, r4
  403998:	1a3a      	subs	r2, r7, r0
  40399a:	2100      	movs	r1, #0
  40399c:	4428      	add	r0, r5
  40399e:	f002 fe37 	bl	406610 <memchr>
  4039a2:	2800      	cmp	r0, #0
  4039a4:	d1e1      	bne.n	40396a <two_way_long_needle+0x126>
  4039a6:	2f00      	cmp	r7, #0
  4039a8:	d0df      	beq.n	40396a <two_way_long_needle+0x126>
  4039aa:	19eb      	adds	r3, r5, r7
  4039ac:	aa04      	add	r2, sp, #16
  4039ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4039b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4039b6:	bba3      	cbnz	r3, 403a22 <two_way_long_needle+0x1de>
  4039b8:	1e61      	subs	r1, r4, #1
  4039ba:	458b      	cmp	fp, r1
  4039bc:	d215      	bcs.n	4039ea <two_way_long_needle+0x1a6>
  4039be:	eb0a 020b 	add.w	r2, sl, fp
  4039c2:	f816 300b 	ldrb.w	r3, [r6, fp]
  4039c6:	f815 e002 	ldrb.w	lr, [r5, r2]
  4039ca:	459e      	cmp	lr, r3
  4039cc:	442a      	add	r2, r5
  4039ce:	eb06 000b 	add.w	r0, r6, fp
  4039d2:	465b      	mov	r3, fp
  4039d4:	d006      	beq.n	4039e4 <two_way_long_needle+0x1a0>
  4039d6:	e027      	b.n	403a28 <two_way_long_needle+0x1e4>
  4039d8:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4039dc:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4039e0:	45f4      	cmp	ip, lr
  4039e2:	d121      	bne.n	403a28 <two_way_long_needle+0x1e4>
  4039e4:	3301      	adds	r3, #1
  4039e6:	428b      	cmp	r3, r1
  4039e8:	d3f6      	bcc.n	4039d8 <two_way_long_needle+0x194>
  4039ea:	f1b8 3fff 	cmp.w	r8, #4294967295
  4039ee:	d011      	beq.n	403a14 <two_way_long_needle+0x1d0>
  4039f0:	eb0a 0208 	add.w	r2, sl, r8
  4039f4:	f899 1000 	ldrb.w	r1, [r9]
  4039f8:	5cab      	ldrb	r3, [r5, r2]
  4039fa:	4299      	cmp	r1, r3
  4039fc:	442a      	add	r2, r5
  4039fe:	d10f      	bne.n	403a20 <two_way_long_needle+0x1dc>
  403a00:	464b      	mov	r3, r9
  403a02:	e005      	b.n	403a10 <two_way_long_needle+0x1cc>
  403a04:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403a08:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403a0c:	4288      	cmp	r0, r1
  403a0e:	d107      	bne.n	403a20 <two_way_long_needle+0x1dc>
  403a10:	42b3      	cmp	r3, r6
  403a12:	d1f7      	bne.n	403a04 <two_way_long_needle+0x1c0>
  403a14:	eb05 000a 	add.w	r0, r5, sl
  403a18:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a20:	9b03      	ldr	r3, [sp, #12]
  403a22:	449a      	add	sl, r3
  403a24:	4638      	mov	r0, r7
  403a26:	e7b5      	b.n	403994 <two_way_long_needle+0x150>
  403a28:	f1cb 0201 	rsb	r2, fp, #1
  403a2c:	4492      	add	sl, r2
  403a2e:	449a      	add	sl, r3
  403a30:	4638      	mov	r0, r7
  403a32:	e7af      	b.n	403994 <two_way_long_needle+0x150>
  403a34:	4649      	mov	r1, r9
  403a36:	e78b      	b.n	403950 <two_way_long_needle+0x10c>
  403a38:	eb05 0008 	add.w	r0, r5, r8
  403a3c:	e796      	b.n	40396c <two_way_long_needle+0x128>
  403a3e:	bf00      	nop

00403a40 <strstr>:
  403a40:	7802      	ldrb	r2, [r0, #0]
  403a42:	2a00      	cmp	r2, #0
  403a44:	f000 8101 	beq.w	403c4a <strstr+0x20a>
  403a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a4c:	f891 8000 	ldrb.w	r8, [r1]
  403a50:	b085      	sub	sp, #20
  403a52:	4644      	mov	r4, r8
  403a54:	f1b8 0f00 	cmp.w	r8, #0
  403a58:	d016      	beq.n	403a88 <strstr+0x48>
  403a5a:	4686      	mov	lr, r0
  403a5c:	f101 0c01 	add.w	ip, r1, #1
  403a60:	2701      	movs	r7, #1
  403a62:	e003      	b.n	403a6c <strstr+0x2c>
  403a64:	f813 4b01 	ldrb.w	r4, [r3], #1
  403a68:	b16c      	cbz	r4, 403a86 <strstr+0x46>
  403a6a:	469c      	mov	ip, r3
  403a6c:	42a2      	cmp	r2, r4
  403a6e:	bf14      	ite	ne
  403a70:	2700      	movne	r7, #0
  403a72:	f007 0701 	andeq.w	r7, r7, #1
  403a76:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  403a7a:	4663      	mov	r3, ip
  403a7c:	2a00      	cmp	r2, #0
  403a7e:	d1f1      	bne.n	403a64 <strstr+0x24>
  403a80:	f89c 3000 	ldrb.w	r3, [ip]
  403a84:	b9fb      	cbnz	r3, 403ac6 <strstr+0x86>
  403a86:	b117      	cbz	r7, 403a8e <strstr+0x4e>
  403a88:	b005      	add	sp, #20
  403a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a8e:	460e      	mov	r6, r1
  403a90:	4605      	mov	r5, r0
  403a92:	4641      	mov	r1, r8
  403a94:	3001      	adds	r0, #1
  403a96:	ebac 0406 	sub.w	r4, ip, r6
  403a9a:	f003 f9eb 	bl	406e74 <strchr>
  403a9e:	4607      	mov	r7, r0
  403aa0:	b188      	cbz	r0, 403ac6 <strstr+0x86>
  403aa2:	2c01      	cmp	r4, #1
  403aa4:	d0f0      	beq.n	403a88 <strstr+0x48>
  403aa6:	1928      	adds	r0, r5, r4
  403aa8:	4287      	cmp	r7, r0
  403aaa:	bf94      	ite	ls
  403aac:	1bc1      	subls	r1, r0, r7
  403aae:	2101      	movhi	r1, #1
  403ab0:	2c1f      	cmp	r4, #31
  403ab2:	468b      	mov	fp, r1
  403ab4:	d90b      	bls.n	403ace <strstr+0x8e>
  403ab6:	4623      	mov	r3, r4
  403ab8:	4632      	mov	r2, r6
  403aba:	4638      	mov	r0, r7
  403abc:	f7ff fec2 	bl	403844 <two_way_long_needle>
  403ac0:	b005      	add	sp, #20
  403ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ac6:	2000      	movs	r0, #0
  403ac8:	b005      	add	sp, #20
  403aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ace:	aa03      	add	r2, sp, #12
  403ad0:	4621      	mov	r1, r4
  403ad2:	4630      	mov	r0, r6
  403ad4:	f7ff fe5c 	bl	403790 <critical_factorization>
  403ad8:	9903      	ldr	r1, [sp, #12]
  403ada:	4680      	mov	r8, r0
  403adc:	4602      	mov	r2, r0
  403ade:	4431      	add	r1, r6
  403ae0:	4630      	mov	r0, r6
  403ae2:	f002 fde5 	bl	4066b0 <memcmp>
  403ae6:	2800      	cmp	r0, #0
  403ae8:	d157      	bne.n	403b9a <strstr+0x15a>
  403aea:	f108 33ff 	add.w	r3, r8, #4294967295
  403aee:	9300      	str	r3, [sp, #0]
  403af0:	18f3      	adds	r3, r6, r3
  403af2:	4681      	mov	r9, r0
  403af4:	4605      	mov	r5, r0
  403af6:	9301      	str	r3, [sp, #4]
  403af8:	4658      	mov	r0, fp
  403afa:	46b2      	mov	sl, r6
  403afc:	1966      	adds	r6, r4, r5
  403afe:	1a32      	subs	r2, r6, r0
  403b00:	2100      	movs	r1, #0
  403b02:	4438      	add	r0, r7
  403b04:	f002 fd84 	bl	406610 <memchr>
  403b08:	2800      	cmp	r0, #0
  403b0a:	d1dc      	bne.n	403ac6 <strstr+0x86>
  403b0c:	2e00      	cmp	r6, #0
  403b0e:	d0da      	beq.n	403ac6 <strstr+0x86>
  403b10:	45c8      	cmp	r8, r9
  403b12:	4643      	mov	r3, r8
  403b14:	bf38      	it	cc
  403b16:	464b      	movcc	r3, r9
  403b18:	429c      	cmp	r4, r3
  403b1a:	d912      	bls.n	403b42 <strstr+0x102>
  403b1c:	195a      	adds	r2, r3, r5
  403b1e:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403b22:	5cb8      	ldrb	r0, [r7, r2]
  403b24:	4281      	cmp	r1, r0
  403b26:	443a      	add	r2, r7
  403b28:	eb0a 0e03 	add.w	lr, sl, r3
  403b2c:	d006      	beq.n	403b3c <strstr+0xfc>
  403b2e:	e02c      	b.n	403b8a <strstr+0x14a>
  403b30:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403b34:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403b38:	4288      	cmp	r0, r1
  403b3a:	d126      	bne.n	403b8a <strstr+0x14a>
  403b3c:	3301      	adds	r3, #1
  403b3e:	429c      	cmp	r4, r3
  403b40:	d1f6      	bne.n	403b30 <strstr+0xf0>
  403b42:	45c8      	cmp	r8, r9
  403b44:	9900      	ldr	r1, [sp, #0]
  403b46:	f240 8083 	bls.w	403c50 <strstr+0x210>
  403b4a:	9b00      	ldr	r3, [sp, #0]
  403b4c:	18ea      	adds	r2, r5, r3
  403b4e:	9b01      	ldr	r3, [sp, #4]
  403b50:	5cb8      	ldrb	r0, [r7, r2]
  403b52:	781b      	ldrb	r3, [r3, #0]
  403b54:	4298      	cmp	r0, r3
  403b56:	443a      	add	r2, r7
  403b58:	d17a      	bne.n	403c50 <strstr+0x210>
  403b5a:	9801      	ldr	r0, [sp, #4]
  403b5c:	f109 3bff 	add.w	fp, r9, #4294967295
  403b60:	e006      	b.n	403b70 <strstr+0x130>
  403b62:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403b66:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403b6a:	45f4      	cmp	ip, lr
  403b6c:	d103      	bne.n	403b76 <strstr+0x136>
  403b6e:	4619      	mov	r1, r3
  403b70:	1e4b      	subs	r3, r1, #1
  403b72:	455b      	cmp	r3, fp
  403b74:	d1f5      	bne.n	403b62 <strstr+0x122>
  403b76:	f109 0901 	add.w	r9, r9, #1
  403b7a:	4589      	cmp	r9, r1
  403b7c:	d857      	bhi.n	403c2e <strstr+0x1ee>
  403b7e:	9b03      	ldr	r3, [sp, #12]
  403b80:	4630      	mov	r0, r6
  403b82:	441d      	add	r5, r3
  403b84:	eba4 0903 	sub.w	r9, r4, r3
  403b88:	e7b8      	b.n	403afc <strstr+0xbc>
  403b8a:	f1c8 0201 	rsb	r2, r8, #1
  403b8e:	4415      	add	r5, r2
  403b90:	441d      	add	r5, r3
  403b92:	f04f 0900 	mov.w	r9, #0
  403b96:	4630      	mov	r0, r6
  403b98:	e7b0      	b.n	403afc <strstr+0xbc>
  403b9a:	eba4 0308 	sub.w	r3, r4, r8
  403b9e:	4543      	cmp	r3, r8
  403ba0:	bf38      	it	cc
  403ba2:	4643      	movcc	r3, r8
  403ba4:	3301      	adds	r3, #1
  403ba6:	f108 39ff 	add.w	r9, r8, #4294967295
  403baa:	9303      	str	r3, [sp, #12]
  403bac:	eb06 0309 	add.w	r3, r6, r9
  403bb0:	4658      	mov	r0, fp
  403bb2:	2500      	movs	r5, #0
  403bb4:	46bb      	mov	fp, r7
  403bb6:	469a      	mov	sl, r3
  403bb8:	1967      	adds	r7, r4, r5
  403bba:	1a3a      	subs	r2, r7, r0
  403bbc:	2100      	movs	r1, #0
  403bbe:	4458      	add	r0, fp
  403bc0:	f002 fd26 	bl	406610 <memchr>
  403bc4:	2800      	cmp	r0, #0
  403bc6:	f47f af7e 	bne.w	403ac6 <strstr+0x86>
  403bca:	2f00      	cmp	r7, #0
  403bcc:	f43f af7b 	beq.w	403ac6 <strstr+0x86>
  403bd0:	4544      	cmp	r4, r8
  403bd2:	d915      	bls.n	403c00 <strstr+0x1c0>
  403bd4:	eb08 0205 	add.w	r2, r8, r5
  403bd8:	f816 3008 	ldrb.w	r3, [r6, r8]
  403bdc:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403be0:	4298      	cmp	r0, r3
  403be2:	445a      	add	r2, fp
  403be4:	eb06 0108 	add.w	r1, r6, r8
  403be8:	4643      	mov	r3, r8
  403bea:	d006      	beq.n	403bfa <strstr+0x1ba>
  403bec:	e023      	b.n	403c36 <strstr+0x1f6>
  403bee:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  403bf2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403bf6:	4586      	cmp	lr, r0
  403bf8:	d11d      	bne.n	403c36 <strstr+0x1f6>
  403bfa:	3301      	adds	r3, #1
  403bfc:	429c      	cmp	r4, r3
  403bfe:	d1f6      	bne.n	403bee <strstr+0x1ae>
  403c00:	f1b9 3fff 	cmp.w	r9, #4294967295
  403c04:	d012      	beq.n	403c2c <strstr+0x1ec>
  403c06:	eb05 0209 	add.w	r2, r5, r9
  403c0a:	f89a 3000 	ldrb.w	r3, [sl]
  403c0e:	f81b 1002 	ldrb.w	r1, [fp, r2]
  403c12:	4299      	cmp	r1, r3
  403c14:	445a      	add	r2, fp
  403c16:	d114      	bne.n	403c42 <strstr+0x202>
  403c18:	4653      	mov	r3, sl
  403c1a:	e005      	b.n	403c28 <strstr+0x1e8>
  403c1c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403c20:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403c24:	4288      	cmp	r0, r1
  403c26:	d10c      	bne.n	403c42 <strstr+0x202>
  403c28:	42b3      	cmp	r3, r6
  403c2a:	d1f7      	bne.n	403c1c <strstr+0x1dc>
  403c2c:	465f      	mov	r7, fp
  403c2e:	1978      	adds	r0, r7, r5
  403c30:	b005      	add	sp, #20
  403c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c36:	f1c8 0201 	rsb	r2, r8, #1
  403c3a:	4415      	add	r5, r2
  403c3c:	441d      	add	r5, r3
  403c3e:	4638      	mov	r0, r7
  403c40:	e7ba      	b.n	403bb8 <strstr+0x178>
  403c42:	9b03      	ldr	r3, [sp, #12]
  403c44:	4638      	mov	r0, r7
  403c46:	441d      	add	r5, r3
  403c48:	e7b6      	b.n	403bb8 <strstr+0x178>
  403c4a:	780b      	ldrb	r3, [r1, #0]
  403c4c:	b913      	cbnz	r3, 403c54 <strstr+0x214>
  403c4e:	4770      	bx	lr
  403c50:	4641      	mov	r1, r8
  403c52:	e790      	b.n	403b76 <strstr+0x136>
  403c54:	2000      	movs	r0, #0
  403c56:	4770      	bx	lr

00403c58 <_svfprintf_r>:
  403c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c5c:	b0c3      	sub	sp, #268	; 0x10c
  403c5e:	460c      	mov	r4, r1
  403c60:	910b      	str	r1, [sp, #44]	; 0x2c
  403c62:	4692      	mov	sl, r2
  403c64:	930f      	str	r3, [sp, #60]	; 0x3c
  403c66:	900c      	str	r0, [sp, #48]	; 0x30
  403c68:	f002 fa0e 	bl	406088 <_localeconv_r>
  403c6c:	6803      	ldr	r3, [r0, #0]
  403c6e:	931a      	str	r3, [sp, #104]	; 0x68
  403c70:	4618      	mov	r0, r3
  403c72:	f003 f985 	bl	406f80 <strlen>
  403c76:	89a3      	ldrh	r3, [r4, #12]
  403c78:	9019      	str	r0, [sp, #100]	; 0x64
  403c7a:	0619      	lsls	r1, r3, #24
  403c7c:	d503      	bpl.n	403c86 <_svfprintf_r+0x2e>
  403c7e:	6923      	ldr	r3, [r4, #16]
  403c80:	2b00      	cmp	r3, #0
  403c82:	f001 8003 	beq.w	404c8c <_svfprintf_r+0x1034>
  403c86:	2300      	movs	r3, #0
  403c88:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403c8c:	9313      	str	r3, [sp, #76]	; 0x4c
  403c8e:	9315      	str	r3, [sp, #84]	; 0x54
  403c90:	9314      	str	r3, [sp, #80]	; 0x50
  403c92:	9327      	str	r3, [sp, #156]	; 0x9c
  403c94:	9326      	str	r3, [sp, #152]	; 0x98
  403c96:	9318      	str	r3, [sp, #96]	; 0x60
  403c98:	931b      	str	r3, [sp, #108]	; 0x6c
  403c9a:	9309      	str	r3, [sp, #36]	; 0x24
  403c9c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403ca0:	46c8      	mov	r8, r9
  403ca2:	9316      	str	r3, [sp, #88]	; 0x58
  403ca4:	9317      	str	r3, [sp, #92]	; 0x5c
  403ca6:	f89a 3000 	ldrb.w	r3, [sl]
  403caa:	4654      	mov	r4, sl
  403cac:	b1e3      	cbz	r3, 403ce8 <_svfprintf_r+0x90>
  403cae:	2b25      	cmp	r3, #37	; 0x25
  403cb0:	d102      	bne.n	403cb8 <_svfprintf_r+0x60>
  403cb2:	e019      	b.n	403ce8 <_svfprintf_r+0x90>
  403cb4:	2b25      	cmp	r3, #37	; 0x25
  403cb6:	d003      	beq.n	403cc0 <_svfprintf_r+0x68>
  403cb8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403cbc:	2b00      	cmp	r3, #0
  403cbe:	d1f9      	bne.n	403cb4 <_svfprintf_r+0x5c>
  403cc0:	eba4 050a 	sub.w	r5, r4, sl
  403cc4:	b185      	cbz	r5, 403ce8 <_svfprintf_r+0x90>
  403cc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403cc8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403cca:	f8c8 a000 	str.w	sl, [r8]
  403cce:	3301      	adds	r3, #1
  403cd0:	442a      	add	r2, r5
  403cd2:	2b07      	cmp	r3, #7
  403cd4:	f8c8 5004 	str.w	r5, [r8, #4]
  403cd8:	9227      	str	r2, [sp, #156]	; 0x9c
  403cda:	9326      	str	r3, [sp, #152]	; 0x98
  403cdc:	dc7f      	bgt.n	403dde <_svfprintf_r+0x186>
  403cde:	f108 0808 	add.w	r8, r8, #8
  403ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ce4:	442b      	add	r3, r5
  403ce6:	9309      	str	r3, [sp, #36]	; 0x24
  403ce8:	7823      	ldrb	r3, [r4, #0]
  403cea:	2b00      	cmp	r3, #0
  403cec:	d07f      	beq.n	403dee <_svfprintf_r+0x196>
  403cee:	2300      	movs	r3, #0
  403cf0:	461a      	mov	r2, r3
  403cf2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403cf6:	4619      	mov	r1, r3
  403cf8:	930d      	str	r3, [sp, #52]	; 0x34
  403cfa:	469b      	mov	fp, r3
  403cfc:	f04f 30ff 	mov.w	r0, #4294967295
  403d00:	7863      	ldrb	r3, [r4, #1]
  403d02:	900a      	str	r0, [sp, #40]	; 0x28
  403d04:	f104 0a01 	add.w	sl, r4, #1
  403d08:	f10a 0a01 	add.w	sl, sl, #1
  403d0c:	f1a3 0020 	sub.w	r0, r3, #32
  403d10:	2858      	cmp	r0, #88	; 0x58
  403d12:	f200 83c1 	bhi.w	404498 <_svfprintf_r+0x840>
  403d16:	e8df f010 	tbh	[pc, r0, lsl #1]
  403d1a:	0238      	.short	0x0238
  403d1c:	03bf03bf 	.word	0x03bf03bf
  403d20:	03bf0240 	.word	0x03bf0240
  403d24:	03bf03bf 	.word	0x03bf03bf
  403d28:	03bf03bf 	.word	0x03bf03bf
  403d2c:	024503bf 	.word	0x024503bf
  403d30:	03bf0203 	.word	0x03bf0203
  403d34:	026b005d 	.word	0x026b005d
  403d38:	028603bf 	.word	0x028603bf
  403d3c:	039d039d 	.word	0x039d039d
  403d40:	039d039d 	.word	0x039d039d
  403d44:	039d039d 	.word	0x039d039d
  403d48:	039d039d 	.word	0x039d039d
  403d4c:	03bf039d 	.word	0x03bf039d
  403d50:	03bf03bf 	.word	0x03bf03bf
  403d54:	03bf03bf 	.word	0x03bf03bf
  403d58:	03bf03bf 	.word	0x03bf03bf
  403d5c:	03bf03bf 	.word	0x03bf03bf
  403d60:	033703bf 	.word	0x033703bf
  403d64:	03bf0357 	.word	0x03bf0357
  403d68:	03bf0357 	.word	0x03bf0357
  403d6c:	03bf03bf 	.word	0x03bf03bf
  403d70:	039803bf 	.word	0x039803bf
  403d74:	03bf03bf 	.word	0x03bf03bf
  403d78:	03bf03ad 	.word	0x03bf03ad
  403d7c:	03bf03bf 	.word	0x03bf03bf
  403d80:	03bf03bf 	.word	0x03bf03bf
  403d84:	03bf0259 	.word	0x03bf0259
  403d88:	031e03bf 	.word	0x031e03bf
  403d8c:	03bf03bf 	.word	0x03bf03bf
  403d90:	03bf03bf 	.word	0x03bf03bf
  403d94:	03bf03bf 	.word	0x03bf03bf
  403d98:	03bf03bf 	.word	0x03bf03bf
  403d9c:	03bf03bf 	.word	0x03bf03bf
  403da0:	02db02c6 	.word	0x02db02c6
  403da4:	03570357 	.word	0x03570357
  403da8:	028b0357 	.word	0x028b0357
  403dac:	03bf02db 	.word	0x03bf02db
  403db0:	029003bf 	.word	0x029003bf
  403db4:	029d03bf 	.word	0x029d03bf
  403db8:	02b401cc 	.word	0x02b401cc
  403dbc:	03bf0208 	.word	0x03bf0208
  403dc0:	03bf01e1 	.word	0x03bf01e1
  403dc4:	03bf007e 	.word	0x03bf007e
  403dc8:	020d03bf 	.word	0x020d03bf
  403dcc:	980d      	ldr	r0, [sp, #52]	; 0x34
  403dce:	930f      	str	r3, [sp, #60]	; 0x3c
  403dd0:	4240      	negs	r0, r0
  403dd2:	900d      	str	r0, [sp, #52]	; 0x34
  403dd4:	f04b 0b04 	orr.w	fp, fp, #4
  403dd8:	f89a 3000 	ldrb.w	r3, [sl]
  403ddc:	e794      	b.n	403d08 <_svfprintf_r+0xb0>
  403dde:	aa25      	add	r2, sp, #148	; 0x94
  403de0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403de2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403de4:	f003 f93a 	bl	40705c <__ssprint_r>
  403de8:	b940      	cbnz	r0, 403dfc <_svfprintf_r+0x1a4>
  403dea:	46c8      	mov	r8, r9
  403dec:	e779      	b.n	403ce2 <_svfprintf_r+0x8a>
  403dee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403df0:	b123      	cbz	r3, 403dfc <_svfprintf_r+0x1a4>
  403df2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403df6:	aa25      	add	r2, sp, #148	; 0x94
  403df8:	f003 f930 	bl	40705c <__ssprint_r>
  403dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403dfe:	899b      	ldrh	r3, [r3, #12]
  403e00:	f013 0f40 	tst.w	r3, #64	; 0x40
  403e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403e06:	bf18      	it	ne
  403e08:	f04f 33ff 	movne.w	r3, #4294967295
  403e0c:	9309      	str	r3, [sp, #36]	; 0x24
  403e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
  403e10:	b043      	add	sp, #268	; 0x10c
  403e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e16:	f01b 0f20 	tst.w	fp, #32
  403e1a:	9311      	str	r3, [sp, #68]	; 0x44
  403e1c:	f040 81dd 	bne.w	4041da <_svfprintf_r+0x582>
  403e20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403e22:	f01b 0f10 	tst.w	fp, #16
  403e26:	4613      	mov	r3, r2
  403e28:	f040 856e 	bne.w	404908 <_svfprintf_r+0xcb0>
  403e2c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403e30:	f000 856a 	beq.w	404908 <_svfprintf_r+0xcb0>
  403e34:	8814      	ldrh	r4, [r2, #0]
  403e36:	3204      	adds	r2, #4
  403e38:	2500      	movs	r5, #0
  403e3a:	2301      	movs	r3, #1
  403e3c:	920f      	str	r2, [sp, #60]	; 0x3c
  403e3e:	2700      	movs	r7, #0
  403e40:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403e44:	990a      	ldr	r1, [sp, #40]	; 0x28
  403e46:	1c4a      	adds	r2, r1, #1
  403e48:	f000 8265 	beq.w	404316 <_svfprintf_r+0x6be>
  403e4c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403e50:	9207      	str	r2, [sp, #28]
  403e52:	ea54 0205 	orrs.w	r2, r4, r5
  403e56:	f040 8264 	bne.w	404322 <_svfprintf_r+0x6ca>
  403e5a:	2900      	cmp	r1, #0
  403e5c:	f040 843c 	bne.w	4046d8 <_svfprintf_r+0xa80>
  403e60:	2b00      	cmp	r3, #0
  403e62:	f040 84d7 	bne.w	404814 <_svfprintf_r+0xbbc>
  403e66:	f01b 0301 	ands.w	r3, fp, #1
  403e6a:	930e      	str	r3, [sp, #56]	; 0x38
  403e6c:	f000 8604 	beq.w	404a78 <_svfprintf_r+0xe20>
  403e70:	ae42      	add	r6, sp, #264	; 0x108
  403e72:	2330      	movs	r3, #48	; 0x30
  403e74:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403e7c:	4293      	cmp	r3, r2
  403e7e:	bfb8      	it	lt
  403e80:	4613      	movlt	r3, r2
  403e82:	9308      	str	r3, [sp, #32]
  403e84:	2300      	movs	r3, #0
  403e86:	9312      	str	r3, [sp, #72]	; 0x48
  403e88:	b117      	cbz	r7, 403e90 <_svfprintf_r+0x238>
  403e8a:	9b08      	ldr	r3, [sp, #32]
  403e8c:	3301      	adds	r3, #1
  403e8e:	9308      	str	r3, [sp, #32]
  403e90:	9b07      	ldr	r3, [sp, #28]
  403e92:	f013 0302 	ands.w	r3, r3, #2
  403e96:	9310      	str	r3, [sp, #64]	; 0x40
  403e98:	d002      	beq.n	403ea0 <_svfprintf_r+0x248>
  403e9a:	9b08      	ldr	r3, [sp, #32]
  403e9c:	3302      	adds	r3, #2
  403e9e:	9308      	str	r3, [sp, #32]
  403ea0:	9b07      	ldr	r3, [sp, #28]
  403ea2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403ea6:	f040 830e 	bne.w	4044c6 <_svfprintf_r+0x86e>
  403eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403eac:	9a08      	ldr	r2, [sp, #32]
  403eae:	eba3 0b02 	sub.w	fp, r3, r2
  403eb2:	f1bb 0f00 	cmp.w	fp, #0
  403eb6:	f340 8306 	ble.w	4044c6 <_svfprintf_r+0x86e>
  403eba:	f1bb 0f10 	cmp.w	fp, #16
  403ebe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ec0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403ec2:	dd29      	ble.n	403f18 <_svfprintf_r+0x2c0>
  403ec4:	4643      	mov	r3, r8
  403ec6:	4621      	mov	r1, r4
  403ec8:	46a8      	mov	r8, r5
  403eca:	2710      	movs	r7, #16
  403ecc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403ece:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403ed0:	e006      	b.n	403ee0 <_svfprintf_r+0x288>
  403ed2:	f1ab 0b10 	sub.w	fp, fp, #16
  403ed6:	f1bb 0f10 	cmp.w	fp, #16
  403eda:	f103 0308 	add.w	r3, r3, #8
  403ede:	dd18      	ble.n	403f12 <_svfprintf_r+0x2ba>
  403ee0:	3201      	adds	r2, #1
  403ee2:	48b7      	ldr	r0, [pc, #732]	; (4041c0 <_svfprintf_r+0x568>)
  403ee4:	9226      	str	r2, [sp, #152]	; 0x98
  403ee6:	3110      	adds	r1, #16
  403ee8:	2a07      	cmp	r2, #7
  403eea:	9127      	str	r1, [sp, #156]	; 0x9c
  403eec:	e883 0081 	stmia.w	r3, {r0, r7}
  403ef0:	ddef      	ble.n	403ed2 <_svfprintf_r+0x27a>
  403ef2:	aa25      	add	r2, sp, #148	; 0x94
  403ef4:	4629      	mov	r1, r5
  403ef6:	4620      	mov	r0, r4
  403ef8:	f003 f8b0 	bl	40705c <__ssprint_r>
  403efc:	2800      	cmp	r0, #0
  403efe:	f47f af7d 	bne.w	403dfc <_svfprintf_r+0x1a4>
  403f02:	f1ab 0b10 	sub.w	fp, fp, #16
  403f06:	f1bb 0f10 	cmp.w	fp, #16
  403f0a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f0e:	464b      	mov	r3, r9
  403f10:	dce6      	bgt.n	403ee0 <_svfprintf_r+0x288>
  403f12:	4645      	mov	r5, r8
  403f14:	460c      	mov	r4, r1
  403f16:	4698      	mov	r8, r3
  403f18:	3201      	adds	r2, #1
  403f1a:	4ba9      	ldr	r3, [pc, #676]	; (4041c0 <_svfprintf_r+0x568>)
  403f1c:	9226      	str	r2, [sp, #152]	; 0x98
  403f1e:	445c      	add	r4, fp
  403f20:	2a07      	cmp	r2, #7
  403f22:	9427      	str	r4, [sp, #156]	; 0x9c
  403f24:	e888 0808 	stmia.w	r8, {r3, fp}
  403f28:	f300 8498 	bgt.w	40485c <_svfprintf_r+0xc04>
  403f2c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403f30:	f108 0808 	add.w	r8, r8, #8
  403f34:	b177      	cbz	r7, 403f54 <_svfprintf_r+0x2fc>
  403f36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f38:	3301      	adds	r3, #1
  403f3a:	3401      	adds	r4, #1
  403f3c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403f40:	2201      	movs	r2, #1
  403f42:	2b07      	cmp	r3, #7
  403f44:	9427      	str	r4, [sp, #156]	; 0x9c
  403f46:	9326      	str	r3, [sp, #152]	; 0x98
  403f48:	e888 0006 	stmia.w	r8, {r1, r2}
  403f4c:	f300 83db 	bgt.w	404706 <_svfprintf_r+0xaae>
  403f50:	f108 0808 	add.w	r8, r8, #8
  403f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403f56:	b16b      	cbz	r3, 403f74 <_svfprintf_r+0x31c>
  403f58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f5a:	3301      	adds	r3, #1
  403f5c:	3402      	adds	r4, #2
  403f5e:	a91e      	add	r1, sp, #120	; 0x78
  403f60:	2202      	movs	r2, #2
  403f62:	2b07      	cmp	r3, #7
  403f64:	9427      	str	r4, [sp, #156]	; 0x9c
  403f66:	9326      	str	r3, [sp, #152]	; 0x98
  403f68:	e888 0006 	stmia.w	r8, {r1, r2}
  403f6c:	f300 83d6 	bgt.w	40471c <_svfprintf_r+0xac4>
  403f70:	f108 0808 	add.w	r8, r8, #8
  403f74:	2d80      	cmp	r5, #128	; 0x80
  403f76:	f000 8315 	beq.w	4045a4 <_svfprintf_r+0x94c>
  403f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403f7e:	1a9f      	subs	r7, r3, r2
  403f80:	2f00      	cmp	r7, #0
  403f82:	dd36      	ble.n	403ff2 <_svfprintf_r+0x39a>
  403f84:	2f10      	cmp	r7, #16
  403f86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f88:	4d8e      	ldr	r5, [pc, #568]	; (4041c4 <_svfprintf_r+0x56c>)
  403f8a:	dd27      	ble.n	403fdc <_svfprintf_r+0x384>
  403f8c:	4642      	mov	r2, r8
  403f8e:	4621      	mov	r1, r4
  403f90:	46b0      	mov	r8, r6
  403f92:	f04f 0b10 	mov.w	fp, #16
  403f96:	462e      	mov	r6, r5
  403f98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f9c:	e004      	b.n	403fa8 <_svfprintf_r+0x350>
  403f9e:	3f10      	subs	r7, #16
  403fa0:	2f10      	cmp	r7, #16
  403fa2:	f102 0208 	add.w	r2, r2, #8
  403fa6:	dd15      	ble.n	403fd4 <_svfprintf_r+0x37c>
  403fa8:	3301      	adds	r3, #1
  403faa:	3110      	adds	r1, #16
  403fac:	2b07      	cmp	r3, #7
  403fae:	9127      	str	r1, [sp, #156]	; 0x9c
  403fb0:	9326      	str	r3, [sp, #152]	; 0x98
  403fb2:	e882 0840 	stmia.w	r2, {r6, fp}
  403fb6:	ddf2      	ble.n	403f9e <_svfprintf_r+0x346>
  403fb8:	aa25      	add	r2, sp, #148	; 0x94
  403fba:	4629      	mov	r1, r5
  403fbc:	4620      	mov	r0, r4
  403fbe:	f003 f84d 	bl	40705c <__ssprint_r>
  403fc2:	2800      	cmp	r0, #0
  403fc4:	f47f af1a 	bne.w	403dfc <_svfprintf_r+0x1a4>
  403fc8:	3f10      	subs	r7, #16
  403fca:	2f10      	cmp	r7, #16
  403fcc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fd0:	464a      	mov	r2, r9
  403fd2:	dce9      	bgt.n	403fa8 <_svfprintf_r+0x350>
  403fd4:	4635      	mov	r5, r6
  403fd6:	460c      	mov	r4, r1
  403fd8:	4646      	mov	r6, r8
  403fda:	4690      	mov	r8, r2
  403fdc:	3301      	adds	r3, #1
  403fde:	443c      	add	r4, r7
  403fe0:	2b07      	cmp	r3, #7
  403fe2:	9427      	str	r4, [sp, #156]	; 0x9c
  403fe4:	9326      	str	r3, [sp, #152]	; 0x98
  403fe6:	e888 00a0 	stmia.w	r8, {r5, r7}
  403fea:	f300 8381 	bgt.w	4046f0 <_svfprintf_r+0xa98>
  403fee:	f108 0808 	add.w	r8, r8, #8
  403ff2:	9b07      	ldr	r3, [sp, #28]
  403ff4:	05df      	lsls	r7, r3, #23
  403ff6:	f100 8268 	bmi.w	4044ca <_svfprintf_r+0x872>
  403ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ffc:	990e      	ldr	r1, [sp, #56]	; 0x38
  403ffe:	f8c8 6000 	str.w	r6, [r8]
  404002:	3301      	adds	r3, #1
  404004:	440c      	add	r4, r1
  404006:	2b07      	cmp	r3, #7
  404008:	9427      	str	r4, [sp, #156]	; 0x9c
  40400a:	f8c8 1004 	str.w	r1, [r8, #4]
  40400e:	9326      	str	r3, [sp, #152]	; 0x98
  404010:	f300 834d 	bgt.w	4046ae <_svfprintf_r+0xa56>
  404014:	f108 0808 	add.w	r8, r8, #8
  404018:	9b07      	ldr	r3, [sp, #28]
  40401a:	075b      	lsls	r3, r3, #29
  40401c:	d53a      	bpl.n	404094 <_svfprintf_r+0x43c>
  40401e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404020:	9a08      	ldr	r2, [sp, #32]
  404022:	1a9d      	subs	r5, r3, r2
  404024:	2d00      	cmp	r5, #0
  404026:	dd35      	ble.n	404094 <_svfprintf_r+0x43c>
  404028:	2d10      	cmp	r5, #16
  40402a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40402c:	dd20      	ble.n	404070 <_svfprintf_r+0x418>
  40402e:	2610      	movs	r6, #16
  404030:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404032:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404036:	e004      	b.n	404042 <_svfprintf_r+0x3ea>
  404038:	3d10      	subs	r5, #16
  40403a:	2d10      	cmp	r5, #16
  40403c:	f108 0808 	add.w	r8, r8, #8
  404040:	dd16      	ble.n	404070 <_svfprintf_r+0x418>
  404042:	3301      	adds	r3, #1
  404044:	4a5e      	ldr	r2, [pc, #376]	; (4041c0 <_svfprintf_r+0x568>)
  404046:	9326      	str	r3, [sp, #152]	; 0x98
  404048:	3410      	adds	r4, #16
  40404a:	2b07      	cmp	r3, #7
  40404c:	9427      	str	r4, [sp, #156]	; 0x9c
  40404e:	e888 0044 	stmia.w	r8, {r2, r6}
  404052:	ddf1      	ble.n	404038 <_svfprintf_r+0x3e0>
  404054:	aa25      	add	r2, sp, #148	; 0x94
  404056:	4659      	mov	r1, fp
  404058:	4638      	mov	r0, r7
  40405a:	f002 ffff 	bl	40705c <__ssprint_r>
  40405e:	2800      	cmp	r0, #0
  404060:	f47f aecc 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404064:	3d10      	subs	r5, #16
  404066:	2d10      	cmp	r5, #16
  404068:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40406a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40406c:	46c8      	mov	r8, r9
  40406e:	dce8      	bgt.n	404042 <_svfprintf_r+0x3ea>
  404070:	3301      	adds	r3, #1
  404072:	4a53      	ldr	r2, [pc, #332]	; (4041c0 <_svfprintf_r+0x568>)
  404074:	9326      	str	r3, [sp, #152]	; 0x98
  404076:	442c      	add	r4, r5
  404078:	2b07      	cmp	r3, #7
  40407a:	9427      	str	r4, [sp, #156]	; 0x9c
  40407c:	e888 0024 	stmia.w	r8, {r2, r5}
  404080:	dd08      	ble.n	404094 <_svfprintf_r+0x43c>
  404082:	aa25      	add	r2, sp, #148	; 0x94
  404084:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404086:	980c      	ldr	r0, [sp, #48]	; 0x30
  404088:	f002 ffe8 	bl	40705c <__ssprint_r>
  40408c:	2800      	cmp	r0, #0
  40408e:	f47f aeb5 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404092:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404094:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404096:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404098:	9908      	ldr	r1, [sp, #32]
  40409a:	428a      	cmp	r2, r1
  40409c:	bfac      	ite	ge
  40409e:	189b      	addge	r3, r3, r2
  4040a0:	185b      	addlt	r3, r3, r1
  4040a2:	9309      	str	r3, [sp, #36]	; 0x24
  4040a4:	2c00      	cmp	r4, #0
  4040a6:	f040 830d 	bne.w	4046c4 <_svfprintf_r+0xa6c>
  4040aa:	2300      	movs	r3, #0
  4040ac:	9326      	str	r3, [sp, #152]	; 0x98
  4040ae:	46c8      	mov	r8, r9
  4040b0:	e5f9      	b.n	403ca6 <_svfprintf_r+0x4e>
  4040b2:	9311      	str	r3, [sp, #68]	; 0x44
  4040b4:	f01b 0320 	ands.w	r3, fp, #32
  4040b8:	f040 81e3 	bne.w	404482 <_svfprintf_r+0x82a>
  4040bc:	f01b 0210 	ands.w	r2, fp, #16
  4040c0:	f040 842e 	bne.w	404920 <_svfprintf_r+0xcc8>
  4040c4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4040c8:	f000 842a 	beq.w	404920 <_svfprintf_r+0xcc8>
  4040cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4040ce:	4613      	mov	r3, r2
  4040d0:	460a      	mov	r2, r1
  4040d2:	3204      	adds	r2, #4
  4040d4:	880c      	ldrh	r4, [r1, #0]
  4040d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4040d8:	2500      	movs	r5, #0
  4040da:	e6b0      	b.n	403e3e <_svfprintf_r+0x1e6>
  4040dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040de:	9311      	str	r3, [sp, #68]	; 0x44
  4040e0:	6816      	ldr	r6, [r2, #0]
  4040e2:	2400      	movs	r4, #0
  4040e4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4040e8:	1d15      	adds	r5, r2, #4
  4040ea:	2e00      	cmp	r6, #0
  4040ec:	f000 86a7 	beq.w	404e3e <_svfprintf_r+0x11e6>
  4040f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4040f2:	1c53      	adds	r3, r2, #1
  4040f4:	f000 8609 	beq.w	404d0a <_svfprintf_r+0x10b2>
  4040f8:	4621      	mov	r1, r4
  4040fa:	4630      	mov	r0, r6
  4040fc:	f002 fa88 	bl	406610 <memchr>
  404100:	2800      	cmp	r0, #0
  404102:	f000 86e1 	beq.w	404ec8 <_svfprintf_r+0x1270>
  404106:	1b83      	subs	r3, r0, r6
  404108:	930e      	str	r3, [sp, #56]	; 0x38
  40410a:	940a      	str	r4, [sp, #40]	; 0x28
  40410c:	950f      	str	r5, [sp, #60]	; 0x3c
  40410e:	f8cd b01c 	str.w	fp, [sp, #28]
  404112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404116:	9308      	str	r3, [sp, #32]
  404118:	9412      	str	r4, [sp, #72]	; 0x48
  40411a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40411e:	e6b3      	b.n	403e88 <_svfprintf_r+0x230>
  404120:	f89a 3000 	ldrb.w	r3, [sl]
  404124:	2201      	movs	r2, #1
  404126:	212b      	movs	r1, #43	; 0x2b
  404128:	e5ee      	b.n	403d08 <_svfprintf_r+0xb0>
  40412a:	f04b 0b20 	orr.w	fp, fp, #32
  40412e:	f89a 3000 	ldrb.w	r3, [sl]
  404132:	e5e9      	b.n	403d08 <_svfprintf_r+0xb0>
  404134:	9311      	str	r3, [sp, #68]	; 0x44
  404136:	2a00      	cmp	r2, #0
  404138:	f040 8795 	bne.w	405066 <_svfprintf_r+0x140e>
  40413c:	4b22      	ldr	r3, [pc, #136]	; (4041c8 <_svfprintf_r+0x570>)
  40413e:	9318      	str	r3, [sp, #96]	; 0x60
  404140:	f01b 0f20 	tst.w	fp, #32
  404144:	f040 8111 	bne.w	40436a <_svfprintf_r+0x712>
  404148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40414a:	f01b 0f10 	tst.w	fp, #16
  40414e:	4613      	mov	r3, r2
  404150:	f040 83e1 	bne.w	404916 <_svfprintf_r+0xcbe>
  404154:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404158:	f000 83dd 	beq.w	404916 <_svfprintf_r+0xcbe>
  40415c:	3304      	adds	r3, #4
  40415e:	8814      	ldrh	r4, [r2, #0]
  404160:	930f      	str	r3, [sp, #60]	; 0x3c
  404162:	2500      	movs	r5, #0
  404164:	f01b 0f01 	tst.w	fp, #1
  404168:	f000 810c 	beq.w	404384 <_svfprintf_r+0x72c>
  40416c:	ea54 0305 	orrs.w	r3, r4, r5
  404170:	f000 8108 	beq.w	404384 <_svfprintf_r+0x72c>
  404174:	2330      	movs	r3, #48	; 0x30
  404176:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40417a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40417e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404182:	f04b 0b02 	orr.w	fp, fp, #2
  404186:	2302      	movs	r3, #2
  404188:	e659      	b.n	403e3e <_svfprintf_r+0x1e6>
  40418a:	f89a 3000 	ldrb.w	r3, [sl]
  40418e:	2900      	cmp	r1, #0
  404190:	f47f adba 	bne.w	403d08 <_svfprintf_r+0xb0>
  404194:	2201      	movs	r2, #1
  404196:	2120      	movs	r1, #32
  404198:	e5b6      	b.n	403d08 <_svfprintf_r+0xb0>
  40419a:	f04b 0b01 	orr.w	fp, fp, #1
  40419e:	f89a 3000 	ldrb.w	r3, [sl]
  4041a2:	e5b1      	b.n	403d08 <_svfprintf_r+0xb0>
  4041a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4041a6:	6823      	ldr	r3, [r4, #0]
  4041a8:	930d      	str	r3, [sp, #52]	; 0x34
  4041aa:	4618      	mov	r0, r3
  4041ac:	2800      	cmp	r0, #0
  4041ae:	4623      	mov	r3, r4
  4041b0:	f103 0304 	add.w	r3, r3, #4
  4041b4:	f6ff ae0a 	blt.w	403dcc <_svfprintf_r+0x174>
  4041b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4041ba:	f89a 3000 	ldrb.w	r3, [sl]
  4041be:	e5a3      	b.n	403d08 <_svfprintf_r+0xb0>
  4041c0:	00408f5c 	.word	0x00408f5c
  4041c4:	00408f6c 	.word	0x00408f6c
  4041c8:	00408f3c 	.word	0x00408f3c
  4041cc:	f04b 0b10 	orr.w	fp, fp, #16
  4041d0:	f01b 0f20 	tst.w	fp, #32
  4041d4:	9311      	str	r3, [sp, #68]	; 0x44
  4041d6:	f43f ae23 	beq.w	403e20 <_svfprintf_r+0x1c8>
  4041da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4041dc:	3507      	adds	r5, #7
  4041de:	f025 0307 	bic.w	r3, r5, #7
  4041e2:	f103 0208 	add.w	r2, r3, #8
  4041e6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4041ea:	920f      	str	r2, [sp, #60]	; 0x3c
  4041ec:	2301      	movs	r3, #1
  4041ee:	e626      	b.n	403e3e <_svfprintf_r+0x1e6>
  4041f0:	f89a 3000 	ldrb.w	r3, [sl]
  4041f4:	2b2a      	cmp	r3, #42	; 0x2a
  4041f6:	f10a 0401 	add.w	r4, sl, #1
  4041fa:	f000 8727 	beq.w	40504c <_svfprintf_r+0x13f4>
  4041fe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404202:	2809      	cmp	r0, #9
  404204:	46a2      	mov	sl, r4
  404206:	f200 86ad 	bhi.w	404f64 <_svfprintf_r+0x130c>
  40420a:	2300      	movs	r3, #0
  40420c:	461c      	mov	r4, r3
  40420e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404212:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404216:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40421a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40421e:	2809      	cmp	r0, #9
  404220:	d9f5      	bls.n	40420e <_svfprintf_r+0x5b6>
  404222:	940a      	str	r4, [sp, #40]	; 0x28
  404224:	e572      	b.n	403d0c <_svfprintf_r+0xb4>
  404226:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40422a:	f89a 3000 	ldrb.w	r3, [sl]
  40422e:	e56b      	b.n	403d08 <_svfprintf_r+0xb0>
  404230:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404234:	f89a 3000 	ldrb.w	r3, [sl]
  404238:	e566      	b.n	403d08 <_svfprintf_r+0xb0>
  40423a:	f89a 3000 	ldrb.w	r3, [sl]
  40423e:	2b6c      	cmp	r3, #108	; 0x6c
  404240:	bf03      	ittte	eq
  404242:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404246:	f04b 0b20 	orreq.w	fp, fp, #32
  40424a:	f10a 0a01 	addeq.w	sl, sl, #1
  40424e:	f04b 0b10 	orrne.w	fp, fp, #16
  404252:	e559      	b.n	403d08 <_svfprintf_r+0xb0>
  404254:	2a00      	cmp	r2, #0
  404256:	f040 8711 	bne.w	40507c <_svfprintf_r+0x1424>
  40425a:	f01b 0f20 	tst.w	fp, #32
  40425e:	f040 84f9 	bne.w	404c54 <_svfprintf_r+0xffc>
  404262:	f01b 0f10 	tst.w	fp, #16
  404266:	f040 84ac 	bne.w	404bc2 <_svfprintf_r+0xf6a>
  40426a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40426e:	f000 84a8 	beq.w	404bc2 <_svfprintf_r+0xf6a>
  404272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404274:	6813      	ldr	r3, [r2, #0]
  404276:	3204      	adds	r2, #4
  404278:	920f      	str	r2, [sp, #60]	; 0x3c
  40427a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40427e:	801a      	strh	r2, [r3, #0]
  404280:	e511      	b.n	403ca6 <_svfprintf_r+0x4e>
  404282:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404284:	4bb3      	ldr	r3, [pc, #716]	; (404554 <_svfprintf_r+0x8fc>)
  404286:	680c      	ldr	r4, [r1, #0]
  404288:	9318      	str	r3, [sp, #96]	; 0x60
  40428a:	2230      	movs	r2, #48	; 0x30
  40428c:	2378      	movs	r3, #120	; 0x78
  40428e:	3104      	adds	r1, #4
  404290:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404294:	9311      	str	r3, [sp, #68]	; 0x44
  404296:	f04b 0b02 	orr.w	fp, fp, #2
  40429a:	910f      	str	r1, [sp, #60]	; 0x3c
  40429c:	2500      	movs	r5, #0
  40429e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4042a2:	2302      	movs	r3, #2
  4042a4:	e5cb      	b.n	403e3e <_svfprintf_r+0x1e6>
  4042a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4042a8:	9311      	str	r3, [sp, #68]	; 0x44
  4042aa:	680a      	ldr	r2, [r1, #0]
  4042ac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4042b0:	2300      	movs	r3, #0
  4042b2:	460a      	mov	r2, r1
  4042b4:	461f      	mov	r7, r3
  4042b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4042ba:	3204      	adds	r2, #4
  4042bc:	2301      	movs	r3, #1
  4042be:	9308      	str	r3, [sp, #32]
  4042c0:	f8cd b01c 	str.w	fp, [sp, #28]
  4042c4:	970a      	str	r7, [sp, #40]	; 0x28
  4042c6:	9712      	str	r7, [sp, #72]	; 0x48
  4042c8:	920f      	str	r2, [sp, #60]	; 0x3c
  4042ca:	930e      	str	r3, [sp, #56]	; 0x38
  4042cc:	ae28      	add	r6, sp, #160	; 0xa0
  4042ce:	e5df      	b.n	403e90 <_svfprintf_r+0x238>
  4042d0:	9311      	str	r3, [sp, #68]	; 0x44
  4042d2:	2a00      	cmp	r2, #0
  4042d4:	f040 86ea 	bne.w	4050ac <_svfprintf_r+0x1454>
  4042d8:	f01b 0f20 	tst.w	fp, #32
  4042dc:	d15d      	bne.n	40439a <_svfprintf_r+0x742>
  4042de:	f01b 0f10 	tst.w	fp, #16
  4042e2:	f040 8308 	bne.w	4048f6 <_svfprintf_r+0xc9e>
  4042e6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4042ea:	f000 8304 	beq.w	4048f6 <_svfprintf_r+0xc9e>
  4042ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4042f0:	f9b1 4000 	ldrsh.w	r4, [r1]
  4042f4:	3104      	adds	r1, #4
  4042f6:	17e5      	asrs	r5, r4, #31
  4042f8:	4622      	mov	r2, r4
  4042fa:	462b      	mov	r3, r5
  4042fc:	910f      	str	r1, [sp, #60]	; 0x3c
  4042fe:	2a00      	cmp	r2, #0
  404300:	f173 0300 	sbcs.w	r3, r3, #0
  404304:	db58      	blt.n	4043b8 <_svfprintf_r+0x760>
  404306:	990a      	ldr	r1, [sp, #40]	; 0x28
  404308:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40430c:	1c4a      	adds	r2, r1, #1
  40430e:	f04f 0301 	mov.w	r3, #1
  404312:	f47f ad9b 	bne.w	403e4c <_svfprintf_r+0x1f4>
  404316:	ea54 0205 	orrs.w	r2, r4, r5
  40431a:	f000 81df 	beq.w	4046dc <_svfprintf_r+0xa84>
  40431e:	f8cd b01c 	str.w	fp, [sp, #28]
  404322:	2b01      	cmp	r3, #1
  404324:	f000 827b 	beq.w	40481e <_svfprintf_r+0xbc6>
  404328:	2b02      	cmp	r3, #2
  40432a:	f040 8206 	bne.w	40473a <_svfprintf_r+0xae2>
  40432e:	9818      	ldr	r0, [sp, #96]	; 0x60
  404330:	464e      	mov	r6, r9
  404332:	0923      	lsrs	r3, r4, #4
  404334:	f004 010f 	and.w	r1, r4, #15
  404338:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40433c:	092a      	lsrs	r2, r5, #4
  40433e:	461c      	mov	r4, r3
  404340:	4615      	mov	r5, r2
  404342:	5c43      	ldrb	r3, [r0, r1]
  404344:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404348:	ea54 0305 	orrs.w	r3, r4, r5
  40434c:	d1f1      	bne.n	404332 <_svfprintf_r+0x6da>
  40434e:	eba9 0306 	sub.w	r3, r9, r6
  404352:	930e      	str	r3, [sp, #56]	; 0x38
  404354:	e590      	b.n	403e78 <_svfprintf_r+0x220>
  404356:	9311      	str	r3, [sp, #68]	; 0x44
  404358:	2a00      	cmp	r2, #0
  40435a:	f040 86a3 	bne.w	4050a4 <_svfprintf_r+0x144c>
  40435e:	4b7e      	ldr	r3, [pc, #504]	; (404558 <_svfprintf_r+0x900>)
  404360:	9318      	str	r3, [sp, #96]	; 0x60
  404362:	f01b 0f20 	tst.w	fp, #32
  404366:	f43f aeef 	beq.w	404148 <_svfprintf_r+0x4f0>
  40436a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40436c:	3507      	adds	r5, #7
  40436e:	f025 0307 	bic.w	r3, r5, #7
  404372:	f103 0208 	add.w	r2, r3, #8
  404376:	f01b 0f01 	tst.w	fp, #1
  40437a:	920f      	str	r2, [sp, #60]	; 0x3c
  40437c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404380:	f47f aef4 	bne.w	40416c <_svfprintf_r+0x514>
  404384:	2302      	movs	r3, #2
  404386:	e55a      	b.n	403e3e <_svfprintf_r+0x1e6>
  404388:	9311      	str	r3, [sp, #68]	; 0x44
  40438a:	2a00      	cmp	r2, #0
  40438c:	f040 8686 	bne.w	40509c <_svfprintf_r+0x1444>
  404390:	f04b 0b10 	orr.w	fp, fp, #16
  404394:	f01b 0f20 	tst.w	fp, #32
  404398:	d0a1      	beq.n	4042de <_svfprintf_r+0x686>
  40439a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40439c:	3507      	adds	r5, #7
  40439e:	f025 0507 	bic.w	r5, r5, #7
  4043a2:	e9d5 2300 	ldrd	r2, r3, [r5]
  4043a6:	2a00      	cmp	r2, #0
  4043a8:	f105 0108 	add.w	r1, r5, #8
  4043ac:	461d      	mov	r5, r3
  4043ae:	f173 0300 	sbcs.w	r3, r3, #0
  4043b2:	910f      	str	r1, [sp, #60]	; 0x3c
  4043b4:	4614      	mov	r4, r2
  4043b6:	daa6      	bge.n	404306 <_svfprintf_r+0x6ae>
  4043b8:	272d      	movs	r7, #45	; 0x2d
  4043ba:	4264      	negs	r4, r4
  4043bc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4043c0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4043c4:	2301      	movs	r3, #1
  4043c6:	e53d      	b.n	403e44 <_svfprintf_r+0x1ec>
  4043c8:	9311      	str	r3, [sp, #68]	; 0x44
  4043ca:	2a00      	cmp	r2, #0
  4043cc:	f040 8662 	bne.w	405094 <_svfprintf_r+0x143c>
  4043d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4043d2:	3507      	adds	r5, #7
  4043d4:	f025 0307 	bic.w	r3, r5, #7
  4043d8:	f103 0208 	add.w	r2, r3, #8
  4043dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4043de:	681a      	ldr	r2, [r3, #0]
  4043e0:	9215      	str	r2, [sp, #84]	; 0x54
  4043e2:	685b      	ldr	r3, [r3, #4]
  4043e4:	9314      	str	r3, [sp, #80]	; 0x50
  4043e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4043e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4043ea:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4043ee:	4628      	mov	r0, r5
  4043f0:	4621      	mov	r1, r4
  4043f2:	f04f 32ff 	mov.w	r2, #4294967295
  4043f6:	4b59      	ldr	r3, [pc, #356]	; (40455c <_svfprintf_r+0x904>)
  4043f8:	f003 fef6 	bl	4081e8 <__aeabi_dcmpun>
  4043fc:	2800      	cmp	r0, #0
  4043fe:	f040 834a 	bne.w	404a96 <_svfprintf_r+0xe3e>
  404402:	4628      	mov	r0, r5
  404404:	4621      	mov	r1, r4
  404406:	f04f 32ff 	mov.w	r2, #4294967295
  40440a:	4b54      	ldr	r3, [pc, #336]	; (40455c <_svfprintf_r+0x904>)
  40440c:	f003 fece 	bl	4081ac <__aeabi_dcmple>
  404410:	2800      	cmp	r0, #0
  404412:	f040 8340 	bne.w	404a96 <_svfprintf_r+0xe3e>
  404416:	a815      	add	r0, sp, #84	; 0x54
  404418:	c80d      	ldmia	r0, {r0, r2, r3}
  40441a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40441c:	f003 febc 	bl	408198 <__aeabi_dcmplt>
  404420:	2800      	cmp	r0, #0
  404422:	f040 8530 	bne.w	404e86 <_svfprintf_r+0x122e>
  404426:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40442a:	4e4d      	ldr	r6, [pc, #308]	; (404560 <_svfprintf_r+0x908>)
  40442c:	4b4d      	ldr	r3, [pc, #308]	; (404564 <_svfprintf_r+0x90c>)
  40442e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404432:	9007      	str	r0, [sp, #28]
  404434:	9811      	ldr	r0, [sp, #68]	; 0x44
  404436:	2203      	movs	r2, #3
  404438:	2100      	movs	r1, #0
  40443a:	9208      	str	r2, [sp, #32]
  40443c:	910a      	str	r1, [sp, #40]	; 0x28
  40443e:	2847      	cmp	r0, #71	; 0x47
  404440:	bfd8      	it	le
  404442:	461e      	movle	r6, r3
  404444:	920e      	str	r2, [sp, #56]	; 0x38
  404446:	9112      	str	r1, [sp, #72]	; 0x48
  404448:	e51e      	b.n	403e88 <_svfprintf_r+0x230>
  40444a:	f04b 0b08 	orr.w	fp, fp, #8
  40444e:	f89a 3000 	ldrb.w	r3, [sl]
  404452:	e459      	b.n	403d08 <_svfprintf_r+0xb0>
  404454:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404458:	2300      	movs	r3, #0
  40445a:	461c      	mov	r4, r3
  40445c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404460:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404464:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404468:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40446c:	2809      	cmp	r0, #9
  40446e:	d9f5      	bls.n	40445c <_svfprintf_r+0x804>
  404470:	940d      	str	r4, [sp, #52]	; 0x34
  404472:	e44b      	b.n	403d0c <_svfprintf_r+0xb4>
  404474:	f04b 0b10 	orr.w	fp, fp, #16
  404478:	9311      	str	r3, [sp, #68]	; 0x44
  40447a:	f01b 0320 	ands.w	r3, fp, #32
  40447e:	f43f ae1d 	beq.w	4040bc <_svfprintf_r+0x464>
  404482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404484:	3507      	adds	r5, #7
  404486:	f025 0307 	bic.w	r3, r5, #7
  40448a:	f103 0208 	add.w	r2, r3, #8
  40448e:	e9d3 4500 	ldrd	r4, r5, [r3]
  404492:	920f      	str	r2, [sp, #60]	; 0x3c
  404494:	2300      	movs	r3, #0
  404496:	e4d2      	b.n	403e3e <_svfprintf_r+0x1e6>
  404498:	9311      	str	r3, [sp, #68]	; 0x44
  40449a:	2a00      	cmp	r2, #0
  40449c:	f040 85e7 	bne.w	40506e <_svfprintf_r+0x1416>
  4044a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044a2:	2a00      	cmp	r2, #0
  4044a4:	f43f aca3 	beq.w	403dee <_svfprintf_r+0x196>
  4044a8:	2300      	movs	r3, #0
  4044aa:	2101      	movs	r1, #1
  4044ac:	461f      	mov	r7, r3
  4044ae:	9108      	str	r1, [sp, #32]
  4044b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4044b4:	f8cd b01c 	str.w	fp, [sp, #28]
  4044b8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4044bc:	930a      	str	r3, [sp, #40]	; 0x28
  4044be:	9312      	str	r3, [sp, #72]	; 0x48
  4044c0:	910e      	str	r1, [sp, #56]	; 0x38
  4044c2:	ae28      	add	r6, sp, #160	; 0xa0
  4044c4:	e4e4      	b.n	403e90 <_svfprintf_r+0x238>
  4044c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044c8:	e534      	b.n	403f34 <_svfprintf_r+0x2dc>
  4044ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044cc:	2b65      	cmp	r3, #101	; 0x65
  4044ce:	f340 80a7 	ble.w	404620 <_svfprintf_r+0x9c8>
  4044d2:	a815      	add	r0, sp, #84	; 0x54
  4044d4:	c80d      	ldmia	r0, {r0, r2, r3}
  4044d6:	9914      	ldr	r1, [sp, #80]	; 0x50
  4044d8:	f003 fe54 	bl	408184 <__aeabi_dcmpeq>
  4044dc:	2800      	cmp	r0, #0
  4044de:	f000 8150 	beq.w	404782 <_svfprintf_r+0xb2a>
  4044e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044e4:	4a20      	ldr	r2, [pc, #128]	; (404568 <_svfprintf_r+0x910>)
  4044e6:	f8c8 2000 	str.w	r2, [r8]
  4044ea:	3301      	adds	r3, #1
  4044ec:	3401      	adds	r4, #1
  4044ee:	2201      	movs	r2, #1
  4044f0:	2b07      	cmp	r3, #7
  4044f2:	9427      	str	r4, [sp, #156]	; 0x9c
  4044f4:	9326      	str	r3, [sp, #152]	; 0x98
  4044f6:	f8c8 2004 	str.w	r2, [r8, #4]
  4044fa:	f300 836a 	bgt.w	404bd2 <_svfprintf_r+0xf7a>
  4044fe:	f108 0808 	add.w	r8, r8, #8
  404502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404504:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404506:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404508:	4293      	cmp	r3, r2
  40450a:	db03      	blt.n	404514 <_svfprintf_r+0x8bc>
  40450c:	9b07      	ldr	r3, [sp, #28]
  40450e:	07dd      	lsls	r5, r3, #31
  404510:	f57f ad82 	bpl.w	404018 <_svfprintf_r+0x3c0>
  404514:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404516:	9919      	ldr	r1, [sp, #100]	; 0x64
  404518:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40451a:	f8c8 2000 	str.w	r2, [r8]
  40451e:	3301      	adds	r3, #1
  404520:	440c      	add	r4, r1
  404522:	2b07      	cmp	r3, #7
  404524:	f8c8 1004 	str.w	r1, [r8, #4]
  404528:	9427      	str	r4, [sp, #156]	; 0x9c
  40452a:	9326      	str	r3, [sp, #152]	; 0x98
  40452c:	f300 839e 	bgt.w	404c6c <_svfprintf_r+0x1014>
  404530:	f108 0808 	add.w	r8, r8, #8
  404534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404536:	1e5e      	subs	r6, r3, #1
  404538:	2e00      	cmp	r6, #0
  40453a:	f77f ad6d 	ble.w	404018 <_svfprintf_r+0x3c0>
  40453e:	2e10      	cmp	r6, #16
  404540:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404542:	4d0a      	ldr	r5, [pc, #40]	; (40456c <_svfprintf_r+0x914>)
  404544:	f340 81f5 	ble.w	404932 <_svfprintf_r+0xcda>
  404548:	4622      	mov	r2, r4
  40454a:	2710      	movs	r7, #16
  40454c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404550:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404552:	e013      	b.n	40457c <_svfprintf_r+0x924>
  404554:	00408f3c 	.word	0x00408f3c
  404558:	00408f28 	.word	0x00408f28
  40455c:	7fefffff 	.word	0x7fefffff
  404560:	00408f1c 	.word	0x00408f1c
  404564:	00408f18 	.word	0x00408f18
  404568:	00408f58 	.word	0x00408f58
  40456c:	00408f6c 	.word	0x00408f6c
  404570:	f108 0808 	add.w	r8, r8, #8
  404574:	3e10      	subs	r6, #16
  404576:	2e10      	cmp	r6, #16
  404578:	f340 81da 	ble.w	404930 <_svfprintf_r+0xcd8>
  40457c:	3301      	adds	r3, #1
  40457e:	3210      	adds	r2, #16
  404580:	2b07      	cmp	r3, #7
  404582:	9227      	str	r2, [sp, #156]	; 0x9c
  404584:	9326      	str	r3, [sp, #152]	; 0x98
  404586:	e888 00a0 	stmia.w	r8, {r5, r7}
  40458a:	ddf1      	ble.n	404570 <_svfprintf_r+0x918>
  40458c:	aa25      	add	r2, sp, #148	; 0x94
  40458e:	4621      	mov	r1, r4
  404590:	4658      	mov	r0, fp
  404592:	f002 fd63 	bl	40705c <__ssprint_r>
  404596:	2800      	cmp	r0, #0
  404598:	f47f ac30 	bne.w	403dfc <_svfprintf_r+0x1a4>
  40459c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40459e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045a0:	46c8      	mov	r8, r9
  4045a2:	e7e7      	b.n	404574 <_svfprintf_r+0x91c>
  4045a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4045a6:	9a08      	ldr	r2, [sp, #32]
  4045a8:	1a9f      	subs	r7, r3, r2
  4045aa:	2f00      	cmp	r7, #0
  4045ac:	f77f ace5 	ble.w	403f7a <_svfprintf_r+0x322>
  4045b0:	2f10      	cmp	r7, #16
  4045b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045b4:	4db6      	ldr	r5, [pc, #728]	; (404890 <_svfprintf_r+0xc38>)
  4045b6:	dd27      	ble.n	404608 <_svfprintf_r+0x9b0>
  4045b8:	4642      	mov	r2, r8
  4045ba:	4621      	mov	r1, r4
  4045bc:	46b0      	mov	r8, r6
  4045be:	f04f 0b10 	mov.w	fp, #16
  4045c2:	462e      	mov	r6, r5
  4045c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4045c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4045c8:	e004      	b.n	4045d4 <_svfprintf_r+0x97c>
  4045ca:	3f10      	subs	r7, #16
  4045cc:	2f10      	cmp	r7, #16
  4045ce:	f102 0208 	add.w	r2, r2, #8
  4045d2:	dd15      	ble.n	404600 <_svfprintf_r+0x9a8>
  4045d4:	3301      	adds	r3, #1
  4045d6:	3110      	adds	r1, #16
  4045d8:	2b07      	cmp	r3, #7
  4045da:	9127      	str	r1, [sp, #156]	; 0x9c
  4045dc:	9326      	str	r3, [sp, #152]	; 0x98
  4045de:	e882 0840 	stmia.w	r2, {r6, fp}
  4045e2:	ddf2      	ble.n	4045ca <_svfprintf_r+0x972>
  4045e4:	aa25      	add	r2, sp, #148	; 0x94
  4045e6:	4629      	mov	r1, r5
  4045e8:	4620      	mov	r0, r4
  4045ea:	f002 fd37 	bl	40705c <__ssprint_r>
  4045ee:	2800      	cmp	r0, #0
  4045f0:	f47f ac04 	bne.w	403dfc <_svfprintf_r+0x1a4>
  4045f4:	3f10      	subs	r7, #16
  4045f6:	2f10      	cmp	r7, #16
  4045f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4045fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045fc:	464a      	mov	r2, r9
  4045fe:	dce9      	bgt.n	4045d4 <_svfprintf_r+0x97c>
  404600:	4635      	mov	r5, r6
  404602:	460c      	mov	r4, r1
  404604:	4646      	mov	r6, r8
  404606:	4690      	mov	r8, r2
  404608:	3301      	adds	r3, #1
  40460a:	443c      	add	r4, r7
  40460c:	2b07      	cmp	r3, #7
  40460e:	9427      	str	r4, [sp, #156]	; 0x9c
  404610:	9326      	str	r3, [sp, #152]	; 0x98
  404612:	e888 00a0 	stmia.w	r8, {r5, r7}
  404616:	f300 8232 	bgt.w	404a7e <_svfprintf_r+0xe26>
  40461a:	f108 0808 	add.w	r8, r8, #8
  40461e:	e4ac      	b.n	403f7a <_svfprintf_r+0x322>
  404620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404622:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404624:	2b01      	cmp	r3, #1
  404626:	f340 81fe 	ble.w	404a26 <_svfprintf_r+0xdce>
  40462a:	3701      	adds	r7, #1
  40462c:	3401      	adds	r4, #1
  40462e:	2301      	movs	r3, #1
  404630:	2f07      	cmp	r7, #7
  404632:	9427      	str	r4, [sp, #156]	; 0x9c
  404634:	9726      	str	r7, [sp, #152]	; 0x98
  404636:	f8c8 6000 	str.w	r6, [r8]
  40463a:	f8c8 3004 	str.w	r3, [r8, #4]
  40463e:	f300 8203 	bgt.w	404a48 <_svfprintf_r+0xdf0>
  404642:	f108 0808 	add.w	r8, r8, #8
  404646:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404648:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40464a:	f8c8 3000 	str.w	r3, [r8]
  40464e:	3701      	adds	r7, #1
  404650:	4414      	add	r4, r2
  404652:	2f07      	cmp	r7, #7
  404654:	9427      	str	r4, [sp, #156]	; 0x9c
  404656:	9726      	str	r7, [sp, #152]	; 0x98
  404658:	f8c8 2004 	str.w	r2, [r8, #4]
  40465c:	f300 8200 	bgt.w	404a60 <_svfprintf_r+0xe08>
  404660:	f108 0808 	add.w	r8, r8, #8
  404664:	a815      	add	r0, sp, #84	; 0x54
  404666:	c80d      	ldmia	r0, {r0, r2, r3}
  404668:	9914      	ldr	r1, [sp, #80]	; 0x50
  40466a:	f003 fd8b 	bl	408184 <__aeabi_dcmpeq>
  40466e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404670:	2800      	cmp	r0, #0
  404672:	f040 8101 	bne.w	404878 <_svfprintf_r+0xc20>
  404676:	3b01      	subs	r3, #1
  404678:	3701      	adds	r7, #1
  40467a:	3601      	adds	r6, #1
  40467c:	441c      	add	r4, r3
  40467e:	2f07      	cmp	r7, #7
  404680:	9726      	str	r7, [sp, #152]	; 0x98
  404682:	9427      	str	r4, [sp, #156]	; 0x9c
  404684:	f8c8 6000 	str.w	r6, [r8]
  404688:	f8c8 3004 	str.w	r3, [r8, #4]
  40468c:	f300 8127 	bgt.w	4048de <_svfprintf_r+0xc86>
  404690:	f108 0808 	add.w	r8, r8, #8
  404694:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404696:	f8c8 2004 	str.w	r2, [r8, #4]
  40469a:	3701      	adds	r7, #1
  40469c:	4414      	add	r4, r2
  40469e:	ab21      	add	r3, sp, #132	; 0x84
  4046a0:	2f07      	cmp	r7, #7
  4046a2:	9427      	str	r4, [sp, #156]	; 0x9c
  4046a4:	9726      	str	r7, [sp, #152]	; 0x98
  4046a6:	f8c8 3000 	str.w	r3, [r8]
  4046aa:	f77f acb3 	ble.w	404014 <_svfprintf_r+0x3bc>
  4046ae:	aa25      	add	r2, sp, #148	; 0x94
  4046b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046b4:	f002 fcd2 	bl	40705c <__ssprint_r>
  4046b8:	2800      	cmp	r0, #0
  4046ba:	f47f ab9f 	bne.w	403dfc <_svfprintf_r+0x1a4>
  4046be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046c0:	46c8      	mov	r8, r9
  4046c2:	e4a9      	b.n	404018 <_svfprintf_r+0x3c0>
  4046c4:	aa25      	add	r2, sp, #148	; 0x94
  4046c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046c8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046ca:	f002 fcc7 	bl	40705c <__ssprint_r>
  4046ce:	2800      	cmp	r0, #0
  4046d0:	f43f aceb 	beq.w	4040aa <_svfprintf_r+0x452>
  4046d4:	f7ff bb92 	b.w	403dfc <_svfprintf_r+0x1a4>
  4046d8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4046dc:	2b01      	cmp	r3, #1
  4046de:	f000 8134 	beq.w	40494a <_svfprintf_r+0xcf2>
  4046e2:	2b02      	cmp	r3, #2
  4046e4:	d125      	bne.n	404732 <_svfprintf_r+0xada>
  4046e6:	f8cd b01c 	str.w	fp, [sp, #28]
  4046ea:	2400      	movs	r4, #0
  4046ec:	2500      	movs	r5, #0
  4046ee:	e61e      	b.n	40432e <_svfprintf_r+0x6d6>
  4046f0:	aa25      	add	r2, sp, #148	; 0x94
  4046f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046f6:	f002 fcb1 	bl	40705c <__ssprint_r>
  4046fa:	2800      	cmp	r0, #0
  4046fc:	f47f ab7e 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404700:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404702:	46c8      	mov	r8, r9
  404704:	e475      	b.n	403ff2 <_svfprintf_r+0x39a>
  404706:	aa25      	add	r2, sp, #148	; 0x94
  404708:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40470a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40470c:	f002 fca6 	bl	40705c <__ssprint_r>
  404710:	2800      	cmp	r0, #0
  404712:	f47f ab73 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404716:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404718:	46c8      	mov	r8, r9
  40471a:	e41b      	b.n	403f54 <_svfprintf_r+0x2fc>
  40471c:	aa25      	add	r2, sp, #148	; 0x94
  40471e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404720:	980c      	ldr	r0, [sp, #48]	; 0x30
  404722:	f002 fc9b 	bl	40705c <__ssprint_r>
  404726:	2800      	cmp	r0, #0
  404728:	f47f ab68 	bne.w	403dfc <_svfprintf_r+0x1a4>
  40472c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40472e:	46c8      	mov	r8, r9
  404730:	e420      	b.n	403f74 <_svfprintf_r+0x31c>
  404732:	f8cd b01c 	str.w	fp, [sp, #28]
  404736:	2400      	movs	r4, #0
  404738:	2500      	movs	r5, #0
  40473a:	4649      	mov	r1, r9
  40473c:	e000      	b.n	404740 <_svfprintf_r+0xae8>
  40473e:	4631      	mov	r1, r6
  404740:	08e2      	lsrs	r2, r4, #3
  404742:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404746:	08e8      	lsrs	r0, r5, #3
  404748:	f004 0307 	and.w	r3, r4, #7
  40474c:	4605      	mov	r5, r0
  40474e:	4614      	mov	r4, r2
  404750:	3330      	adds	r3, #48	; 0x30
  404752:	ea54 0205 	orrs.w	r2, r4, r5
  404756:	f801 3c01 	strb.w	r3, [r1, #-1]
  40475a:	f101 36ff 	add.w	r6, r1, #4294967295
  40475e:	d1ee      	bne.n	40473e <_svfprintf_r+0xae6>
  404760:	9a07      	ldr	r2, [sp, #28]
  404762:	07d2      	lsls	r2, r2, #31
  404764:	f57f adf3 	bpl.w	40434e <_svfprintf_r+0x6f6>
  404768:	2b30      	cmp	r3, #48	; 0x30
  40476a:	f43f adf0 	beq.w	40434e <_svfprintf_r+0x6f6>
  40476e:	3902      	subs	r1, #2
  404770:	2330      	movs	r3, #48	; 0x30
  404772:	f806 3c01 	strb.w	r3, [r6, #-1]
  404776:	eba9 0301 	sub.w	r3, r9, r1
  40477a:	930e      	str	r3, [sp, #56]	; 0x38
  40477c:	460e      	mov	r6, r1
  40477e:	f7ff bb7b 	b.w	403e78 <_svfprintf_r+0x220>
  404782:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404784:	2900      	cmp	r1, #0
  404786:	f340 822e 	ble.w	404be6 <_svfprintf_r+0xf8e>
  40478a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40478c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40478e:	4293      	cmp	r3, r2
  404790:	bfa8      	it	ge
  404792:	4613      	movge	r3, r2
  404794:	2b00      	cmp	r3, #0
  404796:	461f      	mov	r7, r3
  404798:	dd0d      	ble.n	4047b6 <_svfprintf_r+0xb5e>
  40479a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40479c:	f8c8 6000 	str.w	r6, [r8]
  4047a0:	3301      	adds	r3, #1
  4047a2:	443c      	add	r4, r7
  4047a4:	2b07      	cmp	r3, #7
  4047a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4047a8:	f8c8 7004 	str.w	r7, [r8, #4]
  4047ac:	9326      	str	r3, [sp, #152]	; 0x98
  4047ae:	f300 831f 	bgt.w	404df0 <_svfprintf_r+0x1198>
  4047b2:	f108 0808 	add.w	r8, r8, #8
  4047b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047b8:	2f00      	cmp	r7, #0
  4047ba:	bfa8      	it	ge
  4047bc:	1bdb      	subge	r3, r3, r7
  4047be:	2b00      	cmp	r3, #0
  4047c0:	461f      	mov	r7, r3
  4047c2:	f340 80d6 	ble.w	404972 <_svfprintf_r+0xd1a>
  4047c6:	2f10      	cmp	r7, #16
  4047c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047ca:	4d31      	ldr	r5, [pc, #196]	; (404890 <_svfprintf_r+0xc38>)
  4047cc:	f340 81ed 	ble.w	404baa <_svfprintf_r+0xf52>
  4047d0:	4642      	mov	r2, r8
  4047d2:	4621      	mov	r1, r4
  4047d4:	46b0      	mov	r8, r6
  4047d6:	f04f 0b10 	mov.w	fp, #16
  4047da:	462e      	mov	r6, r5
  4047dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4047de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4047e0:	e004      	b.n	4047ec <_svfprintf_r+0xb94>
  4047e2:	3208      	adds	r2, #8
  4047e4:	3f10      	subs	r7, #16
  4047e6:	2f10      	cmp	r7, #16
  4047e8:	f340 81db 	ble.w	404ba2 <_svfprintf_r+0xf4a>
  4047ec:	3301      	adds	r3, #1
  4047ee:	3110      	adds	r1, #16
  4047f0:	2b07      	cmp	r3, #7
  4047f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4047f4:	9326      	str	r3, [sp, #152]	; 0x98
  4047f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4047fa:	ddf2      	ble.n	4047e2 <_svfprintf_r+0xb8a>
  4047fc:	aa25      	add	r2, sp, #148	; 0x94
  4047fe:	4629      	mov	r1, r5
  404800:	4620      	mov	r0, r4
  404802:	f002 fc2b 	bl	40705c <__ssprint_r>
  404806:	2800      	cmp	r0, #0
  404808:	f47f aaf8 	bne.w	403dfc <_svfprintf_r+0x1a4>
  40480c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40480e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404810:	464a      	mov	r2, r9
  404812:	e7e7      	b.n	4047e4 <_svfprintf_r+0xb8c>
  404814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404816:	930e      	str	r3, [sp, #56]	; 0x38
  404818:	464e      	mov	r6, r9
  40481a:	f7ff bb2d 	b.w	403e78 <_svfprintf_r+0x220>
  40481e:	2d00      	cmp	r5, #0
  404820:	bf08      	it	eq
  404822:	2c0a      	cmpeq	r4, #10
  404824:	f0c0 808f 	bcc.w	404946 <_svfprintf_r+0xcee>
  404828:	464e      	mov	r6, r9
  40482a:	4620      	mov	r0, r4
  40482c:	4629      	mov	r1, r5
  40482e:	220a      	movs	r2, #10
  404830:	2300      	movs	r3, #0
  404832:	f7fe fd89 	bl	403348 <__aeabi_uldivmod>
  404836:	3230      	adds	r2, #48	; 0x30
  404838:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40483c:	4620      	mov	r0, r4
  40483e:	4629      	mov	r1, r5
  404840:	2300      	movs	r3, #0
  404842:	220a      	movs	r2, #10
  404844:	f7fe fd80 	bl	403348 <__aeabi_uldivmod>
  404848:	4604      	mov	r4, r0
  40484a:	460d      	mov	r5, r1
  40484c:	ea54 0305 	orrs.w	r3, r4, r5
  404850:	d1eb      	bne.n	40482a <_svfprintf_r+0xbd2>
  404852:	eba9 0306 	sub.w	r3, r9, r6
  404856:	930e      	str	r3, [sp, #56]	; 0x38
  404858:	f7ff bb0e 	b.w	403e78 <_svfprintf_r+0x220>
  40485c:	aa25      	add	r2, sp, #148	; 0x94
  40485e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404860:	980c      	ldr	r0, [sp, #48]	; 0x30
  404862:	f002 fbfb 	bl	40705c <__ssprint_r>
  404866:	2800      	cmp	r0, #0
  404868:	f47f aac8 	bne.w	403dfc <_svfprintf_r+0x1a4>
  40486c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404870:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404872:	46c8      	mov	r8, r9
  404874:	f7ff bb5e 	b.w	403f34 <_svfprintf_r+0x2dc>
  404878:	1e5e      	subs	r6, r3, #1
  40487a:	2e00      	cmp	r6, #0
  40487c:	f77f af0a 	ble.w	404694 <_svfprintf_r+0xa3c>
  404880:	2e10      	cmp	r6, #16
  404882:	4d03      	ldr	r5, [pc, #12]	; (404890 <_svfprintf_r+0xc38>)
  404884:	dd22      	ble.n	4048cc <_svfprintf_r+0xc74>
  404886:	4622      	mov	r2, r4
  404888:	f04f 0b10 	mov.w	fp, #16
  40488c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40488e:	e006      	b.n	40489e <_svfprintf_r+0xc46>
  404890:	00408f6c 	.word	0x00408f6c
  404894:	3e10      	subs	r6, #16
  404896:	2e10      	cmp	r6, #16
  404898:	f108 0808 	add.w	r8, r8, #8
  40489c:	dd15      	ble.n	4048ca <_svfprintf_r+0xc72>
  40489e:	3701      	adds	r7, #1
  4048a0:	3210      	adds	r2, #16
  4048a2:	2f07      	cmp	r7, #7
  4048a4:	9227      	str	r2, [sp, #156]	; 0x9c
  4048a6:	9726      	str	r7, [sp, #152]	; 0x98
  4048a8:	e888 0820 	stmia.w	r8, {r5, fp}
  4048ac:	ddf2      	ble.n	404894 <_svfprintf_r+0xc3c>
  4048ae:	aa25      	add	r2, sp, #148	; 0x94
  4048b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048b2:	4620      	mov	r0, r4
  4048b4:	f002 fbd2 	bl	40705c <__ssprint_r>
  4048b8:	2800      	cmp	r0, #0
  4048ba:	f47f aa9f 	bne.w	403dfc <_svfprintf_r+0x1a4>
  4048be:	3e10      	subs	r6, #16
  4048c0:	2e10      	cmp	r6, #16
  4048c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048c4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4048c6:	46c8      	mov	r8, r9
  4048c8:	dce9      	bgt.n	40489e <_svfprintf_r+0xc46>
  4048ca:	4614      	mov	r4, r2
  4048cc:	3701      	adds	r7, #1
  4048ce:	4434      	add	r4, r6
  4048d0:	2f07      	cmp	r7, #7
  4048d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4048d4:	9726      	str	r7, [sp, #152]	; 0x98
  4048d6:	e888 0060 	stmia.w	r8, {r5, r6}
  4048da:	f77f aed9 	ble.w	404690 <_svfprintf_r+0xa38>
  4048de:	aa25      	add	r2, sp, #148	; 0x94
  4048e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048e4:	f002 fbba 	bl	40705c <__ssprint_r>
  4048e8:	2800      	cmp	r0, #0
  4048ea:	f47f aa87 	bne.w	403dfc <_svfprintf_r+0x1a4>
  4048ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048f0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4048f2:	46c8      	mov	r8, r9
  4048f4:	e6ce      	b.n	404694 <_svfprintf_r+0xa3c>
  4048f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4048f8:	6814      	ldr	r4, [r2, #0]
  4048fa:	4613      	mov	r3, r2
  4048fc:	3304      	adds	r3, #4
  4048fe:	17e5      	asrs	r5, r4, #31
  404900:	930f      	str	r3, [sp, #60]	; 0x3c
  404902:	4622      	mov	r2, r4
  404904:	462b      	mov	r3, r5
  404906:	e4fa      	b.n	4042fe <_svfprintf_r+0x6a6>
  404908:	3204      	adds	r2, #4
  40490a:	681c      	ldr	r4, [r3, #0]
  40490c:	920f      	str	r2, [sp, #60]	; 0x3c
  40490e:	2301      	movs	r3, #1
  404910:	2500      	movs	r5, #0
  404912:	f7ff ba94 	b.w	403e3e <_svfprintf_r+0x1e6>
  404916:	681c      	ldr	r4, [r3, #0]
  404918:	3304      	adds	r3, #4
  40491a:	930f      	str	r3, [sp, #60]	; 0x3c
  40491c:	2500      	movs	r5, #0
  40491e:	e421      	b.n	404164 <_svfprintf_r+0x50c>
  404920:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404922:	460a      	mov	r2, r1
  404924:	3204      	adds	r2, #4
  404926:	680c      	ldr	r4, [r1, #0]
  404928:	920f      	str	r2, [sp, #60]	; 0x3c
  40492a:	2500      	movs	r5, #0
  40492c:	f7ff ba87 	b.w	403e3e <_svfprintf_r+0x1e6>
  404930:	4614      	mov	r4, r2
  404932:	3301      	adds	r3, #1
  404934:	4434      	add	r4, r6
  404936:	2b07      	cmp	r3, #7
  404938:	9427      	str	r4, [sp, #156]	; 0x9c
  40493a:	9326      	str	r3, [sp, #152]	; 0x98
  40493c:	e888 0060 	stmia.w	r8, {r5, r6}
  404940:	f77f ab68 	ble.w	404014 <_svfprintf_r+0x3bc>
  404944:	e6b3      	b.n	4046ae <_svfprintf_r+0xa56>
  404946:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40494a:	f8cd b01c 	str.w	fp, [sp, #28]
  40494e:	ae42      	add	r6, sp, #264	; 0x108
  404950:	3430      	adds	r4, #48	; 0x30
  404952:	2301      	movs	r3, #1
  404954:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404958:	930e      	str	r3, [sp, #56]	; 0x38
  40495a:	f7ff ba8d 	b.w	403e78 <_svfprintf_r+0x220>
  40495e:	aa25      	add	r2, sp, #148	; 0x94
  404960:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404962:	980c      	ldr	r0, [sp, #48]	; 0x30
  404964:	f002 fb7a 	bl	40705c <__ssprint_r>
  404968:	2800      	cmp	r0, #0
  40496a:	f47f aa47 	bne.w	403dfc <_svfprintf_r+0x1a4>
  40496e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404970:	46c8      	mov	r8, r9
  404972:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404976:	429a      	cmp	r2, r3
  404978:	db44      	blt.n	404a04 <_svfprintf_r+0xdac>
  40497a:	9b07      	ldr	r3, [sp, #28]
  40497c:	07d9      	lsls	r1, r3, #31
  40497e:	d441      	bmi.n	404a04 <_svfprintf_r+0xdac>
  404980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404982:	9812      	ldr	r0, [sp, #72]	; 0x48
  404984:	1a9a      	subs	r2, r3, r2
  404986:	1a1d      	subs	r5, r3, r0
  404988:	4295      	cmp	r5, r2
  40498a:	bfa8      	it	ge
  40498c:	4615      	movge	r5, r2
  40498e:	2d00      	cmp	r5, #0
  404990:	dd0e      	ble.n	4049b0 <_svfprintf_r+0xd58>
  404992:	9926      	ldr	r1, [sp, #152]	; 0x98
  404994:	f8c8 5004 	str.w	r5, [r8, #4]
  404998:	3101      	adds	r1, #1
  40499a:	4406      	add	r6, r0
  40499c:	442c      	add	r4, r5
  40499e:	2907      	cmp	r1, #7
  4049a0:	f8c8 6000 	str.w	r6, [r8]
  4049a4:	9427      	str	r4, [sp, #156]	; 0x9c
  4049a6:	9126      	str	r1, [sp, #152]	; 0x98
  4049a8:	f300 823b 	bgt.w	404e22 <_svfprintf_r+0x11ca>
  4049ac:	f108 0808 	add.w	r8, r8, #8
  4049b0:	2d00      	cmp	r5, #0
  4049b2:	bfac      	ite	ge
  4049b4:	1b56      	subge	r6, r2, r5
  4049b6:	4616      	movlt	r6, r2
  4049b8:	2e00      	cmp	r6, #0
  4049ba:	f77f ab2d 	ble.w	404018 <_svfprintf_r+0x3c0>
  4049be:	2e10      	cmp	r6, #16
  4049c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049c2:	4db0      	ldr	r5, [pc, #704]	; (404c84 <_svfprintf_r+0x102c>)
  4049c4:	ddb5      	ble.n	404932 <_svfprintf_r+0xcda>
  4049c6:	4622      	mov	r2, r4
  4049c8:	2710      	movs	r7, #16
  4049ca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4049ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4049d0:	e004      	b.n	4049dc <_svfprintf_r+0xd84>
  4049d2:	f108 0808 	add.w	r8, r8, #8
  4049d6:	3e10      	subs	r6, #16
  4049d8:	2e10      	cmp	r6, #16
  4049da:	dda9      	ble.n	404930 <_svfprintf_r+0xcd8>
  4049dc:	3301      	adds	r3, #1
  4049de:	3210      	adds	r2, #16
  4049e0:	2b07      	cmp	r3, #7
  4049e2:	9227      	str	r2, [sp, #156]	; 0x9c
  4049e4:	9326      	str	r3, [sp, #152]	; 0x98
  4049e6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4049ea:	ddf2      	ble.n	4049d2 <_svfprintf_r+0xd7a>
  4049ec:	aa25      	add	r2, sp, #148	; 0x94
  4049ee:	4621      	mov	r1, r4
  4049f0:	4658      	mov	r0, fp
  4049f2:	f002 fb33 	bl	40705c <__ssprint_r>
  4049f6:	2800      	cmp	r0, #0
  4049f8:	f47f aa00 	bne.w	403dfc <_svfprintf_r+0x1a4>
  4049fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4049fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a00:	46c8      	mov	r8, r9
  404a02:	e7e8      	b.n	4049d6 <_svfprintf_r+0xd7e>
  404a04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a06:	9819      	ldr	r0, [sp, #100]	; 0x64
  404a08:	991a      	ldr	r1, [sp, #104]	; 0x68
  404a0a:	f8c8 1000 	str.w	r1, [r8]
  404a0e:	3301      	adds	r3, #1
  404a10:	4404      	add	r4, r0
  404a12:	2b07      	cmp	r3, #7
  404a14:	9427      	str	r4, [sp, #156]	; 0x9c
  404a16:	f8c8 0004 	str.w	r0, [r8, #4]
  404a1a:	9326      	str	r3, [sp, #152]	; 0x98
  404a1c:	f300 81f5 	bgt.w	404e0a <_svfprintf_r+0x11b2>
  404a20:	f108 0808 	add.w	r8, r8, #8
  404a24:	e7ac      	b.n	404980 <_svfprintf_r+0xd28>
  404a26:	9b07      	ldr	r3, [sp, #28]
  404a28:	07da      	lsls	r2, r3, #31
  404a2a:	f53f adfe 	bmi.w	40462a <_svfprintf_r+0x9d2>
  404a2e:	3701      	adds	r7, #1
  404a30:	3401      	adds	r4, #1
  404a32:	2301      	movs	r3, #1
  404a34:	2f07      	cmp	r7, #7
  404a36:	9427      	str	r4, [sp, #156]	; 0x9c
  404a38:	9726      	str	r7, [sp, #152]	; 0x98
  404a3a:	f8c8 6000 	str.w	r6, [r8]
  404a3e:	f8c8 3004 	str.w	r3, [r8, #4]
  404a42:	f77f ae25 	ble.w	404690 <_svfprintf_r+0xa38>
  404a46:	e74a      	b.n	4048de <_svfprintf_r+0xc86>
  404a48:	aa25      	add	r2, sp, #148	; 0x94
  404a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a4e:	f002 fb05 	bl	40705c <__ssprint_r>
  404a52:	2800      	cmp	r0, #0
  404a54:	f47f a9d2 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404a58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a5a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404a5c:	46c8      	mov	r8, r9
  404a5e:	e5f2      	b.n	404646 <_svfprintf_r+0x9ee>
  404a60:	aa25      	add	r2, sp, #148	; 0x94
  404a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a64:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a66:	f002 faf9 	bl	40705c <__ssprint_r>
  404a6a:	2800      	cmp	r0, #0
  404a6c:	f47f a9c6 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404a70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a72:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404a74:	46c8      	mov	r8, r9
  404a76:	e5f5      	b.n	404664 <_svfprintf_r+0xa0c>
  404a78:	464e      	mov	r6, r9
  404a7a:	f7ff b9fd 	b.w	403e78 <_svfprintf_r+0x220>
  404a7e:	aa25      	add	r2, sp, #148	; 0x94
  404a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a82:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a84:	f002 faea 	bl	40705c <__ssprint_r>
  404a88:	2800      	cmp	r0, #0
  404a8a:	f47f a9b7 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404a8e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a90:	46c8      	mov	r8, r9
  404a92:	f7ff ba72 	b.w	403f7a <_svfprintf_r+0x322>
  404a96:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404a98:	4622      	mov	r2, r4
  404a9a:	4620      	mov	r0, r4
  404a9c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404a9e:	4623      	mov	r3, r4
  404aa0:	4621      	mov	r1, r4
  404aa2:	f003 fba1 	bl	4081e8 <__aeabi_dcmpun>
  404aa6:	2800      	cmp	r0, #0
  404aa8:	f040 8286 	bne.w	404fb8 <_svfprintf_r+0x1360>
  404aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404aae:	3301      	adds	r3, #1
  404ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ab2:	f023 0320 	bic.w	r3, r3, #32
  404ab6:	930e      	str	r3, [sp, #56]	; 0x38
  404ab8:	f000 81e2 	beq.w	404e80 <_svfprintf_r+0x1228>
  404abc:	2b47      	cmp	r3, #71	; 0x47
  404abe:	f000 811e 	beq.w	404cfe <_svfprintf_r+0x10a6>
  404ac2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404ac6:	9307      	str	r3, [sp, #28]
  404ac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404aca:	1e1f      	subs	r7, r3, #0
  404acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404ace:	9308      	str	r3, [sp, #32]
  404ad0:	bfbb      	ittet	lt
  404ad2:	463b      	movlt	r3, r7
  404ad4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404ad8:	2300      	movge	r3, #0
  404ada:	232d      	movlt	r3, #45	; 0x2d
  404adc:	9310      	str	r3, [sp, #64]	; 0x40
  404ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ae0:	2b66      	cmp	r3, #102	; 0x66
  404ae2:	f000 81bb 	beq.w	404e5c <_svfprintf_r+0x1204>
  404ae6:	2b46      	cmp	r3, #70	; 0x46
  404ae8:	f000 80df 	beq.w	404caa <_svfprintf_r+0x1052>
  404aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404aee:	9a08      	ldr	r2, [sp, #32]
  404af0:	2b45      	cmp	r3, #69	; 0x45
  404af2:	bf0c      	ite	eq
  404af4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404af6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404af8:	a823      	add	r0, sp, #140	; 0x8c
  404afa:	a920      	add	r1, sp, #128	; 0x80
  404afc:	bf08      	it	eq
  404afe:	1c5d      	addeq	r5, r3, #1
  404b00:	9004      	str	r0, [sp, #16]
  404b02:	9103      	str	r1, [sp, #12]
  404b04:	a81f      	add	r0, sp, #124	; 0x7c
  404b06:	2102      	movs	r1, #2
  404b08:	463b      	mov	r3, r7
  404b0a:	9002      	str	r0, [sp, #8]
  404b0c:	9501      	str	r5, [sp, #4]
  404b0e:	9100      	str	r1, [sp, #0]
  404b10:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b12:	f000 fb75 	bl	405200 <_dtoa_r>
  404b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b18:	2b67      	cmp	r3, #103	; 0x67
  404b1a:	4606      	mov	r6, r0
  404b1c:	f040 81e0 	bne.w	404ee0 <_svfprintf_r+0x1288>
  404b20:	f01b 0f01 	tst.w	fp, #1
  404b24:	f000 8246 	beq.w	404fb4 <_svfprintf_r+0x135c>
  404b28:	1974      	adds	r4, r6, r5
  404b2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404b2c:	9808      	ldr	r0, [sp, #32]
  404b2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404b30:	4639      	mov	r1, r7
  404b32:	f003 fb27 	bl	408184 <__aeabi_dcmpeq>
  404b36:	2800      	cmp	r0, #0
  404b38:	f040 8165 	bne.w	404e06 <_svfprintf_r+0x11ae>
  404b3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404b3e:	42a3      	cmp	r3, r4
  404b40:	d206      	bcs.n	404b50 <_svfprintf_r+0xef8>
  404b42:	2130      	movs	r1, #48	; 0x30
  404b44:	1c5a      	adds	r2, r3, #1
  404b46:	9223      	str	r2, [sp, #140]	; 0x8c
  404b48:	7019      	strb	r1, [r3, #0]
  404b4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404b4c:	429c      	cmp	r4, r3
  404b4e:	d8f9      	bhi.n	404b44 <_svfprintf_r+0xeec>
  404b50:	1b9b      	subs	r3, r3, r6
  404b52:	9313      	str	r3, [sp, #76]	; 0x4c
  404b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404b56:	2b47      	cmp	r3, #71	; 0x47
  404b58:	f000 80e9 	beq.w	404d2e <_svfprintf_r+0x10d6>
  404b5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b5e:	2b65      	cmp	r3, #101	; 0x65
  404b60:	f340 81cd 	ble.w	404efe <_svfprintf_r+0x12a6>
  404b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b66:	2b66      	cmp	r3, #102	; 0x66
  404b68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404b6a:	9312      	str	r3, [sp, #72]	; 0x48
  404b6c:	f000 819e 	beq.w	404eac <_svfprintf_r+0x1254>
  404b70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b72:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404b74:	4619      	mov	r1, r3
  404b76:	4291      	cmp	r1, r2
  404b78:	f300 818a 	bgt.w	404e90 <_svfprintf_r+0x1238>
  404b7c:	f01b 0f01 	tst.w	fp, #1
  404b80:	f040 8213 	bne.w	404faa <_svfprintf_r+0x1352>
  404b84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404b88:	9308      	str	r3, [sp, #32]
  404b8a:	2367      	movs	r3, #103	; 0x67
  404b8c:	920e      	str	r2, [sp, #56]	; 0x38
  404b8e:	9311      	str	r3, [sp, #68]	; 0x44
  404b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404b92:	2b00      	cmp	r3, #0
  404b94:	f040 80c4 	bne.w	404d20 <_svfprintf_r+0x10c8>
  404b98:	930a      	str	r3, [sp, #40]	; 0x28
  404b9a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404b9e:	f7ff b973 	b.w	403e88 <_svfprintf_r+0x230>
  404ba2:	4635      	mov	r5, r6
  404ba4:	460c      	mov	r4, r1
  404ba6:	4646      	mov	r6, r8
  404ba8:	4690      	mov	r8, r2
  404baa:	3301      	adds	r3, #1
  404bac:	443c      	add	r4, r7
  404bae:	2b07      	cmp	r3, #7
  404bb0:	9427      	str	r4, [sp, #156]	; 0x9c
  404bb2:	9326      	str	r3, [sp, #152]	; 0x98
  404bb4:	e888 00a0 	stmia.w	r8, {r5, r7}
  404bb8:	f73f aed1 	bgt.w	40495e <_svfprintf_r+0xd06>
  404bbc:	f108 0808 	add.w	r8, r8, #8
  404bc0:	e6d7      	b.n	404972 <_svfprintf_r+0xd1a>
  404bc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bc4:	6813      	ldr	r3, [r2, #0]
  404bc6:	3204      	adds	r2, #4
  404bc8:	920f      	str	r2, [sp, #60]	; 0x3c
  404bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404bcc:	601a      	str	r2, [r3, #0]
  404bce:	f7ff b86a 	b.w	403ca6 <_svfprintf_r+0x4e>
  404bd2:	aa25      	add	r2, sp, #148	; 0x94
  404bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bd6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bd8:	f002 fa40 	bl	40705c <__ssprint_r>
  404bdc:	2800      	cmp	r0, #0
  404bde:	f47f a90d 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404be2:	46c8      	mov	r8, r9
  404be4:	e48d      	b.n	404502 <_svfprintf_r+0x8aa>
  404be6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404be8:	4a27      	ldr	r2, [pc, #156]	; (404c88 <_svfprintf_r+0x1030>)
  404bea:	f8c8 2000 	str.w	r2, [r8]
  404bee:	3301      	adds	r3, #1
  404bf0:	3401      	adds	r4, #1
  404bf2:	2201      	movs	r2, #1
  404bf4:	2b07      	cmp	r3, #7
  404bf6:	9427      	str	r4, [sp, #156]	; 0x9c
  404bf8:	9326      	str	r3, [sp, #152]	; 0x98
  404bfa:	f8c8 2004 	str.w	r2, [r8, #4]
  404bfe:	dc72      	bgt.n	404ce6 <_svfprintf_r+0x108e>
  404c00:	f108 0808 	add.w	r8, r8, #8
  404c04:	b929      	cbnz	r1, 404c12 <_svfprintf_r+0xfba>
  404c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c08:	b91b      	cbnz	r3, 404c12 <_svfprintf_r+0xfba>
  404c0a:	9b07      	ldr	r3, [sp, #28]
  404c0c:	07d8      	lsls	r0, r3, #31
  404c0e:	f57f aa03 	bpl.w	404018 <_svfprintf_r+0x3c0>
  404c12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c14:	9819      	ldr	r0, [sp, #100]	; 0x64
  404c16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404c18:	f8c8 2000 	str.w	r2, [r8]
  404c1c:	3301      	adds	r3, #1
  404c1e:	4602      	mov	r2, r0
  404c20:	4422      	add	r2, r4
  404c22:	2b07      	cmp	r3, #7
  404c24:	9227      	str	r2, [sp, #156]	; 0x9c
  404c26:	f8c8 0004 	str.w	r0, [r8, #4]
  404c2a:	9326      	str	r3, [sp, #152]	; 0x98
  404c2c:	f300 818d 	bgt.w	404f4a <_svfprintf_r+0x12f2>
  404c30:	f108 0808 	add.w	r8, r8, #8
  404c34:	2900      	cmp	r1, #0
  404c36:	f2c0 8165 	blt.w	404f04 <_svfprintf_r+0x12ac>
  404c3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404c3c:	f8c8 6000 	str.w	r6, [r8]
  404c40:	3301      	adds	r3, #1
  404c42:	188c      	adds	r4, r1, r2
  404c44:	2b07      	cmp	r3, #7
  404c46:	9427      	str	r4, [sp, #156]	; 0x9c
  404c48:	9326      	str	r3, [sp, #152]	; 0x98
  404c4a:	f8c8 1004 	str.w	r1, [r8, #4]
  404c4e:	f77f a9e1 	ble.w	404014 <_svfprintf_r+0x3bc>
  404c52:	e52c      	b.n	4046ae <_svfprintf_r+0xa56>
  404c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c56:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c58:	6813      	ldr	r3, [r2, #0]
  404c5a:	17cd      	asrs	r5, r1, #31
  404c5c:	4608      	mov	r0, r1
  404c5e:	3204      	adds	r2, #4
  404c60:	4629      	mov	r1, r5
  404c62:	920f      	str	r2, [sp, #60]	; 0x3c
  404c64:	e9c3 0100 	strd	r0, r1, [r3]
  404c68:	f7ff b81d 	b.w	403ca6 <_svfprintf_r+0x4e>
  404c6c:	aa25      	add	r2, sp, #148	; 0x94
  404c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c70:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c72:	f002 f9f3 	bl	40705c <__ssprint_r>
  404c76:	2800      	cmp	r0, #0
  404c78:	f47f a8c0 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404c7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c7e:	46c8      	mov	r8, r9
  404c80:	e458      	b.n	404534 <_svfprintf_r+0x8dc>
  404c82:	bf00      	nop
  404c84:	00408f6c 	.word	0x00408f6c
  404c88:	00408f58 	.word	0x00408f58
  404c8c:	2140      	movs	r1, #64	; 0x40
  404c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c90:	f001 fa0c 	bl	4060ac <_malloc_r>
  404c94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404c96:	6010      	str	r0, [r2, #0]
  404c98:	6110      	str	r0, [r2, #16]
  404c9a:	2800      	cmp	r0, #0
  404c9c:	f000 81f2 	beq.w	405084 <_svfprintf_r+0x142c>
  404ca0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ca2:	2340      	movs	r3, #64	; 0x40
  404ca4:	6153      	str	r3, [r2, #20]
  404ca6:	f7fe bfee 	b.w	403c86 <_svfprintf_r+0x2e>
  404caa:	a823      	add	r0, sp, #140	; 0x8c
  404cac:	a920      	add	r1, sp, #128	; 0x80
  404cae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404cb0:	9004      	str	r0, [sp, #16]
  404cb2:	9103      	str	r1, [sp, #12]
  404cb4:	a81f      	add	r0, sp, #124	; 0x7c
  404cb6:	2103      	movs	r1, #3
  404cb8:	9002      	str	r0, [sp, #8]
  404cba:	9a08      	ldr	r2, [sp, #32]
  404cbc:	9401      	str	r4, [sp, #4]
  404cbe:	463b      	mov	r3, r7
  404cc0:	9100      	str	r1, [sp, #0]
  404cc2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cc4:	f000 fa9c 	bl	405200 <_dtoa_r>
  404cc8:	4625      	mov	r5, r4
  404cca:	4606      	mov	r6, r0
  404ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404cce:	2b46      	cmp	r3, #70	; 0x46
  404cd0:	eb06 0405 	add.w	r4, r6, r5
  404cd4:	f47f af29 	bne.w	404b2a <_svfprintf_r+0xed2>
  404cd8:	7833      	ldrb	r3, [r6, #0]
  404cda:	2b30      	cmp	r3, #48	; 0x30
  404cdc:	f000 8178 	beq.w	404fd0 <_svfprintf_r+0x1378>
  404ce0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404ce2:	442c      	add	r4, r5
  404ce4:	e721      	b.n	404b2a <_svfprintf_r+0xed2>
  404ce6:	aa25      	add	r2, sp, #148	; 0x94
  404ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cea:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cec:	f002 f9b6 	bl	40705c <__ssprint_r>
  404cf0:	2800      	cmp	r0, #0
  404cf2:	f47f a883 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404cf6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404cf8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cfa:	46c8      	mov	r8, r9
  404cfc:	e782      	b.n	404c04 <_svfprintf_r+0xfac>
  404cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d00:	2b00      	cmp	r3, #0
  404d02:	bf08      	it	eq
  404d04:	2301      	moveq	r3, #1
  404d06:	930a      	str	r3, [sp, #40]	; 0x28
  404d08:	e6db      	b.n	404ac2 <_svfprintf_r+0xe6a>
  404d0a:	4630      	mov	r0, r6
  404d0c:	940a      	str	r4, [sp, #40]	; 0x28
  404d0e:	f002 f937 	bl	406f80 <strlen>
  404d12:	950f      	str	r5, [sp, #60]	; 0x3c
  404d14:	900e      	str	r0, [sp, #56]	; 0x38
  404d16:	f8cd b01c 	str.w	fp, [sp, #28]
  404d1a:	4603      	mov	r3, r0
  404d1c:	f7ff b9f9 	b.w	404112 <_svfprintf_r+0x4ba>
  404d20:	272d      	movs	r7, #45	; 0x2d
  404d22:	2300      	movs	r3, #0
  404d24:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404d28:	930a      	str	r3, [sp, #40]	; 0x28
  404d2a:	f7ff b8ae 	b.w	403e8a <_svfprintf_r+0x232>
  404d2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404d30:	9312      	str	r3, [sp, #72]	; 0x48
  404d32:	461a      	mov	r2, r3
  404d34:	3303      	adds	r3, #3
  404d36:	db04      	blt.n	404d42 <_svfprintf_r+0x10ea>
  404d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d3a:	4619      	mov	r1, r3
  404d3c:	4291      	cmp	r1, r2
  404d3e:	f6bf af17 	bge.w	404b70 <_svfprintf_r+0xf18>
  404d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d44:	3b02      	subs	r3, #2
  404d46:	9311      	str	r3, [sp, #68]	; 0x44
  404d48:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404d4c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d52:	3b01      	subs	r3, #1
  404d54:	2b00      	cmp	r3, #0
  404d56:	931f      	str	r3, [sp, #124]	; 0x7c
  404d58:	bfbd      	ittte	lt
  404d5a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404d5c:	f1c3 0301 	rsblt	r3, r3, #1
  404d60:	222d      	movlt	r2, #45	; 0x2d
  404d62:	222b      	movge	r2, #43	; 0x2b
  404d64:	2b09      	cmp	r3, #9
  404d66:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404d6a:	f340 8116 	ble.w	404f9a <_svfprintf_r+0x1342>
  404d6e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404d72:	4620      	mov	r0, r4
  404d74:	4dab      	ldr	r5, [pc, #684]	; (405024 <_svfprintf_r+0x13cc>)
  404d76:	e000      	b.n	404d7a <_svfprintf_r+0x1122>
  404d78:	4610      	mov	r0, r2
  404d7a:	fb85 1203 	smull	r1, r2, r5, r3
  404d7e:	17d9      	asrs	r1, r3, #31
  404d80:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404d84:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404d88:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404d8c:	3230      	adds	r2, #48	; 0x30
  404d8e:	2909      	cmp	r1, #9
  404d90:	f800 2c01 	strb.w	r2, [r0, #-1]
  404d94:	460b      	mov	r3, r1
  404d96:	f100 32ff 	add.w	r2, r0, #4294967295
  404d9a:	dced      	bgt.n	404d78 <_svfprintf_r+0x1120>
  404d9c:	3330      	adds	r3, #48	; 0x30
  404d9e:	3802      	subs	r0, #2
  404da0:	b2d9      	uxtb	r1, r3
  404da2:	4284      	cmp	r4, r0
  404da4:	f802 1c01 	strb.w	r1, [r2, #-1]
  404da8:	f240 8165 	bls.w	405076 <_svfprintf_r+0x141e>
  404dac:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404db0:	4613      	mov	r3, r2
  404db2:	e001      	b.n	404db8 <_svfprintf_r+0x1160>
  404db4:	f813 1b01 	ldrb.w	r1, [r3], #1
  404db8:	f800 1b01 	strb.w	r1, [r0], #1
  404dbc:	42a3      	cmp	r3, r4
  404dbe:	d1f9      	bne.n	404db4 <_svfprintf_r+0x115c>
  404dc0:	3301      	adds	r3, #1
  404dc2:	1a9b      	subs	r3, r3, r2
  404dc4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404dc8:	4413      	add	r3, r2
  404dca:	aa21      	add	r2, sp, #132	; 0x84
  404dcc:	1a9b      	subs	r3, r3, r2
  404dce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404dd0:	931b      	str	r3, [sp, #108]	; 0x6c
  404dd2:	2a01      	cmp	r2, #1
  404dd4:	4413      	add	r3, r2
  404dd6:	930e      	str	r3, [sp, #56]	; 0x38
  404dd8:	f340 8119 	ble.w	40500e <_svfprintf_r+0x13b6>
  404ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404dde:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404de0:	4413      	add	r3, r2
  404de2:	930e      	str	r3, [sp, #56]	; 0x38
  404de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404de8:	9308      	str	r3, [sp, #32]
  404dea:	2300      	movs	r3, #0
  404dec:	9312      	str	r3, [sp, #72]	; 0x48
  404dee:	e6cf      	b.n	404b90 <_svfprintf_r+0xf38>
  404df0:	aa25      	add	r2, sp, #148	; 0x94
  404df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404df4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404df6:	f002 f931 	bl	40705c <__ssprint_r>
  404dfa:	2800      	cmp	r0, #0
  404dfc:	f47e affe 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404e00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e02:	46c8      	mov	r8, r9
  404e04:	e4d7      	b.n	4047b6 <_svfprintf_r+0xb5e>
  404e06:	4623      	mov	r3, r4
  404e08:	e6a2      	b.n	404b50 <_svfprintf_r+0xef8>
  404e0a:	aa25      	add	r2, sp, #148	; 0x94
  404e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e10:	f002 f924 	bl	40705c <__ssprint_r>
  404e14:	2800      	cmp	r0, #0
  404e16:	f47e aff1 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404e1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404e1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e1e:	46c8      	mov	r8, r9
  404e20:	e5ae      	b.n	404980 <_svfprintf_r+0xd28>
  404e22:	aa25      	add	r2, sp, #148	; 0x94
  404e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e26:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e28:	f002 f918 	bl	40705c <__ssprint_r>
  404e2c:	2800      	cmp	r0, #0
  404e2e:	f47e afe5 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404e32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e38:	1a9a      	subs	r2, r3, r2
  404e3a:	46c8      	mov	r8, r9
  404e3c:	e5b8      	b.n	4049b0 <_svfprintf_r+0xd58>
  404e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e40:	9612      	str	r6, [sp, #72]	; 0x48
  404e42:	2b06      	cmp	r3, #6
  404e44:	bf28      	it	cs
  404e46:	2306      	movcs	r3, #6
  404e48:	960a      	str	r6, [sp, #40]	; 0x28
  404e4a:	4637      	mov	r7, r6
  404e4c:	9308      	str	r3, [sp, #32]
  404e4e:	950f      	str	r5, [sp, #60]	; 0x3c
  404e50:	f8cd b01c 	str.w	fp, [sp, #28]
  404e54:	930e      	str	r3, [sp, #56]	; 0x38
  404e56:	4e74      	ldr	r6, [pc, #464]	; (405028 <_svfprintf_r+0x13d0>)
  404e58:	f7ff b816 	b.w	403e88 <_svfprintf_r+0x230>
  404e5c:	a823      	add	r0, sp, #140	; 0x8c
  404e5e:	a920      	add	r1, sp, #128	; 0x80
  404e60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404e62:	9004      	str	r0, [sp, #16]
  404e64:	9103      	str	r1, [sp, #12]
  404e66:	a81f      	add	r0, sp, #124	; 0x7c
  404e68:	2103      	movs	r1, #3
  404e6a:	9002      	str	r0, [sp, #8]
  404e6c:	9a08      	ldr	r2, [sp, #32]
  404e6e:	9501      	str	r5, [sp, #4]
  404e70:	463b      	mov	r3, r7
  404e72:	9100      	str	r1, [sp, #0]
  404e74:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e76:	f000 f9c3 	bl	405200 <_dtoa_r>
  404e7a:	4606      	mov	r6, r0
  404e7c:	1944      	adds	r4, r0, r5
  404e7e:	e72b      	b.n	404cd8 <_svfprintf_r+0x1080>
  404e80:	2306      	movs	r3, #6
  404e82:	930a      	str	r3, [sp, #40]	; 0x28
  404e84:	e61d      	b.n	404ac2 <_svfprintf_r+0xe6a>
  404e86:	272d      	movs	r7, #45	; 0x2d
  404e88:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404e8c:	f7ff bacd 	b.w	40442a <_svfprintf_r+0x7d2>
  404e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e94:	4413      	add	r3, r2
  404e96:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404e98:	930e      	str	r3, [sp, #56]	; 0x38
  404e9a:	2a00      	cmp	r2, #0
  404e9c:	f340 80b0 	ble.w	405000 <_svfprintf_r+0x13a8>
  404ea0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ea4:	9308      	str	r3, [sp, #32]
  404ea6:	2367      	movs	r3, #103	; 0x67
  404ea8:	9311      	str	r3, [sp, #68]	; 0x44
  404eaa:	e671      	b.n	404b90 <_svfprintf_r+0xf38>
  404eac:	2b00      	cmp	r3, #0
  404eae:	f340 80c3 	ble.w	405038 <_svfprintf_r+0x13e0>
  404eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404eb4:	2a00      	cmp	r2, #0
  404eb6:	f040 8099 	bne.w	404fec <_svfprintf_r+0x1394>
  404eba:	f01b 0f01 	tst.w	fp, #1
  404ebe:	f040 8095 	bne.w	404fec <_svfprintf_r+0x1394>
  404ec2:	9308      	str	r3, [sp, #32]
  404ec4:	930e      	str	r3, [sp, #56]	; 0x38
  404ec6:	e663      	b.n	404b90 <_svfprintf_r+0xf38>
  404ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404eca:	9308      	str	r3, [sp, #32]
  404ecc:	930e      	str	r3, [sp, #56]	; 0x38
  404ece:	900a      	str	r0, [sp, #40]	; 0x28
  404ed0:	950f      	str	r5, [sp, #60]	; 0x3c
  404ed2:	f8cd b01c 	str.w	fp, [sp, #28]
  404ed6:	9012      	str	r0, [sp, #72]	; 0x48
  404ed8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404edc:	f7fe bfd4 	b.w	403e88 <_svfprintf_r+0x230>
  404ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ee2:	2b47      	cmp	r3, #71	; 0x47
  404ee4:	f47f ae20 	bne.w	404b28 <_svfprintf_r+0xed0>
  404ee8:	f01b 0f01 	tst.w	fp, #1
  404eec:	f47f aeee 	bne.w	404ccc <_svfprintf_r+0x1074>
  404ef0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404ef2:	1b9b      	subs	r3, r3, r6
  404ef4:	9313      	str	r3, [sp, #76]	; 0x4c
  404ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ef8:	2b47      	cmp	r3, #71	; 0x47
  404efa:	f43f af18 	beq.w	404d2e <_svfprintf_r+0x10d6>
  404efe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f00:	9312      	str	r3, [sp, #72]	; 0x48
  404f02:	e721      	b.n	404d48 <_svfprintf_r+0x10f0>
  404f04:	424f      	negs	r7, r1
  404f06:	3110      	adds	r1, #16
  404f08:	4d48      	ldr	r5, [pc, #288]	; (40502c <_svfprintf_r+0x13d4>)
  404f0a:	da2f      	bge.n	404f6c <_svfprintf_r+0x1314>
  404f0c:	2410      	movs	r4, #16
  404f0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404f12:	e004      	b.n	404f1e <_svfprintf_r+0x12c6>
  404f14:	f108 0808 	add.w	r8, r8, #8
  404f18:	3f10      	subs	r7, #16
  404f1a:	2f10      	cmp	r7, #16
  404f1c:	dd26      	ble.n	404f6c <_svfprintf_r+0x1314>
  404f1e:	3301      	adds	r3, #1
  404f20:	3210      	adds	r2, #16
  404f22:	2b07      	cmp	r3, #7
  404f24:	9227      	str	r2, [sp, #156]	; 0x9c
  404f26:	9326      	str	r3, [sp, #152]	; 0x98
  404f28:	f8c8 5000 	str.w	r5, [r8]
  404f2c:	f8c8 4004 	str.w	r4, [r8, #4]
  404f30:	ddf0      	ble.n	404f14 <_svfprintf_r+0x12bc>
  404f32:	aa25      	add	r2, sp, #148	; 0x94
  404f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f36:	4658      	mov	r0, fp
  404f38:	f002 f890 	bl	40705c <__ssprint_r>
  404f3c:	2800      	cmp	r0, #0
  404f3e:	f47e af5d 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404f42:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404f44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f46:	46c8      	mov	r8, r9
  404f48:	e7e6      	b.n	404f18 <_svfprintf_r+0x12c0>
  404f4a:	aa25      	add	r2, sp, #148	; 0x94
  404f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f50:	f002 f884 	bl	40705c <__ssprint_r>
  404f54:	2800      	cmp	r0, #0
  404f56:	f47e af51 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404f5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404f5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404f5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f60:	46c8      	mov	r8, r9
  404f62:	e667      	b.n	404c34 <_svfprintf_r+0xfdc>
  404f64:	2000      	movs	r0, #0
  404f66:	900a      	str	r0, [sp, #40]	; 0x28
  404f68:	f7fe bed0 	b.w	403d0c <_svfprintf_r+0xb4>
  404f6c:	3301      	adds	r3, #1
  404f6e:	443a      	add	r2, r7
  404f70:	2b07      	cmp	r3, #7
  404f72:	e888 00a0 	stmia.w	r8, {r5, r7}
  404f76:	9227      	str	r2, [sp, #156]	; 0x9c
  404f78:	9326      	str	r3, [sp, #152]	; 0x98
  404f7a:	f108 0808 	add.w	r8, r8, #8
  404f7e:	f77f ae5c 	ble.w	404c3a <_svfprintf_r+0xfe2>
  404f82:	aa25      	add	r2, sp, #148	; 0x94
  404f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f86:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f88:	f002 f868 	bl	40705c <__ssprint_r>
  404f8c:	2800      	cmp	r0, #0
  404f8e:	f47e af35 	bne.w	403dfc <_svfprintf_r+0x1a4>
  404f92:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404f94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f96:	46c8      	mov	r8, r9
  404f98:	e64f      	b.n	404c3a <_svfprintf_r+0xfe2>
  404f9a:	3330      	adds	r3, #48	; 0x30
  404f9c:	2230      	movs	r2, #48	; 0x30
  404f9e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404fa2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404fa6:	ab22      	add	r3, sp, #136	; 0x88
  404fa8:	e70f      	b.n	404dca <_svfprintf_r+0x1172>
  404faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404fac:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404fae:	4413      	add	r3, r2
  404fb0:	930e      	str	r3, [sp, #56]	; 0x38
  404fb2:	e775      	b.n	404ea0 <_svfprintf_r+0x1248>
  404fb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404fb6:	e5cb      	b.n	404b50 <_svfprintf_r+0xef8>
  404fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404fba:	4e1d      	ldr	r6, [pc, #116]	; (405030 <_svfprintf_r+0x13d8>)
  404fbc:	2b00      	cmp	r3, #0
  404fbe:	bfb6      	itet	lt
  404fc0:	272d      	movlt	r7, #45	; 0x2d
  404fc2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404fc6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404fca:	4b1a      	ldr	r3, [pc, #104]	; (405034 <_svfprintf_r+0x13dc>)
  404fcc:	f7ff ba2f 	b.w	40442e <_svfprintf_r+0x7d6>
  404fd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404fd2:	9808      	ldr	r0, [sp, #32]
  404fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404fd6:	4639      	mov	r1, r7
  404fd8:	f003 f8d4 	bl	408184 <__aeabi_dcmpeq>
  404fdc:	2800      	cmp	r0, #0
  404fde:	f47f ae7f 	bne.w	404ce0 <_svfprintf_r+0x1088>
  404fe2:	f1c5 0501 	rsb	r5, r5, #1
  404fe6:	951f      	str	r5, [sp, #124]	; 0x7c
  404fe8:	442c      	add	r4, r5
  404fea:	e59e      	b.n	404b2a <_svfprintf_r+0xed2>
  404fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404fee:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ff0:	4413      	add	r3, r2
  404ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404ff4:	441a      	add	r2, r3
  404ff6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404ffa:	920e      	str	r2, [sp, #56]	; 0x38
  404ffc:	9308      	str	r3, [sp, #32]
  404ffe:	e5c7      	b.n	404b90 <_svfprintf_r+0xf38>
  405000:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405004:	f1c3 0301 	rsb	r3, r3, #1
  405008:	441a      	add	r2, r3
  40500a:	4613      	mov	r3, r2
  40500c:	e7d0      	b.n	404fb0 <_svfprintf_r+0x1358>
  40500e:	f01b 0301 	ands.w	r3, fp, #1
  405012:	9312      	str	r3, [sp, #72]	; 0x48
  405014:	f47f aee2 	bne.w	404ddc <_svfprintf_r+0x1184>
  405018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40501a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40501e:	9308      	str	r3, [sp, #32]
  405020:	e5b6      	b.n	404b90 <_svfprintf_r+0xf38>
  405022:	bf00      	nop
  405024:	66666667 	.word	0x66666667
  405028:	00408f50 	.word	0x00408f50
  40502c:	00408f6c 	.word	0x00408f6c
  405030:	00408f24 	.word	0x00408f24
  405034:	00408f20 	.word	0x00408f20
  405038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40503a:	b913      	cbnz	r3, 405042 <_svfprintf_r+0x13ea>
  40503c:	f01b 0f01 	tst.w	fp, #1
  405040:	d002      	beq.n	405048 <_svfprintf_r+0x13f0>
  405042:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405044:	3301      	adds	r3, #1
  405046:	e7d4      	b.n	404ff2 <_svfprintf_r+0x139a>
  405048:	2301      	movs	r3, #1
  40504a:	e73a      	b.n	404ec2 <_svfprintf_r+0x126a>
  40504c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40504e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405052:	6828      	ldr	r0, [r5, #0]
  405054:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405058:	900a      	str	r0, [sp, #40]	; 0x28
  40505a:	4628      	mov	r0, r5
  40505c:	3004      	adds	r0, #4
  40505e:	46a2      	mov	sl, r4
  405060:	900f      	str	r0, [sp, #60]	; 0x3c
  405062:	f7fe be51 	b.w	403d08 <_svfprintf_r+0xb0>
  405066:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40506a:	f7ff b867 	b.w	40413c <_svfprintf_r+0x4e4>
  40506e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405072:	f7ff ba15 	b.w	4044a0 <_svfprintf_r+0x848>
  405076:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40507a:	e6a6      	b.n	404dca <_svfprintf_r+0x1172>
  40507c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405080:	f7ff b8eb 	b.w	40425a <_svfprintf_r+0x602>
  405084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405086:	230c      	movs	r3, #12
  405088:	6013      	str	r3, [r2, #0]
  40508a:	f04f 33ff 	mov.w	r3, #4294967295
  40508e:	9309      	str	r3, [sp, #36]	; 0x24
  405090:	f7fe bebd 	b.w	403e0e <_svfprintf_r+0x1b6>
  405094:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405098:	f7ff b99a 	b.w	4043d0 <_svfprintf_r+0x778>
  40509c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050a0:	f7ff b976 	b.w	404390 <_svfprintf_r+0x738>
  4050a4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050a8:	f7ff b959 	b.w	40435e <_svfprintf_r+0x706>
  4050ac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050b0:	f7ff b912 	b.w	4042d8 <_svfprintf_r+0x680>

004050b4 <register_fini>:
  4050b4:	4b02      	ldr	r3, [pc, #8]	; (4050c0 <register_fini+0xc>)
  4050b6:	b113      	cbz	r3, 4050be <register_fini+0xa>
  4050b8:	4802      	ldr	r0, [pc, #8]	; (4050c4 <register_fini+0x10>)
  4050ba:	f000 b805 	b.w	4050c8 <atexit>
  4050be:	4770      	bx	lr
  4050c0:	00000000 	.word	0x00000000
  4050c4:	00406055 	.word	0x00406055

004050c8 <atexit>:
  4050c8:	2300      	movs	r3, #0
  4050ca:	4601      	mov	r1, r0
  4050cc:	461a      	mov	r2, r3
  4050ce:	4618      	mov	r0, r3
  4050d0:	f002 b842 	b.w	407158 <__register_exitproc>

004050d4 <quorem>:
  4050d4:	6902      	ldr	r2, [r0, #16]
  4050d6:	690b      	ldr	r3, [r1, #16]
  4050d8:	4293      	cmp	r3, r2
  4050da:	f300 808d 	bgt.w	4051f8 <quorem+0x124>
  4050de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050e2:	f103 38ff 	add.w	r8, r3, #4294967295
  4050e6:	f101 0714 	add.w	r7, r1, #20
  4050ea:	f100 0b14 	add.w	fp, r0, #20
  4050ee:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4050f2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4050f6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4050fa:	b083      	sub	sp, #12
  4050fc:	3201      	adds	r2, #1
  4050fe:	fbb3 f9f2 	udiv	r9, r3, r2
  405102:	eb0b 0304 	add.w	r3, fp, r4
  405106:	9400      	str	r4, [sp, #0]
  405108:	eb07 0a04 	add.w	sl, r7, r4
  40510c:	9301      	str	r3, [sp, #4]
  40510e:	f1b9 0f00 	cmp.w	r9, #0
  405112:	d039      	beq.n	405188 <quorem+0xb4>
  405114:	2500      	movs	r5, #0
  405116:	462e      	mov	r6, r5
  405118:	46bc      	mov	ip, r7
  40511a:	46de      	mov	lr, fp
  40511c:	f85c 4b04 	ldr.w	r4, [ip], #4
  405120:	f8de 3000 	ldr.w	r3, [lr]
  405124:	b2a2      	uxth	r2, r4
  405126:	fb09 5502 	mla	r5, r9, r2, r5
  40512a:	0c22      	lsrs	r2, r4, #16
  40512c:	0c2c      	lsrs	r4, r5, #16
  40512e:	fb09 4202 	mla	r2, r9, r2, r4
  405132:	b2ad      	uxth	r5, r5
  405134:	1b75      	subs	r5, r6, r5
  405136:	b296      	uxth	r6, r2
  405138:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40513c:	fa15 f383 	uxtah	r3, r5, r3
  405140:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405144:	b29b      	uxth	r3, r3
  405146:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40514a:	45e2      	cmp	sl, ip
  40514c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405150:	f84e 3b04 	str.w	r3, [lr], #4
  405154:	ea4f 4626 	mov.w	r6, r6, asr #16
  405158:	d2e0      	bcs.n	40511c <quorem+0x48>
  40515a:	9b00      	ldr	r3, [sp, #0]
  40515c:	f85b 3003 	ldr.w	r3, [fp, r3]
  405160:	b993      	cbnz	r3, 405188 <quorem+0xb4>
  405162:	9c01      	ldr	r4, [sp, #4]
  405164:	1f23      	subs	r3, r4, #4
  405166:	459b      	cmp	fp, r3
  405168:	d20c      	bcs.n	405184 <quorem+0xb0>
  40516a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40516e:	b94b      	cbnz	r3, 405184 <quorem+0xb0>
  405170:	f1a4 0308 	sub.w	r3, r4, #8
  405174:	e002      	b.n	40517c <quorem+0xa8>
  405176:	681a      	ldr	r2, [r3, #0]
  405178:	3b04      	subs	r3, #4
  40517a:	b91a      	cbnz	r2, 405184 <quorem+0xb0>
  40517c:	459b      	cmp	fp, r3
  40517e:	f108 38ff 	add.w	r8, r8, #4294967295
  405182:	d3f8      	bcc.n	405176 <quorem+0xa2>
  405184:	f8c0 8010 	str.w	r8, [r0, #16]
  405188:	4604      	mov	r4, r0
  40518a:	f001 fd65 	bl	406c58 <__mcmp>
  40518e:	2800      	cmp	r0, #0
  405190:	db2e      	blt.n	4051f0 <quorem+0x11c>
  405192:	f109 0901 	add.w	r9, r9, #1
  405196:	465d      	mov	r5, fp
  405198:	2300      	movs	r3, #0
  40519a:	f857 1b04 	ldr.w	r1, [r7], #4
  40519e:	6828      	ldr	r0, [r5, #0]
  4051a0:	b28a      	uxth	r2, r1
  4051a2:	1a9a      	subs	r2, r3, r2
  4051a4:	0c0b      	lsrs	r3, r1, #16
  4051a6:	fa12 f280 	uxtah	r2, r2, r0
  4051aa:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4051ae:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4051b2:	b292      	uxth	r2, r2
  4051b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4051b8:	45ba      	cmp	sl, r7
  4051ba:	f845 2b04 	str.w	r2, [r5], #4
  4051be:	ea4f 4323 	mov.w	r3, r3, asr #16
  4051c2:	d2ea      	bcs.n	40519a <quorem+0xc6>
  4051c4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4051c8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4051cc:	b982      	cbnz	r2, 4051f0 <quorem+0x11c>
  4051ce:	1f1a      	subs	r2, r3, #4
  4051d0:	4593      	cmp	fp, r2
  4051d2:	d20b      	bcs.n	4051ec <quorem+0x118>
  4051d4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4051d8:	b942      	cbnz	r2, 4051ec <quorem+0x118>
  4051da:	3b08      	subs	r3, #8
  4051dc:	e002      	b.n	4051e4 <quorem+0x110>
  4051de:	681a      	ldr	r2, [r3, #0]
  4051e0:	3b04      	subs	r3, #4
  4051e2:	b91a      	cbnz	r2, 4051ec <quorem+0x118>
  4051e4:	459b      	cmp	fp, r3
  4051e6:	f108 38ff 	add.w	r8, r8, #4294967295
  4051ea:	d3f8      	bcc.n	4051de <quorem+0x10a>
  4051ec:	f8c4 8010 	str.w	r8, [r4, #16]
  4051f0:	4648      	mov	r0, r9
  4051f2:	b003      	add	sp, #12
  4051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051f8:	2000      	movs	r0, #0
  4051fa:	4770      	bx	lr
  4051fc:	0000      	movs	r0, r0
	...

00405200 <_dtoa_r>:
  405200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405204:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405206:	b09b      	sub	sp, #108	; 0x6c
  405208:	4604      	mov	r4, r0
  40520a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40520c:	4692      	mov	sl, r2
  40520e:	469b      	mov	fp, r3
  405210:	b141      	cbz	r1, 405224 <_dtoa_r+0x24>
  405212:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405214:	604a      	str	r2, [r1, #4]
  405216:	2301      	movs	r3, #1
  405218:	4093      	lsls	r3, r2
  40521a:	608b      	str	r3, [r1, #8]
  40521c:	f001 fb44 	bl	4068a8 <_Bfree>
  405220:	2300      	movs	r3, #0
  405222:	6423      	str	r3, [r4, #64]	; 0x40
  405224:	f1bb 0f00 	cmp.w	fp, #0
  405228:	465d      	mov	r5, fp
  40522a:	db35      	blt.n	405298 <_dtoa_r+0x98>
  40522c:	2300      	movs	r3, #0
  40522e:	6033      	str	r3, [r6, #0]
  405230:	4b9d      	ldr	r3, [pc, #628]	; (4054a8 <_dtoa_r+0x2a8>)
  405232:	43ab      	bics	r3, r5
  405234:	d015      	beq.n	405262 <_dtoa_r+0x62>
  405236:	4650      	mov	r0, sl
  405238:	4659      	mov	r1, fp
  40523a:	2200      	movs	r2, #0
  40523c:	2300      	movs	r3, #0
  40523e:	f002 ffa1 	bl	408184 <__aeabi_dcmpeq>
  405242:	4680      	mov	r8, r0
  405244:	2800      	cmp	r0, #0
  405246:	d02d      	beq.n	4052a4 <_dtoa_r+0xa4>
  405248:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40524a:	2301      	movs	r3, #1
  40524c:	6013      	str	r3, [r2, #0]
  40524e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405250:	2b00      	cmp	r3, #0
  405252:	f000 80bd 	beq.w	4053d0 <_dtoa_r+0x1d0>
  405256:	4895      	ldr	r0, [pc, #596]	; (4054ac <_dtoa_r+0x2ac>)
  405258:	6018      	str	r0, [r3, #0]
  40525a:	3801      	subs	r0, #1
  40525c:	b01b      	add	sp, #108	; 0x6c
  40525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405262:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405264:	f242 730f 	movw	r3, #9999	; 0x270f
  405268:	6013      	str	r3, [r2, #0]
  40526a:	f1ba 0f00 	cmp.w	sl, #0
  40526e:	d10d      	bne.n	40528c <_dtoa_r+0x8c>
  405270:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405274:	b955      	cbnz	r5, 40528c <_dtoa_r+0x8c>
  405276:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405278:	488d      	ldr	r0, [pc, #564]	; (4054b0 <_dtoa_r+0x2b0>)
  40527a:	2b00      	cmp	r3, #0
  40527c:	d0ee      	beq.n	40525c <_dtoa_r+0x5c>
  40527e:	f100 0308 	add.w	r3, r0, #8
  405282:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405284:	6013      	str	r3, [r2, #0]
  405286:	b01b      	add	sp, #108	; 0x6c
  405288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40528c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40528e:	4889      	ldr	r0, [pc, #548]	; (4054b4 <_dtoa_r+0x2b4>)
  405290:	2b00      	cmp	r3, #0
  405292:	d0e3      	beq.n	40525c <_dtoa_r+0x5c>
  405294:	1cc3      	adds	r3, r0, #3
  405296:	e7f4      	b.n	405282 <_dtoa_r+0x82>
  405298:	2301      	movs	r3, #1
  40529a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40529e:	6033      	str	r3, [r6, #0]
  4052a0:	46ab      	mov	fp, r5
  4052a2:	e7c5      	b.n	405230 <_dtoa_r+0x30>
  4052a4:	aa18      	add	r2, sp, #96	; 0x60
  4052a6:	ab19      	add	r3, sp, #100	; 0x64
  4052a8:	9201      	str	r2, [sp, #4]
  4052aa:	9300      	str	r3, [sp, #0]
  4052ac:	4652      	mov	r2, sl
  4052ae:	465b      	mov	r3, fp
  4052b0:	4620      	mov	r0, r4
  4052b2:	f001 fd71 	bl	406d98 <__d2b>
  4052b6:	0d2b      	lsrs	r3, r5, #20
  4052b8:	4681      	mov	r9, r0
  4052ba:	d071      	beq.n	4053a0 <_dtoa_r+0x1a0>
  4052bc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4052c0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4052c4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4052c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4052ca:	4650      	mov	r0, sl
  4052cc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4052d0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4052d4:	2200      	movs	r2, #0
  4052d6:	4b78      	ldr	r3, [pc, #480]	; (4054b8 <_dtoa_r+0x2b8>)
  4052d8:	f002 fb38 	bl	40794c <__aeabi_dsub>
  4052dc:	a36c      	add	r3, pc, #432	; (adr r3, 405490 <_dtoa_r+0x290>)
  4052de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052e2:	f002 fce7 	bl	407cb4 <__aeabi_dmul>
  4052e6:	a36c      	add	r3, pc, #432	; (adr r3, 405498 <_dtoa_r+0x298>)
  4052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052ec:	f002 fb30 	bl	407950 <__adddf3>
  4052f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4052f4:	4630      	mov	r0, r6
  4052f6:	f002 fc77 	bl	407be8 <__aeabi_i2d>
  4052fa:	a369      	add	r3, pc, #420	; (adr r3, 4054a0 <_dtoa_r+0x2a0>)
  4052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405300:	f002 fcd8 	bl	407cb4 <__aeabi_dmul>
  405304:	4602      	mov	r2, r0
  405306:	460b      	mov	r3, r1
  405308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40530c:	f002 fb20 	bl	407950 <__adddf3>
  405310:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405314:	f002 ff7e 	bl	408214 <__aeabi_d2iz>
  405318:	2200      	movs	r2, #0
  40531a:	9002      	str	r0, [sp, #8]
  40531c:	2300      	movs	r3, #0
  40531e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405322:	f002 ff39 	bl	408198 <__aeabi_dcmplt>
  405326:	2800      	cmp	r0, #0
  405328:	f040 8173 	bne.w	405612 <_dtoa_r+0x412>
  40532c:	9d02      	ldr	r5, [sp, #8]
  40532e:	2d16      	cmp	r5, #22
  405330:	f200 815d 	bhi.w	4055ee <_dtoa_r+0x3ee>
  405334:	4b61      	ldr	r3, [pc, #388]	; (4054bc <_dtoa_r+0x2bc>)
  405336:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40533a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40533e:	4652      	mov	r2, sl
  405340:	465b      	mov	r3, fp
  405342:	f002 ff47 	bl	4081d4 <__aeabi_dcmpgt>
  405346:	2800      	cmp	r0, #0
  405348:	f000 81c5 	beq.w	4056d6 <_dtoa_r+0x4d6>
  40534c:	1e6b      	subs	r3, r5, #1
  40534e:	9302      	str	r3, [sp, #8]
  405350:	2300      	movs	r3, #0
  405352:	930e      	str	r3, [sp, #56]	; 0x38
  405354:	1bbf      	subs	r7, r7, r6
  405356:	1e7b      	subs	r3, r7, #1
  405358:	9306      	str	r3, [sp, #24]
  40535a:	f100 8154 	bmi.w	405606 <_dtoa_r+0x406>
  40535e:	2300      	movs	r3, #0
  405360:	9308      	str	r3, [sp, #32]
  405362:	9b02      	ldr	r3, [sp, #8]
  405364:	2b00      	cmp	r3, #0
  405366:	f2c0 8145 	blt.w	4055f4 <_dtoa_r+0x3f4>
  40536a:	9a06      	ldr	r2, [sp, #24]
  40536c:	930d      	str	r3, [sp, #52]	; 0x34
  40536e:	4611      	mov	r1, r2
  405370:	4419      	add	r1, r3
  405372:	2300      	movs	r3, #0
  405374:	9106      	str	r1, [sp, #24]
  405376:	930c      	str	r3, [sp, #48]	; 0x30
  405378:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40537a:	2b09      	cmp	r3, #9
  40537c:	d82a      	bhi.n	4053d4 <_dtoa_r+0x1d4>
  40537e:	2b05      	cmp	r3, #5
  405380:	f340 865b 	ble.w	40603a <_dtoa_r+0xe3a>
  405384:	3b04      	subs	r3, #4
  405386:	9324      	str	r3, [sp, #144]	; 0x90
  405388:	2500      	movs	r5, #0
  40538a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40538c:	3b02      	subs	r3, #2
  40538e:	2b03      	cmp	r3, #3
  405390:	f200 8642 	bhi.w	406018 <_dtoa_r+0xe18>
  405394:	e8df f013 	tbh	[pc, r3, lsl #1]
  405398:	02c903d4 	.word	0x02c903d4
  40539c:	046103df 	.word	0x046103df
  4053a0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4053a2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4053a4:	443e      	add	r6, r7
  4053a6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4053aa:	2b20      	cmp	r3, #32
  4053ac:	f340 818e 	ble.w	4056cc <_dtoa_r+0x4cc>
  4053b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4053b4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4053b8:	409d      	lsls	r5, r3
  4053ba:	fa2a f000 	lsr.w	r0, sl, r0
  4053be:	4328      	orrs	r0, r5
  4053c0:	f002 fc02 	bl	407bc8 <__aeabi_ui2d>
  4053c4:	2301      	movs	r3, #1
  4053c6:	3e01      	subs	r6, #1
  4053c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4053cc:	9314      	str	r3, [sp, #80]	; 0x50
  4053ce:	e781      	b.n	4052d4 <_dtoa_r+0xd4>
  4053d0:	483b      	ldr	r0, [pc, #236]	; (4054c0 <_dtoa_r+0x2c0>)
  4053d2:	e743      	b.n	40525c <_dtoa_r+0x5c>
  4053d4:	2100      	movs	r1, #0
  4053d6:	6461      	str	r1, [r4, #68]	; 0x44
  4053d8:	4620      	mov	r0, r4
  4053da:	9125      	str	r1, [sp, #148]	; 0x94
  4053dc:	f001 fa3e 	bl	40685c <_Balloc>
  4053e0:	f04f 33ff 	mov.w	r3, #4294967295
  4053e4:	930a      	str	r3, [sp, #40]	; 0x28
  4053e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4053e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4053ea:	2301      	movs	r3, #1
  4053ec:	9004      	str	r0, [sp, #16]
  4053ee:	6420      	str	r0, [r4, #64]	; 0x40
  4053f0:	9224      	str	r2, [sp, #144]	; 0x90
  4053f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4053f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4053f6:	2b00      	cmp	r3, #0
  4053f8:	f2c0 80d9 	blt.w	4055ae <_dtoa_r+0x3ae>
  4053fc:	9a02      	ldr	r2, [sp, #8]
  4053fe:	2a0e      	cmp	r2, #14
  405400:	f300 80d5 	bgt.w	4055ae <_dtoa_r+0x3ae>
  405404:	4b2d      	ldr	r3, [pc, #180]	; (4054bc <_dtoa_r+0x2bc>)
  405406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40540a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40540e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405412:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405414:	2b00      	cmp	r3, #0
  405416:	f2c0 83ba 	blt.w	405b8e <_dtoa_r+0x98e>
  40541a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40541e:	4650      	mov	r0, sl
  405420:	462a      	mov	r2, r5
  405422:	4633      	mov	r3, r6
  405424:	4659      	mov	r1, fp
  405426:	f002 fd6f 	bl	407f08 <__aeabi_ddiv>
  40542a:	f002 fef3 	bl	408214 <__aeabi_d2iz>
  40542e:	4680      	mov	r8, r0
  405430:	f002 fbda 	bl	407be8 <__aeabi_i2d>
  405434:	462a      	mov	r2, r5
  405436:	4633      	mov	r3, r6
  405438:	f002 fc3c 	bl	407cb4 <__aeabi_dmul>
  40543c:	460b      	mov	r3, r1
  40543e:	4602      	mov	r2, r0
  405440:	4659      	mov	r1, fp
  405442:	4650      	mov	r0, sl
  405444:	f002 fa82 	bl	40794c <__aeabi_dsub>
  405448:	9d04      	ldr	r5, [sp, #16]
  40544a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40544e:	702b      	strb	r3, [r5, #0]
  405450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405452:	2b01      	cmp	r3, #1
  405454:	4606      	mov	r6, r0
  405456:	460f      	mov	r7, r1
  405458:	f105 0501 	add.w	r5, r5, #1
  40545c:	d068      	beq.n	405530 <_dtoa_r+0x330>
  40545e:	2200      	movs	r2, #0
  405460:	4b18      	ldr	r3, [pc, #96]	; (4054c4 <_dtoa_r+0x2c4>)
  405462:	f002 fc27 	bl	407cb4 <__aeabi_dmul>
  405466:	2200      	movs	r2, #0
  405468:	2300      	movs	r3, #0
  40546a:	4606      	mov	r6, r0
  40546c:	460f      	mov	r7, r1
  40546e:	f002 fe89 	bl	408184 <__aeabi_dcmpeq>
  405472:	2800      	cmp	r0, #0
  405474:	f040 8088 	bne.w	405588 <_dtoa_r+0x388>
  405478:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40547c:	f04f 0a00 	mov.w	sl, #0
  405480:	f8df b040 	ldr.w	fp, [pc, #64]	; 4054c4 <_dtoa_r+0x2c4>
  405484:	940c      	str	r4, [sp, #48]	; 0x30
  405486:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40548a:	e028      	b.n	4054de <_dtoa_r+0x2de>
  40548c:	f3af 8000 	nop.w
  405490:	636f4361 	.word	0x636f4361
  405494:	3fd287a7 	.word	0x3fd287a7
  405498:	8b60c8b3 	.word	0x8b60c8b3
  40549c:	3fc68a28 	.word	0x3fc68a28
  4054a0:	509f79fb 	.word	0x509f79fb
  4054a4:	3fd34413 	.word	0x3fd34413
  4054a8:	7ff00000 	.word	0x7ff00000
  4054ac:	00408f59 	.word	0x00408f59
  4054b0:	00408f7c 	.word	0x00408f7c
  4054b4:	00408f88 	.word	0x00408f88
  4054b8:	3ff80000 	.word	0x3ff80000
  4054bc:	00408fb8 	.word	0x00408fb8
  4054c0:	00408f58 	.word	0x00408f58
  4054c4:	40240000 	.word	0x40240000
  4054c8:	f002 fbf4 	bl	407cb4 <__aeabi_dmul>
  4054cc:	2200      	movs	r2, #0
  4054ce:	2300      	movs	r3, #0
  4054d0:	4606      	mov	r6, r0
  4054d2:	460f      	mov	r7, r1
  4054d4:	f002 fe56 	bl	408184 <__aeabi_dcmpeq>
  4054d8:	2800      	cmp	r0, #0
  4054da:	f040 83c1 	bne.w	405c60 <_dtoa_r+0xa60>
  4054de:	4642      	mov	r2, r8
  4054e0:	464b      	mov	r3, r9
  4054e2:	4630      	mov	r0, r6
  4054e4:	4639      	mov	r1, r7
  4054e6:	f002 fd0f 	bl	407f08 <__aeabi_ddiv>
  4054ea:	f002 fe93 	bl	408214 <__aeabi_d2iz>
  4054ee:	4604      	mov	r4, r0
  4054f0:	f002 fb7a 	bl	407be8 <__aeabi_i2d>
  4054f4:	4642      	mov	r2, r8
  4054f6:	464b      	mov	r3, r9
  4054f8:	f002 fbdc 	bl	407cb4 <__aeabi_dmul>
  4054fc:	4602      	mov	r2, r0
  4054fe:	460b      	mov	r3, r1
  405500:	4630      	mov	r0, r6
  405502:	4639      	mov	r1, r7
  405504:	f002 fa22 	bl	40794c <__aeabi_dsub>
  405508:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40550c:	9e04      	ldr	r6, [sp, #16]
  40550e:	f805 eb01 	strb.w	lr, [r5], #1
  405512:	eba5 0e06 	sub.w	lr, r5, r6
  405516:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405518:	45b6      	cmp	lr, r6
  40551a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40551e:	4652      	mov	r2, sl
  405520:	465b      	mov	r3, fp
  405522:	d1d1      	bne.n	4054c8 <_dtoa_r+0x2c8>
  405524:	46a0      	mov	r8, r4
  405526:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40552a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40552c:	4606      	mov	r6, r0
  40552e:	460f      	mov	r7, r1
  405530:	4632      	mov	r2, r6
  405532:	463b      	mov	r3, r7
  405534:	4630      	mov	r0, r6
  405536:	4639      	mov	r1, r7
  405538:	f002 fa0a 	bl	407950 <__adddf3>
  40553c:	4606      	mov	r6, r0
  40553e:	460f      	mov	r7, r1
  405540:	4602      	mov	r2, r0
  405542:	460b      	mov	r3, r1
  405544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405548:	f002 fe26 	bl	408198 <__aeabi_dcmplt>
  40554c:	b948      	cbnz	r0, 405562 <_dtoa_r+0x362>
  40554e:	4632      	mov	r2, r6
  405550:	463b      	mov	r3, r7
  405552:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405556:	f002 fe15 	bl	408184 <__aeabi_dcmpeq>
  40555a:	b1a8      	cbz	r0, 405588 <_dtoa_r+0x388>
  40555c:	f018 0f01 	tst.w	r8, #1
  405560:	d012      	beq.n	405588 <_dtoa_r+0x388>
  405562:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405566:	9a04      	ldr	r2, [sp, #16]
  405568:	1e6b      	subs	r3, r5, #1
  40556a:	e004      	b.n	405576 <_dtoa_r+0x376>
  40556c:	429a      	cmp	r2, r3
  40556e:	f000 8401 	beq.w	405d74 <_dtoa_r+0xb74>
  405572:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40557a:	f103 0501 	add.w	r5, r3, #1
  40557e:	d0f5      	beq.n	40556c <_dtoa_r+0x36c>
  405580:	f108 0801 	add.w	r8, r8, #1
  405584:	f883 8000 	strb.w	r8, [r3]
  405588:	4649      	mov	r1, r9
  40558a:	4620      	mov	r0, r4
  40558c:	f001 f98c 	bl	4068a8 <_Bfree>
  405590:	2200      	movs	r2, #0
  405592:	9b02      	ldr	r3, [sp, #8]
  405594:	702a      	strb	r2, [r5, #0]
  405596:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405598:	3301      	adds	r3, #1
  40559a:	6013      	str	r3, [r2, #0]
  40559c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40559e:	2b00      	cmp	r3, #0
  4055a0:	f000 839e 	beq.w	405ce0 <_dtoa_r+0xae0>
  4055a4:	9804      	ldr	r0, [sp, #16]
  4055a6:	601d      	str	r5, [r3, #0]
  4055a8:	b01b      	add	sp, #108	; 0x6c
  4055aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4055b0:	2a00      	cmp	r2, #0
  4055b2:	d03e      	beq.n	405632 <_dtoa_r+0x432>
  4055b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4055b6:	2a01      	cmp	r2, #1
  4055b8:	f340 8311 	ble.w	405bde <_dtoa_r+0x9de>
  4055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4055c0:	1e5f      	subs	r7, r3, #1
  4055c2:	42ba      	cmp	r2, r7
  4055c4:	f2c0 838f 	blt.w	405ce6 <_dtoa_r+0xae6>
  4055c8:	1bd7      	subs	r7, r2, r7
  4055ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055cc:	2b00      	cmp	r3, #0
  4055ce:	f2c0 848b 	blt.w	405ee8 <_dtoa_r+0xce8>
  4055d2:	9d08      	ldr	r5, [sp, #32]
  4055d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055d6:	9a08      	ldr	r2, [sp, #32]
  4055d8:	441a      	add	r2, r3
  4055da:	9208      	str	r2, [sp, #32]
  4055dc:	9a06      	ldr	r2, [sp, #24]
  4055de:	2101      	movs	r1, #1
  4055e0:	441a      	add	r2, r3
  4055e2:	4620      	mov	r0, r4
  4055e4:	9206      	str	r2, [sp, #24]
  4055e6:	f001 f9f9 	bl	4069dc <__i2b>
  4055ea:	4606      	mov	r6, r0
  4055ec:	e024      	b.n	405638 <_dtoa_r+0x438>
  4055ee:	2301      	movs	r3, #1
  4055f0:	930e      	str	r3, [sp, #56]	; 0x38
  4055f2:	e6af      	b.n	405354 <_dtoa_r+0x154>
  4055f4:	9a08      	ldr	r2, [sp, #32]
  4055f6:	9b02      	ldr	r3, [sp, #8]
  4055f8:	1ad2      	subs	r2, r2, r3
  4055fa:	425b      	negs	r3, r3
  4055fc:	930c      	str	r3, [sp, #48]	; 0x30
  4055fe:	2300      	movs	r3, #0
  405600:	9208      	str	r2, [sp, #32]
  405602:	930d      	str	r3, [sp, #52]	; 0x34
  405604:	e6b8      	b.n	405378 <_dtoa_r+0x178>
  405606:	f1c7 0301 	rsb	r3, r7, #1
  40560a:	9308      	str	r3, [sp, #32]
  40560c:	2300      	movs	r3, #0
  40560e:	9306      	str	r3, [sp, #24]
  405610:	e6a7      	b.n	405362 <_dtoa_r+0x162>
  405612:	9d02      	ldr	r5, [sp, #8]
  405614:	4628      	mov	r0, r5
  405616:	f002 fae7 	bl	407be8 <__aeabi_i2d>
  40561a:	4602      	mov	r2, r0
  40561c:	460b      	mov	r3, r1
  40561e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405622:	f002 fdaf 	bl	408184 <__aeabi_dcmpeq>
  405626:	2800      	cmp	r0, #0
  405628:	f47f ae80 	bne.w	40532c <_dtoa_r+0x12c>
  40562c:	1e6b      	subs	r3, r5, #1
  40562e:	9302      	str	r3, [sp, #8]
  405630:	e67c      	b.n	40532c <_dtoa_r+0x12c>
  405632:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405634:	9d08      	ldr	r5, [sp, #32]
  405636:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405638:	2d00      	cmp	r5, #0
  40563a:	dd0c      	ble.n	405656 <_dtoa_r+0x456>
  40563c:	9906      	ldr	r1, [sp, #24]
  40563e:	2900      	cmp	r1, #0
  405640:	460b      	mov	r3, r1
  405642:	dd08      	ble.n	405656 <_dtoa_r+0x456>
  405644:	42a9      	cmp	r1, r5
  405646:	9a08      	ldr	r2, [sp, #32]
  405648:	bfa8      	it	ge
  40564a:	462b      	movge	r3, r5
  40564c:	1ad2      	subs	r2, r2, r3
  40564e:	1aed      	subs	r5, r5, r3
  405650:	1acb      	subs	r3, r1, r3
  405652:	9208      	str	r2, [sp, #32]
  405654:	9306      	str	r3, [sp, #24]
  405656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405658:	b1d3      	cbz	r3, 405690 <_dtoa_r+0x490>
  40565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40565c:	2b00      	cmp	r3, #0
  40565e:	f000 82b7 	beq.w	405bd0 <_dtoa_r+0x9d0>
  405662:	2f00      	cmp	r7, #0
  405664:	dd10      	ble.n	405688 <_dtoa_r+0x488>
  405666:	4631      	mov	r1, r6
  405668:	463a      	mov	r2, r7
  40566a:	4620      	mov	r0, r4
  40566c:	f001 fa52 	bl	406b14 <__pow5mult>
  405670:	464a      	mov	r2, r9
  405672:	4601      	mov	r1, r0
  405674:	4606      	mov	r6, r0
  405676:	4620      	mov	r0, r4
  405678:	f001 f9ba 	bl	4069f0 <__multiply>
  40567c:	4649      	mov	r1, r9
  40567e:	4680      	mov	r8, r0
  405680:	4620      	mov	r0, r4
  405682:	f001 f911 	bl	4068a8 <_Bfree>
  405686:	46c1      	mov	r9, r8
  405688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40568a:	1bda      	subs	r2, r3, r7
  40568c:	f040 82a1 	bne.w	405bd2 <_dtoa_r+0x9d2>
  405690:	2101      	movs	r1, #1
  405692:	4620      	mov	r0, r4
  405694:	f001 f9a2 	bl	4069dc <__i2b>
  405698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40569a:	2b00      	cmp	r3, #0
  40569c:	4680      	mov	r8, r0
  40569e:	dd1c      	ble.n	4056da <_dtoa_r+0x4da>
  4056a0:	4601      	mov	r1, r0
  4056a2:	461a      	mov	r2, r3
  4056a4:	4620      	mov	r0, r4
  4056a6:	f001 fa35 	bl	406b14 <__pow5mult>
  4056aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056ac:	2b01      	cmp	r3, #1
  4056ae:	4680      	mov	r8, r0
  4056b0:	f340 8254 	ble.w	405b5c <_dtoa_r+0x95c>
  4056b4:	2300      	movs	r3, #0
  4056b6:	930c      	str	r3, [sp, #48]	; 0x30
  4056b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4056bc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4056c0:	6918      	ldr	r0, [r3, #16]
  4056c2:	f001 f93b 	bl	40693c <__hi0bits>
  4056c6:	f1c0 0020 	rsb	r0, r0, #32
  4056ca:	e010      	b.n	4056ee <_dtoa_r+0x4ee>
  4056cc:	f1c3 0520 	rsb	r5, r3, #32
  4056d0:	fa0a f005 	lsl.w	r0, sl, r5
  4056d4:	e674      	b.n	4053c0 <_dtoa_r+0x1c0>
  4056d6:	900e      	str	r0, [sp, #56]	; 0x38
  4056d8:	e63c      	b.n	405354 <_dtoa_r+0x154>
  4056da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056dc:	2b01      	cmp	r3, #1
  4056de:	f340 8287 	ble.w	405bf0 <_dtoa_r+0x9f0>
  4056e2:	2300      	movs	r3, #0
  4056e4:	930c      	str	r3, [sp, #48]	; 0x30
  4056e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4056e8:	2001      	movs	r0, #1
  4056ea:	2b00      	cmp	r3, #0
  4056ec:	d1e4      	bne.n	4056b8 <_dtoa_r+0x4b8>
  4056ee:	9a06      	ldr	r2, [sp, #24]
  4056f0:	4410      	add	r0, r2
  4056f2:	f010 001f 	ands.w	r0, r0, #31
  4056f6:	f000 80a1 	beq.w	40583c <_dtoa_r+0x63c>
  4056fa:	f1c0 0320 	rsb	r3, r0, #32
  4056fe:	2b04      	cmp	r3, #4
  405700:	f340 849e 	ble.w	406040 <_dtoa_r+0xe40>
  405704:	9b08      	ldr	r3, [sp, #32]
  405706:	f1c0 001c 	rsb	r0, r0, #28
  40570a:	4403      	add	r3, r0
  40570c:	9308      	str	r3, [sp, #32]
  40570e:	4613      	mov	r3, r2
  405710:	4403      	add	r3, r0
  405712:	4405      	add	r5, r0
  405714:	9306      	str	r3, [sp, #24]
  405716:	9b08      	ldr	r3, [sp, #32]
  405718:	2b00      	cmp	r3, #0
  40571a:	dd05      	ble.n	405728 <_dtoa_r+0x528>
  40571c:	4649      	mov	r1, r9
  40571e:	461a      	mov	r2, r3
  405720:	4620      	mov	r0, r4
  405722:	f001 fa47 	bl	406bb4 <__lshift>
  405726:	4681      	mov	r9, r0
  405728:	9b06      	ldr	r3, [sp, #24]
  40572a:	2b00      	cmp	r3, #0
  40572c:	dd05      	ble.n	40573a <_dtoa_r+0x53a>
  40572e:	4641      	mov	r1, r8
  405730:	461a      	mov	r2, r3
  405732:	4620      	mov	r0, r4
  405734:	f001 fa3e 	bl	406bb4 <__lshift>
  405738:	4680      	mov	r8, r0
  40573a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40573c:	2b00      	cmp	r3, #0
  40573e:	f040 8086 	bne.w	40584e <_dtoa_r+0x64e>
  405742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405744:	2b00      	cmp	r3, #0
  405746:	f340 8266 	ble.w	405c16 <_dtoa_r+0xa16>
  40574a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40574c:	2b00      	cmp	r3, #0
  40574e:	f000 8098 	beq.w	405882 <_dtoa_r+0x682>
  405752:	2d00      	cmp	r5, #0
  405754:	dd05      	ble.n	405762 <_dtoa_r+0x562>
  405756:	4631      	mov	r1, r6
  405758:	462a      	mov	r2, r5
  40575a:	4620      	mov	r0, r4
  40575c:	f001 fa2a 	bl	406bb4 <__lshift>
  405760:	4606      	mov	r6, r0
  405762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405764:	2b00      	cmp	r3, #0
  405766:	f040 8337 	bne.w	405dd8 <_dtoa_r+0xbd8>
  40576a:	9606      	str	r6, [sp, #24]
  40576c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40576e:	9a04      	ldr	r2, [sp, #16]
  405770:	f8dd b018 	ldr.w	fp, [sp, #24]
  405774:	3b01      	subs	r3, #1
  405776:	18d3      	adds	r3, r2, r3
  405778:	930b      	str	r3, [sp, #44]	; 0x2c
  40577a:	f00a 0301 	and.w	r3, sl, #1
  40577e:	930c      	str	r3, [sp, #48]	; 0x30
  405780:	4617      	mov	r7, r2
  405782:	46c2      	mov	sl, r8
  405784:	4651      	mov	r1, sl
  405786:	4648      	mov	r0, r9
  405788:	f7ff fca4 	bl	4050d4 <quorem>
  40578c:	4631      	mov	r1, r6
  40578e:	4605      	mov	r5, r0
  405790:	4648      	mov	r0, r9
  405792:	f001 fa61 	bl	406c58 <__mcmp>
  405796:	465a      	mov	r2, fp
  405798:	900a      	str	r0, [sp, #40]	; 0x28
  40579a:	4651      	mov	r1, sl
  40579c:	4620      	mov	r0, r4
  40579e:	f001 fa77 	bl	406c90 <__mdiff>
  4057a2:	68c2      	ldr	r2, [r0, #12]
  4057a4:	4680      	mov	r8, r0
  4057a6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4057aa:	2a00      	cmp	r2, #0
  4057ac:	f040 822b 	bne.w	405c06 <_dtoa_r+0xa06>
  4057b0:	4601      	mov	r1, r0
  4057b2:	4648      	mov	r0, r9
  4057b4:	9308      	str	r3, [sp, #32]
  4057b6:	f001 fa4f 	bl	406c58 <__mcmp>
  4057ba:	4641      	mov	r1, r8
  4057bc:	9006      	str	r0, [sp, #24]
  4057be:	4620      	mov	r0, r4
  4057c0:	f001 f872 	bl	4068a8 <_Bfree>
  4057c4:	9a06      	ldr	r2, [sp, #24]
  4057c6:	9b08      	ldr	r3, [sp, #32]
  4057c8:	b932      	cbnz	r2, 4057d8 <_dtoa_r+0x5d8>
  4057ca:	9924      	ldr	r1, [sp, #144]	; 0x90
  4057cc:	b921      	cbnz	r1, 4057d8 <_dtoa_r+0x5d8>
  4057ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4057d0:	2a00      	cmp	r2, #0
  4057d2:	f000 83ef 	beq.w	405fb4 <_dtoa_r+0xdb4>
  4057d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4057d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4057da:	2900      	cmp	r1, #0
  4057dc:	f2c0 829f 	blt.w	405d1e <_dtoa_r+0xb1e>
  4057e0:	d105      	bne.n	4057ee <_dtoa_r+0x5ee>
  4057e2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4057e4:	b919      	cbnz	r1, 4057ee <_dtoa_r+0x5ee>
  4057e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4057e8:	2900      	cmp	r1, #0
  4057ea:	f000 8298 	beq.w	405d1e <_dtoa_r+0xb1e>
  4057ee:	2a00      	cmp	r2, #0
  4057f0:	f300 8306 	bgt.w	405e00 <_dtoa_r+0xc00>
  4057f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4057f6:	703b      	strb	r3, [r7, #0]
  4057f8:	f107 0801 	add.w	r8, r7, #1
  4057fc:	4297      	cmp	r7, r2
  4057fe:	4645      	mov	r5, r8
  405800:	f000 830c 	beq.w	405e1c <_dtoa_r+0xc1c>
  405804:	4649      	mov	r1, r9
  405806:	2300      	movs	r3, #0
  405808:	220a      	movs	r2, #10
  40580a:	4620      	mov	r0, r4
  40580c:	f001 f856 	bl	4068bc <__multadd>
  405810:	455e      	cmp	r6, fp
  405812:	4681      	mov	r9, r0
  405814:	4631      	mov	r1, r6
  405816:	f04f 0300 	mov.w	r3, #0
  40581a:	f04f 020a 	mov.w	r2, #10
  40581e:	4620      	mov	r0, r4
  405820:	f000 81eb 	beq.w	405bfa <_dtoa_r+0x9fa>
  405824:	f001 f84a 	bl	4068bc <__multadd>
  405828:	4659      	mov	r1, fp
  40582a:	4606      	mov	r6, r0
  40582c:	2300      	movs	r3, #0
  40582e:	220a      	movs	r2, #10
  405830:	4620      	mov	r0, r4
  405832:	f001 f843 	bl	4068bc <__multadd>
  405836:	4647      	mov	r7, r8
  405838:	4683      	mov	fp, r0
  40583a:	e7a3      	b.n	405784 <_dtoa_r+0x584>
  40583c:	201c      	movs	r0, #28
  40583e:	9b08      	ldr	r3, [sp, #32]
  405840:	4403      	add	r3, r0
  405842:	9308      	str	r3, [sp, #32]
  405844:	9b06      	ldr	r3, [sp, #24]
  405846:	4403      	add	r3, r0
  405848:	4405      	add	r5, r0
  40584a:	9306      	str	r3, [sp, #24]
  40584c:	e763      	b.n	405716 <_dtoa_r+0x516>
  40584e:	4641      	mov	r1, r8
  405850:	4648      	mov	r0, r9
  405852:	f001 fa01 	bl	406c58 <__mcmp>
  405856:	2800      	cmp	r0, #0
  405858:	f6bf af73 	bge.w	405742 <_dtoa_r+0x542>
  40585c:	9f02      	ldr	r7, [sp, #8]
  40585e:	4649      	mov	r1, r9
  405860:	2300      	movs	r3, #0
  405862:	220a      	movs	r2, #10
  405864:	4620      	mov	r0, r4
  405866:	3f01      	subs	r7, #1
  405868:	9702      	str	r7, [sp, #8]
  40586a:	f001 f827 	bl	4068bc <__multadd>
  40586e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405870:	4681      	mov	r9, r0
  405872:	2b00      	cmp	r3, #0
  405874:	f040 83b6 	bne.w	405fe4 <_dtoa_r+0xde4>
  405878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40587a:	2b00      	cmp	r3, #0
  40587c:	f340 83bf 	ble.w	405ffe <_dtoa_r+0xdfe>
  405880:	930a      	str	r3, [sp, #40]	; 0x28
  405882:	f8dd b010 	ldr.w	fp, [sp, #16]
  405886:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405888:	465d      	mov	r5, fp
  40588a:	e002      	b.n	405892 <_dtoa_r+0x692>
  40588c:	f001 f816 	bl	4068bc <__multadd>
  405890:	4681      	mov	r9, r0
  405892:	4641      	mov	r1, r8
  405894:	4648      	mov	r0, r9
  405896:	f7ff fc1d 	bl	4050d4 <quorem>
  40589a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40589e:	f805 ab01 	strb.w	sl, [r5], #1
  4058a2:	eba5 030b 	sub.w	r3, r5, fp
  4058a6:	42bb      	cmp	r3, r7
  4058a8:	f04f 020a 	mov.w	r2, #10
  4058ac:	f04f 0300 	mov.w	r3, #0
  4058b0:	4649      	mov	r1, r9
  4058b2:	4620      	mov	r0, r4
  4058b4:	dbea      	blt.n	40588c <_dtoa_r+0x68c>
  4058b6:	9b04      	ldr	r3, [sp, #16]
  4058b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4058ba:	2a01      	cmp	r2, #1
  4058bc:	bfac      	ite	ge
  4058be:	189b      	addge	r3, r3, r2
  4058c0:	3301      	addlt	r3, #1
  4058c2:	461d      	mov	r5, r3
  4058c4:	f04f 0b00 	mov.w	fp, #0
  4058c8:	4649      	mov	r1, r9
  4058ca:	2201      	movs	r2, #1
  4058cc:	4620      	mov	r0, r4
  4058ce:	f001 f971 	bl	406bb4 <__lshift>
  4058d2:	4641      	mov	r1, r8
  4058d4:	4681      	mov	r9, r0
  4058d6:	f001 f9bf 	bl	406c58 <__mcmp>
  4058da:	2800      	cmp	r0, #0
  4058dc:	f340 823d 	ble.w	405d5a <_dtoa_r+0xb5a>
  4058e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4058e4:	9904      	ldr	r1, [sp, #16]
  4058e6:	1e6b      	subs	r3, r5, #1
  4058e8:	e004      	b.n	4058f4 <_dtoa_r+0x6f4>
  4058ea:	428b      	cmp	r3, r1
  4058ec:	f000 81ae 	beq.w	405c4c <_dtoa_r+0xa4c>
  4058f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4058f4:	2a39      	cmp	r2, #57	; 0x39
  4058f6:	f103 0501 	add.w	r5, r3, #1
  4058fa:	d0f6      	beq.n	4058ea <_dtoa_r+0x6ea>
  4058fc:	3201      	adds	r2, #1
  4058fe:	701a      	strb	r2, [r3, #0]
  405900:	4641      	mov	r1, r8
  405902:	4620      	mov	r0, r4
  405904:	f000 ffd0 	bl	4068a8 <_Bfree>
  405908:	2e00      	cmp	r6, #0
  40590a:	f43f ae3d 	beq.w	405588 <_dtoa_r+0x388>
  40590e:	f1bb 0f00 	cmp.w	fp, #0
  405912:	d005      	beq.n	405920 <_dtoa_r+0x720>
  405914:	45b3      	cmp	fp, r6
  405916:	d003      	beq.n	405920 <_dtoa_r+0x720>
  405918:	4659      	mov	r1, fp
  40591a:	4620      	mov	r0, r4
  40591c:	f000 ffc4 	bl	4068a8 <_Bfree>
  405920:	4631      	mov	r1, r6
  405922:	4620      	mov	r0, r4
  405924:	f000 ffc0 	bl	4068a8 <_Bfree>
  405928:	e62e      	b.n	405588 <_dtoa_r+0x388>
  40592a:	2300      	movs	r3, #0
  40592c:	930b      	str	r3, [sp, #44]	; 0x2c
  40592e:	9b02      	ldr	r3, [sp, #8]
  405930:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405932:	4413      	add	r3, r2
  405934:	930f      	str	r3, [sp, #60]	; 0x3c
  405936:	3301      	adds	r3, #1
  405938:	2b01      	cmp	r3, #1
  40593a:	461f      	mov	r7, r3
  40593c:	461e      	mov	r6, r3
  40593e:	930a      	str	r3, [sp, #40]	; 0x28
  405940:	bfb8      	it	lt
  405942:	2701      	movlt	r7, #1
  405944:	2100      	movs	r1, #0
  405946:	2f17      	cmp	r7, #23
  405948:	6461      	str	r1, [r4, #68]	; 0x44
  40594a:	d90a      	bls.n	405962 <_dtoa_r+0x762>
  40594c:	2201      	movs	r2, #1
  40594e:	2304      	movs	r3, #4
  405950:	005b      	lsls	r3, r3, #1
  405952:	f103 0014 	add.w	r0, r3, #20
  405956:	4287      	cmp	r7, r0
  405958:	4611      	mov	r1, r2
  40595a:	f102 0201 	add.w	r2, r2, #1
  40595e:	d2f7      	bcs.n	405950 <_dtoa_r+0x750>
  405960:	6461      	str	r1, [r4, #68]	; 0x44
  405962:	4620      	mov	r0, r4
  405964:	f000 ff7a 	bl	40685c <_Balloc>
  405968:	2e0e      	cmp	r6, #14
  40596a:	9004      	str	r0, [sp, #16]
  40596c:	6420      	str	r0, [r4, #64]	; 0x40
  40596e:	f63f ad41 	bhi.w	4053f4 <_dtoa_r+0x1f4>
  405972:	2d00      	cmp	r5, #0
  405974:	f43f ad3e 	beq.w	4053f4 <_dtoa_r+0x1f4>
  405978:	9902      	ldr	r1, [sp, #8]
  40597a:	2900      	cmp	r1, #0
  40597c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405980:	f340 8202 	ble.w	405d88 <_dtoa_r+0xb88>
  405984:	4bb8      	ldr	r3, [pc, #736]	; (405c68 <_dtoa_r+0xa68>)
  405986:	f001 020f 	and.w	r2, r1, #15
  40598a:	110d      	asrs	r5, r1, #4
  40598c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405990:	06e9      	lsls	r1, r5, #27
  405992:	e9d3 6700 	ldrd	r6, r7, [r3]
  405996:	f140 81ae 	bpl.w	405cf6 <_dtoa_r+0xaf6>
  40599a:	4bb4      	ldr	r3, [pc, #720]	; (405c6c <_dtoa_r+0xa6c>)
  40599c:	4650      	mov	r0, sl
  40599e:	4659      	mov	r1, fp
  4059a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4059a4:	f002 fab0 	bl	407f08 <__aeabi_ddiv>
  4059a8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4059ac:	f005 050f 	and.w	r5, r5, #15
  4059b0:	f04f 0a03 	mov.w	sl, #3
  4059b4:	b18d      	cbz	r5, 4059da <_dtoa_r+0x7da>
  4059b6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405c6c <_dtoa_r+0xa6c>
  4059ba:	07ea      	lsls	r2, r5, #31
  4059bc:	d509      	bpl.n	4059d2 <_dtoa_r+0x7d2>
  4059be:	4630      	mov	r0, r6
  4059c0:	4639      	mov	r1, r7
  4059c2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4059c6:	f002 f975 	bl	407cb4 <__aeabi_dmul>
  4059ca:	f10a 0a01 	add.w	sl, sl, #1
  4059ce:	4606      	mov	r6, r0
  4059d0:	460f      	mov	r7, r1
  4059d2:	106d      	asrs	r5, r5, #1
  4059d4:	f108 0808 	add.w	r8, r8, #8
  4059d8:	d1ef      	bne.n	4059ba <_dtoa_r+0x7ba>
  4059da:	463b      	mov	r3, r7
  4059dc:	4632      	mov	r2, r6
  4059de:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4059e2:	f002 fa91 	bl	407f08 <__aeabi_ddiv>
  4059e6:	4607      	mov	r7, r0
  4059e8:	4688      	mov	r8, r1
  4059ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4059ec:	b143      	cbz	r3, 405a00 <_dtoa_r+0x800>
  4059ee:	2200      	movs	r2, #0
  4059f0:	4b9f      	ldr	r3, [pc, #636]	; (405c70 <_dtoa_r+0xa70>)
  4059f2:	4638      	mov	r0, r7
  4059f4:	4641      	mov	r1, r8
  4059f6:	f002 fbcf 	bl	408198 <__aeabi_dcmplt>
  4059fa:	2800      	cmp	r0, #0
  4059fc:	f040 8286 	bne.w	405f0c <_dtoa_r+0xd0c>
  405a00:	4650      	mov	r0, sl
  405a02:	f002 f8f1 	bl	407be8 <__aeabi_i2d>
  405a06:	463a      	mov	r2, r7
  405a08:	4643      	mov	r3, r8
  405a0a:	f002 f953 	bl	407cb4 <__aeabi_dmul>
  405a0e:	4b99      	ldr	r3, [pc, #612]	; (405c74 <_dtoa_r+0xa74>)
  405a10:	2200      	movs	r2, #0
  405a12:	f001 ff9d 	bl	407950 <__adddf3>
  405a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a18:	4605      	mov	r5, r0
  405a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405a1e:	2b00      	cmp	r3, #0
  405a20:	f000 813e 	beq.w	405ca0 <_dtoa_r+0xaa0>
  405a24:	9b02      	ldr	r3, [sp, #8]
  405a26:	9315      	str	r3, [sp, #84]	; 0x54
  405a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a2a:	9312      	str	r3, [sp, #72]	; 0x48
  405a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a2e:	2b00      	cmp	r3, #0
  405a30:	f000 81fa 	beq.w	405e28 <_dtoa_r+0xc28>
  405a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405a36:	4b8c      	ldr	r3, [pc, #560]	; (405c68 <_dtoa_r+0xa68>)
  405a38:	498f      	ldr	r1, [pc, #572]	; (405c78 <_dtoa_r+0xa78>)
  405a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405a3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405a42:	2000      	movs	r0, #0
  405a44:	f002 fa60 	bl	407f08 <__aeabi_ddiv>
  405a48:	462a      	mov	r2, r5
  405a4a:	4633      	mov	r3, r6
  405a4c:	f001 ff7e 	bl	40794c <__aeabi_dsub>
  405a50:	4682      	mov	sl, r0
  405a52:	468b      	mov	fp, r1
  405a54:	4638      	mov	r0, r7
  405a56:	4641      	mov	r1, r8
  405a58:	f002 fbdc 	bl	408214 <__aeabi_d2iz>
  405a5c:	4605      	mov	r5, r0
  405a5e:	f002 f8c3 	bl	407be8 <__aeabi_i2d>
  405a62:	4602      	mov	r2, r0
  405a64:	460b      	mov	r3, r1
  405a66:	4638      	mov	r0, r7
  405a68:	4641      	mov	r1, r8
  405a6a:	f001 ff6f 	bl	40794c <__aeabi_dsub>
  405a6e:	3530      	adds	r5, #48	; 0x30
  405a70:	fa5f f885 	uxtb.w	r8, r5
  405a74:	9d04      	ldr	r5, [sp, #16]
  405a76:	4606      	mov	r6, r0
  405a78:	460f      	mov	r7, r1
  405a7a:	f885 8000 	strb.w	r8, [r5]
  405a7e:	4602      	mov	r2, r0
  405a80:	460b      	mov	r3, r1
  405a82:	4650      	mov	r0, sl
  405a84:	4659      	mov	r1, fp
  405a86:	3501      	adds	r5, #1
  405a88:	f002 fba4 	bl	4081d4 <__aeabi_dcmpgt>
  405a8c:	2800      	cmp	r0, #0
  405a8e:	d154      	bne.n	405b3a <_dtoa_r+0x93a>
  405a90:	4632      	mov	r2, r6
  405a92:	463b      	mov	r3, r7
  405a94:	2000      	movs	r0, #0
  405a96:	4976      	ldr	r1, [pc, #472]	; (405c70 <_dtoa_r+0xa70>)
  405a98:	f001 ff58 	bl	40794c <__aeabi_dsub>
  405a9c:	4602      	mov	r2, r0
  405a9e:	460b      	mov	r3, r1
  405aa0:	4650      	mov	r0, sl
  405aa2:	4659      	mov	r1, fp
  405aa4:	f002 fb96 	bl	4081d4 <__aeabi_dcmpgt>
  405aa8:	2800      	cmp	r0, #0
  405aaa:	f040 8270 	bne.w	405f8e <_dtoa_r+0xd8e>
  405aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405ab0:	2a01      	cmp	r2, #1
  405ab2:	f000 8111 	beq.w	405cd8 <_dtoa_r+0xad8>
  405ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ab8:	9a04      	ldr	r2, [sp, #16]
  405aba:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405abe:	4413      	add	r3, r2
  405ac0:	4699      	mov	r9, r3
  405ac2:	e00d      	b.n	405ae0 <_dtoa_r+0x8e0>
  405ac4:	2000      	movs	r0, #0
  405ac6:	496a      	ldr	r1, [pc, #424]	; (405c70 <_dtoa_r+0xa70>)
  405ac8:	f001 ff40 	bl	40794c <__aeabi_dsub>
  405acc:	4652      	mov	r2, sl
  405ace:	465b      	mov	r3, fp
  405ad0:	f002 fb62 	bl	408198 <__aeabi_dcmplt>
  405ad4:	2800      	cmp	r0, #0
  405ad6:	f040 8258 	bne.w	405f8a <_dtoa_r+0xd8a>
  405ada:	454d      	cmp	r5, r9
  405adc:	f000 80fa 	beq.w	405cd4 <_dtoa_r+0xad4>
  405ae0:	4650      	mov	r0, sl
  405ae2:	4659      	mov	r1, fp
  405ae4:	2200      	movs	r2, #0
  405ae6:	4b65      	ldr	r3, [pc, #404]	; (405c7c <_dtoa_r+0xa7c>)
  405ae8:	f002 f8e4 	bl	407cb4 <__aeabi_dmul>
  405aec:	2200      	movs	r2, #0
  405aee:	4b63      	ldr	r3, [pc, #396]	; (405c7c <_dtoa_r+0xa7c>)
  405af0:	4682      	mov	sl, r0
  405af2:	468b      	mov	fp, r1
  405af4:	4630      	mov	r0, r6
  405af6:	4639      	mov	r1, r7
  405af8:	f002 f8dc 	bl	407cb4 <__aeabi_dmul>
  405afc:	460f      	mov	r7, r1
  405afe:	4606      	mov	r6, r0
  405b00:	f002 fb88 	bl	408214 <__aeabi_d2iz>
  405b04:	4680      	mov	r8, r0
  405b06:	f002 f86f 	bl	407be8 <__aeabi_i2d>
  405b0a:	4602      	mov	r2, r0
  405b0c:	460b      	mov	r3, r1
  405b0e:	4630      	mov	r0, r6
  405b10:	4639      	mov	r1, r7
  405b12:	f001 ff1b 	bl	40794c <__aeabi_dsub>
  405b16:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405b1a:	fa5f f888 	uxtb.w	r8, r8
  405b1e:	4652      	mov	r2, sl
  405b20:	465b      	mov	r3, fp
  405b22:	f805 8b01 	strb.w	r8, [r5], #1
  405b26:	4606      	mov	r6, r0
  405b28:	460f      	mov	r7, r1
  405b2a:	f002 fb35 	bl	408198 <__aeabi_dcmplt>
  405b2e:	4632      	mov	r2, r6
  405b30:	463b      	mov	r3, r7
  405b32:	2800      	cmp	r0, #0
  405b34:	d0c6      	beq.n	405ac4 <_dtoa_r+0x8c4>
  405b36:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405b3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b3c:	9302      	str	r3, [sp, #8]
  405b3e:	e523      	b.n	405588 <_dtoa_r+0x388>
  405b40:	2300      	movs	r3, #0
  405b42:	930b      	str	r3, [sp, #44]	; 0x2c
  405b44:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405b46:	2b00      	cmp	r3, #0
  405b48:	f340 80dc 	ble.w	405d04 <_dtoa_r+0xb04>
  405b4c:	461f      	mov	r7, r3
  405b4e:	461e      	mov	r6, r3
  405b50:	930f      	str	r3, [sp, #60]	; 0x3c
  405b52:	930a      	str	r3, [sp, #40]	; 0x28
  405b54:	e6f6      	b.n	405944 <_dtoa_r+0x744>
  405b56:	2301      	movs	r3, #1
  405b58:	930b      	str	r3, [sp, #44]	; 0x2c
  405b5a:	e7f3      	b.n	405b44 <_dtoa_r+0x944>
  405b5c:	f1ba 0f00 	cmp.w	sl, #0
  405b60:	f47f ada8 	bne.w	4056b4 <_dtoa_r+0x4b4>
  405b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405b68:	2b00      	cmp	r3, #0
  405b6a:	f47f adba 	bne.w	4056e2 <_dtoa_r+0x4e2>
  405b6e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405b72:	0d3f      	lsrs	r7, r7, #20
  405b74:	053f      	lsls	r7, r7, #20
  405b76:	2f00      	cmp	r7, #0
  405b78:	f000 820d 	beq.w	405f96 <_dtoa_r+0xd96>
  405b7c:	9b08      	ldr	r3, [sp, #32]
  405b7e:	3301      	adds	r3, #1
  405b80:	9308      	str	r3, [sp, #32]
  405b82:	9b06      	ldr	r3, [sp, #24]
  405b84:	3301      	adds	r3, #1
  405b86:	9306      	str	r3, [sp, #24]
  405b88:	2301      	movs	r3, #1
  405b8a:	930c      	str	r3, [sp, #48]	; 0x30
  405b8c:	e5ab      	b.n	4056e6 <_dtoa_r+0x4e6>
  405b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b90:	2b00      	cmp	r3, #0
  405b92:	f73f ac42 	bgt.w	40541a <_dtoa_r+0x21a>
  405b96:	f040 8221 	bne.w	405fdc <_dtoa_r+0xddc>
  405b9a:	2200      	movs	r2, #0
  405b9c:	4b38      	ldr	r3, [pc, #224]	; (405c80 <_dtoa_r+0xa80>)
  405b9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405ba2:	f002 f887 	bl	407cb4 <__aeabi_dmul>
  405ba6:	4652      	mov	r2, sl
  405ba8:	465b      	mov	r3, fp
  405baa:	f002 fb09 	bl	4081c0 <__aeabi_dcmpge>
  405bae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405bb2:	4646      	mov	r6, r8
  405bb4:	2800      	cmp	r0, #0
  405bb6:	d041      	beq.n	405c3c <_dtoa_r+0xa3c>
  405bb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bba:	9d04      	ldr	r5, [sp, #16]
  405bbc:	43db      	mvns	r3, r3
  405bbe:	9302      	str	r3, [sp, #8]
  405bc0:	4641      	mov	r1, r8
  405bc2:	4620      	mov	r0, r4
  405bc4:	f000 fe70 	bl	4068a8 <_Bfree>
  405bc8:	2e00      	cmp	r6, #0
  405bca:	f43f acdd 	beq.w	405588 <_dtoa_r+0x388>
  405bce:	e6a7      	b.n	405920 <_dtoa_r+0x720>
  405bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405bd2:	4649      	mov	r1, r9
  405bd4:	4620      	mov	r0, r4
  405bd6:	f000 ff9d 	bl	406b14 <__pow5mult>
  405bda:	4681      	mov	r9, r0
  405bdc:	e558      	b.n	405690 <_dtoa_r+0x490>
  405bde:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405be0:	2a00      	cmp	r2, #0
  405be2:	f000 8187 	beq.w	405ef4 <_dtoa_r+0xcf4>
  405be6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405bea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405bec:	9d08      	ldr	r5, [sp, #32]
  405bee:	e4f2      	b.n	4055d6 <_dtoa_r+0x3d6>
  405bf0:	f1ba 0f00 	cmp.w	sl, #0
  405bf4:	f47f ad75 	bne.w	4056e2 <_dtoa_r+0x4e2>
  405bf8:	e7b4      	b.n	405b64 <_dtoa_r+0x964>
  405bfa:	f000 fe5f 	bl	4068bc <__multadd>
  405bfe:	4647      	mov	r7, r8
  405c00:	4606      	mov	r6, r0
  405c02:	4683      	mov	fp, r0
  405c04:	e5be      	b.n	405784 <_dtoa_r+0x584>
  405c06:	4601      	mov	r1, r0
  405c08:	4620      	mov	r0, r4
  405c0a:	9306      	str	r3, [sp, #24]
  405c0c:	f000 fe4c 	bl	4068a8 <_Bfree>
  405c10:	2201      	movs	r2, #1
  405c12:	9b06      	ldr	r3, [sp, #24]
  405c14:	e5e0      	b.n	4057d8 <_dtoa_r+0x5d8>
  405c16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c18:	2b02      	cmp	r3, #2
  405c1a:	f77f ad96 	ble.w	40574a <_dtoa_r+0x54a>
  405c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c20:	2b00      	cmp	r3, #0
  405c22:	d1c9      	bne.n	405bb8 <_dtoa_r+0x9b8>
  405c24:	4641      	mov	r1, r8
  405c26:	2205      	movs	r2, #5
  405c28:	4620      	mov	r0, r4
  405c2a:	f000 fe47 	bl	4068bc <__multadd>
  405c2e:	4601      	mov	r1, r0
  405c30:	4680      	mov	r8, r0
  405c32:	4648      	mov	r0, r9
  405c34:	f001 f810 	bl	406c58 <__mcmp>
  405c38:	2800      	cmp	r0, #0
  405c3a:	ddbd      	ble.n	405bb8 <_dtoa_r+0x9b8>
  405c3c:	9a02      	ldr	r2, [sp, #8]
  405c3e:	9904      	ldr	r1, [sp, #16]
  405c40:	2331      	movs	r3, #49	; 0x31
  405c42:	3201      	adds	r2, #1
  405c44:	9202      	str	r2, [sp, #8]
  405c46:	700b      	strb	r3, [r1, #0]
  405c48:	1c4d      	adds	r5, r1, #1
  405c4a:	e7b9      	b.n	405bc0 <_dtoa_r+0x9c0>
  405c4c:	9a02      	ldr	r2, [sp, #8]
  405c4e:	3201      	adds	r2, #1
  405c50:	9202      	str	r2, [sp, #8]
  405c52:	9a04      	ldr	r2, [sp, #16]
  405c54:	2331      	movs	r3, #49	; 0x31
  405c56:	7013      	strb	r3, [r2, #0]
  405c58:	e652      	b.n	405900 <_dtoa_r+0x700>
  405c5a:	2301      	movs	r3, #1
  405c5c:	930b      	str	r3, [sp, #44]	; 0x2c
  405c5e:	e666      	b.n	40592e <_dtoa_r+0x72e>
  405c60:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405c64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405c66:	e48f      	b.n	405588 <_dtoa_r+0x388>
  405c68:	00408fb8 	.word	0x00408fb8
  405c6c:	00408f90 	.word	0x00408f90
  405c70:	3ff00000 	.word	0x3ff00000
  405c74:	401c0000 	.word	0x401c0000
  405c78:	3fe00000 	.word	0x3fe00000
  405c7c:	40240000 	.word	0x40240000
  405c80:	40140000 	.word	0x40140000
  405c84:	4650      	mov	r0, sl
  405c86:	f001 ffaf 	bl	407be8 <__aeabi_i2d>
  405c8a:	463a      	mov	r2, r7
  405c8c:	4643      	mov	r3, r8
  405c8e:	f002 f811 	bl	407cb4 <__aeabi_dmul>
  405c92:	2200      	movs	r2, #0
  405c94:	4bc1      	ldr	r3, [pc, #772]	; (405f9c <_dtoa_r+0xd9c>)
  405c96:	f001 fe5b 	bl	407950 <__adddf3>
  405c9a:	4605      	mov	r5, r0
  405c9c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405ca0:	4641      	mov	r1, r8
  405ca2:	2200      	movs	r2, #0
  405ca4:	4bbe      	ldr	r3, [pc, #760]	; (405fa0 <_dtoa_r+0xda0>)
  405ca6:	4638      	mov	r0, r7
  405ca8:	f001 fe50 	bl	40794c <__aeabi_dsub>
  405cac:	462a      	mov	r2, r5
  405cae:	4633      	mov	r3, r6
  405cb0:	4682      	mov	sl, r0
  405cb2:	468b      	mov	fp, r1
  405cb4:	f002 fa8e 	bl	4081d4 <__aeabi_dcmpgt>
  405cb8:	4680      	mov	r8, r0
  405cba:	2800      	cmp	r0, #0
  405cbc:	f040 8110 	bne.w	405ee0 <_dtoa_r+0xce0>
  405cc0:	462a      	mov	r2, r5
  405cc2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405cc6:	4650      	mov	r0, sl
  405cc8:	4659      	mov	r1, fp
  405cca:	f002 fa65 	bl	408198 <__aeabi_dcmplt>
  405cce:	b118      	cbz	r0, 405cd8 <_dtoa_r+0xad8>
  405cd0:	4646      	mov	r6, r8
  405cd2:	e771      	b.n	405bb8 <_dtoa_r+0x9b8>
  405cd4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405cd8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405cdc:	f7ff bb8a 	b.w	4053f4 <_dtoa_r+0x1f4>
  405ce0:	9804      	ldr	r0, [sp, #16]
  405ce2:	f7ff babb 	b.w	40525c <_dtoa_r+0x5c>
  405ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405cea:	970c      	str	r7, [sp, #48]	; 0x30
  405cec:	1afb      	subs	r3, r7, r3
  405cee:	441a      	add	r2, r3
  405cf0:	920d      	str	r2, [sp, #52]	; 0x34
  405cf2:	2700      	movs	r7, #0
  405cf4:	e469      	b.n	4055ca <_dtoa_r+0x3ca>
  405cf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405cfa:	f04f 0a02 	mov.w	sl, #2
  405cfe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405d02:	e657      	b.n	4059b4 <_dtoa_r+0x7b4>
  405d04:	2100      	movs	r1, #0
  405d06:	2301      	movs	r3, #1
  405d08:	6461      	str	r1, [r4, #68]	; 0x44
  405d0a:	4620      	mov	r0, r4
  405d0c:	9325      	str	r3, [sp, #148]	; 0x94
  405d0e:	f000 fda5 	bl	40685c <_Balloc>
  405d12:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405d14:	9004      	str	r0, [sp, #16]
  405d16:	6420      	str	r0, [r4, #64]	; 0x40
  405d18:	930a      	str	r3, [sp, #40]	; 0x28
  405d1a:	930f      	str	r3, [sp, #60]	; 0x3c
  405d1c:	e629      	b.n	405972 <_dtoa_r+0x772>
  405d1e:	2a00      	cmp	r2, #0
  405d20:	46d0      	mov	r8, sl
  405d22:	f8cd b018 	str.w	fp, [sp, #24]
  405d26:	469a      	mov	sl, r3
  405d28:	dd11      	ble.n	405d4e <_dtoa_r+0xb4e>
  405d2a:	4649      	mov	r1, r9
  405d2c:	2201      	movs	r2, #1
  405d2e:	4620      	mov	r0, r4
  405d30:	f000 ff40 	bl	406bb4 <__lshift>
  405d34:	4641      	mov	r1, r8
  405d36:	4681      	mov	r9, r0
  405d38:	f000 ff8e 	bl	406c58 <__mcmp>
  405d3c:	2800      	cmp	r0, #0
  405d3e:	f340 8146 	ble.w	405fce <_dtoa_r+0xdce>
  405d42:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405d46:	f000 8106 	beq.w	405f56 <_dtoa_r+0xd56>
  405d4a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405d4e:	46b3      	mov	fp, r6
  405d50:	f887 a000 	strb.w	sl, [r7]
  405d54:	1c7d      	adds	r5, r7, #1
  405d56:	9e06      	ldr	r6, [sp, #24]
  405d58:	e5d2      	b.n	405900 <_dtoa_r+0x700>
  405d5a:	d104      	bne.n	405d66 <_dtoa_r+0xb66>
  405d5c:	f01a 0f01 	tst.w	sl, #1
  405d60:	d001      	beq.n	405d66 <_dtoa_r+0xb66>
  405d62:	e5bd      	b.n	4058e0 <_dtoa_r+0x6e0>
  405d64:	4615      	mov	r5, r2
  405d66:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405d6a:	2b30      	cmp	r3, #48	; 0x30
  405d6c:	f105 32ff 	add.w	r2, r5, #4294967295
  405d70:	d0f8      	beq.n	405d64 <_dtoa_r+0xb64>
  405d72:	e5c5      	b.n	405900 <_dtoa_r+0x700>
  405d74:	9904      	ldr	r1, [sp, #16]
  405d76:	2230      	movs	r2, #48	; 0x30
  405d78:	700a      	strb	r2, [r1, #0]
  405d7a:	9a02      	ldr	r2, [sp, #8]
  405d7c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405d80:	3201      	adds	r2, #1
  405d82:	9202      	str	r2, [sp, #8]
  405d84:	f7ff bbfc 	b.w	405580 <_dtoa_r+0x380>
  405d88:	f000 80bb 	beq.w	405f02 <_dtoa_r+0xd02>
  405d8c:	9b02      	ldr	r3, [sp, #8]
  405d8e:	425d      	negs	r5, r3
  405d90:	4b84      	ldr	r3, [pc, #528]	; (405fa4 <_dtoa_r+0xda4>)
  405d92:	f005 020f 	and.w	r2, r5, #15
  405d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405da2:	f001 ff87 	bl	407cb4 <__aeabi_dmul>
  405da6:	112d      	asrs	r5, r5, #4
  405da8:	4607      	mov	r7, r0
  405daa:	4688      	mov	r8, r1
  405dac:	f000 812c 	beq.w	406008 <_dtoa_r+0xe08>
  405db0:	4e7d      	ldr	r6, [pc, #500]	; (405fa8 <_dtoa_r+0xda8>)
  405db2:	f04f 0a02 	mov.w	sl, #2
  405db6:	07eb      	lsls	r3, r5, #31
  405db8:	d509      	bpl.n	405dce <_dtoa_r+0xbce>
  405dba:	4638      	mov	r0, r7
  405dbc:	4641      	mov	r1, r8
  405dbe:	e9d6 2300 	ldrd	r2, r3, [r6]
  405dc2:	f001 ff77 	bl	407cb4 <__aeabi_dmul>
  405dc6:	f10a 0a01 	add.w	sl, sl, #1
  405dca:	4607      	mov	r7, r0
  405dcc:	4688      	mov	r8, r1
  405dce:	106d      	asrs	r5, r5, #1
  405dd0:	f106 0608 	add.w	r6, r6, #8
  405dd4:	d1ef      	bne.n	405db6 <_dtoa_r+0xbb6>
  405dd6:	e608      	b.n	4059ea <_dtoa_r+0x7ea>
  405dd8:	6871      	ldr	r1, [r6, #4]
  405dda:	4620      	mov	r0, r4
  405ddc:	f000 fd3e 	bl	40685c <_Balloc>
  405de0:	6933      	ldr	r3, [r6, #16]
  405de2:	3302      	adds	r3, #2
  405de4:	009a      	lsls	r2, r3, #2
  405de6:	4605      	mov	r5, r0
  405de8:	f106 010c 	add.w	r1, r6, #12
  405dec:	300c      	adds	r0, #12
  405dee:	f000 fc8f 	bl	406710 <memcpy>
  405df2:	4629      	mov	r1, r5
  405df4:	2201      	movs	r2, #1
  405df6:	4620      	mov	r0, r4
  405df8:	f000 fedc 	bl	406bb4 <__lshift>
  405dfc:	9006      	str	r0, [sp, #24]
  405dfe:	e4b5      	b.n	40576c <_dtoa_r+0x56c>
  405e00:	2b39      	cmp	r3, #57	; 0x39
  405e02:	f8cd b018 	str.w	fp, [sp, #24]
  405e06:	46d0      	mov	r8, sl
  405e08:	f000 80a5 	beq.w	405f56 <_dtoa_r+0xd56>
  405e0c:	f103 0a01 	add.w	sl, r3, #1
  405e10:	46b3      	mov	fp, r6
  405e12:	f887 a000 	strb.w	sl, [r7]
  405e16:	1c7d      	adds	r5, r7, #1
  405e18:	9e06      	ldr	r6, [sp, #24]
  405e1a:	e571      	b.n	405900 <_dtoa_r+0x700>
  405e1c:	465a      	mov	r2, fp
  405e1e:	46d0      	mov	r8, sl
  405e20:	46b3      	mov	fp, r6
  405e22:	469a      	mov	sl, r3
  405e24:	4616      	mov	r6, r2
  405e26:	e54f      	b.n	4058c8 <_dtoa_r+0x6c8>
  405e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405e2a:	495e      	ldr	r1, [pc, #376]	; (405fa4 <_dtoa_r+0xda4>)
  405e2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405e30:	462a      	mov	r2, r5
  405e32:	4633      	mov	r3, r6
  405e34:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405e38:	f001 ff3c 	bl	407cb4 <__aeabi_dmul>
  405e3c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405e40:	4638      	mov	r0, r7
  405e42:	4641      	mov	r1, r8
  405e44:	f002 f9e6 	bl	408214 <__aeabi_d2iz>
  405e48:	4605      	mov	r5, r0
  405e4a:	f001 fecd 	bl	407be8 <__aeabi_i2d>
  405e4e:	460b      	mov	r3, r1
  405e50:	4602      	mov	r2, r0
  405e52:	4641      	mov	r1, r8
  405e54:	4638      	mov	r0, r7
  405e56:	f001 fd79 	bl	40794c <__aeabi_dsub>
  405e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405e5c:	460f      	mov	r7, r1
  405e5e:	9904      	ldr	r1, [sp, #16]
  405e60:	3530      	adds	r5, #48	; 0x30
  405e62:	2b01      	cmp	r3, #1
  405e64:	700d      	strb	r5, [r1, #0]
  405e66:	4606      	mov	r6, r0
  405e68:	f101 0501 	add.w	r5, r1, #1
  405e6c:	d026      	beq.n	405ebc <_dtoa_r+0xcbc>
  405e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405e70:	9a04      	ldr	r2, [sp, #16]
  405e72:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405fb0 <_dtoa_r+0xdb0>
  405e76:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405e7a:	4413      	add	r3, r2
  405e7c:	f04f 0a00 	mov.w	sl, #0
  405e80:	4699      	mov	r9, r3
  405e82:	4652      	mov	r2, sl
  405e84:	465b      	mov	r3, fp
  405e86:	4630      	mov	r0, r6
  405e88:	4639      	mov	r1, r7
  405e8a:	f001 ff13 	bl	407cb4 <__aeabi_dmul>
  405e8e:	460f      	mov	r7, r1
  405e90:	4606      	mov	r6, r0
  405e92:	f002 f9bf 	bl	408214 <__aeabi_d2iz>
  405e96:	4680      	mov	r8, r0
  405e98:	f001 fea6 	bl	407be8 <__aeabi_i2d>
  405e9c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405ea0:	4602      	mov	r2, r0
  405ea2:	460b      	mov	r3, r1
  405ea4:	4630      	mov	r0, r6
  405ea6:	4639      	mov	r1, r7
  405ea8:	f001 fd50 	bl	40794c <__aeabi_dsub>
  405eac:	f805 8b01 	strb.w	r8, [r5], #1
  405eb0:	454d      	cmp	r5, r9
  405eb2:	4606      	mov	r6, r0
  405eb4:	460f      	mov	r7, r1
  405eb6:	d1e4      	bne.n	405e82 <_dtoa_r+0xc82>
  405eb8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405ebc:	4b3b      	ldr	r3, [pc, #236]	; (405fac <_dtoa_r+0xdac>)
  405ebe:	2200      	movs	r2, #0
  405ec0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405ec4:	f001 fd44 	bl	407950 <__adddf3>
  405ec8:	4632      	mov	r2, r6
  405eca:	463b      	mov	r3, r7
  405ecc:	f002 f964 	bl	408198 <__aeabi_dcmplt>
  405ed0:	2800      	cmp	r0, #0
  405ed2:	d046      	beq.n	405f62 <_dtoa_r+0xd62>
  405ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405ed6:	9302      	str	r3, [sp, #8]
  405ed8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405edc:	f7ff bb43 	b.w	405566 <_dtoa_r+0x366>
  405ee0:	f04f 0800 	mov.w	r8, #0
  405ee4:	4646      	mov	r6, r8
  405ee6:	e6a9      	b.n	405c3c <_dtoa_r+0xa3c>
  405ee8:	9b08      	ldr	r3, [sp, #32]
  405eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405eec:	1a9d      	subs	r5, r3, r2
  405eee:	2300      	movs	r3, #0
  405ef0:	f7ff bb71 	b.w	4055d6 <_dtoa_r+0x3d6>
  405ef4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405ef6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405ef8:	9d08      	ldr	r5, [sp, #32]
  405efa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405efe:	f7ff bb6a 	b.w	4055d6 <_dtoa_r+0x3d6>
  405f02:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405f06:	f04f 0a02 	mov.w	sl, #2
  405f0a:	e56e      	b.n	4059ea <_dtoa_r+0x7ea>
  405f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f0e:	2b00      	cmp	r3, #0
  405f10:	f43f aeb8 	beq.w	405c84 <_dtoa_r+0xa84>
  405f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f16:	2b00      	cmp	r3, #0
  405f18:	f77f aede 	ble.w	405cd8 <_dtoa_r+0xad8>
  405f1c:	2200      	movs	r2, #0
  405f1e:	4b24      	ldr	r3, [pc, #144]	; (405fb0 <_dtoa_r+0xdb0>)
  405f20:	4638      	mov	r0, r7
  405f22:	4641      	mov	r1, r8
  405f24:	f001 fec6 	bl	407cb4 <__aeabi_dmul>
  405f28:	4607      	mov	r7, r0
  405f2a:	4688      	mov	r8, r1
  405f2c:	f10a 0001 	add.w	r0, sl, #1
  405f30:	f001 fe5a 	bl	407be8 <__aeabi_i2d>
  405f34:	463a      	mov	r2, r7
  405f36:	4643      	mov	r3, r8
  405f38:	f001 febc 	bl	407cb4 <__aeabi_dmul>
  405f3c:	2200      	movs	r2, #0
  405f3e:	4b17      	ldr	r3, [pc, #92]	; (405f9c <_dtoa_r+0xd9c>)
  405f40:	f001 fd06 	bl	407950 <__adddf3>
  405f44:	9a02      	ldr	r2, [sp, #8]
  405f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f48:	9312      	str	r3, [sp, #72]	; 0x48
  405f4a:	3a01      	subs	r2, #1
  405f4c:	4605      	mov	r5, r0
  405f4e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405f52:	9215      	str	r2, [sp, #84]	; 0x54
  405f54:	e56a      	b.n	405a2c <_dtoa_r+0x82c>
  405f56:	2239      	movs	r2, #57	; 0x39
  405f58:	46b3      	mov	fp, r6
  405f5a:	703a      	strb	r2, [r7, #0]
  405f5c:	9e06      	ldr	r6, [sp, #24]
  405f5e:	1c7d      	adds	r5, r7, #1
  405f60:	e4c0      	b.n	4058e4 <_dtoa_r+0x6e4>
  405f62:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405f66:	2000      	movs	r0, #0
  405f68:	4910      	ldr	r1, [pc, #64]	; (405fac <_dtoa_r+0xdac>)
  405f6a:	f001 fcef 	bl	40794c <__aeabi_dsub>
  405f6e:	4632      	mov	r2, r6
  405f70:	463b      	mov	r3, r7
  405f72:	f002 f92f 	bl	4081d4 <__aeabi_dcmpgt>
  405f76:	b908      	cbnz	r0, 405f7c <_dtoa_r+0xd7c>
  405f78:	e6ae      	b.n	405cd8 <_dtoa_r+0xad8>
  405f7a:	4615      	mov	r5, r2
  405f7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405f80:	2b30      	cmp	r3, #48	; 0x30
  405f82:	f105 32ff 	add.w	r2, r5, #4294967295
  405f86:	d0f8      	beq.n	405f7a <_dtoa_r+0xd7a>
  405f88:	e5d7      	b.n	405b3a <_dtoa_r+0x93a>
  405f8a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405f8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405f90:	9302      	str	r3, [sp, #8]
  405f92:	f7ff bae8 	b.w	405566 <_dtoa_r+0x366>
  405f96:	970c      	str	r7, [sp, #48]	; 0x30
  405f98:	f7ff bba5 	b.w	4056e6 <_dtoa_r+0x4e6>
  405f9c:	401c0000 	.word	0x401c0000
  405fa0:	40140000 	.word	0x40140000
  405fa4:	00408fb8 	.word	0x00408fb8
  405fa8:	00408f90 	.word	0x00408f90
  405fac:	3fe00000 	.word	0x3fe00000
  405fb0:	40240000 	.word	0x40240000
  405fb4:	2b39      	cmp	r3, #57	; 0x39
  405fb6:	f8cd b018 	str.w	fp, [sp, #24]
  405fba:	46d0      	mov	r8, sl
  405fbc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405fc0:	469a      	mov	sl, r3
  405fc2:	d0c8      	beq.n	405f56 <_dtoa_r+0xd56>
  405fc4:	f1bb 0f00 	cmp.w	fp, #0
  405fc8:	f73f aebf 	bgt.w	405d4a <_dtoa_r+0xb4a>
  405fcc:	e6bf      	b.n	405d4e <_dtoa_r+0xb4e>
  405fce:	f47f aebe 	bne.w	405d4e <_dtoa_r+0xb4e>
  405fd2:	f01a 0f01 	tst.w	sl, #1
  405fd6:	f43f aeba 	beq.w	405d4e <_dtoa_r+0xb4e>
  405fda:	e6b2      	b.n	405d42 <_dtoa_r+0xb42>
  405fdc:	f04f 0800 	mov.w	r8, #0
  405fe0:	4646      	mov	r6, r8
  405fe2:	e5e9      	b.n	405bb8 <_dtoa_r+0x9b8>
  405fe4:	4631      	mov	r1, r6
  405fe6:	2300      	movs	r3, #0
  405fe8:	220a      	movs	r2, #10
  405fea:	4620      	mov	r0, r4
  405fec:	f000 fc66 	bl	4068bc <__multadd>
  405ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405ff2:	2b00      	cmp	r3, #0
  405ff4:	4606      	mov	r6, r0
  405ff6:	dd0a      	ble.n	40600e <_dtoa_r+0xe0e>
  405ff8:	930a      	str	r3, [sp, #40]	; 0x28
  405ffa:	f7ff bbaa 	b.w	405752 <_dtoa_r+0x552>
  405ffe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406000:	2b02      	cmp	r3, #2
  406002:	dc23      	bgt.n	40604c <_dtoa_r+0xe4c>
  406004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406006:	e43b      	b.n	405880 <_dtoa_r+0x680>
  406008:	f04f 0a02 	mov.w	sl, #2
  40600c:	e4ed      	b.n	4059ea <_dtoa_r+0x7ea>
  40600e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406010:	2b02      	cmp	r3, #2
  406012:	dc1b      	bgt.n	40604c <_dtoa_r+0xe4c>
  406014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406016:	e7ef      	b.n	405ff8 <_dtoa_r+0xdf8>
  406018:	2500      	movs	r5, #0
  40601a:	6465      	str	r5, [r4, #68]	; 0x44
  40601c:	4629      	mov	r1, r5
  40601e:	4620      	mov	r0, r4
  406020:	f000 fc1c 	bl	40685c <_Balloc>
  406024:	f04f 33ff 	mov.w	r3, #4294967295
  406028:	930a      	str	r3, [sp, #40]	; 0x28
  40602a:	930f      	str	r3, [sp, #60]	; 0x3c
  40602c:	2301      	movs	r3, #1
  40602e:	9004      	str	r0, [sp, #16]
  406030:	9525      	str	r5, [sp, #148]	; 0x94
  406032:	6420      	str	r0, [r4, #64]	; 0x40
  406034:	930b      	str	r3, [sp, #44]	; 0x2c
  406036:	f7ff b9dd 	b.w	4053f4 <_dtoa_r+0x1f4>
  40603a:	2501      	movs	r5, #1
  40603c:	f7ff b9a5 	b.w	40538a <_dtoa_r+0x18a>
  406040:	f43f ab69 	beq.w	405716 <_dtoa_r+0x516>
  406044:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406048:	f7ff bbf9 	b.w	40583e <_dtoa_r+0x63e>
  40604c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40604e:	930a      	str	r3, [sp, #40]	; 0x28
  406050:	e5e5      	b.n	405c1e <_dtoa_r+0xa1e>
  406052:	bf00      	nop

00406054 <__libc_fini_array>:
  406054:	b538      	push	{r3, r4, r5, lr}
  406056:	4c0a      	ldr	r4, [pc, #40]	; (406080 <__libc_fini_array+0x2c>)
  406058:	4d0a      	ldr	r5, [pc, #40]	; (406084 <__libc_fini_array+0x30>)
  40605a:	1b64      	subs	r4, r4, r5
  40605c:	10a4      	asrs	r4, r4, #2
  40605e:	d00a      	beq.n	406076 <__libc_fini_array+0x22>
  406060:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406064:	3b01      	subs	r3, #1
  406066:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40606a:	3c01      	subs	r4, #1
  40606c:	f855 3904 	ldr.w	r3, [r5], #-4
  406070:	4798      	blx	r3
  406072:	2c00      	cmp	r4, #0
  406074:	d1f9      	bne.n	40606a <__libc_fini_array+0x16>
  406076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40607a:	f003 b89b 	b.w	4091b4 <_fini>
  40607e:	bf00      	nop
  406080:	004091c4 	.word	0x004091c4
  406084:	004091c0 	.word	0x004091c0

00406088 <_localeconv_r>:
  406088:	4a04      	ldr	r2, [pc, #16]	; (40609c <_localeconv_r+0x14>)
  40608a:	4b05      	ldr	r3, [pc, #20]	; (4060a0 <_localeconv_r+0x18>)
  40608c:	6812      	ldr	r2, [r2, #0]
  40608e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406090:	2800      	cmp	r0, #0
  406092:	bf08      	it	eq
  406094:	4618      	moveq	r0, r3
  406096:	30f0      	adds	r0, #240	; 0xf0
  406098:	4770      	bx	lr
  40609a:	bf00      	nop
  40609c:	20000010 	.word	0x20000010
  4060a0:	20000854 	.word	0x20000854

004060a4 <__retarget_lock_acquire_recursive>:
  4060a4:	4770      	bx	lr
  4060a6:	bf00      	nop

004060a8 <__retarget_lock_release_recursive>:
  4060a8:	4770      	bx	lr
  4060aa:	bf00      	nop

004060ac <_malloc_r>:
  4060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060b0:	f101 060b 	add.w	r6, r1, #11
  4060b4:	2e16      	cmp	r6, #22
  4060b6:	b083      	sub	sp, #12
  4060b8:	4605      	mov	r5, r0
  4060ba:	f240 809e 	bls.w	4061fa <_malloc_r+0x14e>
  4060be:	f036 0607 	bics.w	r6, r6, #7
  4060c2:	f100 80bd 	bmi.w	406240 <_malloc_r+0x194>
  4060c6:	42b1      	cmp	r1, r6
  4060c8:	f200 80ba 	bhi.w	406240 <_malloc_r+0x194>
  4060cc:	f000 fbba 	bl	406844 <__malloc_lock>
  4060d0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4060d4:	f0c0 8293 	bcc.w	4065fe <_malloc_r+0x552>
  4060d8:	0a73      	lsrs	r3, r6, #9
  4060da:	f000 80b8 	beq.w	40624e <_malloc_r+0x1a2>
  4060de:	2b04      	cmp	r3, #4
  4060e0:	f200 8179 	bhi.w	4063d6 <_malloc_r+0x32a>
  4060e4:	09b3      	lsrs	r3, r6, #6
  4060e6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4060ea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4060ee:	00c3      	lsls	r3, r0, #3
  4060f0:	4fbf      	ldr	r7, [pc, #764]	; (4063f0 <_malloc_r+0x344>)
  4060f2:	443b      	add	r3, r7
  4060f4:	f1a3 0108 	sub.w	r1, r3, #8
  4060f8:	685c      	ldr	r4, [r3, #4]
  4060fa:	42a1      	cmp	r1, r4
  4060fc:	d106      	bne.n	40610c <_malloc_r+0x60>
  4060fe:	e00c      	b.n	40611a <_malloc_r+0x6e>
  406100:	2a00      	cmp	r2, #0
  406102:	f280 80aa 	bge.w	40625a <_malloc_r+0x1ae>
  406106:	68e4      	ldr	r4, [r4, #12]
  406108:	42a1      	cmp	r1, r4
  40610a:	d006      	beq.n	40611a <_malloc_r+0x6e>
  40610c:	6863      	ldr	r3, [r4, #4]
  40610e:	f023 0303 	bic.w	r3, r3, #3
  406112:	1b9a      	subs	r2, r3, r6
  406114:	2a0f      	cmp	r2, #15
  406116:	ddf3      	ble.n	406100 <_malloc_r+0x54>
  406118:	4670      	mov	r0, lr
  40611a:	693c      	ldr	r4, [r7, #16]
  40611c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406404 <_malloc_r+0x358>
  406120:	4574      	cmp	r4, lr
  406122:	f000 81ab 	beq.w	40647c <_malloc_r+0x3d0>
  406126:	6863      	ldr	r3, [r4, #4]
  406128:	f023 0303 	bic.w	r3, r3, #3
  40612c:	1b9a      	subs	r2, r3, r6
  40612e:	2a0f      	cmp	r2, #15
  406130:	f300 8190 	bgt.w	406454 <_malloc_r+0x3a8>
  406134:	2a00      	cmp	r2, #0
  406136:	f8c7 e014 	str.w	lr, [r7, #20]
  40613a:	f8c7 e010 	str.w	lr, [r7, #16]
  40613e:	f280 809d 	bge.w	40627c <_malloc_r+0x1d0>
  406142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406146:	f080 8161 	bcs.w	40640c <_malloc_r+0x360>
  40614a:	08db      	lsrs	r3, r3, #3
  40614c:	f103 0c01 	add.w	ip, r3, #1
  406150:	1099      	asrs	r1, r3, #2
  406152:	687a      	ldr	r2, [r7, #4]
  406154:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406158:	f8c4 8008 	str.w	r8, [r4, #8]
  40615c:	2301      	movs	r3, #1
  40615e:	408b      	lsls	r3, r1
  406160:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406164:	4313      	orrs	r3, r2
  406166:	3908      	subs	r1, #8
  406168:	60e1      	str	r1, [r4, #12]
  40616a:	607b      	str	r3, [r7, #4]
  40616c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406170:	f8c8 400c 	str.w	r4, [r8, #12]
  406174:	1082      	asrs	r2, r0, #2
  406176:	2401      	movs	r4, #1
  406178:	4094      	lsls	r4, r2
  40617a:	429c      	cmp	r4, r3
  40617c:	f200 808b 	bhi.w	406296 <_malloc_r+0x1ea>
  406180:	421c      	tst	r4, r3
  406182:	d106      	bne.n	406192 <_malloc_r+0xe6>
  406184:	f020 0003 	bic.w	r0, r0, #3
  406188:	0064      	lsls	r4, r4, #1
  40618a:	421c      	tst	r4, r3
  40618c:	f100 0004 	add.w	r0, r0, #4
  406190:	d0fa      	beq.n	406188 <_malloc_r+0xdc>
  406192:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406196:	46cc      	mov	ip, r9
  406198:	4680      	mov	r8, r0
  40619a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40619e:	459c      	cmp	ip, r3
  4061a0:	d107      	bne.n	4061b2 <_malloc_r+0x106>
  4061a2:	e16d      	b.n	406480 <_malloc_r+0x3d4>
  4061a4:	2a00      	cmp	r2, #0
  4061a6:	f280 817b 	bge.w	4064a0 <_malloc_r+0x3f4>
  4061aa:	68db      	ldr	r3, [r3, #12]
  4061ac:	459c      	cmp	ip, r3
  4061ae:	f000 8167 	beq.w	406480 <_malloc_r+0x3d4>
  4061b2:	6859      	ldr	r1, [r3, #4]
  4061b4:	f021 0103 	bic.w	r1, r1, #3
  4061b8:	1b8a      	subs	r2, r1, r6
  4061ba:	2a0f      	cmp	r2, #15
  4061bc:	ddf2      	ble.n	4061a4 <_malloc_r+0xf8>
  4061be:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4061c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4061c6:	9300      	str	r3, [sp, #0]
  4061c8:	199c      	adds	r4, r3, r6
  4061ca:	4628      	mov	r0, r5
  4061cc:	f046 0601 	orr.w	r6, r6, #1
  4061d0:	f042 0501 	orr.w	r5, r2, #1
  4061d4:	605e      	str	r6, [r3, #4]
  4061d6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4061da:	f8cc 8008 	str.w	r8, [ip, #8]
  4061de:	617c      	str	r4, [r7, #20]
  4061e0:	613c      	str	r4, [r7, #16]
  4061e2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4061e6:	f8c4 e008 	str.w	lr, [r4, #8]
  4061ea:	6065      	str	r5, [r4, #4]
  4061ec:	505a      	str	r2, [r3, r1]
  4061ee:	f000 fb2f 	bl	406850 <__malloc_unlock>
  4061f2:	9b00      	ldr	r3, [sp, #0]
  4061f4:	f103 0408 	add.w	r4, r3, #8
  4061f8:	e01e      	b.n	406238 <_malloc_r+0x18c>
  4061fa:	2910      	cmp	r1, #16
  4061fc:	d820      	bhi.n	406240 <_malloc_r+0x194>
  4061fe:	f000 fb21 	bl	406844 <__malloc_lock>
  406202:	2610      	movs	r6, #16
  406204:	2318      	movs	r3, #24
  406206:	2002      	movs	r0, #2
  406208:	4f79      	ldr	r7, [pc, #484]	; (4063f0 <_malloc_r+0x344>)
  40620a:	443b      	add	r3, r7
  40620c:	f1a3 0208 	sub.w	r2, r3, #8
  406210:	685c      	ldr	r4, [r3, #4]
  406212:	4294      	cmp	r4, r2
  406214:	f000 813d 	beq.w	406492 <_malloc_r+0x3e6>
  406218:	6863      	ldr	r3, [r4, #4]
  40621a:	68e1      	ldr	r1, [r4, #12]
  40621c:	68a6      	ldr	r6, [r4, #8]
  40621e:	f023 0303 	bic.w	r3, r3, #3
  406222:	4423      	add	r3, r4
  406224:	4628      	mov	r0, r5
  406226:	685a      	ldr	r2, [r3, #4]
  406228:	60f1      	str	r1, [r6, #12]
  40622a:	f042 0201 	orr.w	r2, r2, #1
  40622e:	608e      	str	r6, [r1, #8]
  406230:	605a      	str	r2, [r3, #4]
  406232:	f000 fb0d 	bl	406850 <__malloc_unlock>
  406236:	3408      	adds	r4, #8
  406238:	4620      	mov	r0, r4
  40623a:	b003      	add	sp, #12
  40623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406240:	2400      	movs	r4, #0
  406242:	230c      	movs	r3, #12
  406244:	4620      	mov	r0, r4
  406246:	602b      	str	r3, [r5, #0]
  406248:	b003      	add	sp, #12
  40624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40624e:	2040      	movs	r0, #64	; 0x40
  406250:	f44f 7300 	mov.w	r3, #512	; 0x200
  406254:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406258:	e74a      	b.n	4060f0 <_malloc_r+0x44>
  40625a:	4423      	add	r3, r4
  40625c:	68e1      	ldr	r1, [r4, #12]
  40625e:	685a      	ldr	r2, [r3, #4]
  406260:	68a6      	ldr	r6, [r4, #8]
  406262:	f042 0201 	orr.w	r2, r2, #1
  406266:	60f1      	str	r1, [r6, #12]
  406268:	4628      	mov	r0, r5
  40626a:	608e      	str	r6, [r1, #8]
  40626c:	605a      	str	r2, [r3, #4]
  40626e:	f000 faef 	bl	406850 <__malloc_unlock>
  406272:	3408      	adds	r4, #8
  406274:	4620      	mov	r0, r4
  406276:	b003      	add	sp, #12
  406278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40627c:	4423      	add	r3, r4
  40627e:	4628      	mov	r0, r5
  406280:	685a      	ldr	r2, [r3, #4]
  406282:	f042 0201 	orr.w	r2, r2, #1
  406286:	605a      	str	r2, [r3, #4]
  406288:	f000 fae2 	bl	406850 <__malloc_unlock>
  40628c:	3408      	adds	r4, #8
  40628e:	4620      	mov	r0, r4
  406290:	b003      	add	sp, #12
  406292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406296:	68bc      	ldr	r4, [r7, #8]
  406298:	6863      	ldr	r3, [r4, #4]
  40629a:	f023 0803 	bic.w	r8, r3, #3
  40629e:	45b0      	cmp	r8, r6
  4062a0:	d304      	bcc.n	4062ac <_malloc_r+0x200>
  4062a2:	eba8 0306 	sub.w	r3, r8, r6
  4062a6:	2b0f      	cmp	r3, #15
  4062a8:	f300 8085 	bgt.w	4063b6 <_malloc_r+0x30a>
  4062ac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406408 <_malloc_r+0x35c>
  4062b0:	4b50      	ldr	r3, [pc, #320]	; (4063f4 <_malloc_r+0x348>)
  4062b2:	f8d9 2000 	ldr.w	r2, [r9]
  4062b6:	681b      	ldr	r3, [r3, #0]
  4062b8:	3201      	adds	r2, #1
  4062ba:	4433      	add	r3, r6
  4062bc:	eb04 0a08 	add.w	sl, r4, r8
  4062c0:	f000 8155 	beq.w	40656e <_malloc_r+0x4c2>
  4062c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4062c8:	330f      	adds	r3, #15
  4062ca:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4062ce:	f02b 0b0f 	bic.w	fp, fp, #15
  4062d2:	4659      	mov	r1, fp
  4062d4:	4628      	mov	r0, r5
  4062d6:	f000 fdbb 	bl	406e50 <_sbrk_r>
  4062da:	1c41      	adds	r1, r0, #1
  4062dc:	4602      	mov	r2, r0
  4062de:	f000 80fc 	beq.w	4064da <_malloc_r+0x42e>
  4062e2:	4582      	cmp	sl, r0
  4062e4:	f200 80f7 	bhi.w	4064d6 <_malloc_r+0x42a>
  4062e8:	4b43      	ldr	r3, [pc, #268]	; (4063f8 <_malloc_r+0x34c>)
  4062ea:	6819      	ldr	r1, [r3, #0]
  4062ec:	4459      	add	r1, fp
  4062ee:	6019      	str	r1, [r3, #0]
  4062f0:	f000 814d 	beq.w	40658e <_malloc_r+0x4e2>
  4062f4:	f8d9 0000 	ldr.w	r0, [r9]
  4062f8:	3001      	adds	r0, #1
  4062fa:	bf1b      	ittet	ne
  4062fc:	eba2 0a0a 	subne.w	sl, r2, sl
  406300:	4451      	addne	r1, sl
  406302:	f8c9 2000 	streq.w	r2, [r9]
  406306:	6019      	strne	r1, [r3, #0]
  406308:	f012 0107 	ands.w	r1, r2, #7
  40630c:	f000 8115 	beq.w	40653a <_malloc_r+0x48e>
  406310:	f1c1 0008 	rsb	r0, r1, #8
  406314:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406318:	4402      	add	r2, r0
  40631a:	3108      	adds	r1, #8
  40631c:	eb02 090b 	add.w	r9, r2, fp
  406320:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406324:	eba1 0909 	sub.w	r9, r1, r9
  406328:	4649      	mov	r1, r9
  40632a:	4628      	mov	r0, r5
  40632c:	9301      	str	r3, [sp, #4]
  40632e:	9200      	str	r2, [sp, #0]
  406330:	f000 fd8e 	bl	406e50 <_sbrk_r>
  406334:	1c43      	adds	r3, r0, #1
  406336:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40633a:	f000 8143 	beq.w	4065c4 <_malloc_r+0x518>
  40633e:	1a80      	subs	r0, r0, r2
  406340:	4448      	add	r0, r9
  406342:	f040 0001 	orr.w	r0, r0, #1
  406346:	6819      	ldr	r1, [r3, #0]
  406348:	60ba      	str	r2, [r7, #8]
  40634a:	4449      	add	r1, r9
  40634c:	42bc      	cmp	r4, r7
  40634e:	6050      	str	r0, [r2, #4]
  406350:	6019      	str	r1, [r3, #0]
  406352:	d017      	beq.n	406384 <_malloc_r+0x2d8>
  406354:	f1b8 0f0f 	cmp.w	r8, #15
  406358:	f240 80fb 	bls.w	406552 <_malloc_r+0x4a6>
  40635c:	6860      	ldr	r0, [r4, #4]
  40635e:	f1a8 020c 	sub.w	r2, r8, #12
  406362:	f022 0207 	bic.w	r2, r2, #7
  406366:	eb04 0e02 	add.w	lr, r4, r2
  40636a:	f000 0001 	and.w	r0, r0, #1
  40636e:	f04f 0c05 	mov.w	ip, #5
  406372:	4310      	orrs	r0, r2
  406374:	2a0f      	cmp	r2, #15
  406376:	6060      	str	r0, [r4, #4]
  406378:	f8ce c004 	str.w	ip, [lr, #4]
  40637c:	f8ce c008 	str.w	ip, [lr, #8]
  406380:	f200 8117 	bhi.w	4065b2 <_malloc_r+0x506>
  406384:	4b1d      	ldr	r3, [pc, #116]	; (4063fc <_malloc_r+0x350>)
  406386:	68bc      	ldr	r4, [r7, #8]
  406388:	681a      	ldr	r2, [r3, #0]
  40638a:	4291      	cmp	r1, r2
  40638c:	bf88      	it	hi
  40638e:	6019      	strhi	r1, [r3, #0]
  406390:	4b1b      	ldr	r3, [pc, #108]	; (406400 <_malloc_r+0x354>)
  406392:	681a      	ldr	r2, [r3, #0]
  406394:	4291      	cmp	r1, r2
  406396:	6862      	ldr	r2, [r4, #4]
  406398:	bf88      	it	hi
  40639a:	6019      	strhi	r1, [r3, #0]
  40639c:	f022 0203 	bic.w	r2, r2, #3
  4063a0:	4296      	cmp	r6, r2
  4063a2:	eba2 0306 	sub.w	r3, r2, r6
  4063a6:	d801      	bhi.n	4063ac <_malloc_r+0x300>
  4063a8:	2b0f      	cmp	r3, #15
  4063aa:	dc04      	bgt.n	4063b6 <_malloc_r+0x30a>
  4063ac:	4628      	mov	r0, r5
  4063ae:	f000 fa4f 	bl	406850 <__malloc_unlock>
  4063b2:	2400      	movs	r4, #0
  4063b4:	e740      	b.n	406238 <_malloc_r+0x18c>
  4063b6:	19a2      	adds	r2, r4, r6
  4063b8:	f043 0301 	orr.w	r3, r3, #1
  4063bc:	f046 0601 	orr.w	r6, r6, #1
  4063c0:	6066      	str	r6, [r4, #4]
  4063c2:	4628      	mov	r0, r5
  4063c4:	60ba      	str	r2, [r7, #8]
  4063c6:	6053      	str	r3, [r2, #4]
  4063c8:	f000 fa42 	bl	406850 <__malloc_unlock>
  4063cc:	3408      	adds	r4, #8
  4063ce:	4620      	mov	r0, r4
  4063d0:	b003      	add	sp, #12
  4063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063d6:	2b14      	cmp	r3, #20
  4063d8:	d971      	bls.n	4064be <_malloc_r+0x412>
  4063da:	2b54      	cmp	r3, #84	; 0x54
  4063dc:	f200 80a3 	bhi.w	406526 <_malloc_r+0x47a>
  4063e0:	0b33      	lsrs	r3, r6, #12
  4063e2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4063e6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4063ea:	00c3      	lsls	r3, r0, #3
  4063ec:	e680      	b.n	4060f0 <_malloc_r+0x44>
  4063ee:	bf00      	nop
  4063f0:	20000444 	.word	0x20000444
  4063f4:	20000ab0 	.word	0x20000ab0
  4063f8:	20000a80 	.word	0x20000a80
  4063fc:	20000aa8 	.word	0x20000aa8
  406400:	20000aac 	.word	0x20000aac
  406404:	2000044c 	.word	0x2000044c
  406408:	2000084c 	.word	0x2000084c
  40640c:	0a5a      	lsrs	r2, r3, #9
  40640e:	2a04      	cmp	r2, #4
  406410:	d95b      	bls.n	4064ca <_malloc_r+0x41e>
  406412:	2a14      	cmp	r2, #20
  406414:	f200 80ae 	bhi.w	406574 <_malloc_r+0x4c8>
  406418:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40641c:	00c9      	lsls	r1, r1, #3
  40641e:	325b      	adds	r2, #91	; 0x5b
  406420:	eb07 0c01 	add.w	ip, r7, r1
  406424:	5879      	ldr	r1, [r7, r1]
  406426:	f1ac 0c08 	sub.w	ip, ip, #8
  40642a:	458c      	cmp	ip, r1
  40642c:	f000 8088 	beq.w	406540 <_malloc_r+0x494>
  406430:	684a      	ldr	r2, [r1, #4]
  406432:	f022 0203 	bic.w	r2, r2, #3
  406436:	4293      	cmp	r3, r2
  406438:	d273      	bcs.n	406522 <_malloc_r+0x476>
  40643a:	6889      	ldr	r1, [r1, #8]
  40643c:	458c      	cmp	ip, r1
  40643e:	d1f7      	bne.n	406430 <_malloc_r+0x384>
  406440:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406444:	687b      	ldr	r3, [r7, #4]
  406446:	60e2      	str	r2, [r4, #12]
  406448:	f8c4 c008 	str.w	ip, [r4, #8]
  40644c:	6094      	str	r4, [r2, #8]
  40644e:	f8cc 400c 	str.w	r4, [ip, #12]
  406452:	e68f      	b.n	406174 <_malloc_r+0xc8>
  406454:	19a1      	adds	r1, r4, r6
  406456:	f046 0c01 	orr.w	ip, r6, #1
  40645a:	f042 0601 	orr.w	r6, r2, #1
  40645e:	f8c4 c004 	str.w	ip, [r4, #4]
  406462:	4628      	mov	r0, r5
  406464:	6179      	str	r1, [r7, #20]
  406466:	6139      	str	r1, [r7, #16]
  406468:	f8c1 e00c 	str.w	lr, [r1, #12]
  40646c:	f8c1 e008 	str.w	lr, [r1, #8]
  406470:	604e      	str	r6, [r1, #4]
  406472:	50e2      	str	r2, [r4, r3]
  406474:	f000 f9ec 	bl	406850 <__malloc_unlock>
  406478:	3408      	adds	r4, #8
  40647a:	e6dd      	b.n	406238 <_malloc_r+0x18c>
  40647c:	687b      	ldr	r3, [r7, #4]
  40647e:	e679      	b.n	406174 <_malloc_r+0xc8>
  406480:	f108 0801 	add.w	r8, r8, #1
  406484:	f018 0f03 	tst.w	r8, #3
  406488:	f10c 0c08 	add.w	ip, ip, #8
  40648c:	f47f ae85 	bne.w	40619a <_malloc_r+0xee>
  406490:	e02d      	b.n	4064ee <_malloc_r+0x442>
  406492:	68dc      	ldr	r4, [r3, #12]
  406494:	42a3      	cmp	r3, r4
  406496:	bf08      	it	eq
  406498:	3002      	addeq	r0, #2
  40649a:	f43f ae3e 	beq.w	40611a <_malloc_r+0x6e>
  40649e:	e6bb      	b.n	406218 <_malloc_r+0x16c>
  4064a0:	4419      	add	r1, r3
  4064a2:	461c      	mov	r4, r3
  4064a4:	684a      	ldr	r2, [r1, #4]
  4064a6:	68db      	ldr	r3, [r3, #12]
  4064a8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4064ac:	f042 0201 	orr.w	r2, r2, #1
  4064b0:	604a      	str	r2, [r1, #4]
  4064b2:	4628      	mov	r0, r5
  4064b4:	60f3      	str	r3, [r6, #12]
  4064b6:	609e      	str	r6, [r3, #8]
  4064b8:	f000 f9ca 	bl	406850 <__malloc_unlock>
  4064bc:	e6bc      	b.n	406238 <_malloc_r+0x18c>
  4064be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4064c2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4064c6:	00c3      	lsls	r3, r0, #3
  4064c8:	e612      	b.n	4060f0 <_malloc_r+0x44>
  4064ca:	099a      	lsrs	r2, r3, #6
  4064cc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4064d0:	00c9      	lsls	r1, r1, #3
  4064d2:	3238      	adds	r2, #56	; 0x38
  4064d4:	e7a4      	b.n	406420 <_malloc_r+0x374>
  4064d6:	42bc      	cmp	r4, r7
  4064d8:	d054      	beq.n	406584 <_malloc_r+0x4d8>
  4064da:	68bc      	ldr	r4, [r7, #8]
  4064dc:	6862      	ldr	r2, [r4, #4]
  4064de:	f022 0203 	bic.w	r2, r2, #3
  4064e2:	e75d      	b.n	4063a0 <_malloc_r+0x2f4>
  4064e4:	f859 3908 	ldr.w	r3, [r9], #-8
  4064e8:	4599      	cmp	r9, r3
  4064ea:	f040 8086 	bne.w	4065fa <_malloc_r+0x54e>
  4064ee:	f010 0f03 	tst.w	r0, #3
  4064f2:	f100 30ff 	add.w	r0, r0, #4294967295
  4064f6:	d1f5      	bne.n	4064e4 <_malloc_r+0x438>
  4064f8:	687b      	ldr	r3, [r7, #4]
  4064fa:	ea23 0304 	bic.w	r3, r3, r4
  4064fe:	607b      	str	r3, [r7, #4]
  406500:	0064      	lsls	r4, r4, #1
  406502:	429c      	cmp	r4, r3
  406504:	f63f aec7 	bhi.w	406296 <_malloc_r+0x1ea>
  406508:	2c00      	cmp	r4, #0
  40650a:	f43f aec4 	beq.w	406296 <_malloc_r+0x1ea>
  40650e:	421c      	tst	r4, r3
  406510:	4640      	mov	r0, r8
  406512:	f47f ae3e 	bne.w	406192 <_malloc_r+0xe6>
  406516:	0064      	lsls	r4, r4, #1
  406518:	421c      	tst	r4, r3
  40651a:	f100 0004 	add.w	r0, r0, #4
  40651e:	d0fa      	beq.n	406516 <_malloc_r+0x46a>
  406520:	e637      	b.n	406192 <_malloc_r+0xe6>
  406522:	468c      	mov	ip, r1
  406524:	e78c      	b.n	406440 <_malloc_r+0x394>
  406526:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40652a:	d815      	bhi.n	406558 <_malloc_r+0x4ac>
  40652c:	0bf3      	lsrs	r3, r6, #15
  40652e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406532:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406536:	00c3      	lsls	r3, r0, #3
  406538:	e5da      	b.n	4060f0 <_malloc_r+0x44>
  40653a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40653e:	e6ed      	b.n	40631c <_malloc_r+0x270>
  406540:	687b      	ldr	r3, [r7, #4]
  406542:	1092      	asrs	r2, r2, #2
  406544:	2101      	movs	r1, #1
  406546:	fa01 f202 	lsl.w	r2, r1, r2
  40654a:	4313      	orrs	r3, r2
  40654c:	607b      	str	r3, [r7, #4]
  40654e:	4662      	mov	r2, ip
  406550:	e779      	b.n	406446 <_malloc_r+0x39a>
  406552:	2301      	movs	r3, #1
  406554:	6053      	str	r3, [r2, #4]
  406556:	e729      	b.n	4063ac <_malloc_r+0x300>
  406558:	f240 5254 	movw	r2, #1364	; 0x554
  40655c:	4293      	cmp	r3, r2
  40655e:	d822      	bhi.n	4065a6 <_malloc_r+0x4fa>
  406560:	0cb3      	lsrs	r3, r6, #18
  406562:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406566:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40656a:	00c3      	lsls	r3, r0, #3
  40656c:	e5c0      	b.n	4060f0 <_malloc_r+0x44>
  40656e:	f103 0b10 	add.w	fp, r3, #16
  406572:	e6ae      	b.n	4062d2 <_malloc_r+0x226>
  406574:	2a54      	cmp	r2, #84	; 0x54
  406576:	d829      	bhi.n	4065cc <_malloc_r+0x520>
  406578:	0b1a      	lsrs	r2, r3, #12
  40657a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40657e:	00c9      	lsls	r1, r1, #3
  406580:	326e      	adds	r2, #110	; 0x6e
  406582:	e74d      	b.n	406420 <_malloc_r+0x374>
  406584:	4b20      	ldr	r3, [pc, #128]	; (406608 <_malloc_r+0x55c>)
  406586:	6819      	ldr	r1, [r3, #0]
  406588:	4459      	add	r1, fp
  40658a:	6019      	str	r1, [r3, #0]
  40658c:	e6b2      	b.n	4062f4 <_malloc_r+0x248>
  40658e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406592:	2800      	cmp	r0, #0
  406594:	f47f aeae 	bne.w	4062f4 <_malloc_r+0x248>
  406598:	eb08 030b 	add.w	r3, r8, fp
  40659c:	68ba      	ldr	r2, [r7, #8]
  40659e:	f043 0301 	orr.w	r3, r3, #1
  4065a2:	6053      	str	r3, [r2, #4]
  4065a4:	e6ee      	b.n	406384 <_malloc_r+0x2d8>
  4065a6:	207f      	movs	r0, #127	; 0x7f
  4065a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4065ac:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4065b0:	e59e      	b.n	4060f0 <_malloc_r+0x44>
  4065b2:	f104 0108 	add.w	r1, r4, #8
  4065b6:	4628      	mov	r0, r5
  4065b8:	9300      	str	r3, [sp, #0]
  4065ba:	f000 feaf 	bl	40731c <_free_r>
  4065be:	9b00      	ldr	r3, [sp, #0]
  4065c0:	6819      	ldr	r1, [r3, #0]
  4065c2:	e6df      	b.n	406384 <_malloc_r+0x2d8>
  4065c4:	2001      	movs	r0, #1
  4065c6:	f04f 0900 	mov.w	r9, #0
  4065ca:	e6bc      	b.n	406346 <_malloc_r+0x29a>
  4065cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4065d0:	d805      	bhi.n	4065de <_malloc_r+0x532>
  4065d2:	0bda      	lsrs	r2, r3, #15
  4065d4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4065d8:	00c9      	lsls	r1, r1, #3
  4065da:	3277      	adds	r2, #119	; 0x77
  4065dc:	e720      	b.n	406420 <_malloc_r+0x374>
  4065de:	f240 5154 	movw	r1, #1364	; 0x554
  4065e2:	428a      	cmp	r2, r1
  4065e4:	d805      	bhi.n	4065f2 <_malloc_r+0x546>
  4065e6:	0c9a      	lsrs	r2, r3, #18
  4065e8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4065ec:	00c9      	lsls	r1, r1, #3
  4065ee:	327c      	adds	r2, #124	; 0x7c
  4065f0:	e716      	b.n	406420 <_malloc_r+0x374>
  4065f2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4065f6:	227e      	movs	r2, #126	; 0x7e
  4065f8:	e712      	b.n	406420 <_malloc_r+0x374>
  4065fa:	687b      	ldr	r3, [r7, #4]
  4065fc:	e780      	b.n	406500 <_malloc_r+0x454>
  4065fe:	08f0      	lsrs	r0, r6, #3
  406600:	f106 0308 	add.w	r3, r6, #8
  406604:	e600      	b.n	406208 <_malloc_r+0x15c>
  406606:	bf00      	nop
  406608:	20000a80 	.word	0x20000a80
  40660c:	00000000 	.word	0x00000000

00406610 <memchr>:
  406610:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406614:	2a10      	cmp	r2, #16
  406616:	db2b      	blt.n	406670 <memchr+0x60>
  406618:	f010 0f07 	tst.w	r0, #7
  40661c:	d008      	beq.n	406630 <memchr+0x20>
  40661e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406622:	3a01      	subs	r2, #1
  406624:	428b      	cmp	r3, r1
  406626:	d02d      	beq.n	406684 <memchr+0x74>
  406628:	f010 0f07 	tst.w	r0, #7
  40662c:	b342      	cbz	r2, 406680 <memchr+0x70>
  40662e:	d1f6      	bne.n	40661e <memchr+0xe>
  406630:	b4f0      	push	{r4, r5, r6, r7}
  406632:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406636:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40663a:	f022 0407 	bic.w	r4, r2, #7
  40663e:	f07f 0700 	mvns.w	r7, #0
  406642:	2300      	movs	r3, #0
  406644:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406648:	3c08      	subs	r4, #8
  40664a:	ea85 0501 	eor.w	r5, r5, r1
  40664e:	ea86 0601 	eor.w	r6, r6, r1
  406652:	fa85 f547 	uadd8	r5, r5, r7
  406656:	faa3 f587 	sel	r5, r3, r7
  40665a:	fa86 f647 	uadd8	r6, r6, r7
  40665e:	faa5 f687 	sel	r6, r5, r7
  406662:	b98e      	cbnz	r6, 406688 <memchr+0x78>
  406664:	d1ee      	bne.n	406644 <memchr+0x34>
  406666:	bcf0      	pop	{r4, r5, r6, r7}
  406668:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40666c:	f002 0207 	and.w	r2, r2, #7
  406670:	b132      	cbz	r2, 406680 <memchr+0x70>
  406672:	f810 3b01 	ldrb.w	r3, [r0], #1
  406676:	3a01      	subs	r2, #1
  406678:	ea83 0301 	eor.w	r3, r3, r1
  40667c:	b113      	cbz	r3, 406684 <memchr+0x74>
  40667e:	d1f8      	bne.n	406672 <memchr+0x62>
  406680:	2000      	movs	r0, #0
  406682:	4770      	bx	lr
  406684:	3801      	subs	r0, #1
  406686:	4770      	bx	lr
  406688:	2d00      	cmp	r5, #0
  40668a:	bf06      	itte	eq
  40668c:	4635      	moveq	r5, r6
  40668e:	3803      	subeq	r0, #3
  406690:	3807      	subne	r0, #7
  406692:	f015 0f01 	tst.w	r5, #1
  406696:	d107      	bne.n	4066a8 <memchr+0x98>
  406698:	3001      	adds	r0, #1
  40669a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40669e:	bf02      	ittt	eq
  4066a0:	3001      	addeq	r0, #1
  4066a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4066a6:	3001      	addeq	r0, #1
  4066a8:	bcf0      	pop	{r4, r5, r6, r7}
  4066aa:	3801      	subs	r0, #1
  4066ac:	4770      	bx	lr
  4066ae:	bf00      	nop

004066b0 <memcmp>:
  4066b0:	2a03      	cmp	r2, #3
  4066b2:	b470      	push	{r4, r5, r6}
  4066b4:	d922      	bls.n	4066fc <memcmp+0x4c>
  4066b6:	ea40 0301 	orr.w	r3, r0, r1
  4066ba:	079b      	lsls	r3, r3, #30
  4066bc:	d011      	beq.n	4066e2 <memcmp+0x32>
  4066be:	7803      	ldrb	r3, [r0, #0]
  4066c0:	780c      	ldrb	r4, [r1, #0]
  4066c2:	42a3      	cmp	r3, r4
  4066c4:	d11d      	bne.n	406702 <memcmp+0x52>
  4066c6:	440a      	add	r2, r1
  4066c8:	3101      	adds	r1, #1
  4066ca:	e005      	b.n	4066d8 <memcmp+0x28>
  4066cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4066d0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4066d4:	42a3      	cmp	r3, r4
  4066d6:	d114      	bne.n	406702 <memcmp+0x52>
  4066d8:	4291      	cmp	r1, r2
  4066da:	d1f7      	bne.n	4066cc <memcmp+0x1c>
  4066dc:	2000      	movs	r0, #0
  4066de:	bc70      	pop	{r4, r5, r6}
  4066e0:	4770      	bx	lr
  4066e2:	680d      	ldr	r5, [r1, #0]
  4066e4:	6806      	ldr	r6, [r0, #0]
  4066e6:	42ae      	cmp	r6, r5
  4066e8:	460c      	mov	r4, r1
  4066ea:	4603      	mov	r3, r0
  4066ec:	f101 0104 	add.w	r1, r1, #4
  4066f0:	f100 0004 	add.w	r0, r0, #4
  4066f4:	d108      	bne.n	406708 <memcmp+0x58>
  4066f6:	3a04      	subs	r2, #4
  4066f8:	2a03      	cmp	r2, #3
  4066fa:	d8f2      	bhi.n	4066e2 <memcmp+0x32>
  4066fc:	2a00      	cmp	r2, #0
  4066fe:	d1de      	bne.n	4066be <memcmp+0xe>
  406700:	e7ec      	b.n	4066dc <memcmp+0x2c>
  406702:	1b18      	subs	r0, r3, r4
  406704:	bc70      	pop	{r4, r5, r6}
  406706:	4770      	bx	lr
  406708:	4621      	mov	r1, r4
  40670a:	4618      	mov	r0, r3
  40670c:	e7d7      	b.n	4066be <memcmp+0xe>
  40670e:	bf00      	nop

00406710 <memcpy>:
  406710:	4684      	mov	ip, r0
  406712:	ea41 0300 	orr.w	r3, r1, r0
  406716:	f013 0303 	ands.w	r3, r3, #3
  40671a:	d16d      	bne.n	4067f8 <memcpy+0xe8>
  40671c:	3a40      	subs	r2, #64	; 0x40
  40671e:	d341      	bcc.n	4067a4 <memcpy+0x94>
  406720:	f851 3b04 	ldr.w	r3, [r1], #4
  406724:	f840 3b04 	str.w	r3, [r0], #4
  406728:	f851 3b04 	ldr.w	r3, [r1], #4
  40672c:	f840 3b04 	str.w	r3, [r0], #4
  406730:	f851 3b04 	ldr.w	r3, [r1], #4
  406734:	f840 3b04 	str.w	r3, [r0], #4
  406738:	f851 3b04 	ldr.w	r3, [r1], #4
  40673c:	f840 3b04 	str.w	r3, [r0], #4
  406740:	f851 3b04 	ldr.w	r3, [r1], #4
  406744:	f840 3b04 	str.w	r3, [r0], #4
  406748:	f851 3b04 	ldr.w	r3, [r1], #4
  40674c:	f840 3b04 	str.w	r3, [r0], #4
  406750:	f851 3b04 	ldr.w	r3, [r1], #4
  406754:	f840 3b04 	str.w	r3, [r0], #4
  406758:	f851 3b04 	ldr.w	r3, [r1], #4
  40675c:	f840 3b04 	str.w	r3, [r0], #4
  406760:	f851 3b04 	ldr.w	r3, [r1], #4
  406764:	f840 3b04 	str.w	r3, [r0], #4
  406768:	f851 3b04 	ldr.w	r3, [r1], #4
  40676c:	f840 3b04 	str.w	r3, [r0], #4
  406770:	f851 3b04 	ldr.w	r3, [r1], #4
  406774:	f840 3b04 	str.w	r3, [r0], #4
  406778:	f851 3b04 	ldr.w	r3, [r1], #4
  40677c:	f840 3b04 	str.w	r3, [r0], #4
  406780:	f851 3b04 	ldr.w	r3, [r1], #4
  406784:	f840 3b04 	str.w	r3, [r0], #4
  406788:	f851 3b04 	ldr.w	r3, [r1], #4
  40678c:	f840 3b04 	str.w	r3, [r0], #4
  406790:	f851 3b04 	ldr.w	r3, [r1], #4
  406794:	f840 3b04 	str.w	r3, [r0], #4
  406798:	f851 3b04 	ldr.w	r3, [r1], #4
  40679c:	f840 3b04 	str.w	r3, [r0], #4
  4067a0:	3a40      	subs	r2, #64	; 0x40
  4067a2:	d2bd      	bcs.n	406720 <memcpy+0x10>
  4067a4:	3230      	adds	r2, #48	; 0x30
  4067a6:	d311      	bcc.n	4067cc <memcpy+0xbc>
  4067a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067ac:	f840 3b04 	str.w	r3, [r0], #4
  4067b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067b4:	f840 3b04 	str.w	r3, [r0], #4
  4067b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067bc:	f840 3b04 	str.w	r3, [r0], #4
  4067c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067c4:	f840 3b04 	str.w	r3, [r0], #4
  4067c8:	3a10      	subs	r2, #16
  4067ca:	d2ed      	bcs.n	4067a8 <memcpy+0x98>
  4067cc:	320c      	adds	r2, #12
  4067ce:	d305      	bcc.n	4067dc <memcpy+0xcc>
  4067d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067d4:	f840 3b04 	str.w	r3, [r0], #4
  4067d8:	3a04      	subs	r2, #4
  4067da:	d2f9      	bcs.n	4067d0 <memcpy+0xc0>
  4067dc:	3204      	adds	r2, #4
  4067de:	d008      	beq.n	4067f2 <memcpy+0xe2>
  4067e0:	07d2      	lsls	r2, r2, #31
  4067e2:	bf1c      	itt	ne
  4067e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4067e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4067ec:	d301      	bcc.n	4067f2 <memcpy+0xe2>
  4067ee:	880b      	ldrh	r3, [r1, #0]
  4067f0:	8003      	strh	r3, [r0, #0]
  4067f2:	4660      	mov	r0, ip
  4067f4:	4770      	bx	lr
  4067f6:	bf00      	nop
  4067f8:	2a08      	cmp	r2, #8
  4067fa:	d313      	bcc.n	406824 <memcpy+0x114>
  4067fc:	078b      	lsls	r3, r1, #30
  4067fe:	d08d      	beq.n	40671c <memcpy+0xc>
  406800:	f010 0303 	ands.w	r3, r0, #3
  406804:	d08a      	beq.n	40671c <memcpy+0xc>
  406806:	f1c3 0304 	rsb	r3, r3, #4
  40680a:	1ad2      	subs	r2, r2, r3
  40680c:	07db      	lsls	r3, r3, #31
  40680e:	bf1c      	itt	ne
  406810:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406814:	f800 3b01 	strbne.w	r3, [r0], #1
  406818:	d380      	bcc.n	40671c <memcpy+0xc>
  40681a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40681e:	f820 3b02 	strh.w	r3, [r0], #2
  406822:	e77b      	b.n	40671c <memcpy+0xc>
  406824:	3a04      	subs	r2, #4
  406826:	d3d9      	bcc.n	4067dc <memcpy+0xcc>
  406828:	3a01      	subs	r2, #1
  40682a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40682e:	f800 3b01 	strb.w	r3, [r0], #1
  406832:	d2f9      	bcs.n	406828 <memcpy+0x118>
  406834:	780b      	ldrb	r3, [r1, #0]
  406836:	7003      	strb	r3, [r0, #0]
  406838:	784b      	ldrb	r3, [r1, #1]
  40683a:	7043      	strb	r3, [r0, #1]
  40683c:	788b      	ldrb	r3, [r1, #2]
  40683e:	7083      	strb	r3, [r0, #2]
  406840:	4660      	mov	r0, ip
  406842:	4770      	bx	lr

00406844 <__malloc_lock>:
  406844:	4801      	ldr	r0, [pc, #4]	; (40684c <__malloc_lock+0x8>)
  406846:	f7ff bc2d 	b.w	4060a4 <__retarget_lock_acquire_recursive>
  40684a:	bf00      	nop
  40684c:	2001955c 	.word	0x2001955c

00406850 <__malloc_unlock>:
  406850:	4801      	ldr	r0, [pc, #4]	; (406858 <__malloc_unlock+0x8>)
  406852:	f7ff bc29 	b.w	4060a8 <__retarget_lock_release_recursive>
  406856:	bf00      	nop
  406858:	2001955c 	.word	0x2001955c

0040685c <_Balloc>:
  40685c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40685e:	b570      	push	{r4, r5, r6, lr}
  406860:	4605      	mov	r5, r0
  406862:	460c      	mov	r4, r1
  406864:	b14b      	cbz	r3, 40687a <_Balloc+0x1e>
  406866:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40686a:	b180      	cbz	r0, 40688e <_Balloc+0x32>
  40686c:	6802      	ldr	r2, [r0, #0]
  40686e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406872:	2300      	movs	r3, #0
  406874:	6103      	str	r3, [r0, #16]
  406876:	60c3      	str	r3, [r0, #12]
  406878:	bd70      	pop	{r4, r5, r6, pc}
  40687a:	2221      	movs	r2, #33	; 0x21
  40687c:	2104      	movs	r1, #4
  40687e:	f000 fccd 	bl	40721c <_calloc_r>
  406882:	64e8      	str	r0, [r5, #76]	; 0x4c
  406884:	4603      	mov	r3, r0
  406886:	2800      	cmp	r0, #0
  406888:	d1ed      	bne.n	406866 <_Balloc+0xa>
  40688a:	2000      	movs	r0, #0
  40688c:	bd70      	pop	{r4, r5, r6, pc}
  40688e:	2101      	movs	r1, #1
  406890:	fa01 f604 	lsl.w	r6, r1, r4
  406894:	1d72      	adds	r2, r6, #5
  406896:	4628      	mov	r0, r5
  406898:	0092      	lsls	r2, r2, #2
  40689a:	f000 fcbf 	bl	40721c <_calloc_r>
  40689e:	2800      	cmp	r0, #0
  4068a0:	d0f3      	beq.n	40688a <_Balloc+0x2e>
  4068a2:	6044      	str	r4, [r0, #4]
  4068a4:	6086      	str	r6, [r0, #8]
  4068a6:	e7e4      	b.n	406872 <_Balloc+0x16>

004068a8 <_Bfree>:
  4068a8:	b131      	cbz	r1, 4068b8 <_Bfree+0x10>
  4068aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4068ac:	684a      	ldr	r2, [r1, #4]
  4068ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4068b2:	6008      	str	r0, [r1, #0]
  4068b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4068b8:	4770      	bx	lr
  4068ba:	bf00      	nop

004068bc <__multadd>:
  4068bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4068be:	690c      	ldr	r4, [r1, #16]
  4068c0:	b083      	sub	sp, #12
  4068c2:	460d      	mov	r5, r1
  4068c4:	4606      	mov	r6, r0
  4068c6:	f101 0e14 	add.w	lr, r1, #20
  4068ca:	2700      	movs	r7, #0
  4068cc:	f8de 0000 	ldr.w	r0, [lr]
  4068d0:	b281      	uxth	r1, r0
  4068d2:	fb02 3301 	mla	r3, r2, r1, r3
  4068d6:	0c01      	lsrs	r1, r0, #16
  4068d8:	0c18      	lsrs	r0, r3, #16
  4068da:	fb02 0101 	mla	r1, r2, r1, r0
  4068de:	b29b      	uxth	r3, r3
  4068e0:	3701      	adds	r7, #1
  4068e2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4068e6:	42bc      	cmp	r4, r7
  4068e8:	f84e 3b04 	str.w	r3, [lr], #4
  4068ec:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4068f0:	dcec      	bgt.n	4068cc <__multadd+0x10>
  4068f2:	b13b      	cbz	r3, 406904 <__multadd+0x48>
  4068f4:	68aa      	ldr	r2, [r5, #8]
  4068f6:	4294      	cmp	r4, r2
  4068f8:	da07      	bge.n	40690a <__multadd+0x4e>
  4068fa:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4068fe:	3401      	adds	r4, #1
  406900:	6153      	str	r3, [r2, #20]
  406902:	612c      	str	r4, [r5, #16]
  406904:	4628      	mov	r0, r5
  406906:	b003      	add	sp, #12
  406908:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40690a:	6869      	ldr	r1, [r5, #4]
  40690c:	9301      	str	r3, [sp, #4]
  40690e:	3101      	adds	r1, #1
  406910:	4630      	mov	r0, r6
  406912:	f7ff ffa3 	bl	40685c <_Balloc>
  406916:	692a      	ldr	r2, [r5, #16]
  406918:	3202      	adds	r2, #2
  40691a:	f105 010c 	add.w	r1, r5, #12
  40691e:	4607      	mov	r7, r0
  406920:	0092      	lsls	r2, r2, #2
  406922:	300c      	adds	r0, #12
  406924:	f7ff fef4 	bl	406710 <memcpy>
  406928:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40692a:	6869      	ldr	r1, [r5, #4]
  40692c:	9b01      	ldr	r3, [sp, #4]
  40692e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406932:	6028      	str	r0, [r5, #0]
  406934:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406938:	463d      	mov	r5, r7
  40693a:	e7de      	b.n	4068fa <__multadd+0x3e>

0040693c <__hi0bits>:
  40693c:	0c02      	lsrs	r2, r0, #16
  40693e:	0412      	lsls	r2, r2, #16
  406940:	4603      	mov	r3, r0
  406942:	b9b2      	cbnz	r2, 406972 <__hi0bits+0x36>
  406944:	0403      	lsls	r3, r0, #16
  406946:	2010      	movs	r0, #16
  406948:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40694c:	bf04      	itt	eq
  40694e:	021b      	lsleq	r3, r3, #8
  406950:	3008      	addeq	r0, #8
  406952:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406956:	bf04      	itt	eq
  406958:	011b      	lsleq	r3, r3, #4
  40695a:	3004      	addeq	r0, #4
  40695c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406960:	bf04      	itt	eq
  406962:	009b      	lsleq	r3, r3, #2
  406964:	3002      	addeq	r0, #2
  406966:	2b00      	cmp	r3, #0
  406968:	db02      	blt.n	406970 <__hi0bits+0x34>
  40696a:	005b      	lsls	r3, r3, #1
  40696c:	d403      	bmi.n	406976 <__hi0bits+0x3a>
  40696e:	2020      	movs	r0, #32
  406970:	4770      	bx	lr
  406972:	2000      	movs	r0, #0
  406974:	e7e8      	b.n	406948 <__hi0bits+0xc>
  406976:	3001      	adds	r0, #1
  406978:	4770      	bx	lr
  40697a:	bf00      	nop

0040697c <__lo0bits>:
  40697c:	6803      	ldr	r3, [r0, #0]
  40697e:	f013 0207 	ands.w	r2, r3, #7
  406982:	4601      	mov	r1, r0
  406984:	d007      	beq.n	406996 <__lo0bits+0x1a>
  406986:	07da      	lsls	r2, r3, #31
  406988:	d421      	bmi.n	4069ce <__lo0bits+0x52>
  40698a:	0798      	lsls	r0, r3, #30
  40698c:	d421      	bmi.n	4069d2 <__lo0bits+0x56>
  40698e:	089b      	lsrs	r3, r3, #2
  406990:	600b      	str	r3, [r1, #0]
  406992:	2002      	movs	r0, #2
  406994:	4770      	bx	lr
  406996:	b298      	uxth	r0, r3
  406998:	b198      	cbz	r0, 4069c2 <__lo0bits+0x46>
  40699a:	4610      	mov	r0, r2
  40699c:	f013 0fff 	tst.w	r3, #255	; 0xff
  4069a0:	bf04      	itt	eq
  4069a2:	0a1b      	lsreq	r3, r3, #8
  4069a4:	3008      	addeq	r0, #8
  4069a6:	071a      	lsls	r2, r3, #28
  4069a8:	bf04      	itt	eq
  4069aa:	091b      	lsreq	r3, r3, #4
  4069ac:	3004      	addeq	r0, #4
  4069ae:	079a      	lsls	r2, r3, #30
  4069b0:	bf04      	itt	eq
  4069b2:	089b      	lsreq	r3, r3, #2
  4069b4:	3002      	addeq	r0, #2
  4069b6:	07da      	lsls	r2, r3, #31
  4069b8:	d407      	bmi.n	4069ca <__lo0bits+0x4e>
  4069ba:	085b      	lsrs	r3, r3, #1
  4069bc:	d104      	bne.n	4069c8 <__lo0bits+0x4c>
  4069be:	2020      	movs	r0, #32
  4069c0:	4770      	bx	lr
  4069c2:	0c1b      	lsrs	r3, r3, #16
  4069c4:	2010      	movs	r0, #16
  4069c6:	e7e9      	b.n	40699c <__lo0bits+0x20>
  4069c8:	3001      	adds	r0, #1
  4069ca:	600b      	str	r3, [r1, #0]
  4069cc:	4770      	bx	lr
  4069ce:	2000      	movs	r0, #0
  4069d0:	4770      	bx	lr
  4069d2:	085b      	lsrs	r3, r3, #1
  4069d4:	600b      	str	r3, [r1, #0]
  4069d6:	2001      	movs	r0, #1
  4069d8:	4770      	bx	lr
  4069da:	bf00      	nop

004069dc <__i2b>:
  4069dc:	b510      	push	{r4, lr}
  4069de:	460c      	mov	r4, r1
  4069e0:	2101      	movs	r1, #1
  4069e2:	f7ff ff3b 	bl	40685c <_Balloc>
  4069e6:	2201      	movs	r2, #1
  4069e8:	6144      	str	r4, [r0, #20]
  4069ea:	6102      	str	r2, [r0, #16]
  4069ec:	bd10      	pop	{r4, pc}
  4069ee:	bf00      	nop

004069f0 <__multiply>:
  4069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069f4:	690c      	ldr	r4, [r1, #16]
  4069f6:	6915      	ldr	r5, [r2, #16]
  4069f8:	42ac      	cmp	r4, r5
  4069fa:	b083      	sub	sp, #12
  4069fc:	468b      	mov	fp, r1
  4069fe:	4616      	mov	r6, r2
  406a00:	da04      	bge.n	406a0c <__multiply+0x1c>
  406a02:	4622      	mov	r2, r4
  406a04:	46b3      	mov	fp, r6
  406a06:	462c      	mov	r4, r5
  406a08:	460e      	mov	r6, r1
  406a0a:	4615      	mov	r5, r2
  406a0c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406a10:	f8db 1004 	ldr.w	r1, [fp, #4]
  406a14:	eb04 0805 	add.w	r8, r4, r5
  406a18:	4598      	cmp	r8, r3
  406a1a:	bfc8      	it	gt
  406a1c:	3101      	addgt	r1, #1
  406a1e:	f7ff ff1d 	bl	40685c <_Balloc>
  406a22:	f100 0914 	add.w	r9, r0, #20
  406a26:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406a2a:	45d1      	cmp	r9, sl
  406a2c:	9000      	str	r0, [sp, #0]
  406a2e:	d205      	bcs.n	406a3c <__multiply+0x4c>
  406a30:	464b      	mov	r3, r9
  406a32:	2100      	movs	r1, #0
  406a34:	f843 1b04 	str.w	r1, [r3], #4
  406a38:	459a      	cmp	sl, r3
  406a3a:	d8fb      	bhi.n	406a34 <__multiply+0x44>
  406a3c:	f106 0c14 	add.w	ip, r6, #20
  406a40:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406a44:	f10b 0b14 	add.w	fp, fp, #20
  406a48:	459c      	cmp	ip, r3
  406a4a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406a4e:	d24c      	bcs.n	406aea <__multiply+0xfa>
  406a50:	f8cd a004 	str.w	sl, [sp, #4]
  406a54:	469a      	mov	sl, r3
  406a56:	f8dc 5000 	ldr.w	r5, [ip]
  406a5a:	b2af      	uxth	r7, r5
  406a5c:	b1ef      	cbz	r7, 406a9a <__multiply+0xaa>
  406a5e:	2100      	movs	r1, #0
  406a60:	464d      	mov	r5, r9
  406a62:	465e      	mov	r6, fp
  406a64:	460c      	mov	r4, r1
  406a66:	f856 2b04 	ldr.w	r2, [r6], #4
  406a6a:	6828      	ldr	r0, [r5, #0]
  406a6c:	b293      	uxth	r3, r2
  406a6e:	b281      	uxth	r1, r0
  406a70:	fb07 1303 	mla	r3, r7, r3, r1
  406a74:	0c12      	lsrs	r2, r2, #16
  406a76:	0c01      	lsrs	r1, r0, #16
  406a78:	4423      	add	r3, r4
  406a7a:	fb07 1102 	mla	r1, r7, r2, r1
  406a7e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406a82:	b29b      	uxth	r3, r3
  406a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406a88:	45b6      	cmp	lr, r6
  406a8a:	f845 3b04 	str.w	r3, [r5], #4
  406a8e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406a92:	d8e8      	bhi.n	406a66 <__multiply+0x76>
  406a94:	602c      	str	r4, [r5, #0]
  406a96:	f8dc 5000 	ldr.w	r5, [ip]
  406a9a:	0c2d      	lsrs	r5, r5, #16
  406a9c:	d01d      	beq.n	406ada <__multiply+0xea>
  406a9e:	f8d9 3000 	ldr.w	r3, [r9]
  406aa2:	4648      	mov	r0, r9
  406aa4:	461c      	mov	r4, r3
  406aa6:	4659      	mov	r1, fp
  406aa8:	2200      	movs	r2, #0
  406aaa:	880e      	ldrh	r6, [r1, #0]
  406aac:	0c24      	lsrs	r4, r4, #16
  406aae:	fb05 4406 	mla	r4, r5, r6, r4
  406ab2:	4422      	add	r2, r4
  406ab4:	b29b      	uxth	r3, r3
  406ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406aba:	f840 3b04 	str.w	r3, [r0], #4
  406abe:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac2:	6804      	ldr	r4, [r0, #0]
  406ac4:	0c1b      	lsrs	r3, r3, #16
  406ac6:	b2a6      	uxth	r6, r4
  406ac8:	fb05 6303 	mla	r3, r5, r3, r6
  406acc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406ad0:	458e      	cmp	lr, r1
  406ad2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406ad6:	d8e8      	bhi.n	406aaa <__multiply+0xba>
  406ad8:	6003      	str	r3, [r0, #0]
  406ada:	f10c 0c04 	add.w	ip, ip, #4
  406ade:	45e2      	cmp	sl, ip
  406ae0:	f109 0904 	add.w	r9, r9, #4
  406ae4:	d8b7      	bhi.n	406a56 <__multiply+0x66>
  406ae6:	f8dd a004 	ldr.w	sl, [sp, #4]
  406aea:	f1b8 0f00 	cmp.w	r8, #0
  406aee:	dd0b      	ble.n	406b08 <__multiply+0x118>
  406af0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406af4:	f1aa 0a04 	sub.w	sl, sl, #4
  406af8:	b11b      	cbz	r3, 406b02 <__multiply+0x112>
  406afa:	e005      	b.n	406b08 <__multiply+0x118>
  406afc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406b00:	b913      	cbnz	r3, 406b08 <__multiply+0x118>
  406b02:	f1b8 0801 	subs.w	r8, r8, #1
  406b06:	d1f9      	bne.n	406afc <__multiply+0x10c>
  406b08:	9800      	ldr	r0, [sp, #0]
  406b0a:	f8c0 8010 	str.w	r8, [r0, #16]
  406b0e:	b003      	add	sp, #12
  406b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406b14 <__pow5mult>:
  406b14:	f012 0303 	ands.w	r3, r2, #3
  406b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b1c:	4614      	mov	r4, r2
  406b1e:	4607      	mov	r7, r0
  406b20:	d12e      	bne.n	406b80 <__pow5mult+0x6c>
  406b22:	460d      	mov	r5, r1
  406b24:	10a4      	asrs	r4, r4, #2
  406b26:	d01c      	beq.n	406b62 <__pow5mult+0x4e>
  406b28:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406b2a:	b396      	cbz	r6, 406b92 <__pow5mult+0x7e>
  406b2c:	07e3      	lsls	r3, r4, #31
  406b2e:	f04f 0800 	mov.w	r8, #0
  406b32:	d406      	bmi.n	406b42 <__pow5mult+0x2e>
  406b34:	1064      	asrs	r4, r4, #1
  406b36:	d014      	beq.n	406b62 <__pow5mult+0x4e>
  406b38:	6830      	ldr	r0, [r6, #0]
  406b3a:	b1a8      	cbz	r0, 406b68 <__pow5mult+0x54>
  406b3c:	4606      	mov	r6, r0
  406b3e:	07e3      	lsls	r3, r4, #31
  406b40:	d5f8      	bpl.n	406b34 <__pow5mult+0x20>
  406b42:	4632      	mov	r2, r6
  406b44:	4629      	mov	r1, r5
  406b46:	4638      	mov	r0, r7
  406b48:	f7ff ff52 	bl	4069f0 <__multiply>
  406b4c:	b1b5      	cbz	r5, 406b7c <__pow5mult+0x68>
  406b4e:	686a      	ldr	r2, [r5, #4]
  406b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406b52:	1064      	asrs	r4, r4, #1
  406b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406b58:	6029      	str	r1, [r5, #0]
  406b5a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406b5e:	4605      	mov	r5, r0
  406b60:	d1ea      	bne.n	406b38 <__pow5mult+0x24>
  406b62:	4628      	mov	r0, r5
  406b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b68:	4632      	mov	r2, r6
  406b6a:	4631      	mov	r1, r6
  406b6c:	4638      	mov	r0, r7
  406b6e:	f7ff ff3f 	bl	4069f0 <__multiply>
  406b72:	6030      	str	r0, [r6, #0]
  406b74:	f8c0 8000 	str.w	r8, [r0]
  406b78:	4606      	mov	r6, r0
  406b7a:	e7e0      	b.n	406b3e <__pow5mult+0x2a>
  406b7c:	4605      	mov	r5, r0
  406b7e:	e7d9      	b.n	406b34 <__pow5mult+0x20>
  406b80:	1e5a      	subs	r2, r3, #1
  406b82:	4d0b      	ldr	r5, [pc, #44]	; (406bb0 <__pow5mult+0x9c>)
  406b84:	2300      	movs	r3, #0
  406b86:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406b8a:	f7ff fe97 	bl	4068bc <__multadd>
  406b8e:	4605      	mov	r5, r0
  406b90:	e7c8      	b.n	406b24 <__pow5mult+0x10>
  406b92:	2101      	movs	r1, #1
  406b94:	4638      	mov	r0, r7
  406b96:	f7ff fe61 	bl	40685c <_Balloc>
  406b9a:	f240 2171 	movw	r1, #625	; 0x271
  406b9e:	2201      	movs	r2, #1
  406ba0:	2300      	movs	r3, #0
  406ba2:	6141      	str	r1, [r0, #20]
  406ba4:	6102      	str	r2, [r0, #16]
  406ba6:	4606      	mov	r6, r0
  406ba8:	64b8      	str	r0, [r7, #72]	; 0x48
  406baa:	6003      	str	r3, [r0, #0]
  406bac:	e7be      	b.n	406b2c <__pow5mult+0x18>
  406bae:	bf00      	nop
  406bb0:	00409080 	.word	0x00409080

00406bb4 <__lshift>:
  406bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406bb8:	4691      	mov	r9, r2
  406bba:	690a      	ldr	r2, [r1, #16]
  406bbc:	688b      	ldr	r3, [r1, #8]
  406bbe:	ea4f 1469 	mov.w	r4, r9, asr #5
  406bc2:	eb04 0802 	add.w	r8, r4, r2
  406bc6:	f108 0501 	add.w	r5, r8, #1
  406bca:	429d      	cmp	r5, r3
  406bcc:	460e      	mov	r6, r1
  406bce:	4607      	mov	r7, r0
  406bd0:	6849      	ldr	r1, [r1, #4]
  406bd2:	dd04      	ble.n	406bde <__lshift+0x2a>
  406bd4:	005b      	lsls	r3, r3, #1
  406bd6:	429d      	cmp	r5, r3
  406bd8:	f101 0101 	add.w	r1, r1, #1
  406bdc:	dcfa      	bgt.n	406bd4 <__lshift+0x20>
  406bde:	4638      	mov	r0, r7
  406be0:	f7ff fe3c 	bl	40685c <_Balloc>
  406be4:	2c00      	cmp	r4, #0
  406be6:	f100 0314 	add.w	r3, r0, #20
  406bea:	dd06      	ble.n	406bfa <__lshift+0x46>
  406bec:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406bf0:	2100      	movs	r1, #0
  406bf2:	f843 1b04 	str.w	r1, [r3], #4
  406bf6:	429a      	cmp	r2, r3
  406bf8:	d1fb      	bne.n	406bf2 <__lshift+0x3e>
  406bfa:	6934      	ldr	r4, [r6, #16]
  406bfc:	f106 0114 	add.w	r1, r6, #20
  406c00:	f019 091f 	ands.w	r9, r9, #31
  406c04:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406c08:	d01d      	beq.n	406c46 <__lshift+0x92>
  406c0a:	f1c9 0c20 	rsb	ip, r9, #32
  406c0e:	2200      	movs	r2, #0
  406c10:	680c      	ldr	r4, [r1, #0]
  406c12:	fa04 f409 	lsl.w	r4, r4, r9
  406c16:	4314      	orrs	r4, r2
  406c18:	f843 4b04 	str.w	r4, [r3], #4
  406c1c:	f851 2b04 	ldr.w	r2, [r1], #4
  406c20:	458e      	cmp	lr, r1
  406c22:	fa22 f20c 	lsr.w	r2, r2, ip
  406c26:	d8f3      	bhi.n	406c10 <__lshift+0x5c>
  406c28:	601a      	str	r2, [r3, #0]
  406c2a:	b10a      	cbz	r2, 406c30 <__lshift+0x7c>
  406c2c:	f108 0502 	add.w	r5, r8, #2
  406c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406c32:	6872      	ldr	r2, [r6, #4]
  406c34:	3d01      	subs	r5, #1
  406c36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406c3a:	6105      	str	r5, [r0, #16]
  406c3c:	6031      	str	r1, [r6, #0]
  406c3e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c46:	3b04      	subs	r3, #4
  406c48:	f851 2b04 	ldr.w	r2, [r1], #4
  406c4c:	f843 2f04 	str.w	r2, [r3, #4]!
  406c50:	458e      	cmp	lr, r1
  406c52:	d8f9      	bhi.n	406c48 <__lshift+0x94>
  406c54:	e7ec      	b.n	406c30 <__lshift+0x7c>
  406c56:	bf00      	nop

00406c58 <__mcmp>:
  406c58:	b430      	push	{r4, r5}
  406c5a:	690b      	ldr	r3, [r1, #16]
  406c5c:	4605      	mov	r5, r0
  406c5e:	6900      	ldr	r0, [r0, #16]
  406c60:	1ac0      	subs	r0, r0, r3
  406c62:	d10f      	bne.n	406c84 <__mcmp+0x2c>
  406c64:	009b      	lsls	r3, r3, #2
  406c66:	3514      	adds	r5, #20
  406c68:	3114      	adds	r1, #20
  406c6a:	4419      	add	r1, r3
  406c6c:	442b      	add	r3, r5
  406c6e:	e001      	b.n	406c74 <__mcmp+0x1c>
  406c70:	429d      	cmp	r5, r3
  406c72:	d207      	bcs.n	406c84 <__mcmp+0x2c>
  406c74:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406c78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406c7c:	4294      	cmp	r4, r2
  406c7e:	d0f7      	beq.n	406c70 <__mcmp+0x18>
  406c80:	d302      	bcc.n	406c88 <__mcmp+0x30>
  406c82:	2001      	movs	r0, #1
  406c84:	bc30      	pop	{r4, r5}
  406c86:	4770      	bx	lr
  406c88:	f04f 30ff 	mov.w	r0, #4294967295
  406c8c:	e7fa      	b.n	406c84 <__mcmp+0x2c>
  406c8e:	bf00      	nop

00406c90 <__mdiff>:
  406c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c94:	690f      	ldr	r7, [r1, #16]
  406c96:	460e      	mov	r6, r1
  406c98:	6911      	ldr	r1, [r2, #16]
  406c9a:	1a7f      	subs	r7, r7, r1
  406c9c:	2f00      	cmp	r7, #0
  406c9e:	4690      	mov	r8, r2
  406ca0:	d117      	bne.n	406cd2 <__mdiff+0x42>
  406ca2:	0089      	lsls	r1, r1, #2
  406ca4:	f106 0514 	add.w	r5, r6, #20
  406ca8:	f102 0e14 	add.w	lr, r2, #20
  406cac:	186b      	adds	r3, r5, r1
  406cae:	4471      	add	r1, lr
  406cb0:	e001      	b.n	406cb6 <__mdiff+0x26>
  406cb2:	429d      	cmp	r5, r3
  406cb4:	d25c      	bcs.n	406d70 <__mdiff+0xe0>
  406cb6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406cba:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406cbe:	42a2      	cmp	r2, r4
  406cc0:	d0f7      	beq.n	406cb2 <__mdiff+0x22>
  406cc2:	d25e      	bcs.n	406d82 <__mdiff+0xf2>
  406cc4:	4633      	mov	r3, r6
  406cc6:	462c      	mov	r4, r5
  406cc8:	4646      	mov	r6, r8
  406cca:	4675      	mov	r5, lr
  406ccc:	4698      	mov	r8, r3
  406cce:	2701      	movs	r7, #1
  406cd0:	e005      	b.n	406cde <__mdiff+0x4e>
  406cd2:	db58      	blt.n	406d86 <__mdiff+0xf6>
  406cd4:	f106 0514 	add.w	r5, r6, #20
  406cd8:	f108 0414 	add.w	r4, r8, #20
  406cdc:	2700      	movs	r7, #0
  406cde:	6871      	ldr	r1, [r6, #4]
  406ce0:	f7ff fdbc 	bl	40685c <_Balloc>
  406ce4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406ce8:	6936      	ldr	r6, [r6, #16]
  406cea:	60c7      	str	r7, [r0, #12]
  406cec:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406cf0:	46a6      	mov	lr, r4
  406cf2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406cf6:	f100 0414 	add.w	r4, r0, #20
  406cfa:	2300      	movs	r3, #0
  406cfc:	f85e 1b04 	ldr.w	r1, [lr], #4
  406d00:	f855 8b04 	ldr.w	r8, [r5], #4
  406d04:	b28a      	uxth	r2, r1
  406d06:	fa13 f388 	uxtah	r3, r3, r8
  406d0a:	0c09      	lsrs	r1, r1, #16
  406d0c:	1a9a      	subs	r2, r3, r2
  406d0e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406d12:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406d16:	b292      	uxth	r2, r2
  406d18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406d1c:	45f4      	cmp	ip, lr
  406d1e:	f844 2b04 	str.w	r2, [r4], #4
  406d22:	ea4f 4323 	mov.w	r3, r3, asr #16
  406d26:	d8e9      	bhi.n	406cfc <__mdiff+0x6c>
  406d28:	42af      	cmp	r7, r5
  406d2a:	d917      	bls.n	406d5c <__mdiff+0xcc>
  406d2c:	46a4      	mov	ip, r4
  406d2e:	46ae      	mov	lr, r5
  406d30:	f85e 2b04 	ldr.w	r2, [lr], #4
  406d34:	fa13 f382 	uxtah	r3, r3, r2
  406d38:	1419      	asrs	r1, r3, #16
  406d3a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406d3e:	b29b      	uxth	r3, r3
  406d40:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406d44:	4577      	cmp	r7, lr
  406d46:	f84c 2b04 	str.w	r2, [ip], #4
  406d4a:	ea4f 4321 	mov.w	r3, r1, asr #16
  406d4e:	d8ef      	bhi.n	406d30 <__mdiff+0xa0>
  406d50:	43ed      	mvns	r5, r5
  406d52:	442f      	add	r7, r5
  406d54:	f027 0703 	bic.w	r7, r7, #3
  406d58:	3704      	adds	r7, #4
  406d5a:	443c      	add	r4, r7
  406d5c:	3c04      	subs	r4, #4
  406d5e:	b922      	cbnz	r2, 406d6a <__mdiff+0xda>
  406d60:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406d64:	3e01      	subs	r6, #1
  406d66:	2b00      	cmp	r3, #0
  406d68:	d0fa      	beq.n	406d60 <__mdiff+0xd0>
  406d6a:	6106      	str	r6, [r0, #16]
  406d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d70:	2100      	movs	r1, #0
  406d72:	f7ff fd73 	bl	40685c <_Balloc>
  406d76:	2201      	movs	r2, #1
  406d78:	2300      	movs	r3, #0
  406d7a:	6102      	str	r2, [r0, #16]
  406d7c:	6143      	str	r3, [r0, #20]
  406d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d82:	4674      	mov	r4, lr
  406d84:	e7ab      	b.n	406cde <__mdiff+0x4e>
  406d86:	4633      	mov	r3, r6
  406d88:	f106 0414 	add.w	r4, r6, #20
  406d8c:	f102 0514 	add.w	r5, r2, #20
  406d90:	4616      	mov	r6, r2
  406d92:	2701      	movs	r7, #1
  406d94:	4698      	mov	r8, r3
  406d96:	e7a2      	b.n	406cde <__mdiff+0x4e>

00406d98 <__d2b>:
  406d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d9c:	b082      	sub	sp, #8
  406d9e:	2101      	movs	r1, #1
  406da0:	461c      	mov	r4, r3
  406da2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406da6:	4615      	mov	r5, r2
  406da8:	9e08      	ldr	r6, [sp, #32]
  406daa:	f7ff fd57 	bl	40685c <_Balloc>
  406dae:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406db2:	4680      	mov	r8, r0
  406db4:	b10f      	cbz	r7, 406dba <__d2b+0x22>
  406db6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406dba:	9401      	str	r4, [sp, #4]
  406dbc:	b31d      	cbz	r5, 406e06 <__d2b+0x6e>
  406dbe:	a802      	add	r0, sp, #8
  406dc0:	f840 5d08 	str.w	r5, [r0, #-8]!
  406dc4:	f7ff fdda 	bl	40697c <__lo0bits>
  406dc8:	2800      	cmp	r0, #0
  406dca:	d134      	bne.n	406e36 <__d2b+0x9e>
  406dcc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406dd0:	f8c8 2014 	str.w	r2, [r8, #20]
  406dd4:	2b00      	cmp	r3, #0
  406dd6:	bf0c      	ite	eq
  406dd8:	2101      	moveq	r1, #1
  406dda:	2102      	movne	r1, #2
  406ddc:	f8c8 3018 	str.w	r3, [r8, #24]
  406de0:	f8c8 1010 	str.w	r1, [r8, #16]
  406de4:	b9df      	cbnz	r7, 406e1e <__d2b+0x86>
  406de6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406dea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406dee:	6030      	str	r0, [r6, #0]
  406df0:	6918      	ldr	r0, [r3, #16]
  406df2:	f7ff fda3 	bl	40693c <__hi0bits>
  406df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406df8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406dfc:	6018      	str	r0, [r3, #0]
  406dfe:	4640      	mov	r0, r8
  406e00:	b002      	add	sp, #8
  406e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e06:	a801      	add	r0, sp, #4
  406e08:	f7ff fdb8 	bl	40697c <__lo0bits>
  406e0c:	9b01      	ldr	r3, [sp, #4]
  406e0e:	f8c8 3014 	str.w	r3, [r8, #20]
  406e12:	2101      	movs	r1, #1
  406e14:	3020      	adds	r0, #32
  406e16:	f8c8 1010 	str.w	r1, [r8, #16]
  406e1a:	2f00      	cmp	r7, #0
  406e1c:	d0e3      	beq.n	406de6 <__d2b+0x4e>
  406e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e20:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406e24:	4407      	add	r7, r0
  406e26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406e2a:	6037      	str	r7, [r6, #0]
  406e2c:	6018      	str	r0, [r3, #0]
  406e2e:	4640      	mov	r0, r8
  406e30:	b002      	add	sp, #8
  406e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e36:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406e3a:	f1c0 0220 	rsb	r2, r0, #32
  406e3e:	fa03 f202 	lsl.w	r2, r3, r2
  406e42:	430a      	orrs	r2, r1
  406e44:	40c3      	lsrs	r3, r0
  406e46:	9301      	str	r3, [sp, #4]
  406e48:	f8c8 2014 	str.w	r2, [r8, #20]
  406e4c:	e7c2      	b.n	406dd4 <__d2b+0x3c>
  406e4e:	bf00      	nop

00406e50 <_sbrk_r>:
  406e50:	b538      	push	{r3, r4, r5, lr}
  406e52:	4c07      	ldr	r4, [pc, #28]	; (406e70 <_sbrk_r+0x20>)
  406e54:	2300      	movs	r3, #0
  406e56:	4605      	mov	r5, r0
  406e58:	4608      	mov	r0, r1
  406e5a:	6023      	str	r3, [r4, #0]
  406e5c:	f7fc f85a 	bl	402f14 <_sbrk>
  406e60:	1c43      	adds	r3, r0, #1
  406e62:	d000      	beq.n	406e66 <_sbrk_r+0x16>
  406e64:	bd38      	pop	{r3, r4, r5, pc}
  406e66:	6823      	ldr	r3, [r4, #0]
  406e68:	2b00      	cmp	r3, #0
  406e6a:	d0fb      	beq.n	406e64 <_sbrk_r+0x14>
  406e6c:	602b      	str	r3, [r5, #0]
  406e6e:	bd38      	pop	{r3, r4, r5, pc}
  406e70:	20019570 	.word	0x20019570

00406e74 <strchr>:
  406e74:	b2c9      	uxtb	r1, r1
  406e76:	2900      	cmp	r1, #0
  406e78:	d041      	beq.n	406efe <strchr+0x8a>
  406e7a:	0782      	lsls	r2, r0, #30
  406e7c:	b4f0      	push	{r4, r5, r6, r7}
  406e7e:	d067      	beq.n	406f50 <strchr+0xdc>
  406e80:	7803      	ldrb	r3, [r0, #0]
  406e82:	2b00      	cmp	r3, #0
  406e84:	d068      	beq.n	406f58 <strchr+0xe4>
  406e86:	4299      	cmp	r1, r3
  406e88:	d037      	beq.n	406efa <strchr+0x86>
  406e8a:	1c43      	adds	r3, r0, #1
  406e8c:	e004      	b.n	406e98 <strchr+0x24>
  406e8e:	f813 0b01 	ldrb.w	r0, [r3], #1
  406e92:	b390      	cbz	r0, 406efa <strchr+0x86>
  406e94:	4281      	cmp	r1, r0
  406e96:	d02f      	beq.n	406ef8 <strchr+0x84>
  406e98:	079a      	lsls	r2, r3, #30
  406e9a:	461c      	mov	r4, r3
  406e9c:	d1f7      	bne.n	406e8e <strchr+0x1a>
  406e9e:	6825      	ldr	r5, [r4, #0]
  406ea0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  406ea4:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  406ea8:	ea83 0605 	eor.w	r6, r3, r5
  406eac:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  406eb0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  406eb4:	ea20 0006 	bic.w	r0, r0, r6
  406eb8:	ea22 0205 	bic.w	r2, r2, r5
  406ebc:	4302      	orrs	r2, r0
  406ebe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406ec2:	d111      	bne.n	406ee8 <strchr+0x74>
  406ec4:	4620      	mov	r0, r4
  406ec6:	f850 6f04 	ldr.w	r6, [r0, #4]!
  406eca:	ea83 0706 	eor.w	r7, r3, r6
  406ece:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  406ed2:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  406ed6:	ea25 0507 	bic.w	r5, r5, r7
  406eda:	ea22 0206 	bic.w	r2, r2, r6
  406ede:	432a      	orrs	r2, r5
  406ee0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406ee4:	d0ef      	beq.n	406ec6 <strchr+0x52>
  406ee6:	4604      	mov	r4, r0
  406ee8:	7820      	ldrb	r0, [r4, #0]
  406eea:	b918      	cbnz	r0, 406ef4 <strchr+0x80>
  406eec:	e005      	b.n	406efa <strchr+0x86>
  406eee:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  406ef2:	b110      	cbz	r0, 406efa <strchr+0x86>
  406ef4:	4281      	cmp	r1, r0
  406ef6:	d1fa      	bne.n	406eee <strchr+0x7a>
  406ef8:	4620      	mov	r0, r4
  406efa:	bcf0      	pop	{r4, r5, r6, r7}
  406efc:	4770      	bx	lr
  406efe:	0783      	lsls	r3, r0, #30
  406f00:	d024      	beq.n	406f4c <strchr+0xd8>
  406f02:	7803      	ldrb	r3, [r0, #0]
  406f04:	2b00      	cmp	r3, #0
  406f06:	d0f9      	beq.n	406efc <strchr+0x88>
  406f08:	1c43      	adds	r3, r0, #1
  406f0a:	e003      	b.n	406f14 <strchr+0xa0>
  406f0c:	7802      	ldrb	r2, [r0, #0]
  406f0e:	3301      	adds	r3, #1
  406f10:	2a00      	cmp	r2, #0
  406f12:	d0f3      	beq.n	406efc <strchr+0x88>
  406f14:	0799      	lsls	r1, r3, #30
  406f16:	4618      	mov	r0, r3
  406f18:	d1f8      	bne.n	406f0c <strchr+0x98>
  406f1a:	6819      	ldr	r1, [r3, #0]
  406f1c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406f20:	ea22 0201 	bic.w	r2, r2, r1
  406f24:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406f28:	d108      	bne.n	406f3c <strchr+0xc8>
  406f2a:	f853 1f04 	ldr.w	r1, [r3, #4]!
  406f2e:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406f32:	ea22 0201 	bic.w	r2, r2, r1
  406f36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406f3a:	d0f6      	beq.n	406f2a <strchr+0xb6>
  406f3c:	781a      	ldrb	r2, [r3, #0]
  406f3e:	4618      	mov	r0, r3
  406f40:	b142      	cbz	r2, 406f54 <strchr+0xe0>
  406f42:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406f46:	2b00      	cmp	r3, #0
  406f48:	d1fb      	bne.n	406f42 <strchr+0xce>
  406f4a:	4770      	bx	lr
  406f4c:	4603      	mov	r3, r0
  406f4e:	e7e4      	b.n	406f1a <strchr+0xa6>
  406f50:	4604      	mov	r4, r0
  406f52:	e7a4      	b.n	406e9e <strchr+0x2a>
  406f54:	4618      	mov	r0, r3
  406f56:	4770      	bx	lr
  406f58:	4618      	mov	r0, r3
  406f5a:	e7ce      	b.n	406efa <strchr+0x86>
	...

00406f80 <strlen>:
  406f80:	f890 f000 	pld	[r0]
  406f84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406f88:	f020 0107 	bic.w	r1, r0, #7
  406f8c:	f06f 0c00 	mvn.w	ip, #0
  406f90:	f010 0407 	ands.w	r4, r0, #7
  406f94:	f891 f020 	pld	[r1, #32]
  406f98:	f040 8049 	bne.w	40702e <strlen+0xae>
  406f9c:	f04f 0400 	mov.w	r4, #0
  406fa0:	f06f 0007 	mvn.w	r0, #7
  406fa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  406fa8:	f891 f040 	pld	[r1, #64]	; 0x40
  406fac:	f100 0008 	add.w	r0, r0, #8
  406fb0:	fa82 f24c 	uadd8	r2, r2, ip
  406fb4:	faa4 f28c 	sel	r2, r4, ip
  406fb8:	fa83 f34c 	uadd8	r3, r3, ip
  406fbc:	faa2 f38c 	sel	r3, r2, ip
  406fc0:	bb4b      	cbnz	r3, 407016 <strlen+0x96>
  406fc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406fc6:	fa82 f24c 	uadd8	r2, r2, ip
  406fca:	f100 0008 	add.w	r0, r0, #8
  406fce:	faa4 f28c 	sel	r2, r4, ip
  406fd2:	fa83 f34c 	uadd8	r3, r3, ip
  406fd6:	faa2 f38c 	sel	r3, r2, ip
  406fda:	b9e3      	cbnz	r3, 407016 <strlen+0x96>
  406fdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406fe0:	fa82 f24c 	uadd8	r2, r2, ip
  406fe4:	f100 0008 	add.w	r0, r0, #8
  406fe8:	faa4 f28c 	sel	r2, r4, ip
  406fec:	fa83 f34c 	uadd8	r3, r3, ip
  406ff0:	faa2 f38c 	sel	r3, r2, ip
  406ff4:	b97b      	cbnz	r3, 407016 <strlen+0x96>
  406ff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406ffa:	f101 0120 	add.w	r1, r1, #32
  406ffe:	fa82 f24c 	uadd8	r2, r2, ip
  407002:	f100 0008 	add.w	r0, r0, #8
  407006:	faa4 f28c 	sel	r2, r4, ip
  40700a:	fa83 f34c 	uadd8	r3, r3, ip
  40700e:	faa2 f38c 	sel	r3, r2, ip
  407012:	2b00      	cmp	r3, #0
  407014:	d0c6      	beq.n	406fa4 <strlen+0x24>
  407016:	2a00      	cmp	r2, #0
  407018:	bf04      	itt	eq
  40701a:	3004      	addeq	r0, #4
  40701c:	461a      	moveq	r2, r3
  40701e:	ba12      	rev	r2, r2
  407020:	fab2 f282 	clz	r2, r2
  407024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40702c:	4770      	bx	lr
  40702e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407032:	f004 0503 	and.w	r5, r4, #3
  407036:	f1c4 0000 	rsb	r0, r4, #0
  40703a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40703e:	f014 0f04 	tst.w	r4, #4
  407042:	f891 f040 	pld	[r1, #64]	; 0x40
  407046:	fa0c f505 	lsl.w	r5, ip, r5
  40704a:	ea62 0205 	orn	r2, r2, r5
  40704e:	bf1c      	itt	ne
  407050:	ea63 0305 	ornne	r3, r3, r5
  407054:	4662      	movne	r2, ip
  407056:	f04f 0400 	mov.w	r4, #0
  40705a:	e7a9      	b.n	406fb0 <strlen+0x30>

0040705c <__ssprint_r>:
  40705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407060:	6893      	ldr	r3, [r2, #8]
  407062:	b083      	sub	sp, #12
  407064:	4690      	mov	r8, r2
  407066:	2b00      	cmp	r3, #0
  407068:	d070      	beq.n	40714c <__ssprint_r+0xf0>
  40706a:	4682      	mov	sl, r0
  40706c:	460c      	mov	r4, r1
  40706e:	6817      	ldr	r7, [r2, #0]
  407070:	688d      	ldr	r5, [r1, #8]
  407072:	6808      	ldr	r0, [r1, #0]
  407074:	e042      	b.n	4070fc <__ssprint_r+0xa0>
  407076:	89a3      	ldrh	r3, [r4, #12]
  407078:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40707c:	d02e      	beq.n	4070dc <__ssprint_r+0x80>
  40707e:	6965      	ldr	r5, [r4, #20]
  407080:	6921      	ldr	r1, [r4, #16]
  407082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407086:	eba0 0b01 	sub.w	fp, r0, r1
  40708a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40708e:	f10b 0001 	add.w	r0, fp, #1
  407092:	106d      	asrs	r5, r5, #1
  407094:	4430      	add	r0, r6
  407096:	42a8      	cmp	r0, r5
  407098:	462a      	mov	r2, r5
  40709a:	bf84      	itt	hi
  40709c:	4605      	movhi	r5, r0
  40709e:	462a      	movhi	r2, r5
  4070a0:	055b      	lsls	r3, r3, #21
  4070a2:	d538      	bpl.n	407116 <__ssprint_r+0xba>
  4070a4:	4611      	mov	r1, r2
  4070a6:	4650      	mov	r0, sl
  4070a8:	f7ff f800 	bl	4060ac <_malloc_r>
  4070ac:	2800      	cmp	r0, #0
  4070ae:	d03c      	beq.n	40712a <__ssprint_r+0xce>
  4070b0:	465a      	mov	r2, fp
  4070b2:	6921      	ldr	r1, [r4, #16]
  4070b4:	9001      	str	r0, [sp, #4]
  4070b6:	f7ff fb2b 	bl	406710 <memcpy>
  4070ba:	89a2      	ldrh	r2, [r4, #12]
  4070bc:	9b01      	ldr	r3, [sp, #4]
  4070be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4070c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4070c6:	81a2      	strh	r2, [r4, #12]
  4070c8:	eba5 020b 	sub.w	r2, r5, fp
  4070cc:	eb03 000b 	add.w	r0, r3, fp
  4070d0:	6165      	str	r5, [r4, #20]
  4070d2:	6123      	str	r3, [r4, #16]
  4070d4:	6020      	str	r0, [r4, #0]
  4070d6:	60a2      	str	r2, [r4, #8]
  4070d8:	4635      	mov	r5, r6
  4070da:	46b3      	mov	fp, r6
  4070dc:	465a      	mov	r2, fp
  4070de:	4649      	mov	r1, r9
  4070e0:	f000 fa18 	bl	407514 <memmove>
  4070e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4070e8:	68a2      	ldr	r2, [r4, #8]
  4070ea:	6820      	ldr	r0, [r4, #0]
  4070ec:	1b55      	subs	r5, r2, r5
  4070ee:	4458      	add	r0, fp
  4070f0:	1b9e      	subs	r6, r3, r6
  4070f2:	60a5      	str	r5, [r4, #8]
  4070f4:	6020      	str	r0, [r4, #0]
  4070f6:	f8c8 6008 	str.w	r6, [r8, #8]
  4070fa:	b33e      	cbz	r6, 40714c <__ssprint_r+0xf0>
  4070fc:	687e      	ldr	r6, [r7, #4]
  4070fe:	463b      	mov	r3, r7
  407100:	3708      	adds	r7, #8
  407102:	2e00      	cmp	r6, #0
  407104:	d0fa      	beq.n	4070fc <__ssprint_r+0xa0>
  407106:	42ae      	cmp	r6, r5
  407108:	f8d3 9000 	ldr.w	r9, [r3]
  40710c:	46ab      	mov	fp, r5
  40710e:	d2b2      	bcs.n	407076 <__ssprint_r+0x1a>
  407110:	4635      	mov	r5, r6
  407112:	46b3      	mov	fp, r6
  407114:	e7e2      	b.n	4070dc <__ssprint_r+0x80>
  407116:	4650      	mov	r0, sl
  407118:	f000 fa60 	bl	4075dc <_realloc_r>
  40711c:	4603      	mov	r3, r0
  40711e:	2800      	cmp	r0, #0
  407120:	d1d2      	bne.n	4070c8 <__ssprint_r+0x6c>
  407122:	6921      	ldr	r1, [r4, #16]
  407124:	4650      	mov	r0, sl
  407126:	f000 f8f9 	bl	40731c <_free_r>
  40712a:	230c      	movs	r3, #12
  40712c:	f8ca 3000 	str.w	r3, [sl]
  407130:	89a3      	ldrh	r3, [r4, #12]
  407132:	2200      	movs	r2, #0
  407134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407138:	f04f 30ff 	mov.w	r0, #4294967295
  40713c:	81a3      	strh	r3, [r4, #12]
  40713e:	f8c8 2008 	str.w	r2, [r8, #8]
  407142:	f8c8 2004 	str.w	r2, [r8, #4]
  407146:	b003      	add	sp, #12
  407148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40714c:	2000      	movs	r0, #0
  40714e:	f8c8 0004 	str.w	r0, [r8, #4]
  407152:	b003      	add	sp, #12
  407154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407158 <__register_exitproc>:
  407158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40715c:	4d2c      	ldr	r5, [pc, #176]	; (407210 <__register_exitproc+0xb8>)
  40715e:	4606      	mov	r6, r0
  407160:	6828      	ldr	r0, [r5, #0]
  407162:	4698      	mov	r8, r3
  407164:	460f      	mov	r7, r1
  407166:	4691      	mov	r9, r2
  407168:	f7fe ff9c 	bl	4060a4 <__retarget_lock_acquire_recursive>
  40716c:	4b29      	ldr	r3, [pc, #164]	; (407214 <__register_exitproc+0xbc>)
  40716e:	681c      	ldr	r4, [r3, #0]
  407170:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407174:	2b00      	cmp	r3, #0
  407176:	d03e      	beq.n	4071f6 <__register_exitproc+0x9e>
  407178:	685a      	ldr	r2, [r3, #4]
  40717a:	2a1f      	cmp	r2, #31
  40717c:	dc1c      	bgt.n	4071b8 <__register_exitproc+0x60>
  40717e:	f102 0e01 	add.w	lr, r2, #1
  407182:	b176      	cbz	r6, 4071a2 <__register_exitproc+0x4a>
  407184:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407188:	2401      	movs	r4, #1
  40718a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40718e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407192:	4094      	lsls	r4, r2
  407194:	4320      	orrs	r0, r4
  407196:	2e02      	cmp	r6, #2
  407198:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40719c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4071a0:	d023      	beq.n	4071ea <__register_exitproc+0x92>
  4071a2:	3202      	adds	r2, #2
  4071a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4071a8:	6828      	ldr	r0, [r5, #0]
  4071aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4071ae:	f7fe ff7b 	bl	4060a8 <__retarget_lock_release_recursive>
  4071b2:	2000      	movs	r0, #0
  4071b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071b8:	4b17      	ldr	r3, [pc, #92]	; (407218 <__register_exitproc+0xc0>)
  4071ba:	b30b      	cbz	r3, 407200 <__register_exitproc+0xa8>
  4071bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4071c0:	f3af 8000 	nop.w
  4071c4:	4603      	mov	r3, r0
  4071c6:	b1d8      	cbz	r0, 407200 <__register_exitproc+0xa8>
  4071c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4071cc:	6002      	str	r2, [r0, #0]
  4071ce:	2100      	movs	r1, #0
  4071d0:	6041      	str	r1, [r0, #4]
  4071d2:	460a      	mov	r2, r1
  4071d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4071d8:	f04f 0e01 	mov.w	lr, #1
  4071dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4071e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4071e4:	2e00      	cmp	r6, #0
  4071e6:	d0dc      	beq.n	4071a2 <__register_exitproc+0x4a>
  4071e8:	e7cc      	b.n	407184 <__register_exitproc+0x2c>
  4071ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4071ee:	430c      	orrs	r4, r1
  4071f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4071f4:	e7d5      	b.n	4071a2 <__register_exitproc+0x4a>
  4071f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4071fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4071fe:	e7bb      	b.n	407178 <__register_exitproc+0x20>
  407200:	6828      	ldr	r0, [r5, #0]
  407202:	f7fe ff51 	bl	4060a8 <__retarget_lock_release_recursive>
  407206:	f04f 30ff 	mov.w	r0, #4294967295
  40720a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40720e:	bf00      	nop
  407210:	20000440 	.word	0x20000440
  407214:	00408f14 	.word	0x00408f14
  407218:	00000000 	.word	0x00000000

0040721c <_calloc_r>:
  40721c:	b510      	push	{r4, lr}
  40721e:	fb02 f101 	mul.w	r1, r2, r1
  407222:	f7fe ff43 	bl	4060ac <_malloc_r>
  407226:	4604      	mov	r4, r0
  407228:	b1d8      	cbz	r0, 407262 <_calloc_r+0x46>
  40722a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40722e:	f022 0203 	bic.w	r2, r2, #3
  407232:	3a04      	subs	r2, #4
  407234:	2a24      	cmp	r2, #36	; 0x24
  407236:	d818      	bhi.n	40726a <_calloc_r+0x4e>
  407238:	2a13      	cmp	r2, #19
  40723a:	d914      	bls.n	407266 <_calloc_r+0x4a>
  40723c:	2300      	movs	r3, #0
  40723e:	2a1b      	cmp	r2, #27
  407240:	6003      	str	r3, [r0, #0]
  407242:	6043      	str	r3, [r0, #4]
  407244:	d916      	bls.n	407274 <_calloc_r+0x58>
  407246:	2a24      	cmp	r2, #36	; 0x24
  407248:	6083      	str	r3, [r0, #8]
  40724a:	60c3      	str	r3, [r0, #12]
  40724c:	bf11      	iteee	ne
  40724e:	f100 0210 	addne.w	r2, r0, #16
  407252:	6103      	streq	r3, [r0, #16]
  407254:	6143      	streq	r3, [r0, #20]
  407256:	f100 0218 	addeq.w	r2, r0, #24
  40725a:	2300      	movs	r3, #0
  40725c:	6013      	str	r3, [r2, #0]
  40725e:	6053      	str	r3, [r2, #4]
  407260:	6093      	str	r3, [r2, #8]
  407262:	4620      	mov	r0, r4
  407264:	bd10      	pop	{r4, pc}
  407266:	4602      	mov	r2, r0
  407268:	e7f7      	b.n	40725a <_calloc_r+0x3e>
  40726a:	2100      	movs	r1, #0
  40726c:	f7fc fa1c 	bl	4036a8 <memset>
  407270:	4620      	mov	r0, r4
  407272:	bd10      	pop	{r4, pc}
  407274:	f100 0208 	add.w	r2, r0, #8
  407278:	e7ef      	b.n	40725a <_calloc_r+0x3e>
  40727a:	bf00      	nop

0040727c <_malloc_trim_r>:
  40727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40727e:	4f24      	ldr	r7, [pc, #144]	; (407310 <_malloc_trim_r+0x94>)
  407280:	460c      	mov	r4, r1
  407282:	4606      	mov	r6, r0
  407284:	f7ff fade 	bl	406844 <__malloc_lock>
  407288:	68bb      	ldr	r3, [r7, #8]
  40728a:	685d      	ldr	r5, [r3, #4]
  40728c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407290:	310f      	adds	r1, #15
  407292:	f025 0503 	bic.w	r5, r5, #3
  407296:	4429      	add	r1, r5
  407298:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40729c:	f021 010f 	bic.w	r1, r1, #15
  4072a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4072a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4072a8:	db07      	blt.n	4072ba <_malloc_trim_r+0x3e>
  4072aa:	2100      	movs	r1, #0
  4072ac:	4630      	mov	r0, r6
  4072ae:	f7ff fdcf 	bl	406e50 <_sbrk_r>
  4072b2:	68bb      	ldr	r3, [r7, #8]
  4072b4:	442b      	add	r3, r5
  4072b6:	4298      	cmp	r0, r3
  4072b8:	d004      	beq.n	4072c4 <_malloc_trim_r+0x48>
  4072ba:	4630      	mov	r0, r6
  4072bc:	f7ff fac8 	bl	406850 <__malloc_unlock>
  4072c0:	2000      	movs	r0, #0
  4072c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4072c4:	4261      	negs	r1, r4
  4072c6:	4630      	mov	r0, r6
  4072c8:	f7ff fdc2 	bl	406e50 <_sbrk_r>
  4072cc:	3001      	adds	r0, #1
  4072ce:	d00d      	beq.n	4072ec <_malloc_trim_r+0x70>
  4072d0:	4b10      	ldr	r3, [pc, #64]	; (407314 <_malloc_trim_r+0x98>)
  4072d2:	68ba      	ldr	r2, [r7, #8]
  4072d4:	6819      	ldr	r1, [r3, #0]
  4072d6:	1b2d      	subs	r5, r5, r4
  4072d8:	f045 0501 	orr.w	r5, r5, #1
  4072dc:	4630      	mov	r0, r6
  4072de:	1b09      	subs	r1, r1, r4
  4072e0:	6055      	str	r5, [r2, #4]
  4072e2:	6019      	str	r1, [r3, #0]
  4072e4:	f7ff fab4 	bl	406850 <__malloc_unlock>
  4072e8:	2001      	movs	r0, #1
  4072ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4072ec:	2100      	movs	r1, #0
  4072ee:	4630      	mov	r0, r6
  4072f0:	f7ff fdae 	bl	406e50 <_sbrk_r>
  4072f4:	68ba      	ldr	r2, [r7, #8]
  4072f6:	1a83      	subs	r3, r0, r2
  4072f8:	2b0f      	cmp	r3, #15
  4072fa:	ddde      	ble.n	4072ba <_malloc_trim_r+0x3e>
  4072fc:	4c06      	ldr	r4, [pc, #24]	; (407318 <_malloc_trim_r+0x9c>)
  4072fe:	4905      	ldr	r1, [pc, #20]	; (407314 <_malloc_trim_r+0x98>)
  407300:	6824      	ldr	r4, [r4, #0]
  407302:	f043 0301 	orr.w	r3, r3, #1
  407306:	1b00      	subs	r0, r0, r4
  407308:	6053      	str	r3, [r2, #4]
  40730a:	6008      	str	r0, [r1, #0]
  40730c:	e7d5      	b.n	4072ba <_malloc_trim_r+0x3e>
  40730e:	bf00      	nop
  407310:	20000444 	.word	0x20000444
  407314:	20000a80 	.word	0x20000a80
  407318:	2000084c 	.word	0x2000084c

0040731c <_free_r>:
  40731c:	2900      	cmp	r1, #0
  40731e:	d044      	beq.n	4073aa <_free_r+0x8e>
  407320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407324:	460d      	mov	r5, r1
  407326:	4680      	mov	r8, r0
  407328:	f7ff fa8c 	bl	406844 <__malloc_lock>
  40732c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407330:	4969      	ldr	r1, [pc, #420]	; (4074d8 <_free_r+0x1bc>)
  407332:	f027 0301 	bic.w	r3, r7, #1
  407336:	f1a5 0408 	sub.w	r4, r5, #8
  40733a:	18e2      	adds	r2, r4, r3
  40733c:	688e      	ldr	r6, [r1, #8]
  40733e:	6850      	ldr	r0, [r2, #4]
  407340:	42b2      	cmp	r2, r6
  407342:	f020 0003 	bic.w	r0, r0, #3
  407346:	d05e      	beq.n	407406 <_free_r+0xea>
  407348:	07fe      	lsls	r6, r7, #31
  40734a:	6050      	str	r0, [r2, #4]
  40734c:	d40b      	bmi.n	407366 <_free_r+0x4a>
  40734e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407352:	1be4      	subs	r4, r4, r7
  407354:	f101 0e08 	add.w	lr, r1, #8
  407358:	68a5      	ldr	r5, [r4, #8]
  40735a:	4575      	cmp	r5, lr
  40735c:	443b      	add	r3, r7
  40735e:	d06d      	beq.n	40743c <_free_r+0x120>
  407360:	68e7      	ldr	r7, [r4, #12]
  407362:	60ef      	str	r7, [r5, #12]
  407364:	60bd      	str	r5, [r7, #8]
  407366:	1815      	adds	r5, r2, r0
  407368:	686d      	ldr	r5, [r5, #4]
  40736a:	07ed      	lsls	r5, r5, #31
  40736c:	d53e      	bpl.n	4073ec <_free_r+0xd0>
  40736e:	f043 0201 	orr.w	r2, r3, #1
  407372:	6062      	str	r2, [r4, #4]
  407374:	50e3      	str	r3, [r4, r3]
  407376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40737a:	d217      	bcs.n	4073ac <_free_r+0x90>
  40737c:	08db      	lsrs	r3, r3, #3
  40737e:	1c58      	adds	r0, r3, #1
  407380:	109a      	asrs	r2, r3, #2
  407382:	684d      	ldr	r5, [r1, #4]
  407384:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407388:	60a7      	str	r7, [r4, #8]
  40738a:	2301      	movs	r3, #1
  40738c:	4093      	lsls	r3, r2
  40738e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407392:	432b      	orrs	r3, r5
  407394:	3a08      	subs	r2, #8
  407396:	60e2      	str	r2, [r4, #12]
  407398:	604b      	str	r3, [r1, #4]
  40739a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40739e:	60fc      	str	r4, [r7, #12]
  4073a0:	4640      	mov	r0, r8
  4073a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4073a6:	f7ff ba53 	b.w	406850 <__malloc_unlock>
  4073aa:	4770      	bx	lr
  4073ac:	0a5a      	lsrs	r2, r3, #9
  4073ae:	2a04      	cmp	r2, #4
  4073b0:	d852      	bhi.n	407458 <_free_r+0x13c>
  4073b2:	099a      	lsrs	r2, r3, #6
  4073b4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4073b8:	00ff      	lsls	r7, r7, #3
  4073ba:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4073be:	19c8      	adds	r0, r1, r7
  4073c0:	59ca      	ldr	r2, [r1, r7]
  4073c2:	3808      	subs	r0, #8
  4073c4:	4290      	cmp	r0, r2
  4073c6:	d04f      	beq.n	407468 <_free_r+0x14c>
  4073c8:	6851      	ldr	r1, [r2, #4]
  4073ca:	f021 0103 	bic.w	r1, r1, #3
  4073ce:	428b      	cmp	r3, r1
  4073d0:	d232      	bcs.n	407438 <_free_r+0x11c>
  4073d2:	6892      	ldr	r2, [r2, #8]
  4073d4:	4290      	cmp	r0, r2
  4073d6:	d1f7      	bne.n	4073c8 <_free_r+0xac>
  4073d8:	68c3      	ldr	r3, [r0, #12]
  4073da:	60a0      	str	r0, [r4, #8]
  4073dc:	60e3      	str	r3, [r4, #12]
  4073de:	609c      	str	r4, [r3, #8]
  4073e0:	60c4      	str	r4, [r0, #12]
  4073e2:	4640      	mov	r0, r8
  4073e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4073e8:	f7ff ba32 	b.w	406850 <__malloc_unlock>
  4073ec:	6895      	ldr	r5, [r2, #8]
  4073ee:	4f3b      	ldr	r7, [pc, #236]	; (4074dc <_free_r+0x1c0>)
  4073f0:	42bd      	cmp	r5, r7
  4073f2:	4403      	add	r3, r0
  4073f4:	d040      	beq.n	407478 <_free_r+0x15c>
  4073f6:	68d0      	ldr	r0, [r2, #12]
  4073f8:	60e8      	str	r0, [r5, #12]
  4073fa:	f043 0201 	orr.w	r2, r3, #1
  4073fe:	6085      	str	r5, [r0, #8]
  407400:	6062      	str	r2, [r4, #4]
  407402:	50e3      	str	r3, [r4, r3]
  407404:	e7b7      	b.n	407376 <_free_r+0x5a>
  407406:	07ff      	lsls	r7, r7, #31
  407408:	4403      	add	r3, r0
  40740a:	d407      	bmi.n	40741c <_free_r+0x100>
  40740c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407410:	1aa4      	subs	r4, r4, r2
  407412:	4413      	add	r3, r2
  407414:	68a0      	ldr	r0, [r4, #8]
  407416:	68e2      	ldr	r2, [r4, #12]
  407418:	60c2      	str	r2, [r0, #12]
  40741a:	6090      	str	r0, [r2, #8]
  40741c:	4a30      	ldr	r2, [pc, #192]	; (4074e0 <_free_r+0x1c4>)
  40741e:	6812      	ldr	r2, [r2, #0]
  407420:	f043 0001 	orr.w	r0, r3, #1
  407424:	4293      	cmp	r3, r2
  407426:	6060      	str	r0, [r4, #4]
  407428:	608c      	str	r4, [r1, #8]
  40742a:	d3b9      	bcc.n	4073a0 <_free_r+0x84>
  40742c:	4b2d      	ldr	r3, [pc, #180]	; (4074e4 <_free_r+0x1c8>)
  40742e:	4640      	mov	r0, r8
  407430:	6819      	ldr	r1, [r3, #0]
  407432:	f7ff ff23 	bl	40727c <_malloc_trim_r>
  407436:	e7b3      	b.n	4073a0 <_free_r+0x84>
  407438:	4610      	mov	r0, r2
  40743a:	e7cd      	b.n	4073d8 <_free_r+0xbc>
  40743c:	1811      	adds	r1, r2, r0
  40743e:	6849      	ldr	r1, [r1, #4]
  407440:	07c9      	lsls	r1, r1, #31
  407442:	d444      	bmi.n	4074ce <_free_r+0x1b2>
  407444:	6891      	ldr	r1, [r2, #8]
  407446:	68d2      	ldr	r2, [r2, #12]
  407448:	60ca      	str	r2, [r1, #12]
  40744a:	4403      	add	r3, r0
  40744c:	f043 0001 	orr.w	r0, r3, #1
  407450:	6091      	str	r1, [r2, #8]
  407452:	6060      	str	r0, [r4, #4]
  407454:	50e3      	str	r3, [r4, r3]
  407456:	e7a3      	b.n	4073a0 <_free_r+0x84>
  407458:	2a14      	cmp	r2, #20
  40745a:	d816      	bhi.n	40748a <_free_r+0x16e>
  40745c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407460:	00ff      	lsls	r7, r7, #3
  407462:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407466:	e7aa      	b.n	4073be <_free_r+0xa2>
  407468:	10aa      	asrs	r2, r5, #2
  40746a:	2301      	movs	r3, #1
  40746c:	684d      	ldr	r5, [r1, #4]
  40746e:	4093      	lsls	r3, r2
  407470:	432b      	orrs	r3, r5
  407472:	604b      	str	r3, [r1, #4]
  407474:	4603      	mov	r3, r0
  407476:	e7b0      	b.n	4073da <_free_r+0xbe>
  407478:	f043 0201 	orr.w	r2, r3, #1
  40747c:	614c      	str	r4, [r1, #20]
  40747e:	610c      	str	r4, [r1, #16]
  407480:	60e5      	str	r5, [r4, #12]
  407482:	60a5      	str	r5, [r4, #8]
  407484:	6062      	str	r2, [r4, #4]
  407486:	50e3      	str	r3, [r4, r3]
  407488:	e78a      	b.n	4073a0 <_free_r+0x84>
  40748a:	2a54      	cmp	r2, #84	; 0x54
  40748c:	d806      	bhi.n	40749c <_free_r+0x180>
  40748e:	0b1a      	lsrs	r2, r3, #12
  407490:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407494:	00ff      	lsls	r7, r7, #3
  407496:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40749a:	e790      	b.n	4073be <_free_r+0xa2>
  40749c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4074a0:	d806      	bhi.n	4074b0 <_free_r+0x194>
  4074a2:	0bda      	lsrs	r2, r3, #15
  4074a4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4074a8:	00ff      	lsls	r7, r7, #3
  4074aa:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4074ae:	e786      	b.n	4073be <_free_r+0xa2>
  4074b0:	f240 5054 	movw	r0, #1364	; 0x554
  4074b4:	4282      	cmp	r2, r0
  4074b6:	d806      	bhi.n	4074c6 <_free_r+0x1aa>
  4074b8:	0c9a      	lsrs	r2, r3, #18
  4074ba:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4074be:	00ff      	lsls	r7, r7, #3
  4074c0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4074c4:	e77b      	b.n	4073be <_free_r+0xa2>
  4074c6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4074ca:	257e      	movs	r5, #126	; 0x7e
  4074cc:	e777      	b.n	4073be <_free_r+0xa2>
  4074ce:	f043 0101 	orr.w	r1, r3, #1
  4074d2:	6061      	str	r1, [r4, #4]
  4074d4:	6013      	str	r3, [r2, #0]
  4074d6:	e763      	b.n	4073a0 <_free_r+0x84>
  4074d8:	20000444 	.word	0x20000444
  4074dc:	2000044c 	.word	0x2000044c
  4074e0:	20000850 	.word	0x20000850
  4074e4:	20000ab0 	.word	0x20000ab0

004074e8 <__ascii_mbtowc>:
  4074e8:	b082      	sub	sp, #8
  4074ea:	b149      	cbz	r1, 407500 <__ascii_mbtowc+0x18>
  4074ec:	b15a      	cbz	r2, 407506 <__ascii_mbtowc+0x1e>
  4074ee:	b16b      	cbz	r3, 40750c <__ascii_mbtowc+0x24>
  4074f0:	7813      	ldrb	r3, [r2, #0]
  4074f2:	600b      	str	r3, [r1, #0]
  4074f4:	7812      	ldrb	r2, [r2, #0]
  4074f6:	1c10      	adds	r0, r2, #0
  4074f8:	bf18      	it	ne
  4074fa:	2001      	movne	r0, #1
  4074fc:	b002      	add	sp, #8
  4074fe:	4770      	bx	lr
  407500:	a901      	add	r1, sp, #4
  407502:	2a00      	cmp	r2, #0
  407504:	d1f3      	bne.n	4074ee <__ascii_mbtowc+0x6>
  407506:	4610      	mov	r0, r2
  407508:	b002      	add	sp, #8
  40750a:	4770      	bx	lr
  40750c:	f06f 0001 	mvn.w	r0, #1
  407510:	e7f4      	b.n	4074fc <__ascii_mbtowc+0x14>
  407512:	bf00      	nop

00407514 <memmove>:
  407514:	4288      	cmp	r0, r1
  407516:	b5f0      	push	{r4, r5, r6, r7, lr}
  407518:	d90d      	bls.n	407536 <memmove+0x22>
  40751a:	188b      	adds	r3, r1, r2
  40751c:	4298      	cmp	r0, r3
  40751e:	d20a      	bcs.n	407536 <memmove+0x22>
  407520:	1884      	adds	r4, r0, r2
  407522:	2a00      	cmp	r2, #0
  407524:	d051      	beq.n	4075ca <memmove+0xb6>
  407526:	4622      	mov	r2, r4
  407528:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40752c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407530:	4299      	cmp	r1, r3
  407532:	d1f9      	bne.n	407528 <memmove+0x14>
  407534:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407536:	2a0f      	cmp	r2, #15
  407538:	d948      	bls.n	4075cc <memmove+0xb8>
  40753a:	ea41 0300 	orr.w	r3, r1, r0
  40753e:	079b      	lsls	r3, r3, #30
  407540:	d146      	bne.n	4075d0 <memmove+0xbc>
  407542:	f100 0410 	add.w	r4, r0, #16
  407546:	f101 0310 	add.w	r3, r1, #16
  40754a:	4615      	mov	r5, r2
  40754c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407550:	f844 6c10 	str.w	r6, [r4, #-16]
  407554:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407558:	f844 6c0c 	str.w	r6, [r4, #-12]
  40755c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407560:	f844 6c08 	str.w	r6, [r4, #-8]
  407564:	3d10      	subs	r5, #16
  407566:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40756a:	f844 6c04 	str.w	r6, [r4, #-4]
  40756e:	2d0f      	cmp	r5, #15
  407570:	f103 0310 	add.w	r3, r3, #16
  407574:	f104 0410 	add.w	r4, r4, #16
  407578:	d8e8      	bhi.n	40754c <memmove+0x38>
  40757a:	f1a2 0310 	sub.w	r3, r2, #16
  40757e:	f023 030f 	bic.w	r3, r3, #15
  407582:	f002 0e0f 	and.w	lr, r2, #15
  407586:	3310      	adds	r3, #16
  407588:	f1be 0f03 	cmp.w	lr, #3
  40758c:	4419      	add	r1, r3
  40758e:	4403      	add	r3, r0
  407590:	d921      	bls.n	4075d6 <memmove+0xc2>
  407592:	1f1e      	subs	r6, r3, #4
  407594:	460d      	mov	r5, r1
  407596:	4674      	mov	r4, lr
  407598:	3c04      	subs	r4, #4
  40759a:	f855 7b04 	ldr.w	r7, [r5], #4
  40759e:	f846 7f04 	str.w	r7, [r6, #4]!
  4075a2:	2c03      	cmp	r4, #3
  4075a4:	d8f8      	bhi.n	407598 <memmove+0x84>
  4075a6:	f1ae 0404 	sub.w	r4, lr, #4
  4075aa:	f024 0403 	bic.w	r4, r4, #3
  4075ae:	3404      	adds	r4, #4
  4075b0:	4421      	add	r1, r4
  4075b2:	4423      	add	r3, r4
  4075b4:	f002 0203 	and.w	r2, r2, #3
  4075b8:	b162      	cbz	r2, 4075d4 <memmove+0xc0>
  4075ba:	3b01      	subs	r3, #1
  4075bc:	440a      	add	r2, r1
  4075be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4075c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4075c6:	428a      	cmp	r2, r1
  4075c8:	d1f9      	bne.n	4075be <memmove+0xaa>
  4075ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075cc:	4603      	mov	r3, r0
  4075ce:	e7f3      	b.n	4075b8 <memmove+0xa4>
  4075d0:	4603      	mov	r3, r0
  4075d2:	e7f2      	b.n	4075ba <memmove+0xa6>
  4075d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075d6:	4672      	mov	r2, lr
  4075d8:	e7ee      	b.n	4075b8 <memmove+0xa4>
  4075da:	bf00      	nop

004075dc <_realloc_r>:
  4075dc:	2900      	cmp	r1, #0
  4075de:	f000 8095 	beq.w	40770c <_realloc_r+0x130>
  4075e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075e6:	460d      	mov	r5, r1
  4075e8:	4616      	mov	r6, r2
  4075ea:	b083      	sub	sp, #12
  4075ec:	4680      	mov	r8, r0
  4075ee:	f106 070b 	add.w	r7, r6, #11
  4075f2:	f7ff f927 	bl	406844 <__malloc_lock>
  4075f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4075fa:	2f16      	cmp	r7, #22
  4075fc:	f02e 0403 	bic.w	r4, lr, #3
  407600:	f1a5 0908 	sub.w	r9, r5, #8
  407604:	d83c      	bhi.n	407680 <_realloc_r+0xa4>
  407606:	2210      	movs	r2, #16
  407608:	4617      	mov	r7, r2
  40760a:	42be      	cmp	r6, r7
  40760c:	d83d      	bhi.n	40768a <_realloc_r+0xae>
  40760e:	4294      	cmp	r4, r2
  407610:	da43      	bge.n	40769a <_realloc_r+0xbe>
  407612:	4bc4      	ldr	r3, [pc, #784]	; (407924 <_realloc_r+0x348>)
  407614:	6899      	ldr	r1, [r3, #8]
  407616:	eb09 0004 	add.w	r0, r9, r4
  40761a:	4288      	cmp	r0, r1
  40761c:	f000 80b4 	beq.w	407788 <_realloc_r+0x1ac>
  407620:	6843      	ldr	r3, [r0, #4]
  407622:	f023 0101 	bic.w	r1, r3, #1
  407626:	4401      	add	r1, r0
  407628:	6849      	ldr	r1, [r1, #4]
  40762a:	07c9      	lsls	r1, r1, #31
  40762c:	d54c      	bpl.n	4076c8 <_realloc_r+0xec>
  40762e:	f01e 0f01 	tst.w	lr, #1
  407632:	f000 809b 	beq.w	40776c <_realloc_r+0x190>
  407636:	4631      	mov	r1, r6
  407638:	4640      	mov	r0, r8
  40763a:	f7fe fd37 	bl	4060ac <_malloc_r>
  40763e:	4606      	mov	r6, r0
  407640:	2800      	cmp	r0, #0
  407642:	d03a      	beq.n	4076ba <_realloc_r+0xde>
  407644:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407648:	f023 0301 	bic.w	r3, r3, #1
  40764c:	444b      	add	r3, r9
  40764e:	f1a0 0208 	sub.w	r2, r0, #8
  407652:	429a      	cmp	r2, r3
  407654:	f000 8121 	beq.w	40789a <_realloc_r+0x2be>
  407658:	1f22      	subs	r2, r4, #4
  40765a:	2a24      	cmp	r2, #36	; 0x24
  40765c:	f200 8107 	bhi.w	40786e <_realloc_r+0x292>
  407660:	2a13      	cmp	r2, #19
  407662:	f200 80db 	bhi.w	40781c <_realloc_r+0x240>
  407666:	4603      	mov	r3, r0
  407668:	462a      	mov	r2, r5
  40766a:	6811      	ldr	r1, [r2, #0]
  40766c:	6019      	str	r1, [r3, #0]
  40766e:	6851      	ldr	r1, [r2, #4]
  407670:	6059      	str	r1, [r3, #4]
  407672:	6892      	ldr	r2, [r2, #8]
  407674:	609a      	str	r2, [r3, #8]
  407676:	4629      	mov	r1, r5
  407678:	4640      	mov	r0, r8
  40767a:	f7ff fe4f 	bl	40731c <_free_r>
  40767e:	e01c      	b.n	4076ba <_realloc_r+0xde>
  407680:	f027 0707 	bic.w	r7, r7, #7
  407684:	2f00      	cmp	r7, #0
  407686:	463a      	mov	r2, r7
  407688:	dabf      	bge.n	40760a <_realloc_r+0x2e>
  40768a:	2600      	movs	r6, #0
  40768c:	230c      	movs	r3, #12
  40768e:	4630      	mov	r0, r6
  407690:	f8c8 3000 	str.w	r3, [r8]
  407694:	b003      	add	sp, #12
  407696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40769a:	462e      	mov	r6, r5
  40769c:	1be3      	subs	r3, r4, r7
  40769e:	2b0f      	cmp	r3, #15
  4076a0:	d81e      	bhi.n	4076e0 <_realloc_r+0x104>
  4076a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4076a6:	f003 0301 	and.w	r3, r3, #1
  4076aa:	4323      	orrs	r3, r4
  4076ac:	444c      	add	r4, r9
  4076ae:	f8c9 3004 	str.w	r3, [r9, #4]
  4076b2:	6863      	ldr	r3, [r4, #4]
  4076b4:	f043 0301 	orr.w	r3, r3, #1
  4076b8:	6063      	str	r3, [r4, #4]
  4076ba:	4640      	mov	r0, r8
  4076bc:	f7ff f8c8 	bl	406850 <__malloc_unlock>
  4076c0:	4630      	mov	r0, r6
  4076c2:	b003      	add	sp, #12
  4076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076c8:	f023 0303 	bic.w	r3, r3, #3
  4076cc:	18e1      	adds	r1, r4, r3
  4076ce:	4291      	cmp	r1, r2
  4076d0:	db1f      	blt.n	407712 <_realloc_r+0x136>
  4076d2:	68c3      	ldr	r3, [r0, #12]
  4076d4:	6882      	ldr	r2, [r0, #8]
  4076d6:	462e      	mov	r6, r5
  4076d8:	60d3      	str	r3, [r2, #12]
  4076da:	460c      	mov	r4, r1
  4076dc:	609a      	str	r2, [r3, #8]
  4076de:	e7dd      	b.n	40769c <_realloc_r+0xc0>
  4076e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4076e4:	eb09 0107 	add.w	r1, r9, r7
  4076e8:	f002 0201 	and.w	r2, r2, #1
  4076ec:	444c      	add	r4, r9
  4076ee:	f043 0301 	orr.w	r3, r3, #1
  4076f2:	4317      	orrs	r7, r2
  4076f4:	f8c9 7004 	str.w	r7, [r9, #4]
  4076f8:	604b      	str	r3, [r1, #4]
  4076fa:	6863      	ldr	r3, [r4, #4]
  4076fc:	f043 0301 	orr.w	r3, r3, #1
  407700:	3108      	adds	r1, #8
  407702:	6063      	str	r3, [r4, #4]
  407704:	4640      	mov	r0, r8
  407706:	f7ff fe09 	bl	40731c <_free_r>
  40770a:	e7d6      	b.n	4076ba <_realloc_r+0xde>
  40770c:	4611      	mov	r1, r2
  40770e:	f7fe bccd 	b.w	4060ac <_malloc_r>
  407712:	f01e 0f01 	tst.w	lr, #1
  407716:	d18e      	bne.n	407636 <_realloc_r+0x5a>
  407718:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40771c:	eba9 0a01 	sub.w	sl, r9, r1
  407720:	f8da 1004 	ldr.w	r1, [sl, #4]
  407724:	f021 0103 	bic.w	r1, r1, #3
  407728:	440b      	add	r3, r1
  40772a:	4423      	add	r3, r4
  40772c:	4293      	cmp	r3, r2
  40772e:	db25      	blt.n	40777c <_realloc_r+0x1a0>
  407730:	68c2      	ldr	r2, [r0, #12]
  407732:	6881      	ldr	r1, [r0, #8]
  407734:	4656      	mov	r6, sl
  407736:	60ca      	str	r2, [r1, #12]
  407738:	6091      	str	r1, [r2, #8]
  40773a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40773e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407742:	1f22      	subs	r2, r4, #4
  407744:	2a24      	cmp	r2, #36	; 0x24
  407746:	60c1      	str	r1, [r0, #12]
  407748:	6088      	str	r0, [r1, #8]
  40774a:	f200 8094 	bhi.w	407876 <_realloc_r+0x29a>
  40774e:	2a13      	cmp	r2, #19
  407750:	d96f      	bls.n	407832 <_realloc_r+0x256>
  407752:	6829      	ldr	r1, [r5, #0]
  407754:	f8ca 1008 	str.w	r1, [sl, #8]
  407758:	6869      	ldr	r1, [r5, #4]
  40775a:	f8ca 100c 	str.w	r1, [sl, #12]
  40775e:	2a1b      	cmp	r2, #27
  407760:	f200 80a2 	bhi.w	4078a8 <_realloc_r+0x2cc>
  407764:	3508      	adds	r5, #8
  407766:	f10a 0210 	add.w	r2, sl, #16
  40776a:	e063      	b.n	407834 <_realloc_r+0x258>
  40776c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407770:	eba9 0a03 	sub.w	sl, r9, r3
  407774:	f8da 1004 	ldr.w	r1, [sl, #4]
  407778:	f021 0103 	bic.w	r1, r1, #3
  40777c:	1863      	adds	r3, r4, r1
  40777e:	4293      	cmp	r3, r2
  407780:	f6ff af59 	blt.w	407636 <_realloc_r+0x5a>
  407784:	4656      	mov	r6, sl
  407786:	e7d8      	b.n	40773a <_realloc_r+0x15e>
  407788:	6841      	ldr	r1, [r0, #4]
  40778a:	f021 0b03 	bic.w	fp, r1, #3
  40778e:	44a3      	add	fp, r4
  407790:	f107 0010 	add.w	r0, r7, #16
  407794:	4583      	cmp	fp, r0
  407796:	da56      	bge.n	407846 <_realloc_r+0x26a>
  407798:	f01e 0f01 	tst.w	lr, #1
  40779c:	f47f af4b 	bne.w	407636 <_realloc_r+0x5a>
  4077a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4077a4:	eba9 0a01 	sub.w	sl, r9, r1
  4077a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4077ac:	f021 0103 	bic.w	r1, r1, #3
  4077b0:	448b      	add	fp, r1
  4077b2:	4558      	cmp	r0, fp
  4077b4:	dce2      	bgt.n	40777c <_realloc_r+0x1a0>
  4077b6:	4656      	mov	r6, sl
  4077b8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4077bc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4077c0:	1f22      	subs	r2, r4, #4
  4077c2:	2a24      	cmp	r2, #36	; 0x24
  4077c4:	60c1      	str	r1, [r0, #12]
  4077c6:	6088      	str	r0, [r1, #8]
  4077c8:	f200 808f 	bhi.w	4078ea <_realloc_r+0x30e>
  4077cc:	2a13      	cmp	r2, #19
  4077ce:	f240 808a 	bls.w	4078e6 <_realloc_r+0x30a>
  4077d2:	6829      	ldr	r1, [r5, #0]
  4077d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4077d8:	6869      	ldr	r1, [r5, #4]
  4077da:	f8ca 100c 	str.w	r1, [sl, #12]
  4077de:	2a1b      	cmp	r2, #27
  4077e0:	f200 808a 	bhi.w	4078f8 <_realloc_r+0x31c>
  4077e4:	3508      	adds	r5, #8
  4077e6:	f10a 0210 	add.w	r2, sl, #16
  4077ea:	6829      	ldr	r1, [r5, #0]
  4077ec:	6011      	str	r1, [r2, #0]
  4077ee:	6869      	ldr	r1, [r5, #4]
  4077f0:	6051      	str	r1, [r2, #4]
  4077f2:	68a9      	ldr	r1, [r5, #8]
  4077f4:	6091      	str	r1, [r2, #8]
  4077f6:	eb0a 0107 	add.w	r1, sl, r7
  4077fa:	ebab 0207 	sub.w	r2, fp, r7
  4077fe:	f042 0201 	orr.w	r2, r2, #1
  407802:	6099      	str	r1, [r3, #8]
  407804:	604a      	str	r2, [r1, #4]
  407806:	f8da 3004 	ldr.w	r3, [sl, #4]
  40780a:	f003 0301 	and.w	r3, r3, #1
  40780e:	431f      	orrs	r7, r3
  407810:	4640      	mov	r0, r8
  407812:	f8ca 7004 	str.w	r7, [sl, #4]
  407816:	f7ff f81b 	bl	406850 <__malloc_unlock>
  40781a:	e751      	b.n	4076c0 <_realloc_r+0xe4>
  40781c:	682b      	ldr	r3, [r5, #0]
  40781e:	6003      	str	r3, [r0, #0]
  407820:	686b      	ldr	r3, [r5, #4]
  407822:	6043      	str	r3, [r0, #4]
  407824:	2a1b      	cmp	r2, #27
  407826:	d82d      	bhi.n	407884 <_realloc_r+0x2a8>
  407828:	f100 0308 	add.w	r3, r0, #8
  40782c:	f105 0208 	add.w	r2, r5, #8
  407830:	e71b      	b.n	40766a <_realloc_r+0x8e>
  407832:	4632      	mov	r2, r6
  407834:	6829      	ldr	r1, [r5, #0]
  407836:	6011      	str	r1, [r2, #0]
  407838:	6869      	ldr	r1, [r5, #4]
  40783a:	6051      	str	r1, [r2, #4]
  40783c:	68a9      	ldr	r1, [r5, #8]
  40783e:	6091      	str	r1, [r2, #8]
  407840:	461c      	mov	r4, r3
  407842:	46d1      	mov	r9, sl
  407844:	e72a      	b.n	40769c <_realloc_r+0xc0>
  407846:	eb09 0107 	add.w	r1, r9, r7
  40784a:	ebab 0b07 	sub.w	fp, fp, r7
  40784e:	f04b 0201 	orr.w	r2, fp, #1
  407852:	6099      	str	r1, [r3, #8]
  407854:	604a      	str	r2, [r1, #4]
  407856:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40785a:	f003 0301 	and.w	r3, r3, #1
  40785e:	431f      	orrs	r7, r3
  407860:	4640      	mov	r0, r8
  407862:	f845 7c04 	str.w	r7, [r5, #-4]
  407866:	f7fe fff3 	bl	406850 <__malloc_unlock>
  40786a:	462e      	mov	r6, r5
  40786c:	e728      	b.n	4076c0 <_realloc_r+0xe4>
  40786e:	4629      	mov	r1, r5
  407870:	f7ff fe50 	bl	407514 <memmove>
  407874:	e6ff      	b.n	407676 <_realloc_r+0x9a>
  407876:	4629      	mov	r1, r5
  407878:	4630      	mov	r0, r6
  40787a:	461c      	mov	r4, r3
  40787c:	46d1      	mov	r9, sl
  40787e:	f7ff fe49 	bl	407514 <memmove>
  407882:	e70b      	b.n	40769c <_realloc_r+0xc0>
  407884:	68ab      	ldr	r3, [r5, #8]
  407886:	6083      	str	r3, [r0, #8]
  407888:	68eb      	ldr	r3, [r5, #12]
  40788a:	60c3      	str	r3, [r0, #12]
  40788c:	2a24      	cmp	r2, #36	; 0x24
  40788e:	d017      	beq.n	4078c0 <_realloc_r+0x2e4>
  407890:	f100 0310 	add.w	r3, r0, #16
  407894:	f105 0210 	add.w	r2, r5, #16
  407898:	e6e7      	b.n	40766a <_realloc_r+0x8e>
  40789a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40789e:	f023 0303 	bic.w	r3, r3, #3
  4078a2:	441c      	add	r4, r3
  4078a4:	462e      	mov	r6, r5
  4078a6:	e6f9      	b.n	40769c <_realloc_r+0xc0>
  4078a8:	68a9      	ldr	r1, [r5, #8]
  4078aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4078ae:	68e9      	ldr	r1, [r5, #12]
  4078b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4078b4:	2a24      	cmp	r2, #36	; 0x24
  4078b6:	d00c      	beq.n	4078d2 <_realloc_r+0x2f6>
  4078b8:	3510      	adds	r5, #16
  4078ba:	f10a 0218 	add.w	r2, sl, #24
  4078be:	e7b9      	b.n	407834 <_realloc_r+0x258>
  4078c0:	692b      	ldr	r3, [r5, #16]
  4078c2:	6103      	str	r3, [r0, #16]
  4078c4:	696b      	ldr	r3, [r5, #20]
  4078c6:	6143      	str	r3, [r0, #20]
  4078c8:	f105 0218 	add.w	r2, r5, #24
  4078cc:	f100 0318 	add.w	r3, r0, #24
  4078d0:	e6cb      	b.n	40766a <_realloc_r+0x8e>
  4078d2:	692a      	ldr	r2, [r5, #16]
  4078d4:	f8ca 2018 	str.w	r2, [sl, #24]
  4078d8:	696a      	ldr	r2, [r5, #20]
  4078da:	f8ca 201c 	str.w	r2, [sl, #28]
  4078de:	3518      	adds	r5, #24
  4078e0:	f10a 0220 	add.w	r2, sl, #32
  4078e4:	e7a6      	b.n	407834 <_realloc_r+0x258>
  4078e6:	4632      	mov	r2, r6
  4078e8:	e77f      	b.n	4077ea <_realloc_r+0x20e>
  4078ea:	4629      	mov	r1, r5
  4078ec:	4630      	mov	r0, r6
  4078ee:	9301      	str	r3, [sp, #4]
  4078f0:	f7ff fe10 	bl	407514 <memmove>
  4078f4:	9b01      	ldr	r3, [sp, #4]
  4078f6:	e77e      	b.n	4077f6 <_realloc_r+0x21a>
  4078f8:	68a9      	ldr	r1, [r5, #8]
  4078fa:	f8ca 1010 	str.w	r1, [sl, #16]
  4078fe:	68e9      	ldr	r1, [r5, #12]
  407900:	f8ca 1014 	str.w	r1, [sl, #20]
  407904:	2a24      	cmp	r2, #36	; 0x24
  407906:	d003      	beq.n	407910 <_realloc_r+0x334>
  407908:	3510      	adds	r5, #16
  40790a:	f10a 0218 	add.w	r2, sl, #24
  40790e:	e76c      	b.n	4077ea <_realloc_r+0x20e>
  407910:	692a      	ldr	r2, [r5, #16]
  407912:	f8ca 2018 	str.w	r2, [sl, #24]
  407916:	696a      	ldr	r2, [r5, #20]
  407918:	f8ca 201c 	str.w	r2, [sl, #28]
  40791c:	3518      	adds	r5, #24
  40791e:	f10a 0220 	add.w	r2, sl, #32
  407922:	e762      	b.n	4077ea <_realloc_r+0x20e>
  407924:	20000444 	.word	0x20000444

00407928 <__ascii_wctomb>:
  407928:	b121      	cbz	r1, 407934 <__ascii_wctomb+0xc>
  40792a:	2aff      	cmp	r2, #255	; 0xff
  40792c:	d804      	bhi.n	407938 <__ascii_wctomb+0x10>
  40792e:	700a      	strb	r2, [r1, #0]
  407930:	2001      	movs	r0, #1
  407932:	4770      	bx	lr
  407934:	4608      	mov	r0, r1
  407936:	4770      	bx	lr
  407938:	238a      	movs	r3, #138	; 0x8a
  40793a:	6003      	str	r3, [r0, #0]
  40793c:	f04f 30ff 	mov.w	r0, #4294967295
  407940:	4770      	bx	lr
  407942:	bf00      	nop

00407944 <__aeabi_drsub>:
  407944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407948:	e002      	b.n	407950 <__adddf3>
  40794a:	bf00      	nop

0040794c <__aeabi_dsub>:
  40794c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407950 <__adddf3>:
  407950:	b530      	push	{r4, r5, lr}
  407952:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407956:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40795a:	ea94 0f05 	teq	r4, r5
  40795e:	bf08      	it	eq
  407960:	ea90 0f02 	teqeq	r0, r2
  407964:	bf1f      	itttt	ne
  407966:	ea54 0c00 	orrsne.w	ip, r4, r0
  40796a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40796e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407972:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407976:	f000 80e2 	beq.w	407b3e <__adddf3+0x1ee>
  40797a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40797e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407982:	bfb8      	it	lt
  407984:	426d      	neglt	r5, r5
  407986:	dd0c      	ble.n	4079a2 <__adddf3+0x52>
  407988:	442c      	add	r4, r5
  40798a:	ea80 0202 	eor.w	r2, r0, r2
  40798e:	ea81 0303 	eor.w	r3, r1, r3
  407992:	ea82 0000 	eor.w	r0, r2, r0
  407996:	ea83 0101 	eor.w	r1, r3, r1
  40799a:	ea80 0202 	eor.w	r2, r0, r2
  40799e:	ea81 0303 	eor.w	r3, r1, r3
  4079a2:	2d36      	cmp	r5, #54	; 0x36
  4079a4:	bf88      	it	hi
  4079a6:	bd30      	pophi	{r4, r5, pc}
  4079a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4079ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4079b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4079b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4079b8:	d002      	beq.n	4079c0 <__adddf3+0x70>
  4079ba:	4240      	negs	r0, r0
  4079bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4079c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4079c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4079c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4079cc:	d002      	beq.n	4079d4 <__adddf3+0x84>
  4079ce:	4252      	negs	r2, r2
  4079d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4079d4:	ea94 0f05 	teq	r4, r5
  4079d8:	f000 80a7 	beq.w	407b2a <__adddf3+0x1da>
  4079dc:	f1a4 0401 	sub.w	r4, r4, #1
  4079e0:	f1d5 0e20 	rsbs	lr, r5, #32
  4079e4:	db0d      	blt.n	407a02 <__adddf3+0xb2>
  4079e6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4079ea:	fa22 f205 	lsr.w	r2, r2, r5
  4079ee:	1880      	adds	r0, r0, r2
  4079f0:	f141 0100 	adc.w	r1, r1, #0
  4079f4:	fa03 f20e 	lsl.w	r2, r3, lr
  4079f8:	1880      	adds	r0, r0, r2
  4079fa:	fa43 f305 	asr.w	r3, r3, r5
  4079fe:	4159      	adcs	r1, r3
  407a00:	e00e      	b.n	407a20 <__adddf3+0xd0>
  407a02:	f1a5 0520 	sub.w	r5, r5, #32
  407a06:	f10e 0e20 	add.w	lr, lr, #32
  407a0a:	2a01      	cmp	r2, #1
  407a0c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407a10:	bf28      	it	cs
  407a12:	f04c 0c02 	orrcs.w	ip, ip, #2
  407a16:	fa43 f305 	asr.w	r3, r3, r5
  407a1a:	18c0      	adds	r0, r0, r3
  407a1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407a24:	d507      	bpl.n	407a36 <__adddf3+0xe6>
  407a26:	f04f 0e00 	mov.w	lr, #0
  407a2a:	f1dc 0c00 	rsbs	ip, ip, #0
  407a2e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407a32:	eb6e 0101 	sbc.w	r1, lr, r1
  407a36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407a3a:	d31b      	bcc.n	407a74 <__adddf3+0x124>
  407a3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407a40:	d30c      	bcc.n	407a5c <__adddf3+0x10c>
  407a42:	0849      	lsrs	r1, r1, #1
  407a44:	ea5f 0030 	movs.w	r0, r0, rrx
  407a48:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407a4c:	f104 0401 	add.w	r4, r4, #1
  407a50:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407a54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407a58:	f080 809a 	bcs.w	407b90 <__adddf3+0x240>
  407a5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407a60:	bf08      	it	eq
  407a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407a66:	f150 0000 	adcs.w	r0, r0, #0
  407a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407a6e:	ea41 0105 	orr.w	r1, r1, r5
  407a72:	bd30      	pop	{r4, r5, pc}
  407a74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407a78:	4140      	adcs	r0, r0
  407a7a:	eb41 0101 	adc.w	r1, r1, r1
  407a7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407a82:	f1a4 0401 	sub.w	r4, r4, #1
  407a86:	d1e9      	bne.n	407a5c <__adddf3+0x10c>
  407a88:	f091 0f00 	teq	r1, #0
  407a8c:	bf04      	itt	eq
  407a8e:	4601      	moveq	r1, r0
  407a90:	2000      	moveq	r0, #0
  407a92:	fab1 f381 	clz	r3, r1
  407a96:	bf08      	it	eq
  407a98:	3320      	addeq	r3, #32
  407a9a:	f1a3 030b 	sub.w	r3, r3, #11
  407a9e:	f1b3 0220 	subs.w	r2, r3, #32
  407aa2:	da0c      	bge.n	407abe <__adddf3+0x16e>
  407aa4:	320c      	adds	r2, #12
  407aa6:	dd08      	ble.n	407aba <__adddf3+0x16a>
  407aa8:	f102 0c14 	add.w	ip, r2, #20
  407aac:	f1c2 020c 	rsb	r2, r2, #12
  407ab0:	fa01 f00c 	lsl.w	r0, r1, ip
  407ab4:	fa21 f102 	lsr.w	r1, r1, r2
  407ab8:	e00c      	b.n	407ad4 <__adddf3+0x184>
  407aba:	f102 0214 	add.w	r2, r2, #20
  407abe:	bfd8      	it	le
  407ac0:	f1c2 0c20 	rsble	ip, r2, #32
  407ac4:	fa01 f102 	lsl.w	r1, r1, r2
  407ac8:	fa20 fc0c 	lsr.w	ip, r0, ip
  407acc:	bfdc      	itt	le
  407ace:	ea41 010c 	orrle.w	r1, r1, ip
  407ad2:	4090      	lslle	r0, r2
  407ad4:	1ae4      	subs	r4, r4, r3
  407ad6:	bfa2      	ittt	ge
  407ad8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407adc:	4329      	orrge	r1, r5
  407ade:	bd30      	popge	{r4, r5, pc}
  407ae0:	ea6f 0404 	mvn.w	r4, r4
  407ae4:	3c1f      	subs	r4, #31
  407ae6:	da1c      	bge.n	407b22 <__adddf3+0x1d2>
  407ae8:	340c      	adds	r4, #12
  407aea:	dc0e      	bgt.n	407b0a <__adddf3+0x1ba>
  407aec:	f104 0414 	add.w	r4, r4, #20
  407af0:	f1c4 0220 	rsb	r2, r4, #32
  407af4:	fa20 f004 	lsr.w	r0, r0, r4
  407af8:	fa01 f302 	lsl.w	r3, r1, r2
  407afc:	ea40 0003 	orr.w	r0, r0, r3
  407b00:	fa21 f304 	lsr.w	r3, r1, r4
  407b04:	ea45 0103 	orr.w	r1, r5, r3
  407b08:	bd30      	pop	{r4, r5, pc}
  407b0a:	f1c4 040c 	rsb	r4, r4, #12
  407b0e:	f1c4 0220 	rsb	r2, r4, #32
  407b12:	fa20 f002 	lsr.w	r0, r0, r2
  407b16:	fa01 f304 	lsl.w	r3, r1, r4
  407b1a:	ea40 0003 	orr.w	r0, r0, r3
  407b1e:	4629      	mov	r1, r5
  407b20:	bd30      	pop	{r4, r5, pc}
  407b22:	fa21 f004 	lsr.w	r0, r1, r4
  407b26:	4629      	mov	r1, r5
  407b28:	bd30      	pop	{r4, r5, pc}
  407b2a:	f094 0f00 	teq	r4, #0
  407b2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407b32:	bf06      	itte	eq
  407b34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407b38:	3401      	addeq	r4, #1
  407b3a:	3d01      	subne	r5, #1
  407b3c:	e74e      	b.n	4079dc <__adddf3+0x8c>
  407b3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407b42:	bf18      	it	ne
  407b44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407b48:	d029      	beq.n	407b9e <__adddf3+0x24e>
  407b4a:	ea94 0f05 	teq	r4, r5
  407b4e:	bf08      	it	eq
  407b50:	ea90 0f02 	teqeq	r0, r2
  407b54:	d005      	beq.n	407b62 <__adddf3+0x212>
  407b56:	ea54 0c00 	orrs.w	ip, r4, r0
  407b5a:	bf04      	itt	eq
  407b5c:	4619      	moveq	r1, r3
  407b5e:	4610      	moveq	r0, r2
  407b60:	bd30      	pop	{r4, r5, pc}
  407b62:	ea91 0f03 	teq	r1, r3
  407b66:	bf1e      	ittt	ne
  407b68:	2100      	movne	r1, #0
  407b6a:	2000      	movne	r0, #0
  407b6c:	bd30      	popne	{r4, r5, pc}
  407b6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407b72:	d105      	bne.n	407b80 <__adddf3+0x230>
  407b74:	0040      	lsls	r0, r0, #1
  407b76:	4149      	adcs	r1, r1
  407b78:	bf28      	it	cs
  407b7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407b7e:	bd30      	pop	{r4, r5, pc}
  407b80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407b84:	bf3c      	itt	cc
  407b86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407b8a:	bd30      	popcc	{r4, r5, pc}
  407b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407b90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407b94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407b98:	f04f 0000 	mov.w	r0, #0
  407b9c:	bd30      	pop	{r4, r5, pc}
  407b9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407ba2:	bf1a      	itte	ne
  407ba4:	4619      	movne	r1, r3
  407ba6:	4610      	movne	r0, r2
  407ba8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407bac:	bf1c      	itt	ne
  407bae:	460b      	movne	r3, r1
  407bb0:	4602      	movne	r2, r0
  407bb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407bb6:	bf06      	itte	eq
  407bb8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407bbc:	ea91 0f03 	teqeq	r1, r3
  407bc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407bc4:	bd30      	pop	{r4, r5, pc}
  407bc6:	bf00      	nop

00407bc8 <__aeabi_ui2d>:
  407bc8:	f090 0f00 	teq	r0, #0
  407bcc:	bf04      	itt	eq
  407bce:	2100      	moveq	r1, #0
  407bd0:	4770      	bxeq	lr
  407bd2:	b530      	push	{r4, r5, lr}
  407bd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407bd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407bdc:	f04f 0500 	mov.w	r5, #0
  407be0:	f04f 0100 	mov.w	r1, #0
  407be4:	e750      	b.n	407a88 <__adddf3+0x138>
  407be6:	bf00      	nop

00407be8 <__aeabi_i2d>:
  407be8:	f090 0f00 	teq	r0, #0
  407bec:	bf04      	itt	eq
  407bee:	2100      	moveq	r1, #0
  407bf0:	4770      	bxeq	lr
  407bf2:	b530      	push	{r4, r5, lr}
  407bf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407bf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407bfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407c00:	bf48      	it	mi
  407c02:	4240      	negmi	r0, r0
  407c04:	f04f 0100 	mov.w	r1, #0
  407c08:	e73e      	b.n	407a88 <__adddf3+0x138>
  407c0a:	bf00      	nop

00407c0c <__aeabi_f2d>:
  407c0c:	0042      	lsls	r2, r0, #1
  407c0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407c12:	ea4f 0131 	mov.w	r1, r1, rrx
  407c16:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407c1a:	bf1f      	itttt	ne
  407c1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407c20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407c24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407c28:	4770      	bxne	lr
  407c2a:	f092 0f00 	teq	r2, #0
  407c2e:	bf14      	ite	ne
  407c30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407c34:	4770      	bxeq	lr
  407c36:	b530      	push	{r4, r5, lr}
  407c38:	f44f 7460 	mov.w	r4, #896	; 0x380
  407c3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407c44:	e720      	b.n	407a88 <__adddf3+0x138>
  407c46:	bf00      	nop

00407c48 <__aeabi_ul2d>:
  407c48:	ea50 0201 	orrs.w	r2, r0, r1
  407c4c:	bf08      	it	eq
  407c4e:	4770      	bxeq	lr
  407c50:	b530      	push	{r4, r5, lr}
  407c52:	f04f 0500 	mov.w	r5, #0
  407c56:	e00a      	b.n	407c6e <__aeabi_l2d+0x16>

00407c58 <__aeabi_l2d>:
  407c58:	ea50 0201 	orrs.w	r2, r0, r1
  407c5c:	bf08      	it	eq
  407c5e:	4770      	bxeq	lr
  407c60:	b530      	push	{r4, r5, lr}
  407c62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407c66:	d502      	bpl.n	407c6e <__aeabi_l2d+0x16>
  407c68:	4240      	negs	r0, r0
  407c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407c6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407c72:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407c76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407c7a:	f43f aedc 	beq.w	407a36 <__adddf3+0xe6>
  407c7e:	f04f 0203 	mov.w	r2, #3
  407c82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407c86:	bf18      	it	ne
  407c88:	3203      	addne	r2, #3
  407c8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407c8e:	bf18      	it	ne
  407c90:	3203      	addne	r2, #3
  407c92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407c96:	f1c2 0320 	rsb	r3, r2, #32
  407c9a:	fa00 fc03 	lsl.w	ip, r0, r3
  407c9e:	fa20 f002 	lsr.w	r0, r0, r2
  407ca2:	fa01 fe03 	lsl.w	lr, r1, r3
  407ca6:	ea40 000e 	orr.w	r0, r0, lr
  407caa:	fa21 f102 	lsr.w	r1, r1, r2
  407cae:	4414      	add	r4, r2
  407cb0:	e6c1      	b.n	407a36 <__adddf3+0xe6>
  407cb2:	bf00      	nop

00407cb4 <__aeabi_dmul>:
  407cb4:	b570      	push	{r4, r5, r6, lr}
  407cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407cc2:	bf1d      	ittte	ne
  407cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407cc8:	ea94 0f0c 	teqne	r4, ip
  407ccc:	ea95 0f0c 	teqne	r5, ip
  407cd0:	f000 f8de 	bleq	407e90 <__aeabi_dmul+0x1dc>
  407cd4:	442c      	add	r4, r5
  407cd6:	ea81 0603 	eor.w	r6, r1, r3
  407cda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407cde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407ce2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407ce6:	bf18      	it	ne
  407ce8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407cec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407cf4:	d038      	beq.n	407d68 <__aeabi_dmul+0xb4>
  407cf6:	fba0 ce02 	umull	ip, lr, r0, r2
  407cfa:	f04f 0500 	mov.w	r5, #0
  407cfe:	fbe1 e502 	umlal	lr, r5, r1, r2
  407d02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407d06:	fbe0 e503 	umlal	lr, r5, r0, r3
  407d0a:	f04f 0600 	mov.w	r6, #0
  407d0e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407d12:	f09c 0f00 	teq	ip, #0
  407d16:	bf18      	it	ne
  407d18:	f04e 0e01 	orrne.w	lr, lr, #1
  407d1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407d20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407d24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407d28:	d204      	bcs.n	407d34 <__aeabi_dmul+0x80>
  407d2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407d2e:	416d      	adcs	r5, r5
  407d30:	eb46 0606 	adc.w	r6, r6, r6
  407d34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407d38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407d3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407d40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407d44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407d48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407d4c:	bf88      	it	hi
  407d4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407d52:	d81e      	bhi.n	407d92 <__aeabi_dmul+0xde>
  407d54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407d58:	bf08      	it	eq
  407d5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407d5e:	f150 0000 	adcs.w	r0, r0, #0
  407d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407d66:	bd70      	pop	{r4, r5, r6, pc}
  407d68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407d6c:	ea46 0101 	orr.w	r1, r6, r1
  407d70:	ea40 0002 	orr.w	r0, r0, r2
  407d74:	ea81 0103 	eor.w	r1, r1, r3
  407d78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407d7c:	bfc2      	ittt	gt
  407d7e:	ebd4 050c 	rsbsgt	r5, r4, ip
  407d82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407d86:	bd70      	popgt	{r4, r5, r6, pc}
  407d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407d8c:	f04f 0e00 	mov.w	lr, #0
  407d90:	3c01      	subs	r4, #1
  407d92:	f300 80ab 	bgt.w	407eec <__aeabi_dmul+0x238>
  407d96:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407d9a:	bfde      	ittt	le
  407d9c:	2000      	movle	r0, #0
  407d9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407da2:	bd70      	pople	{r4, r5, r6, pc}
  407da4:	f1c4 0400 	rsb	r4, r4, #0
  407da8:	3c20      	subs	r4, #32
  407daa:	da35      	bge.n	407e18 <__aeabi_dmul+0x164>
  407dac:	340c      	adds	r4, #12
  407dae:	dc1b      	bgt.n	407de8 <__aeabi_dmul+0x134>
  407db0:	f104 0414 	add.w	r4, r4, #20
  407db4:	f1c4 0520 	rsb	r5, r4, #32
  407db8:	fa00 f305 	lsl.w	r3, r0, r5
  407dbc:	fa20 f004 	lsr.w	r0, r0, r4
  407dc0:	fa01 f205 	lsl.w	r2, r1, r5
  407dc4:	ea40 0002 	orr.w	r0, r0, r2
  407dc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407dd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407dd4:	fa21 f604 	lsr.w	r6, r1, r4
  407dd8:	eb42 0106 	adc.w	r1, r2, r6
  407ddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407de0:	bf08      	it	eq
  407de2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407de6:	bd70      	pop	{r4, r5, r6, pc}
  407de8:	f1c4 040c 	rsb	r4, r4, #12
  407dec:	f1c4 0520 	rsb	r5, r4, #32
  407df0:	fa00 f304 	lsl.w	r3, r0, r4
  407df4:	fa20 f005 	lsr.w	r0, r0, r5
  407df8:	fa01 f204 	lsl.w	r2, r1, r4
  407dfc:	ea40 0002 	orr.w	r0, r0, r2
  407e00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407e04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407e08:	f141 0100 	adc.w	r1, r1, #0
  407e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407e10:	bf08      	it	eq
  407e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407e16:	bd70      	pop	{r4, r5, r6, pc}
  407e18:	f1c4 0520 	rsb	r5, r4, #32
  407e1c:	fa00 f205 	lsl.w	r2, r0, r5
  407e20:	ea4e 0e02 	orr.w	lr, lr, r2
  407e24:	fa20 f304 	lsr.w	r3, r0, r4
  407e28:	fa01 f205 	lsl.w	r2, r1, r5
  407e2c:	ea43 0302 	orr.w	r3, r3, r2
  407e30:	fa21 f004 	lsr.w	r0, r1, r4
  407e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407e38:	fa21 f204 	lsr.w	r2, r1, r4
  407e3c:	ea20 0002 	bic.w	r0, r0, r2
  407e40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407e44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407e48:	bf08      	it	eq
  407e4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407e4e:	bd70      	pop	{r4, r5, r6, pc}
  407e50:	f094 0f00 	teq	r4, #0
  407e54:	d10f      	bne.n	407e76 <__aeabi_dmul+0x1c2>
  407e56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407e5a:	0040      	lsls	r0, r0, #1
  407e5c:	eb41 0101 	adc.w	r1, r1, r1
  407e60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407e64:	bf08      	it	eq
  407e66:	3c01      	subeq	r4, #1
  407e68:	d0f7      	beq.n	407e5a <__aeabi_dmul+0x1a6>
  407e6a:	ea41 0106 	orr.w	r1, r1, r6
  407e6e:	f095 0f00 	teq	r5, #0
  407e72:	bf18      	it	ne
  407e74:	4770      	bxne	lr
  407e76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407e7a:	0052      	lsls	r2, r2, #1
  407e7c:	eb43 0303 	adc.w	r3, r3, r3
  407e80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407e84:	bf08      	it	eq
  407e86:	3d01      	subeq	r5, #1
  407e88:	d0f7      	beq.n	407e7a <__aeabi_dmul+0x1c6>
  407e8a:	ea43 0306 	orr.w	r3, r3, r6
  407e8e:	4770      	bx	lr
  407e90:	ea94 0f0c 	teq	r4, ip
  407e94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407e98:	bf18      	it	ne
  407e9a:	ea95 0f0c 	teqne	r5, ip
  407e9e:	d00c      	beq.n	407eba <__aeabi_dmul+0x206>
  407ea0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407ea4:	bf18      	it	ne
  407ea6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407eaa:	d1d1      	bne.n	407e50 <__aeabi_dmul+0x19c>
  407eac:	ea81 0103 	eor.w	r1, r1, r3
  407eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407eb4:	f04f 0000 	mov.w	r0, #0
  407eb8:	bd70      	pop	{r4, r5, r6, pc}
  407eba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407ebe:	bf06      	itte	eq
  407ec0:	4610      	moveq	r0, r2
  407ec2:	4619      	moveq	r1, r3
  407ec4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407ec8:	d019      	beq.n	407efe <__aeabi_dmul+0x24a>
  407eca:	ea94 0f0c 	teq	r4, ip
  407ece:	d102      	bne.n	407ed6 <__aeabi_dmul+0x222>
  407ed0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407ed4:	d113      	bne.n	407efe <__aeabi_dmul+0x24a>
  407ed6:	ea95 0f0c 	teq	r5, ip
  407eda:	d105      	bne.n	407ee8 <__aeabi_dmul+0x234>
  407edc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407ee0:	bf1c      	itt	ne
  407ee2:	4610      	movne	r0, r2
  407ee4:	4619      	movne	r1, r3
  407ee6:	d10a      	bne.n	407efe <__aeabi_dmul+0x24a>
  407ee8:	ea81 0103 	eor.w	r1, r1, r3
  407eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407ef0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407ef4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407ef8:	f04f 0000 	mov.w	r0, #0
  407efc:	bd70      	pop	{r4, r5, r6, pc}
  407efe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407f02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407f06:	bd70      	pop	{r4, r5, r6, pc}

00407f08 <__aeabi_ddiv>:
  407f08:	b570      	push	{r4, r5, r6, lr}
  407f0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407f0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407f12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407f16:	bf1d      	ittte	ne
  407f18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407f1c:	ea94 0f0c 	teqne	r4, ip
  407f20:	ea95 0f0c 	teqne	r5, ip
  407f24:	f000 f8a7 	bleq	408076 <__aeabi_ddiv+0x16e>
  407f28:	eba4 0405 	sub.w	r4, r4, r5
  407f2c:	ea81 0e03 	eor.w	lr, r1, r3
  407f30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407f34:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407f38:	f000 8088 	beq.w	40804c <__aeabi_ddiv+0x144>
  407f3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407f40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407f44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407f48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407f4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407f50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407f54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407f58:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407f5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407f60:	429d      	cmp	r5, r3
  407f62:	bf08      	it	eq
  407f64:	4296      	cmpeq	r6, r2
  407f66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407f6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407f6e:	d202      	bcs.n	407f76 <__aeabi_ddiv+0x6e>
  407f70:	085b      	lsrs	r3, r3, #1
  407f72:	ea4f 0232 	mov.w	r2, r2, rrx
  407f76:	1ab6      	subs	r6, r6, r2
  407f78:	eb65 0503 	sbc.w	r5, r5, r3
  407f7c:	085b      	lsrs	r3, r3, #1
  407f7e:	ea4f 0232 	mov.w	r2, r2, rrx
  407f82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407f86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407f8a:	ebb6 0e02 	subs.w	lr, r6, r2
  407f8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407f92:	bf22      	ittt	cs
  407f94:	1ab6      	subcs	r6, r6, r2
  407f96:	4675      	movcs	r5, lr
  407f98:	ea40 000c 	orrcs.w	r0, r0, ip
  407f9c:	085b      	lsrs	r3, r3, #1
  407f9e:	ea4f 0232 	mov.w	r2, r2, rrx
  407fa2:	ebb6 0e02 	subs.w	lr, r6, r2
  407fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
  407faa:	bf22      	ittt	cs
  407fac:	1ab6      	subcs	r6, r6, r2
  407fae:	4675      	movcs	r5, lr
  407fb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407fb4:	085b      	lsrs	r3, r3, #1
  407fb6:	ea4f 0232 	mov.w	r2, r2, rrx
  407fba:	ebb6 0e02 	subs.w	lr, r6, r2
  407fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407fc2:	bf22      	ittt	cs
  407fc4:	1ab6      	subcs	r6, r6, r2
  407fc6:	4675      	movcs	r5, lr
  407fc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407fcc:	085b      	lsrs	r3, r3, #1
  407fce:	ea4f 0232 	mov.w	r2, r2, rrx
  407fd2:	ebb6 0e02 	subs.w	lr, r6, r2
  407fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
  407fda:	bf22      	ittt	cs
  407fdc:	1ab6      	subcs	r6, r6, r2
  407fde:	4675      	movcs	r5, lr
  407fe0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407fe4:	ea55 0e06 	orrs.w	lr, r5, r6
  407fe8:	d018      	beq.n	40801c <__aeabi_ddiv+0x114>
  407fea:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407fee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407ff2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407ff6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407ffa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407ffe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408002:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408006:	d1c0      	bne.n	407f8a <__aeabi_ddiv+0x82>
  408008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40800c:	d10b      	bne.n	408026 <__aeabi_ddiv+0x11e>
  40800e:	ea41 0100 	orr.w	r1, r1, r0
  408012:	f04f 0000 	mov.w	r0, #0
  408016:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40801a:	e7b6      	b.n	407f8a <__aeabi_ddiv+0x82>
  40801c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408020:	bf04      	itt	eq
  408022:	4301      	orreq	r1, r0
  408024:	2000      	moveq	r0, #0
  408026:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40802a:	bf88      	it	hi
  40802c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408030:	f63f aeaf 	bhi.w	407d92 <__aeabi_dmul+0xde>
  408034:	ebb5 0c03 	subs.w	ip, r5, r3
  408038:	bf04      	itt	eq
  40803a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40803e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408042:	f150 0000 	adcs.w	r0, r0, #0
  408046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40804a:	bd70      	pop	{r4, r5, r6, pc}
  40804c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408050:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408054:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408058:	bfc2      	ittt	gt
  40805a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40805e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408062:	bd70      	popgt	{r4, r5, r6, pc}
  408064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408068:	f04f 0e00 	mov.w	lr, #0
  40806c:	3c01      	subs	r4, #1
  40806e:	e690      	b.n	407d92 <__aeabi_dmul+0xde>
  408070:	ea45 0e06 	orr.w	lr, r5, r6
  408074:	e68d      	b.n	407d92 <__aeabi_dmul+0xde>
  408076:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40807a:	ea94 0f0c 	teq	r4, ip
  40807e:	bf08      	it	eq
  408080:	ea95 0f0c 	teqeq	r5, ip
  408084:	f43f af3b 	beq.w	407efe <__aeabi_dmul+0x24a>
  408088:	ea94 0f0c 	teq	r4, ip
  40808c:	d10a      	bne.n	4080a4 <__aeabi_ddiv+0x19c>
  40808e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408092:	f47f af34 	bne.w	407efe <__aeabi_dmul+0x24a>
  408096:	ea95 0f0c 	teq	r5, ip
  40809a:	f47f af25 	bne.w	407ee8 <__aeabi_dmul+0x234>
  40809e:	4610      	mov	r0, r2
  4080a0:	4619      	mov	r1, r3
  4080a2:	e72c      	b.n	407efe <__aeabi_dmul+0x24a>
  4080a4:	ea95 0f0c 	teq	r5, ip
  4080a8:	d106      	bne.n	4080b8 <__aeabi_ddiv+0x1b0>
  4080aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4080ae:	f43f aefd 	beq.w	407eac <__aeabi_dmul+0x1f8>
  4080b2:	4610      	mov	r0, r2
  4080b4:	4619      	mov	r1, r3
  4080b6:	e722      	b.n	407efe <__aeabi_dmul+0x24a>
  4080b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4080bc:	bf18      	it	ne
  4080be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4080c2:	f47f aec5 	bne.w	407e50 <__aeabi_dmul+0x19c>
  4080c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4080ca:	f47f af0d 	bne.w	407ee8 <__aeabi_dmul+0x234>
  4080ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4080d2:	f47f aeeb 	bne.w	407eac <__aeabi_dmul+0x1f8>
  4080d6:	e712      	b.n	407efe <__aeabi_dmul+0x24a>

004080d8 <__gedf2>:
  4080d8:	f04f 3cff 	mov.w	ip, #4294967295
  4080dc:	e006      	b.n	4080ec <__cmpdf2+0x4>
  4080de:	bf00      	nop

004080e0 <__ledf2>:
  4080e0:	f04f 0c01 	mov.w	ip, #1
  4080e4:	e002      	b.n	4080ec <__cmpdf2+0x4>
  4080e6:	bf00      	nop

004080e8 <__cmpdf2>:
  4080e8:	f04f 0c01 	mov.w	ip, #1
  4080ec:	f84d cd04 	str.w	ip, [sp, #-4]!
  4080f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4080f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4080f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4080fc:	bf18      	it	ne
  4080fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408102:	d01b      	beq.n	40813c <__cmpdf2+0x54>
  408104:	b001      	add	sp, #4
  408106:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40810a:	bf0c      	ite	eq
  40810c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408110:	ea91 0f03 	teqne	r1, r3
  408114:	bf02      	ittt	eq
  408116:	ea90 0f02 	teqeq	r0, r2
  40811a:	2000      	moveq	r0, #0
  40811c:	4770      	bxeq	lr
  40811e:	f110 0f00 	cmn.w	r0, #0
  408122:	ea91 0f03 	teq	r1, r3
  408126:	bf58      	it	pl
  408128:	4299      	cmppl	r1, r3
  40812a:	bf08      	it	eq
  40812c:	4290      	cmpeq	r0, r2
  40812e:	bf2c      	ite	cs
  408130:	17d8      	asrcs	r0, r3, #31
  408132:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408136:	f040 0001 	orr.w	r0, r0, #1
  40813a:	4770      	bx	lr
  40813c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408144:	d102      	bne.n	40814c <__cmpdf2+0x64>
  408146:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40814a:	d107      	bne.n	40815c <__cmpdf2+0x74>
  40814c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408154:	d1d6      	bne.n	408104 <__cmpdf2+0x1c>
  408156:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40815a:	d0d3      	beq.n	408104 <__cmpdf2+0x1c>
  40815c:	f85d 0b04 	ldr.w	r0, [sp], #4
  408160:	4770      	bx	lr
  408162:	bf00      	nop

00408164 <__aeabi_cdrcmple>:
  408164:	4684      	mov	ip, r0
  408166:	4610      	mov	r0, r2
  408168:	4662      	mov	r2, ip
  40816a:	468c      	mov	ip, r1
  40816c:	4619      	mov	r1, r3
  40816e:	4663      	mov	r3, ip
  408170:	e000      	b.n	408174 <__aeabi_cdcmpeq>
  408172:	bf00      	nop

00408174 <__aeabi_cdcmpeq>:
  408174:	b501      	push	{r0, lr}
  408176:	f7ff ffb7 	bl	4080e8 <__cmpdf2>
  40817a:	2800      	cmp	r0, #0
  40817c:	bf48      	it	mi
  40817e:	f110 0f00 	cmnmi.w	r0, #0
  408182:	bd01      	pop	{r0, pc}

00408184 <__aeabi_dcmpeq>:
  408184:	f84d ed08 	str.w	lr, [sp, #-8]!
  408188:	f7ff fff4 	bl	408174 <__aeabi_cdcmpeq>
  40818c:	bf0c      	ite	eq
  40818e:	2001      	moveq	r0, #1
  408190:	2000      	movne	r0, #0
  408192:	f85d fb08 	ldr.w	pc, [sp], #8
  408196:	bf00      	nop

00408198 <__aeabi_dcmplt>:
  408198:	f84d ed08 	str.w	lr, [sp, #-8]!
  40819c:	f7ff ffea 	bl	408174 <__aeabi_cdcmpeq>
  4081a0:	bf34      	ite	cc
  4081a2:	2001      	movcc	r0, #1
  4081a4:	2000      	movcs	r0, #0
  4081a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4081aa:	bf00      	nop

004081ac <__aeabi_dcmple>:
  4081ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4081b0:	f7ff ffe0 	bl	408174 <__aeabi_cdcmpeq>
  4081b4:	bf94      	ite	ls
  4081b6:	2001      	movls	r0, #1
  4081b8:	2000      	movhi	r0, #0
  4081ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4081be:	bf00      	nop

004081c0 <__aeabi_dcmpge>:
  4081c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4081c4:	f7ff ffce 	bl	408164 <__aeabi_cdrcmple>
  4081c8:	bf94      	ite	ls
  4081ca:	2001      	movls	r0, #1
  4081cc:	2000      	movhi	r0, #0
  4081ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4081d2:	bf00      	nop

004081d4 <__aeabi_dcmpgt>:
  4081d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4081d8:	f7ff ffc4 	bl	408164 <__aeabi_cdrcmple>
  4081dc:	bf34      	ite	cc
  4081de:	2001      	movcc	r0, #1
  4081e0:	2000      	movcs	r0, #0
  4081e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4081e6:	bf00      	nop

004081e8 <__aeabi_dcmpun>:
  4081e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4081ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081f0:	d102      	bne.n	4081f8 <__aeabi_dcmpun+0x10>
  4081f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4081f6:	d10a      	bne.n	40820e <__aeabi_dcmpun+0x26>
  4081f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4081fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408200:	d102      	bne.n	408208 <__aeabi_dcmpun+0x20>
  408202:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408206:	d102      	bne.n	40820e <__aeabi_dcmpun+0x26>
  408208:	f04f 0000 	mov.w	r0, #0
  40820c:	4770      	bx	lr
  40820e:	f04f 0001 	mov.w	r0, #1
  408212:	4770      	bx	lr

00408214 <__aeabi_d2iz>:
  408214:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408218:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40821c:	d215      	bcs.n	40824a <__aeabi_d2iz+0x36>
  40821e:	d511      	bpl.n	408244 <__aeabi_d2iz+0x30>
  408220:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408224:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408228:	d912      	bls.n	408250 <__aeabi_d2iz+0x3c>
  40822a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40822e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408232:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408236:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40823a:	fa23 f002 	lsr.w	r0, r3, r2
  40823e:	bf18      	it	ne
  408240:	4240      	negne	r0, r0
  408242:	4770      	bx	lr
  408244:	f04f 0000 	mov.w	r0, #0
  408248:	4770      	bx	lr
  40824a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40824e:	d105      	bne.n	40825c <__aeabi_d2iz+0x48>
  408250:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408254:	bf08      	it	eq
  408256:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40825a:	4770      	bx	lr
  40825c:	f04f 0000 	mov.w	r0, #0
  408260:	4770      	bx	lr
  408262:	bf00      	nop

00408264 <OV2640_JPEG_INIT>:
  408264:	00ff ff2c df2e 01ff 323c 0111 0209 2804     ..,.....<2.....(
  408274:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  408284:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  408294:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  4082a4:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  4082b4:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  4082c4:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  4082d4:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  4082e4:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  4082f4:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408304:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408314:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  408324:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  408334:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  408344:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  408354:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  408364:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  408374:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  408384:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  408394:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  4083a4:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  4083b4:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  4083c4:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  4083d4:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

004083e4 <OV2640_YUV422>:
  4083e4:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  4083f4:	0000 ffff                                   ....

004083f8 <OV2640_JPEG>:
  4083f8:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408408:	ffff 0000                                   ....

0040840c <OV2640_JPEG_320x240>:
  40840c:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  40841c:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  40842c:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  40843c:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  40844c:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

0040845c <OV2640_JPEG_640x480>:
  40845c:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  40846c:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  40847c:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  40848c:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  40849c:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  4084ac:	ffff 0000                                   ....

004084b0 <OV2640_JPEG_800x600>:
  4084b0:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4084c0:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4084d0:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4084e0:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  4084f0:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408500:	ffff 0000                                   ....

00408504 <OV2640_JPEG_1024x768>:
  408504:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408514:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408524:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408534:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408544:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

00408554 <OV2640_JPEG_1280x1024>:
  408554:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408564:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408574:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408584:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408594:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  4085a4:	ffff 0000                                   ....

004085a8 <OV2640_JPEG_1600x1200>:
  4085a8:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4085b8:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4085c8:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4085d8:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  4085e8:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  4085f8:	ffff 0000                                   ....

004085fc <OV2640_QVGA_YUV422_10FPS>:
  4085fc:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  40860c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40861c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40862c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40863c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40864c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40865c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40866c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40867c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40868c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40869c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4086ac:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4086bc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4086cc:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4086dc:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004086ec <OV2640_QVGA_YUV422_15FPS>:
  4086ec:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  4086fc:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40870c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40871c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40872c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40873c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40874c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40875c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40876c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40877c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40878c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40879c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4087ac:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4087bc:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4087cc:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004087dc <OV2640_QVGA_YUV422_20FPS>:
  4087dc:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  4087ec:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4087fc:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40880c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40881c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40882c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40883c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40884c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40885c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40886c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40887c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40888c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40889c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4088ac:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4088bc:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004088cc <OV2640_QVGA_YUV422_30FPS>:
  4088cc:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  4088dc:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4088ec:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4088fc:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40890c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40891c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40892c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40893c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40894c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40895c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40896c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40897c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40898c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40899c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4089ac:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004089bc <OV2640_QVGA_RGB888>:
  4089bc:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  4089cc:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  4089dc:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  4089ec:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  4089fc:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408a0c:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408a1c:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408a2c:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408a3c:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408a4c:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408a5c:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408a6c:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408a7c:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408a8c:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  408a9c:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408aac:	0228 ffff                                   (...

00408ab0 <OV2640_QQVGA_YUV422>:
  408ab0:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  408ac0:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  408ad0:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  408ae0:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  408af0:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  408b00:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  408b10:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  408b20:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  408b30:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  408b40:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408b50:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408b60:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408b70:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408b80:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  408b90:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  408ba0:	00d9 ffff                                   ....

00408ba4 <OV2640_QQVGA_RGB888>:
  408ba4:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408bb4:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408bc4:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408bd4:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408be4:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408bf4:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408c04:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408c14:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408c24:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408c34:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408c44:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408c54:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408c64:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408c74:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  408c84:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408c94:	0228 ffff                                   (...

00408c98 <OV2640_TEST_PATTERN>:
  408c98:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408ca8:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408cb8:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408cc8:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408cd8:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408ce8:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408cf8:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  408d08:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  408d18:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  408d28:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  408d38:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  408d48:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  408d58:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  408d68:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  408d78:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  408d88:	0228 ffff                                   (...

00408d8c <OV2640_VGA_YUV422_20FPS>:
  408d8c:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408d9c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408dac:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408dbc:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408dcc:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408ddc:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408dec:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408dfc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408e0c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408e1c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408e2c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408e3c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408e4c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408e5c:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  408e6c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  408e7c:	c200 0001 00c0 0000 0800 0000 0000 0000     ................
	...
  408e94:	7453 7261 2074 7274 6e61 6673 7265 0000     Start transfer..
  408ea4:	6f4e 656e 0000 0000 6557 7362 636f 656b     None....Websocke
  408eb4:	2074 6f63 6e6e 6365 6574 0064 6d69 6761     t connected.imag
  408ec4:	5f65 7274 6e61 6673 7265 2520 0d64 000a     e_transfer %d...
  408ed4:	6573 2074 7973 6320 7020 6f20 6666 0a0d     set sy c p off..
  408ee4:	0000 0000 6573 2074 7973 6320 6520 6f20     ....set sy c e o
  408ef4:	6666 0a0d 0000 0000 6573 7574 2070 6577     ff......setup we
  408f04:	0d62 000a 6f70 6c6c 6120 6c6c 0a0d 0000     b...poll all....

00408f14 <_global_impure_ptr>:
  408f14:	0018 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  408f24:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  408f34:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  408f44:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  408f54:	296c 0000 0030 0000                         l)..0...

00408f5c <blanks.7223>:
  408f5c:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408f6c <zeroes.7224>:
  408f6c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  408f7c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  408f8c:	0000 0000                                   ....

00408f90 <__mprec_bigtens>:
  408f90:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  408fa0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  408fb0:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408fb8 <__mprec_tens>:
  408fb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  408fc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408fd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408fe8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408ff8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409008:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409018:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409028:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409038:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409048:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409058:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409068:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409078:	9db4 79d9 7843 44ea                         ...yCx.D

00409080 <p05.6055>:
  409080:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  409090:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040909c <_ctype_>:
  40909c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4090ac:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4090bc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4090cc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4090dc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4090ec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4090fc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40910c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40911c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004091a0 <_init>:
  4091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4091a2:	bf00      	nop
  4091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4091a6:	bc08      	pop	{r3}
  4091a8:	469e      	mov	lr, r3
  4091aa:	4770      	bx	lr

004091ac <__init_array_start>:
  4091ac:	004050b5 	.word	0x004050b5

004091b0 <__frame_dummy_init_array_entry>:
  4091b0:	004000f1                                ..@.

004091b4 <_fini>:
  4091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4091b6:	bf00      	nop
  4091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4091ba:	bc08      	pop	{r3}
  4091bc:	469e      	mov	lr, r3
  4091be:	4770      	bx	lr

004091c0 <__fini_array_start>:
  4091c0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	954c 2001                                   L.. 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_sbrk_base>:
2000084c:	ffff ffff                                   ....

20000850 <__malloc_trim_threshold>:
20000850:	0000 0002                                   ....

20000854 <__global_locale>:
20000854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	7929 0040 74e9 0040 0000 0000 909c 0040     )y@..t@.......@.
20000944:	9098 0040 8f38 0040 8f38 0040 8f38 0040     ..@.8.@.8.@.8.@.
20000954:	8f38 0040 8f38 0040 8f38 0040 8f38 0040     8.@.8.@.8.@.8.@.
20000964:	8f38 0040 8f38 0040 ffff ffff ffff ffff     8.@.8.@.........
20000974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
