
WebcamFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029c0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004029c0  004029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  004029c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004c0  2000043c  00402e04  0002043c  2**2
                  ALLOC
  4 .stack        00003004  200008fc  004032c4  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001386d  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002854  00000000  00000000  00033d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006654  00000000  00000000  00036580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b30  00000000  00000000  0003cbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a90  00000000  00000000  0003d704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000063fd  00000000  00000000  0003e194  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d38b  00000000  00000000  00044591  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051464  00000000  00000000  0005191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000311c  00000000  00000000  000a2d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 39 00 20 c1 1f 40 00 89 20 40 00 89 20 40 00     .9. ..@.. @.. @.
  400010:	89 20 40 00 89 20 40 00 89 20 40 00 00 00 00 00     . @.. @.. @.....
	...
  40002c:	89 20 40 00 89 20 40 00 00 00 00 00 89 20 40 00     . @.. @...... @.
  40003c:	89 20 40 00 89 20 40 00 89 20 40 00 89 20 40 00     . @.. @.. @.. @.
  40004c:	89 20 40 00 89 20 40 00 89 20 40 00 89 20 40 00     . @.. @.. @.. @.
  40005c:	00 00 00 00 89 20 40 00 89 20 40 00 00 00 00 00     ..... @.. @.....
  40006c:	05 09 40 00 1d 09 40 00 00 00 00 00 89 1a 40 00     ..@...@.......@.
  40007c:	89 20 40 00 00 00 00 00 00 00 00 00 89 20 40 00     . @.......... @.
  40008c:	89 20 40 00 89 20 40 00 89 20 40 00 89 20 40 00     . @.. @.. @.. @.
  40009c:	c9 18 40 00 89 20 40 00 89 20 40 00 00 00 00 00     ..@.. @.. @.....
	...
  4000b4:	89 20 40 00 89 20 40 00 89 20 40 00 89 20 40 00     . @.. @.. @.. @.
  4000c4:	89 20 40 00 89 20 40 00                             . @.. @.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004029c8 	.word	0x004029c8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004029c8 	.word	0x004029c8
  40012c:	20000440 	.word	0x20000440
  400130:	004029c8 	.word	0x004029c8
  400134:	00000000 	.word	0x00000000

00400138 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400138:	b480      	push	{r7}
  40013a:	b087      	sub	sp, #28
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400144:	68fa      	ldr	r2, [r7, #12]
  400146:	68bb      	ldr	r3, [r7, #8]
  400148:	019b      	lsls	r3, r3, #6
  40014a:	4413      	add	r3, r2
  40014c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40014e:	697b      	ldr	r3, [r7, #20]
  400150:	2202      	movs	r2, #2
  400152:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f04f 32ff 	mov.w	r2, #4294967295
  40015a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40015c:	697b      	ldr	r3, [r7, #20]
  40015e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400160:	697b      	ldr	r3, [r7, #20]
  400162:	687a      	ldr	r2, [r7, #4]
  400164:	605a      	str	r2, [r3, #4]
}
  400166:	bf00      	nop
  400168:	371c      	adds	r7, #28
  40016a:	46bd      	mov	sp, r7
  40016c:	bc80      	pop	{r7}
  40016e:	4770      	bx	lr

00400170 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
  400178:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40017a:	687a      	ldr	r2, [r7, #4]
  40017c:	683b      	ldr	r3, [r7, #0]
  40017e:	019b      	lsls	r3, r3, #6
  400180:	4413      	add	r3, r2
  400182:	2205      	movs	r2, #5
  400184:	601a      	str	r2, [r3, #0]
}
  400186:	bf00      	nop
  400188:	370c      	adds	r7, #12
  40018a:	46bd      	mov	sp, r7
  40018c:	bc80      	pop	{r7}
  40018e:	4770      	bx	lr

00400190 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400190:	b480      	push	{r7}
  400192:	b085      	sub	sp, #20
  400194:	af00      	add	r7, sp, #0
  400196:	60f8      	str	r0, [r7, #12]
  400198:	60b9      	str	r1, [r7, #8]
  40019a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40019c:	68fa      	ldr	r2, [r7, #12]
  40019e:	68bb      	ldr	r3, [r7, #8]
  4001a0:	019b      	lsls	r3, r3, #6
  4001a2:	4413      	add	r3, r2
  4001a4:	331c      	adds	r3, #28
  4001a6:	687a      	ldr	r2, [r7, #4]
  4001a8:	601a      	str	r2, [r3, #0]
}
  4001aa:	bf00      	nop
  4001ac:	3714      	adds	r7, #20
  4001ae:	46bd      	mov	sp, r7
  4001b0:	bc80      	pop	{r7}
  4001b2:	4770      	bx	lr

004001b4 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4001b4:	b480      	push	{r7}
  4001b6:	b087      	sub	sp, #28
  4001b8:	af00      	add	r7, sp, #0
  4001ba:	60f8      	str	r0, [r7, #12]
  4001bc:	60b9      	str	r1, [r7, #8]
  4001be:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001c0:	68fa      	ldr	r2, [r7, #12]
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	019b      	lsls	r3, r3, #6
  4001c6:	4413      	add	r3, r2
  4001c8:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  4001ca:	697b      	ldr	r3, [r7, #20]
  4001cc:	687a      	ldr	r2, [r7, #4]
  4001ce:	625a      	str	r2, [r3, #36]	; 0x24
}
  4001d0:	bf00      	nop
  4001d2:	371c      	adds	r7, #28
  4001d4:	46bd      	mov	sp, r7
  4001d6:	bc80      	pop	{r7}
  4001d8:	4770      	bx	lr

004001da <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4001da:	b480      	push	{r7}
  4001dc:	b085      	sub	sp, #20
  4001de:	af00      	add	r7, sp, #0
  4001e0:	6078      	str	r0, [r7, #4]
  4001e2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001e4:	687a      	ldr	r2, [r7, #4]
  4001e6:	683b      	ldr	r3, [r7, #0]
  4001e8:	019b      	lsls	r3, r3, #6
  4001ea:	4413      	add	r3, r2
  4001ec:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4001ee:	68fb      	ldr	r3, [r7, #12]
  4001f0:	6a1b      	ldr	r3, [r3, #32]
}
  4001f2:	4618      	mov	r0, r3
  4001f4:	3714      	adds	r7, #20
  4001f6:	46bd      	mov	sp, r7
  4001f8:	bc80      	pop	{r7}
  4001fa:	4770      	bx	lr

004001fc <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4001fc:	b480      	push	{r7}
  4001fe:	b08d      	sub	sp, #52	; 0x34
  400200:	af00      	add	r7, sp, #0
  400202:	60f8      	str	r0, [r7, #12]
  400204:	60b9      	str	r1, [r7, #8]
  400206:	607a      	str	r2, [r7, #4]
  400208:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40020a:	2302      	movs	r3, #2
  40020c:	613b      	str	r3, [r7, #16]
  40020e:	2308      	movs	r3, #8
  400210:	617b      	str	r3, [r7, #20]
  400212:	2320      	movs	r3, #32
  400214:	61bb      	str	r3, [r7, #24]
  400216:	2380      	movs	r3, #128	; 0x80
  400218:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40021c:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40021e:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400220:	2300      	movs	r3, #0
  400222:	62fb      	str	r3, [r7, #44]	; 0x2c
  400224:	e01a      	b.n	40025c <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400228:	009b      	lsls	r3, r3, #2
  40022a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40022e:	4413      	add	r3, r2
  400230:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400234:	68ba      	ldr	r2, [r7, #8]
  400236:	fbb2 f3f3 	udiv	r3, r2, r3
  40023a:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  40023c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40023e:	0c1b      	lsrs	r3, r3, #16
  400240:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400242:	68fa      	ldr	r2, [r7, #12]
  400244:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400246:	429a      	cmp	r2, r3
  400248:	d901      	bls.n	40024e <tc_find_mck_divisor+0x52>
			return 0;
  40024a:	2300      	movs	r3, #0
  40024c:	e023      	b.n	400296 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40024e:	68fa      	ldr	r2, [r7, #12]
  400250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400252:	429a      	cmp	r2, r3
  400254:	d206      	bcs.n	400264 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400258:	3301      	adds	r3, #1
  40025a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  40025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40025e:	2b04      	cmp	r3, #4
  400260:	d9e1      	bls.n	400226 <tc_find_mck_divisor+0x2a>
  400262:	e000      	b.n	400266 <tc_find_mck_divisor+0x6a>
			break;
  400264:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400268:	2b04      	cmp	r3, #4
  40026a:	d901      	bls.n	400270 <tc_find_mck_divisor+0x74>
		return 0;
  40026c:	2300      	movs	r3, #0
  40026e:	e012      	b.n	400296 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400270:	687b      	ldr	r3, [r7, #4]
  400272:	2b00      	cmp	r3, #0
  400274:	d008      	beq.n	400288 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400278:	009b      	lsls	r3, r3, #2
  40027a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40027e:	4413      	add	r3, r2
  400280:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400288:	683b      	ldr	r3, [r7, #0]
  40028a:	2b00      	cmp	r3, #0
  40028c:	d002      	beq.n	400294 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40028e:	683b      	ldr	r3, [r7, #0]
  400290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400292:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400294:	2301      	movs	r3, #1
}
  400296:	4618      	mov	r0, r3
  400298:	3734      	adds	r7, #52	; 0x34
  40029a:	46bd      	mov	sp, r7
  40029c:	bc80      	pop	{r7}
  40029e:	4770      	bx	lr

004002a0 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4002a0:	b480      	push	{r7}
  4002a2:	b083      	sub	sp, #12
  4002a4:	af00      	add	r7, sp, #0
  4002a6:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4002a8:	687b      	ldr	r3, [r7, #4]
  4002aa:	2208      	movs	r2, #8
  4002ac:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4002ae:	687b      	ldr	r3, [r7, #4]
  4002b0:	2220      	movs	r2, #32
  4002b2:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2204      	movs	r2, #4
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	b084      	sub	sp, #16
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	6078      	str	r0, [r7, #4]
  4002cc:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4002ce:	2300      	movs	r3, #0
  4002d0:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4002d2:	687b      	ldr	r3, [r7, #4]
  4002d4:	f04f 32ff 	mov.w	r2, #4294967295
  4002d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4002da:	687b      	ldr	r3, [r7, #4]
  4002dc:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4002de:	6878      	ldr	r0, [r7, #4]
  4002e0:	4b0e      	ldr	r3, [pc, #56]	; (40031c <twi_master_init+0x58>)
  4002e2:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4002e4:	6878      	ldr	r0, [r7, #4]
  4002e6:	4b0e      	ldr	r3, [pc, #56]	; (400320 <twi_master_init+0x5c>)
  4002e8:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4002ea:	683b      	ldr	r3, [r7, #0]
  4002ec:	6859      	ldr	r1, [r3, #4]
  4002ee:	683b      	ldr	r3, [r7, #0]
  4002f0:	681b      	ldr	r3, [r3, #0]
  4002f2:	461a      	mov	r2, r3
  4002f4:	6878      	ldr	r0, [r7, #4]
  4002f6:	4b0b      	ldr	r3, [pc, #44]	; (400324 <twi_master_init+0x60>)
  4002f8:	4798      	blx	r3
  4002fa:	4603      	mov	r3, r0
  4002fc:	2b01      	cmp	r3, #1
  4002fe:	d101      	bne.n	400304 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400300:	2301      	movs	r3, #1
  400302:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400304:	683b      	ldr	r3, [r7, #0]
  400306:	7a5b      	ldrb	r3, [r3, #9]
  400308:	2b01      	cmp	r3, #1
  40030a:	d102      	bne.n	400312 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  40030c:	687b      	ldr	r3, [r7, #4]
  40030e:	2240      	movs	r2, #64	; 0x40
  400310:	601a      	str	r2, [r3, #0]
	}

	return status;
  400312:	68fb      	ldr	r3, [r7, #12]
}
  400314:	4618      	mov	r0, r3
  400316:	3710      	adds	r7, #16
  400318:	46bd      	mov	sp, r7
  40031a:	bd80      	pop	{r7, pc}
  40031c:	0040041d 	.word	0x0040041d
  400320:	004002a1 	.word	0x004002a1
  400324:	00400329 	.word	0x00400329

00400328 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400328:	b480      	push	{r7}
  40032a:	b089      	sub	sp, #36	; 0x24
  40032c:	af00      	add	r7, sp, #0
  40032e:	60f8      	str	r0, [r7, #12]
  400330:	60b9      	str	r1, [r7, #8]
  400332:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400334:	2300      	movs	r3, #0
  400336:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400338:	68bb      	ldr	r3, [r7, #8]
  40033a:	4a34      	ldr	r2, [pc, #208]	; (40040c <twi_set_speed+0xe4>)
  40033c:	4293      	cmp	r3, r2
  40033e:	d901      	bls.n	400344 <twi_set_speed+0x1c>
		return FAIL;
  400340:	2301      	movs	r3, #1
  400342:	e05d      	b.n	400400 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400344:	68bb      	ldr	r3, [r7, #8]
  400346:	4a32      	ldr	r2, [pc, #200]	; (400410 <twi_set_speed+0xe8>)
  400348:	4293      	cmp	r3, r2
  40034a:	d937      	bls.n	4003bc <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	4a31      	ldr	r2, [pc, #196]	; (400414 <twi_set_speed+0xec>)
  400350:	fba2 2303 	umull	r2, r3, r2, r3
  400354:	0b9b      	lsrs	r3, r3, #14
  400356:	3b04      	subs	r3, #4
  400358:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40035a:	68ba      	ldr	r2, [r7, #8]
  40035c:	4b2e      	ldr	r3, [pc, #184]	; (400418 <twi_set_speed+0xf0>)
  40035e:	4413      	add	r3, r2
  400360:	009b      	lsls	r3, r3, #2
  400362:	687a      	ldr	r2, [r7, #4]
  400364:	fbb2 f3f3 	udiv	r3, r2, r3
  400368:	3b04      	subs	r3, #4
  40036a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40036c:	e005      	b.n	40037a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  40036e:	69fb      	ldr	r3, [r7, #28]
  400370:	3301      	adds	r3, #1
  400372:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400374:	697b      	ldr	r3, [r7, #20]
  400376:	085b      	lsrs	r3, r3, #1
  400378:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40037a:	697b      	ldr	r3, [r7, #20]
  40037c:	2bff      	cmp	r3, #255	; 0xff
  40037e:	d909      	bls.n	400394 <twi_set_speed+0x6c>
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	2b06      	cmp	r3, #6
  400384:	d9f3      	bls.n	40036e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400386:	e005      	b.n	400394 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400388:	69fb      	ldr	r3, [r7, #28]
  40038a:	3301      	adds	r3, #1
  40038c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40038e:	693b      	ldr	r3, [r7, #16]
  400390:	085b      	lsrs	r3, r3, #1
  400392:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400394:	693b      	ldr	r3, [r7, #16]
  400396:	2bff      	cmp	r3, #255	; 0xff
  400398:	d902      	bls.n	4003a0 <twi_set_speed+0x78>
  40039a:	69fb      	ldr	r3, [r7, #28]
  40039c:	2b06      	cmp	r3, #6
  40039e:	d9f3      	bls.n	400388 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003a0:	697b      	ldr	r3, [r7, #20]
  4003a2:	b2da      	uxtb	r2, r3
  4003a4:	693b      	ldr	r3, [r7, #16]
  4003a6:	021b      	lsls	r3, r3, #8
  4003a8:	b29b      	uxth	r3, r3
  4003aa:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4003ac:	69fb      	ldr	r3, [r7, #28]
  4003ae:	041b      	lsls	r3, r3, #16
  4003b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003b4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4003b6:	68fb      	ldr	r3, [r7, #12]
  4003b8:	611a      	str	r2, [r3, #16]
  4003ba:	e020      	b.n	4003fe <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4003bc:	68bb      	ldr	r3, [r7, #8]
  4003be:	005b      	lsls	r3, r3, #1
  4003c0:	687a      	ldr	r2, [r7, #4]
  4003c2:	fbb2 f3f3 	udiv	r3, r2, r3
  4003c6:	3b04      	subs	r3, #4
  4003c8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003ca:	e005      	b.n	4003d8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4003cc:	69fb      	ldr	r3, [r7, #28]
  4003ce:	3301      	adds	r3, #1
  4003d0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4003d2:	69bb      	ldr	r3, [r7, #24]
  4003d4:	085b      	lsrs	r3, r3, #1
  4003d6:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003d8:	69bb      	ldr	r3, [r7, #24]
  4003da:	2bff      	cmp	r3, #255	; 0xff
  4003dc:	d902      	bls.n	4003e4 <twi_set_speed+0xbc>
  4003de:	69fb      	ldr	r3, [r7, #28]
  4003e0:	2b06      	cmp	r3, #6
  4003e2:	d9f3      	bls.n	4003cc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4003e4:	69bb      	ldr	r3, [r7, #24]
  4003e6:	b2da      	uxtb	r2, r3
  4003e8:	69bb      	ldr	r3, [r7, #24]
  4003ea:	021b      	lsls	r3, r3, #8
  4003ec:	b29b      	uxth	r3, r3
  4003ee:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  4003f0:	69fb      	ldr	r3, [r7, #28]
  4003f2:	041b      	lsls	r3, r3, #16
  4003f4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4003f8:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4003fa:	68fb      	ldr	r3, [r7, #12]
  4003fc:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  4003fe:	2300      	movs	r3, #0
}
  400400:	4618      	mov	r0, r3
  400402:	3724      	adds	r7, #36	; 0x24
  400404:	46bd      	mov	sp, r7
  400406:	bc80      	pop	{r7}
  400408:	4770      	bx	lr
  40040a:	bf00      	nop
  40040c:	00061a80 	.word	0x00061a80
  400410:	0005dc00 	.word	0x0005dc00
  400414:	057619f1 	.word	0x057619f1
  400418:	3ffd1200 	.word	0x3ffd1200

0040041c <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  40041c:	b480      	push	{r7}
  40041e:	b083      	sub	sp, #12
  400420:	af00      	add	r7, sp, #0
  400422:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400424:	687b      	ldr	r3, [r7, #4]
  400426:	2280      	movs	r2, #128	; 0x80
  400428:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40042a:	687b      	ldr	r3, [r7, #4]
  40042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  40042e:	bf00      	nop
  400430:	370c      	adds	r7, #12
  400432:	46bd      	mov	sp, r7
  400434:	bc80      	pop	{r7}
  400436:	4770      	bx	lr

00400438 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400438:	b480      	push	{r7}
  40043a:	b089      	sub	sp, #36	; 0x24
  40043c:	af00      	add	r7, sp, #0
  40043e:	60f8      	str	r0, [r7, #12]
  400440:	60b9      	str	r1, [r7, #8]
  400442:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400444:	68bb      	ldr	r3, [r7, #8]
  400446:	011a      	lsls	r2, r3, #4
  400448:	687b      	ldr	r3, [r7, #4]
  40044a:	429a      	cmp	r2, r3
  40044c:	d802      	bhi.n	400454 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40044e:	2310      	movs	r3, #16
  400450:	61fb      	str	r3, [r7, #28]
  400452:	e001      	b.n	400458 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400454:	2308      	movs	r3, #8
  400456:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400458:	687b      	ldr	r3, [r7, #4]
  40045a:	00da      	lsls	r2, r3, #3
  40045c:	69fb      	ldr	r3, [r7, #28]
  40045e:	68b9      	ldr	r1, [r7, #8]
  400460:	fb01 f303 	mul.w	r3, r1, r3
  400464:	085b      	lsrs	r3, r3, #1
  400466:	441a      	add	r2, r3
  400468:	69fb      	ldr	r3, [r7, #28]
  40046a:	68b9      	ldr	r1, [r7, #8]
  40046c:	fb01 f303 	mul.w	r3, r1, r3
  400470:	fbb2 f3f3 	udiv	r3, r2, r3
  400474:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400476:	69bb      	ldr	r3, [r7, #24]
  400478:	08db      	lsrs	r3, r3, #3
  40047a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40047c:	69bb      	ldr	r3, [r7, #24]
  40047e:	f003 0307 	and.w	r3, r3, #7
  400482:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400484:	697b      	ldr	r3, [r7, #20]
  400486:	2b00      	cmp	r3, #0
  400488:	d003      	beq.n	400492 <usart_set_async_baudrate+0x5a>
  40048a:	697b      	ldr	r3, [r7, #20]
  40048c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400490:	d301      	bcc.n	400496 <usart_set_async_baudrate+0x5e>
		return 1;
  400492:	2301      	movs	r3, #1
  400494:	e00f      	b.n	4004b6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400496:	69fb      	ldr	r3, [r7, #28]
  400498:	2b08      	cmp	r3, #8
  40049a:	d105      	bne.n	4004a8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40049c:	68fb      	ldr	r3, [r7, #12]
  40049e:	685b      	ldr	r3, [r3, #4]
  4004a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4004a4:	68fb      	ldr	r3, [r7, #12]
  4004a6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4004a8:	693b      	ldr	r3, [r7, #16]
  4004aa:	041a      	lsls	r2, r3, #16
  4004ac:	697b      	ldr	r3, [r7, #20]
  4004ae:	431a      	orrs	r2, r3
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	621a      	str	r2, [r3, #32]

	return 0;
  4004b4:	2300      	movs	r3, #0
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	3724      	adds	r7, #36	; 0x24
  4004ba:	46bd      	mov	sp, r7
  4004bc:	bc80      	pop	{r7}
  4004be:	4770      	bx	lr

004004c0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4004c0:	b580      	push	{r7, lr}
  4004c2:	b082      	sub	sp, #8
  4004c4:	af00      	add	r7, sp, #0
  4004c6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4004c8:	6878      	ldr	r0, [r7, #4]
  4004ca:	4b0f      	ldr	r3, [pc, #60]	; (400508 <usart_reset+0x48>)
  4004cc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4004ce:	687b      	ldr	r3, [r7, #4]
  4004d0:	2200      	movs	r2, #0
  4004d2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4004d4:	687b      	ldr	r3, [r7, #4]
  4004d6:	2200      	movs	r2, #0
  4004d8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4004da:	687b      	ldr	r3, [r7, #4]
  4004dc:	2200      	movs	r2, #0
  4004de:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4004e0:	6878      	ldr	r0, [r7, #4]
  4004e2:	4b0a      	ldr	r3, [pc, #40]	; (40050c <usart_reset+0x4c>)
  4004e4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4004e6:	6878      	ldr	r0, [r7, #4]
  4004e8:	4b09      	ldr	r3, [pc, #36]	; (400510 <usart_reset+0x50>)
  4004ea:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4004ec:	6878      	ldr	r0, [r7, #4]
  4004ee:	4b09      	ldr	r3, [pc, #36]	; (400514 <usart_reset+0x54>)
  4004f0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4004f2:	6878      	ldr	r0, [r7, #4]
  4004f4:	4b08      	ldr	r3, [pc, #32]	; (400518 <usart_reset+0x58>)
  4004f6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4004f8:	6878      	ldr	r0, [r7, #4]
  4004fa:	4b08      	ldr	r3, [pc, #32]	; (40051c <usart_reset+0x5c>)
  4004fc:	4798      	blx	r3
#endif
}
  4004fe:	bf00      	nop
  400500:	3708      	adds	r7, #8
  400502:	46bd      	mov	sp, r7
  400504:	bd80      	pop	{r7, pc}
  400506:	bf00      	nop
  400508:	00400771 	.word	0x00400771
  40050c:	004005fd 	.word	0x004005fd
  400510:	0040062d 	.word	0x0040062d
  400514:	0040068f 	.word	0x0040068f
  400518:	004006c3 	.word	0x004006c3
  40051c:	004006a9 	.word	0x004006a9

00400520 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400520:	b580      	push	{r7, lr}
  400522:	b084      	sub	sp, #16
  400524:	af00      	add	r7, sp, #0
  400526:	60f8      	str	r0, [r7, #12]
  400528:	60b9      	str	r1, [r7, #8]
  40052a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40052c:	68f8      	ldr	r0, [r7, #12]
  40052e:	4b1a      	ldr	r3, [pc, #104]	; (400598 <usart_init_rs232+0x78>)
  400530:	4798      	blx	r3

	ul_reg_val = 0;
  400532:	4b1a      	ldr	r3, [pc, #104]	; (40059c <usart_init_rs232+0x7c>)
  400534:	2200      	movs	r2, #0
  400536:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	2b00      	cmp	r3, #0
  40053c:	d009      	beq.n	400552 <usart_init_rs232+0x32>
  40053e:	68bb      	ldr	r3, [r7, #8]
  400540:	681b      	ldr	r3, [r3, #0]
  400542:	687a      	ldr	r2, [r7, #4]
  400544:	4619      	mov	r1, r3
  400546:	68f8      	ldr	r0, [r7, #12]
  400548:	4b15      	ldr	r3, [pc, #84]	; (4005a0 <usart_init_rs232+0x80>)
  40054a:	4798      	blx	r3
  40054c:	4603      	mov	r3, r0
  40054e:	2b00      	cmp	r3, #0
  400550:	d001      	beq.n	400556 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400552:	2301      	movs	r3, #1
  400554:	e01b      	b.n	40058e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400556:	68bb      	ldr	r3, [r7, #8]
  400558:	685a      	ldr	r2, [r3, #4]
  40055a:	68bb      	ldr	r3, [r7, #8]
  40055c:	689b      	ldr	r3, [r3, #8]
  40055e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400560:	68bb      	ldr	r3, [r7, #8]
  400562:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400564:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400566:	68bb      	ldr	r3, [r7, #8]
  400568:	68db      	ldr	r3, [r3, #12]
  40056a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40056c:	4b0b      	ldr	r3, [pc, #44]	; (40059c <usart_init_rs232+0x7c>)
  40056e:	681b      	ldr	r3, [r3, #0]
  400570:	4313      	orrs	r3, r2
  400572:	4a0a      	ldr	r2, [pc, #40]	; (40059c <usart_init_rs232+0x7c>)
  400574:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400576:	4b09      	ldr	r3, [pc, #36]	; (40059c <usart_init_rs232+0x7c>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	4a08      	ldr	r2, [pc, #32]	; (40059c <usart_init_rs232+0x7c>)
  40057c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40057e:	68fb      	ldr	r3, [r7, #12]
  400580:	685a      	ldr	r2, [r3, #4]
  400582:	4b06      	ldr	r3, [pc, #24]	; (40059c <usart_init_rs232+0x7c>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	431a      	orrs	r2, r3
  400588:	68fb      	ldr	r3, [r7, #12]
  40058a:	605a      	str	r2, [r3, #4]

	return 0;
  40058c:	2300      	movs	r3, #0
}
  40058e:	4618      	mov	r0, r3
  400590:	3710      	adds	r7, #16
  400592:	46bd      	mov	sp, r7
  400594:	bd80      	pop	{r7, pc}
  400596:	bf00      	nop
  400598:	004004c1 	.word	0x004004c1
  40059c:	20000458 	.word	0x20000458
  4005a0:	00400439 	.word	0x00400439

004005a4 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4005a4:	b580      	push	{r7, lr}
  4005a6:	b084      	sub	sp, #16
  4005a8:	af00      	add	r7, sp, #0
  4005aa:	60f8      	str	r0, [r7, #12]
  4005ac:	60b9      	str	r1, [r7, #8]
  4005ae:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4005b0:	687a      	ldr	r2, [r7, #4]
  4005b2:	68b9      	ldr	r1, [r7, #8]
  4005b4:	68f8      	ldr	r0, [r7, #12]
  4005b6:	4b0a      	ldr	r3, [pc, #40]	; (4005e0 <usart_init_hw_handshaking+0x3c>)
  4005b8:	4798      	blx	r3
  4005ba:	4603      	mov	r3, r0
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d001      	beq.n	4005c4 <usart_init_hw_handshaking+0x20>
		return 1;
  4005c0:	2301      	movs	r3, #1
  4005c2:	e008      	b.n	4005d6 <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4005c4:	68fb      	ldr	r3, [r7, #12]
  4005c6:	685b      	ldr	r3, [r3, #4]
  4005c8:	f023 030f 	bic.w	r3, r3, #15
  4005cc:	f043 0202 	orr.w	r2, r3, #2
  4005d0:	68fb      	ldr	r3, [r7, #12]
  4005d2:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  4005d4:	2300      	movs	r3, #0
}
  4005d6:	4618      	mov	r0, r3
  4005d8:	3710      	adds	r7, #16
  4005da:	46bd      	mov	sp, r7
  4005dc:	bd80      	pop	{r7, pc}
  4005de:	bf00      	nop
  4005e0:	00400521 	.word	0x00400521

004005e4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b083      	sub	sp, #12
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4005ec:	687b      	ldr	r3, [r7, #4]
  4005ee:	2240      	movs	r2, #64	; 0x40
  4005f0:	601a      	str	r2, [r3, #0]
}
  4005f2:	bf00      	nop
  4005f4:	370c      	adds	r7, #12
  4005f6:	46bd      	mov	sp, r7
  4005f8:	bc80      	pop	{r7}
  4005fa:	4770      	bx	lr

004005fc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4005fc:	b480      	push	{r7}
  4005fe:	b083      	sub	sp, #12
  400600:	af00      	add	r7, sp, #0
  400602:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400604:	687b      	ldr	r3, [r7, #4]
  400606:	2288      	movs	r2, #136	; 0x88
  400608:	601a      	str	r2, [r3, #0]
}
  40060a:	bf00      	nop
  40060c:	370c      	adds	r7, #12
  40060e:	46bd      	mov	sp, r7
  400610:	bc80      	pop	{r7}
  400612:	4770      	bx	lr

00400614 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400614:	b480      	push	{r7}
  400616:	b083      	sub	sp, #12
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	2210      	movs	r2, #16
  400620:	601a      	str	r2, [r3, #0]
}
  400622:	bf00      	nop
  400624:	370c      	adds	r7, #12
  400626:	46bd      	mov	sp, r7
  400628:	bc80      	pop	{r7}
  40062a:	4770      	bx	lr

0040062c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40062c:	b480      	push	{r7}
  40062e:	b083      	sub	sp, #12
  400630:	af00      	add	r7, sp, #0
  400632:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400634:	687b      	ldr	r3, [r7, #4]
  400636:	2224      	movs	r2, #36	; 0x24
  400638:	601a      	str	r2, [r3, #0]
}
  40063a:	bf00      	nop
  40063c:	370c      	adds	r7, #12
  40063e:	46bd      	mov	sp, r7
  400640:	bc80      	pop	{r7}
  400642:	4770      	bx	lr

00400644 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400644:	b480      	push	{r7}
  400646:	b083      	sub	sp, #12
  400648:	af00      	add	r7, sp, #0
  40064a:	6078      	str	r0, [r7, #4]
  40064c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40064e:	687b      	ldr	r3, [r7, #4]
  400650:	683a      	ldr	r2, [r7, #0]
  400652:	609a      	str	r2, [r3, #8]
}
  400654:	bf00      	nop
  400656:	370c      	adds	r7, #12
  400658:	46bd      	mov	sp, r7
  40065a:	bc80      	pop	{r7}
  40065c:	4770      	bx	lr

0040065e <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40065e:	b480      	push	{r7}
  400660:	b083      	sub	sp, #12
  400662:	af00      	add	r7, sp, #0
  400664:	6078      	str	r0, [r7, #4]
  400666:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400668:	687b      	ldr	r3, [r7, #4]
  40066a:	683a      	ldr	r2, [r7, #0]
  40066c:	60da      	str	r2, [r3, #12]
}
  40066e:	bf00      	nop
  400670:	370c      	adds	r7, #12
  400672:	46bd      	mov	sp, r7
  400674:	bc80      	pop	{r7}
  400676:	4770      	bx	lr

00400678 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400678:	b480      	push	{r7}
  40067a:	b083      	sub	sp, #12
  40067c:	af00      	add	r7, sp, #0
  40067e:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400680:	687b      	ldr	r3, [r7, #4]
  400682:	695b      	ldr	r3, [r3, #20]
}
  400684:	4618      	mov	r0, r3
  400686:	370c      	adds	r7, #12
  400688:	46bd      	mov	sp, r7
  40068a:	bc80      	pop	{r7}
  40068c:	4770      	bx	lr

0040068e <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40068e:	b480      	push	{r7}
  400690:	b083      	sub	sp, #12
  400692:	af00      	add	r7, sp, #0
  400694:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400696:	687b      	ldr	r3, [r7, #4]
  400698:	f44f 7280 	mov.w	r2, #256	; 0x100
  40069c:	601a      	str	r2, [r3, #0]
}
  40069e:	bf00      	nop
  4006a0:	370c      	adds	r7, #12
  4006a2:	46bd      	mov	sp, r7
  4006a4:	bc80      	pop	{r7}
  4006a6:	4770      	bx	lr

004006a8 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4006a8:	b480      	push	{r7}
  4006aa:	b083      	sub	sp, #12
  4006ac:	af00      	add	r7, sp, #0
  4006ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4006b6:	601a      	str	r2, [r3, #0]
}
  4006b8:	bf00      	nop
  4006ba:	370c      	adds	r7, #12
  4006bc:	46bd      	mov	sp, r7
  4006be:	bc80      	pop	{r7}
  4006c0:	4770      	bx	lr

004006c2 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4006c2:	b480      	push	{r7}
  4006c4:	b083      	sub	sp, #12
  4006c6:	af00      	add	r7, sp, #0
  4006c8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4006ca:	687b      	ldr	r3, [r7, #4]
  4006cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006d0:	601a      	str	r2, [r3, #0]
}
  4006d2:	bf00      	nop
  4006d4:	370c      	adds	r7, #12
  4006d6:	46bd      	mov	sp, r7
  4006d8:	bc80      	pop	{r7}
  4006da:	4770      	bx	lr

004006dc <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  4006dc:	b480      	push	{r7}
  4006de:	b083      	sub	sp, #12
  4006e0:	af00      	add	r7, sp, #0
  4006e2:	6078      	str	r0, [r7, #4]
  4006e4:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4006e6:	bf00      	nop
  4006e8:	687b      	ldr	r3, [r7, #4]
  4006ea:	695b      	ldr	r3, [r3, #20]
  4006ec:	f003 0302 	and.w	r3, r3, #2
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d0f9      	beq.n	4006e8 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4006f4:	683b      	ldr	r3, [r7, #0]
  4006f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4006fa:	687b      	ldr	r3, [r7, #4]
  4006fc:	61da      	str	r2, [r3, #28]

	return 0;
  4006fe:	2300      	movs	r3, #0
}
  400700:	4618      	mov	r0, r3
  400702:	370c      	adds	r7, #12
  400704:	46bd      	mov	sp, r7
  400706:	bc80      	pop	{r7}
  400708:	4770      	bx	lr
	...

0040070c <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  40070c:	b580      	push	{r7, lr}
  40070e:	b082      	sub	sp, #8
  400710:	af00      	add	r7, sp, #0
  400712:	6078      	str	r0, [r7, #4]
  400714:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400716:	e007      	b.n	400728 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400718:	683b      	ldr	r3, [r7, #0]
  40071a:	1c5a      	adds	r2, r3, #1
  40071c:	603a      	str	r2, [r7, #0]
  40071e:	781b      	ldrb	r3, [r3, #0]
  400720:	4619      	mov	r1, r3
  400722:	6878      	ldr	r0, [r7, #4]
  400724:	4b04      	ldr	r3, [pc, #16]	; (400738 <usart_write_line+0x2c>)
  400726:	4798      	blx	r3
	while (*string != '\0') {
  400728:	683b      	ldr	r3, [r7, #0]
  40072a:	781b      	ldrb	r3, [r3, #0]
  40072c:	2b00      	cmp	r3, #0
  40072e:	d1f3      	bne.n	400718 <usart_write_line+0xc>
	}
}
  400730:	bf00      	nop
  400732:	3708      	adds	r7, #8
  400734:	46bd      	mov	sp, r7
  400736:	bd80      	pop	{r7, pc}
  400738:	004006dd 	.word	0x004006dd

0040073c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40073c:	b480      	push	{r7}
  40073e:	b083      	sub	sp, #12
  400740:	af00      	add	r7, sp, #0
  400742:	6078      	str	r0, [r7, #4]
  400744:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400746:	687b      	ldr	r3, [r7, #4]
  400748:	695b      	ldr	r3, [r3, #20]
  40074a:	f003 0301 	and.w	r3, r3, #1
  40074e:	2b00      	cmp	r3, #0
  400750:	d101      	bne.n	400756 <usart_read+0x1a>
		return 1;
  400752:	2301      	movs	r3, #1
  400754:	e006      	b.n	400764 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400756:	687b      	ldr	r3, [r7, #4]
  400758:	699b      	ldr	r3, [r3, #24]
  40075a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40075e:	683b      	ldr	r3, [r7, #0]
  400760:	601a      	str	r2, [r3, #0]

	return 0;
  400762:	2300      	movs	r3, #0
}
  400764:	4618      	mov	r0, r3
  400766:	370c      	adds	r7, #12
  400768:	46bd      	mov	sp, r7
  40076a:	bc80      	pop	{r7}
  40076c:	4770      	bx	lr
	...

00400770 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400770:	b480      	push	{r7}
  400772:	b083      	sub	sp, #12
  400774:	af00      	add	r7, sp, #0
  400776:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400778:	687b      	ldr	r3, [r7, #4]
  40077a:	4a04      	ldr	r2, [pc, #16]	; (40078c <usart_disable_writeprotect+0x1c>)
  40077c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400780:	bf00      	nop
  400782:	370c      	adds	r7, #12
  400784:	46bd      	mov	sp, r7
  400786:	bc80      	pop	{r7}
  400788:	4770      	bx	lr
  40078a:	bf00      	nop
  40078c:	55534100 	.word	0x55534100

00400790 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400790:	b580      	push	{r7, lr}
  400792:	b084      	sub	sp, #16
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40079a:	6878      	ldr	r0, [r7, #4]
  40079c:	4b2c      	ldr	r3, [pc, #176]	; (400850 <pio_handler_process+0xc0>)
  40079e:	4798      	blx	r3
  4007a0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4007a2:	6878      	ldr	r0, [r7, #4]
  4007a4:	4b2b      	ldr	r3, [pc, #172]	; (400854 <pio_handler_process+0xc4>)
  4007a6:	4798      	blx	r3
  4007a8:	4602      	mov	r2, r0
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	4013      	ands	r3, r2
  4007ae:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4007b0:	68fb      	ldr	r3, [r7, #12]
  4007b2:	2b00      	cmp	r3, #0
  4007b4:	d03c      	beq.n	400830 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4007b6:	2300      	movs	r3, #0
  4007b8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4007ba:	e034      	b.n	400826 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4007bc:	4a26      	ldr	r2, [pc, #152]	; (400858 <pio_handler_process+0xc8>)
  4007be:	68bb      	ldr	r3, [r7, #8]
  4007c0:	011b      	lsls	r3, r3, #4
  4007c2:	4413      	add	r3, r2
  4007c4:	681a      	ldr	r2, [r3, #0]
  4007c6:	683b      	ldr	r3, [r7, #0]
  4007c8:	429a      	cmp	r2, r3
  4007ca:	d126      	bne.n	40081a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4007cc:	4a22      	ldr	r2, [pc, #136]	; (400858 <pio_handler_process+0xc8>)
  4007ce:	68bb      	ldr	r3, [r7, #8]
  4007d0:	011b      	lsls	r3, r3, #4
  4007d2:	4413      	add	r3, r2
  4007d4:	3304      	adds	r3, #4
  4007d6:	681a      	ldr	r2, [r3, #0]
  4007d8:	68fb      	ldr	r3, [r7, #12]
  4007da:	4013      	ands	r3, r2
  4007dc:	2b00      	cmp	r3, #0
  4007de:	d01c      	beq.n	40081a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007e0:	4a1d      	ldr	r2, [pc, #116]	; (400858 <pio_handler_process+0xc8>)
  4007e2:	68bb      	ldr	r3, [r7, #8]
  4007e4:	011b      	lsls	r3, r3, #4
  4007e6:	4413      	add	r3, r2
  4007e8:	330c      	adds	r3, #12
  4007ea:	681b      	ldr	r3, [r3, #0]
  4007ec:	491a      	ldr	r1, [pc, #104]	; (400858 <pio_handler_process+0xc8>)
  4007ee:	68ba      	ldr	r2, [r7, #8]
  4007f0:	0112      	lsls	r2, r2, #4
  4007f2:	440a      	add	r2, r1
  4007f4:	6810      	ldr	r0, [r2, #0]
  4007f6:	4918      	ldr	r1, [pc, #96]	; (400858 <pio_handler_process+0xc8>)
  4007f8:	68ba      	ldr	r2, [r7, #8]
  4007fa:	0112      	lsls	r2, r2, #4
  4007fc:	440a      	add	r2, r1
  4007fe:	3204      	adds	r2, #4
  400800:	6812      	ldr	r2, [r2, #0]
  400802:	4611      	mov	r1, r2
  400804:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400806:	4a14      	ldr	r2, [pc, #80]	; (400858 <pio_handler_process+0xc8>)
  400808:	68bb      	ldr	r3, [r7, #8]
  40080a:	011b      	lsls	r3, r3, #4
  40080c:	4413      	add	r3, r2
  40080e:	3304      	adds	r3, #4
  400810:	681b      	ldr	r3, [r3, #0]
  400812:	43db      	mvns	r3, r3
  400814:	68fa      	ldr	r2, [r7, #12]
  400816:	4013      	ands	r3, r2
  400818:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40081a:	68bb      	ldr	r3, [r7, #8]
  40081c:	3301      	adds	r3, #1
  40081e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400820:	68bb      	ldr	r3, [r7, #8]
  400822:	2b06      	cmp	r3, #6
  400824:	d803      	bhi.n	40082e <pio_handler_process+0x9e>
		while (status != 0) {
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	2b00      	cmp	r3, #0
  40082a:	d1c7      	bne.n	4007bc <pio_handler_process+0x2c>
  40082c:	e000      	b.n	400830 <pio_handler_process+0xa0>
				break;
  40082e:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400830:	4b0a      	ldr	r3, [pc, #40]	; (40085c <pio_handler_process+0xcc>)
  400832:	681b      	ldr	r3, [r3, #0]
  400834:	2b00      	cmp	r3, #0
  400836:	d007      	beq.n	400848 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400838:	4b09      	ldr	r3, [pc, #36]	; (400860 <pio_handler_process+0xd0>)
  40083a:	681b      	ldr	r3, [r3, #0]
  40083c:	2b00      	cmp	r3, #0
  40083e:	d003      	beq.n	400848 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400840:	4b07      	ldr	r3, [pc, #28]	; (400860 <pio_handler_process+0xd0>)
  400842:	681b      	ldr	r3, [r3, #0]
  400844:	6878      	ldr	r0, [r7, #4]
  400846:	4798      	blx	r3
		}
	}
#endif
}
  400848:	bf00      	nop
  40084a:	3710      	adds	r7, #16
  40084c:	46bd      	mov	sp, r7
  40084e:	bd80      	pop	{r7, pc}
  400850:	00400f9b 	.word	0x00400f9b
  400854:	00400fb1 	.word	0x00400fb1
  400858:	2000045c 	.word	0x2000045c
  40085c:	200004e8 	.word	0x200004e8
  400860:	200004d0 	.word	0x200004d0

00400864 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400864:	b580      	push	{r7, lr}
  400866:	b086      	sub	sp, #24
  400868:	af00      	add	r7, sp, #0
  40086a:	60f8      	str	r0, [r7, #12]
  40086c:	60b9      	str	r1, [r7, #8]
  40086e:	607a      	str	r2, [r7, #4]
  400870:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400872:	4b21      	ldr	r3, [pc, #132]	; (4008f8 <pio_handler_set+0x94>)
  400874:	681b      	ldr	r3, [r3, #0]
  400876:	2b06      	cmp	r3, #6
  400878:	d901      	bls.n	40087e <pio_handler_set+0x1a>
		return 1;
  40087a:	2301      	movs	r3, #1
  40087c:	e038      	b.n	4008f0 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40087e:	2300      	movs	r3, #0
  400880:	75fb      	strb	r3, [r7, #23]
  400882:	e011      	b.n	4008a8 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400884:	7dfb      	ldrb	r3, [r7, #23]
  400886:	011b      	lsls	r3, r3, #4
  400888:	4a1c      	ldr	r2, [pc, #112]	; (4008fc <pio_handler_set+0x98>)
  40088a:	4413      	add	r3, r2
  40088c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40088e:	693b      	ldr	r3, [r7, #16]
  400890:	681a      	ldr	r2, [r3, #0]
  400892:	68bb      	ldr	r3, [r7, #8]
  400894:	429a      	cmp	r2, r3
  400896:	d104      	bne.n	4008a2 <pio_handler_set+0x3e>
  400898:	693b      	ldr	r3, [r7, #16]
  40089a:	685a      	ldr	r2, [r3, #4]
  40089c:	687b      	ldr	r3, [r7, #4]
  40089e:	429a      	cmp	r2, r3
  4008a0:	d008      	beq.n	4008b4 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4008a2:	7dfb      	ldrb	r3, [r7, #23]
  4008a4:	3301      	adds	r3, #1
  4008a6:	75fb      	strb	r3, [r7, #23]
  4008a8:	7dfa      	ldrb	r2, [r7, #23]
  4008aa:	4b13      	ldr	r3, [pc, #76]	; (4008f8 <pio_handler_set+0x94>)
  4008ac:	681b      	ldr	r3, [r3, #0]
  4008ae:	429a      	cmp	r2, r3
  4008b0:	d9e8      	bls.n	400884 <pio_handler_set+0x20>
  4008b2:	e000      	b.n	4008b6 <pio_handler_set+0x52>
			break;
  4008b4:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4008b6:	693b      	ldr	r3, [r7, #16]
  4008b8:	68ba      	ldr	r2, [r7, #8]
  4008ba:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4008bc:	693b      	ldr	r3, [r7, #16]
  4008be:	687a      	ldr	r2, [r7, #4]
  4008c0:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4008c2:	693b      	ldr	r3, [r7, #16]
  4008c4:	683a      	ldr	r2, [r7, #0]
  4008c6:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4008c8:	693b      	ldr	r3, [r7, #16]
  4008ca:	6a3a      	ldr	r2, [r7, #32]
  4008cc:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4008ce:	7dfa      	ldrb	r2, [r7, #23]
  4008d0:	4b09      	ldr	r3, [pc, #36]	; (4008f8 <pio_handler_set+0x94>)
  4008d2:	681b      	ldr	r3, [r3, #0]
  4008d4:	3301      	adds	r3, #1
  4008d6:	429a      	cmp	r2, r3
  4008d8:	d104      	bne.n	4008e4 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  4008da:	4b07      	ldr	r3, [pc, #28]	; (4008f8 <pio_handler_set+0x94>)
  4008dc:	681b      	ldr	r3, [r3, #0]
  4008de:	3301      	adds	r3, #1
  4008e0:	4a05      	ldr	r2, [pc, #20]	; (4008f8 <pio_handler_set+0x94>)
  4008e2:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4008e4:	683a      	ldr	r2, [r7, #0]
  4008e6:	6879      	ldr	r1, [r7, #4]
  4008e8:	68f8      	ldr	r0, [r7, #12]
  4008ea:	4b05      	ldr	r3, [pc, #20]	; (400900 <pio_handler_set+0x9c>)
  4008ec:	4798      	blx	r3

	return 0;
  4008ee:	2300      	movs	r3, #0
}
  4008f0:	4618      	mov	r0, r3
  4008f2:	3718      	adds	r7, #24
  4008f4:	46bd      	mov	sp, r7
  4008f6:	bd80      	pop	{r7, pc}
  4008f8:	200004cc 	.word	0x200004cc
  4008fc:	2000045c 	.word	0x2000045c
  400900:	00400efd 	.word	0x00400efd

00400904 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400904:	b580      	push	{r7, lr}
  400906:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400908:	210b      	movs	r1, #11
  40090a:	4802      	ldr	r0, [pc, #8]	; (400914 <PIOA_Handler+0x10>)
  40090c:	4b02      	ldr	r3, [pc, #8]	; (400918 <PIOA_Handler+0x14>)
  40090e:	4798      	blx	r3
}
  400910:	bf00      	nop
  400912:	bd80      	pop	{r7, pc}
  400914:	400e0e00 	.word	0x400e0e00
  400918:	00400791 	.word	0x00400791

0040091c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40091c:	b580      	push	{r7, lr}
  40091e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400920:	210c      	movs	r1, #12
  400922:	4802      	ldr	r0, [pc, #8]	; (40092c <PIOB_Handler+0x10>)
  400924:	4b02      	ldr	r3, [pc, #8]	; (400930 <PIOB_Handler+0x14>)
  400926:	4798      	blx	r3
}
  400928:	bf00      	nop
  40092a:	bd80      	pop	{r7, pc}
  40092c:	400e1000 	.word	0x400e1000
  400930:	00400791 	.word	0x00400791

00400934 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400934:	b480      	push	{r7}
  400936:	b083      	sub	sp, #12
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40093c:	687b      	ldr	r3, [r7, #4]
  40093e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400942:	605a      	str	r2, [r3, #4]

}
  400944:	bf00      	nop
  400946:	370c      	adds	r7, #12
  400948:	46bd      	mov	sp, r7
  40094a:	bc80      	pop	{r7}
  40094c:	4770      	bx	lr
	...

00400950 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400950:	b580      	push	{r7, lr}
  400952:	b082      	sub	sp, #8
  400954:	af00      	add	r7, sp, #0
  400956:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400958:	687b      	ldr	r3, [r7, #4]
  40095a:	2b07      	cmp	r3, #7
  40095c:	d831      	bhi.n	4009c2 <osc_enable+0x72>
  40095e:	a201      	add	r2, pc, #4	; (adr r2, 400964 <osc_enable+0x14>)
  400960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400964:	004009c1 	.word	0x004009c1
  400968:	00400985 	.word	0x00400985
  40096c:	0040098d 	.word	0x0040098d
  400970:	00400995 	.word	0x00400995
  400974:	0040099d 	.word	0x0040099d
  400978:	004009a5 	.word	0x004009a5
  40097c:	004009ad 	.word	0x004009ad
  400980:	004009b7 	.word	0x004009b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400984:	2000      	movs	r0, #0
  400986:	4b11      	ldr	r3, [pc, #68]	; (4009cc <osc_enable+0x7c>)
  400988:	4798      	blx	r3
		break;
  40098a:	e01a      	b.n	4009c2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40098c:	2001      	movs	r0, #1
  40098e:	4b0f      	ldr	r3, [pc, #60]	; (4009cc <osc_enable+0x7c>)
  400990:	4798      	blx	r3
		break;
  400992:	e016      	b.n	4009c2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400994:	2000      	movs	r0, #0
  400996:	4b0e      	ldr	r3, [pc, #56]	; (4009d0 <osc_enable+0x80>)
  400998:	4798      	blx	r3
		break;
  40099a:	e012      	b.n	4009c2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40099c:	2010      	movs	r0, #16
  40099e:	4b0c      	ldr	r3, [pc, #48]	; (4009d0 <osc_enable+0x80>)
  4009a0:	4798      	blx	r3
		break;
  4009a2:	e00e      	b.n	4009c2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4009a4:	2020      	movs	r0, #32
  4009a6:	4b0a      	ldr	r3, [pc, #40]	; (4009d0 <osc_enable+0x80>)
  4009a8:	4798      	blx	r3
		break;
  4009aa:	e00a      	b.n	4009c2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4009ac:	213e      	movs	r1, #62	; 0x3e
  4009ae:	2000      	movs	r0, #0
  4009b0:	4b08      	ldr	r3, [pc, #32]	; (4009d4 <osc_enable+0x84>)
  4009b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4009b4:	e005      	b.n	4009c2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4009b6:	213e      	movs	r1, #62	; 0x3e
  4009b8:	2001      	movs	r0, #1
  4009ba:	4b06      	ldr	r3, [pc, #24]	; (4009d4 <osc_enable+0x84>)
  4009bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4009be:	e000      	b.n	4009c2 <osc_enable+0x72>
		break;
  4009c0:	bf00      	nop
	}
}
  4009c2:	bf00      	nop
  4009c4:	3708      	adds	r7, #8
  4009c6:	46bd      	mov	sp, r7
  4009c8:	bd80      	pop	{r7, pc}
  4009ca:	bf00      	nop
  4009cc:	0040121d 	.word	0x0040121d
  4009d0:	00401289 	.word	0x00401289
  4009d4:	004012f9 	.word	0x004012f9

004009d8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4009d8:	b580      	push	{r7, lr}
  4009da:	b082      	sub	sp, #8
  4009dc:	af00      	add	r7, sp, #0
  4009de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4009e0:	687b      	ldr	r3, [r7, #4]
  4009e2:	2b07      	cmp	r3, #7
  4009e4:	d826      	bhi.n	400a34 <osc_is_ready+0x5c>
  4009e6:	a201      	add	r2, pc, #4	; (adr r2, 4009ec <osc_is_ready+0x14>)
  4009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009ec:	00400a0d 	.word	0x00400a0d
  4009f0:	00400a11 	.word	0x00400a11
  4009f4:	00400a11 	.word	0x00400a11
  4009f8:	00400a23 	.word	0x00400a23
  4009fc:	00400a23 	.word	0x00400a23
  400a00:	00400a23 	.word	0x00400a23
  400a04:	00400a23 	.word	0x00400a23
  400a08:	00400a23 	.word	0x00400a23
	case OSC_SLCK_32K_RC:
		return 1;
  400a0c:	2301      	movs	r3, #1
  400a0e:	e012      	b.n	400a36 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400a10:	4b0b      	ldr	r3, [pc, #44]	; (400a40 <osc_is_ready+0x68>)
  400a12:	4798      	blx	r3
  400a14:	4603      	mov	r3, r0
  400a16:	2b00      	cmp	r3, #0
  400a18:	bf14      	ite	ne
  400a1a:	2301      	movne	r3, #1
  400a1c:	2300      	moveq	r3, #0
  400a1e:	b2db      	uxtb	r3, r3
  400a20:	e009      	b.n	400a36 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a22:	4b08      	ldr	r3, [pc, #32]	; (400a44 <osc_is_ready+0x6c>)
  400a24:	4798      	blx	r3
  400a26:	4603      	mov	r3, r0
  400a28:	2b00      	cmp	r3, #0
  400a2a:	bf14      	ite	ne
  400a2c:	2301      	movne	r3, #1
  400a2e:	2300      	moveq	r3, #0
  400a30:	b2db      	uxtb	r3, r3
  400a32:	e000      	b.n	400a36 <osc_is_ready+0x5e>
	}

	return 0;
  400a34:	2300      	movs	r3, #0
}
  400a36:	4618      	mov	r0, r3
  400a38:	3708      	adds	r7, #8
  400a3a:	46bd      	mov	sp, r7
  400a3c:	bd80      	pop	{r7, pc}
  400a3e:	bf00      	nop
  400a40:	00401255 	.word	0x00401255
  400a44:	00401371 	.word	0x00401371

00400a48 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400a48:	b480      	push	{r7}
  400a4a:	b083      	sub	sp, #12
  400a4c:	af00      	add	r7, sp, #0
  400a4e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a50:	687b      	ldr	r3, [r7, #4]
  400a52:	2b07      	cmp	r3, #7
  400a54:	d825      	bhi.n	400aa2 <osc_get_rate+0x5a>
  400a56:	a201      	add	r2, pc, #4	; (adr r2, 400a5c <osc_get_rate+0x14>)
  400a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a5c:	00400a7d 	.word	0x00400a7d
  400a60:	00400a83 	.word	0x00400a83
  400a64:	00400a89 	.word	0x00400a89
  400a68:	00400a8f 	.word	0x00400a8f
  400a6c:	00400a93 	.word	0x00400a93
  400a70:	00400a97 	.word	0x00400a97
  400a74:	00400a9b 	.word	0x00400a9b
  400a78:	00400a9f 	.word	0x00400a9f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400a7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400a80:	e010      	b.n	400aa4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a86:	e00d      	b.n	400aa4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a8c:	e00a      	b.n	400aa4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400a8e:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <osc_get_rate+0x68>)
  400a90:	e008      	b.n	400aa4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400a92:	4b08      	ldr	r3, [pc, #32]	; (400ab4 <osc_get_rate+0x6c>)
  400a94:	e006      	b.n	400aa4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400a96:	4b08      	ldr	r3, [pc, #32]	; (400ab8 <osc_get_rate+0x70>)
  400a98:	e004      	b.n	400aa4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400a9a:	4b07      	ldr	r3, [pc, #28]	; (400ab8 <osc_get_rate+0x70>)
  400a9c:	e002      	b.n	400aa4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400a9e:	4b06      	ldr	r3, [pc, #24]	; (400ab8 <osc_get_rate+0x70>)
  400aa0:	e000      	b.n	400aa4 <osc_get_rate+0x5c>
	}

	return 0;
  400aa2:	2300      	movs	r3, #0
}
  400aa4:	4618      	mov	r0, r3
  400aa6:	370c      	adds	r7, #12
  400aa8:	46bd      	mov	sp, r7
  400aaa:	bc80      	pop	{r7}
  400aac:	4770      	bx	lr
  400aae:	bf00      	nop
  400ab0:	003d0900 	.word	0x003d0900
  400ab4:	007a1200 	.word	0x007a1200
  400ab8:	00b71b00 	.word	0x00b71b00

00400abc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400abc:	b580      	push	{r7, lr}
  400abe:	b082      	sub	sp, #8
  400ac0:	af00      	add	r7, sp, #0
  400ac2:	4603      	mov	r3, r0
  400ac4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400ac6:	bf00      	nop
  400ac8:	79fb      	ldrb	r3, [r7, #7]
  400aca:	4618      	mov	r0, r3
  400acc:	4b05      	ldr	r3, [pc, #20]	; (400ae4 <osc_wait_ready+0x28>)
  400ace:	4798      	blx	r3
  400ad0:	4603      	mov	r3, r0
  400ad2:	f083 0301 	eor.w	r3, r3, #1
  400ad6:	b2db      	uxtb	r3, r3
  400ad8:	2b00      	cmp	r3, #0
  400ada:	d1f5      	bne.n	400ac8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400adc:	bf00      	nop
  400ade:	3708      	adds	r7, #8
  400ae0:	46bd      	mov	sp, r7
  400ae2:	bd80      	pop	{r7, pc}
  400ae4:	004009d9 	.word	0x004009d9

00400ae8 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400ae8:	b580      	push	{r7, lr}
  400aea:	b086      	sub	sp, #24
  400aec:	af00      	add	r7, sp, #0
  400aee:	60f8      	str	r0, [r7, #12]
  400af0:	607a      	str	r2, [r7, #4]
  400af2:	603b      	str	r3, [r7, #0]
  400af4:	460b      	mov	r3, r1
  400af6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400af8:	7afb      	ldrb	r3, [r7, #11]
  400afa:	4618      	mov	r0, r3
  400afc:	4b0d      	ldr	r3, [pc, #52]	; (400b34 <pll_config_init+0x4c>)
  400afe:	4798      	blx	r3
  400b00:	4602      	mov	r2, r0
  400b02:	687b      	ldr	r3, [r7, #4]
  400b04:	fbb2 f3f3 	udiv	r3, r2, r3
  400b08:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400b0a:	697b      	ldr	r3, [r7, #20]
  400b0c:	683a      	ldr	r2, [r7, #0]
  400b0e:	fb02 f303 	mul.w	r3, r2, r3
  400b12:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400b14:	683b      	ldr	r3, [r7, #0]
  400b16:	3b01      	subs	r3, #1
  400b18:	041a      	lsls	r2, r3, #16
  400b1a:	4b07      	ldr	r3, [pc, #28]	; (400b38 <pll_config_init+0x50>)
  400b1c:	4013      	ands	r3, r2
  400b1e:	687a      	ldr	r2, [r7, #4]
  400b20:	b2d2      	uxtb	r2, r2
  400b22:	4313      	orrs	r3, r2
  400b24:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400b28:	68fb      	ldr	r3, [r7, #12]
  400b2a:	601a      	str	r2, [r3, #0]
}
  400b2c:	bf00      	nop
  400b2e:	3718      	adds	r7, #24
  400b30:	46bd      	mov	sp, r7
  400b32:	bd80      	pop	{r7, pc}
  400b34:	00400a49 	.word	0x00400a49
  400b38:	07ff0000 	.word	0x07ff0000

00400b3c <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400b3c:	b580      	push	{r7, lr}
  400b3e:	b082      	sub	sp, #8
  400b40:	af00      	add	r7, sp, #0
  400b42:	6078      	str	r0, [r7, #4]
  400b44:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400b46:	683b      	ldr	r3, [r7, #0]
  400b48:	2b00      	cmp	r3, #0
  400b4a:	d108      	bne.n	400b5e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400b4c:	4b09      	ldr	r3, [pc, #36]	; (400b74 <pll_enable+0x38>)
  400b4e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b50:	4a09      	ldr	r2, [pc, #36]	; (400b78 <pll_enable+0x3c>)
  400b52:	687b      	ldr	r3, [r7, #4]
  400b54:	681b      	ldr	r3, [r3, #0]
  400b56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400b5a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400b5c:	e005      	b.n	400b6a <pll_enable+0x2e>
		pmc_disable_pllbck();
  400b5e:	4b07      	ldr	r3, [pc, #28]	; (400b7c <pll_enable+0x40>)
  400b60:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400b62:	4a05      	ldr	r2, [pc, #20]	; (400b78 <pll_enable+0x3c>)
  400b64:	687b      	ldr	r3, [r7, #4]
  400b66:	681b      	ldr	r3, [r3, #0]
  400b68:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400b6a:	bf00      	nop
  400b6c:	3708      	adds	r7, #8
  400b6e:	46bd      	mov	sp, r7
  400b70:	bd80      	pop	{r7, pc}
  400b72:	bf00      	nop
  400b74:	00401389 	.word	0x00401389
  400b78:	400e0400 	.word	0x400e0400
  400b7c:	004013b9 	.word	0x004013b9

00400b80 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400b80:	b580      	push	{r7, lr}
  400b82:	b082      	sub	sp, #8
  400b84:	af00      	add	r7, sp, #0
  400b86:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400b88:	687b      	ldr	r3, [r7, #4]
  400b8a:	2b00      	cmp	r3, #0
  400b8c:	d103      	bne.n	400b96 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400b8e:	4b05      	ldr	r3, [pc, #20]	; (400ba4 <pll_is_locked+0x24>)
  400b90:	4798      	blx	r3
  400b92:	4603      	mov	r3, r0
  400b94:	e002      	b.n	400b9c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400b96:	4b04      	ldr	r3, [pc, #16]	; (400ba8 <pll_is_locked+0x28>)
  400b98:	4798      	blx	r3
  400b9a:	4603      	mov	r3, r0
	}
}
  400b9c:	4618      	mov	r0, r3
  400b9e:	3708      	adds	r7, #8
  400ba0:	46bd      	mov	sp, r7
  400ba2:	bd80      	pop	{r7, pc}
  400ba4:	004013a1 	.word	0x004013a1
  400ba8:	004013d1 	.word	0x004013d1

00400bac <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400bac:	b580      	push	{r7, lr}
  400bae:	b082      	sub	sp, #8
  400bb0:	af00      	add	r7, sp, #0
  400bb2:	4603      	mov	r3, r0
  400bb4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400bb6:	79fb      	ldrb	r3, [r7, #7]
  400bb8:	3b03      	subs	r3, #3
  400bba:	2b04      	cmp	r3, #4
  400bbc:	d808      	bhi.n	400bd0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400bbe:	79fb      	ldrb	r3, [r7, #7]
  400bc0:	4618      	mov	r0, r3
  400bc2:	4b06      	ldr	r3, [pc, #24]	; (400bdc <pll_enable_source+0x30>)
  400bc4:	4798      	blx	r3
		osc_wait_ready(e_src);
  400bc6:	79fb      	ldrb	r3, [r7, #7]
  400bc8:	4618      	mov	r0, r3
  400bca:	4b05      	ldr	r3, [pc, #20]	; (400be0 <pll_enable_source+0x34>)
  400bcc:	4798      	blx	r3
		break;
  400bce:	e000      	b.n	400bd2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400bd0:	bf00      	nop
	}
}
  400bd2:	bf00      	nop
  400bd4:	3708      	adds	r7, #8
  400bd6:	46bd      	mov	sp, r7
  400bd8:	bd80      	pop	{r7, pc}
  400bda:	bf00      	nop
  400bdc:	00400951 	.word	0x00400951
  400be0:	00400abd 	.word	0x00400abd

00400be4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400be4:	b580      	push	{r7, lr}
  400be6:	b082      	sub	sp, #8
  400be8:	af00      	add	r7, sp, #0
  400bea:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400bec:	bf00      	nop
  400bee:	6878      	ldr	r0, [r7, #4]
  400bf0:	4b04      	ldr	r3, [pc, #16]	; (400c04 <pll_wait_for_lock+0x20>)
  400bf2:	4798      	blx	r3
  400bf4:	4603      	mov	r3, r0
  400bf6:	2b00      	cmp	r3, #0
  400bf8:	d0f9      	beq.n	400bee <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400bfa:	2300      	movs	r3, #0
}
  400bfc:	4618      	mov	r0, r3
  400bfe:	3708      	adds	r7, #8
  400c00:	46bd      	mov	sp, r7
  400c02:	bd80      	pop	{r7, pc}
  400c04:	00400b81 	.word	0x00400b81

00400c08 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400c08:	b580      	push	{r7, lr}
  400c0a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400c0c:	2006      	movs	r0, #6
  400c0e:	4b04      	ldr	r3, [pc, #16]	; (400c20 <sysclk_get_main_hz+0x18>)
  400c10:	4798      	blx	r3
  400c12:	4602      	mov	r2, r0
  400c14:	4613      	mov	r3, r2
  400c16:	009b      	lsls	r3, r3, #2
  400c18:	4413      	add	r3, r2
  400c1a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400c1c:	4618      	mov	r0, r3
  400c1e:	bd80      	pop	{r7, pc}
  400c20:	00400a49 	.word	0x00400a49

00400c24 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400c24:	b580      	push	{r7, lr}
  400c26:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400c28:	4b02      	ldr	r3, [pc, #8]	; (400c34 <sysclk_get_cpu_hz+0x10>)
  400c2a:	4798      	blx	r3
  400c2c:	4603      	mov	r3, r0
  400c2e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400c30:	4618      	mov	r0, r3
  400c32:	bd80      	pop	{r7, pc}
  400c34:	00400c09 	.word	0x00400c09

00400c38 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c38:	b590      	push	{r4, r7, lr}
  400c3a:	b083      	sub	sp, #12
  400c3c:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c3e:	4811      	ldr	r0, [pc, #68]	; (400c84 <sysclk_init+0x4c>)
  400c40:	4b11      	ldr	r3, [pc, #68]	; (400c88 <sysclk_init+0x50>)
  400c42:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400c44:	2006      	movs	r0, #6
  400c46:	4b11      	ldr	r3, [pc, #68]	; (400c8c <sysclk_init+0x54>)
  400c48:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400c4a:	1d38      	adds	r0, r7, #4
  400c4c:	2314      	movs	r3, #20
  400c4e:	2201      	movs	r2, #1
  400c50:	2106      	movs	r1, #6
  400c52:	4c0f      	ldr	r4, [pc, #60]	; (400c90 <sysclk_init+0x58>)
  400c54:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400c56:	1d3b      	adds	r3, r7, #4
  400c58:	2100      	movs	r1, #0
  400c5a:	4618      	mov	r0, r3
  400c5c:	4b0d      	ldr	r3, [pc, #52]	; (400c94 <sysclk_init+0x5c>)
  400c5e:	4798      	blx	r3
		pll_wait_for_lock(0);
  400c60:	2000      	movs	r0, #0
  400c62:	4b0d      	ldr	r3, [pc, #52]	; (400c98 <sysclk_init+0x60>)
  400c64:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c66:	2010      	movs	r0, #16
  400c68:	4b0c      	ldr	r3, [pc, #48]	; (400c9c <sysclk_init+0x64>)
  400c6a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c6c:	4b0c      	ldr	r3, [pc, #48]	; (400ca0 <sysclk_init+0x68>)
  400c6e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400c70:	4b0c      	ldr	r3, [pc, #48]	; (400ca4 <sysclk_init+0x6c>)
  400c72:	4798      	blx	r3
  400c74:	4603      	mov	r3, r0
  400c76:	4618      	mov	r0, r3
  400c78:	4b03      	ldr	r3, [pc, #12]	; (400c88 <sysclk_init+0x50>)
  400c7a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400c7c:	bf00      	nop
  400c7e:	370c      	adds	r7, #12
  400c80:	46bd      	mov	sp, r7
  400c82:	bd90      	pop	{r4, r7, pc}
  400c84:	07270e00 	.word	0x07270e00
  400c88:	00402229 	.word	0x00402229
  400c8c:	00400bad 	.word	0x00400bad
  400c90:	00400ae9 	.word	0x00400ae9
  400c94:	00400b3d 	.word	0x00400b3d
  400c98:	00400be5 	.word	0x00400be5
  400c9c:	0040119d 	.word	0x0040119d
  400ca0:	00402091 	.word	0x00402091
  400ca4:	00400c25 	.word	0x00400c25

00400ca8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400ca8:	b480      	push	{r7}
  400caa:	b085      	sub	sp, #20
  400cac:	af00      	add	r7, sp, #0
  400cae:	60f8      	str	r0, [r7, #12]
  400cb0:	60b9      	str	r1, [r7, #8]
  400cb2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cb4:	687b      	ldr	r3, [r7, #4]
  400cb6:	2b00      	cmp	r3, #0
  400cb8:	d003      	beq.n	400cc2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400cba:	68fb      	ldr	r3, [r7, #12]
  400cbc:	68ba      	ldr	r2, [r7, #8]
  400cbe:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400cc0:	e002      	b.n	400cc8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400cc2:	68fb      	ldr	r3, [r7, #12]
  400cc4:	68ba      	ldr	r2, [r7, #8]
  400cc6:	661a      	str	r2, [r3, #96]	; 0x60
}
  400cc8:	bf00      	nop
  400cca:	3714      	adds	r7, #20
  400ccc:	46bd      	mov	sp, r7
  400cce:	bc80      	pop	{r7}
  400cd0:	4770      	bx	lr

00400cd2 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400cd2:	b480      	push	{r7}
  400cd4:	b085      	sub	sp, #20
  400cd6:	af00      	add	r7, sp, #0
  400cd8:	60f8      	str	r0, [r7, #12]
  400cda:	60b9      	str	r1, [r7, #8]
  400cdc:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400cde:	68fb      	ldr	r3, [r7, #12]
  400ce0:	68ba      	ldr	r2, [r7, #8]
  400ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400ce6:	687b      	ldr	r3, [r7, #4]
  400ce8:	005b      	lsls	r3, r3, #1
  400cea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cee:	fbb2 f3f3 	udiv	r3, r2, r3
  400cf2:	3b01      	subs	r3, #1
  400cf4:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400cf8:	68fb      	ldr	r3, [r7, #12]
  400cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400cfe:	bf00      	nop
  400d00:	3714      	adds	r7, #20
  400d02:	46bd      	mov	sp, r7
  400d04:	bc80      	pop	{r7}
  400d06:	4770      	bx	lr

00400d08 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400d08:	b480      	push	{r7}
  400d0a:	b087      	sub	sp, #28
  400d0c:	af00      	add	r7, sp, #0
  400d0e:	60f8      	str	r0, [r7, #12]
  400d10:	60b9      	str	r1, [r7, #8]
  400d12:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d14:	68fb      	ldr	r3, [r7, #12]
  400d16:	687a      	ldr	r2, [r7, #4]
  400d18:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d1a:	68bb      	ldr	r3, [r7, #8]
  400d1c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400d20:	d04a      	beq.n	400db8 <pio_set_peripheral+0xb0>
  400d22:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400d26:	d808      	bhi.n	400d3a <pio_set_peripheral+0x32>
  400d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400d2c:	d016      	beq.n	400d5c <pio_set_peripheral+0x54>
  400d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400d32:	d02c      	beq.n	400d8e <pio_set_peripheral+0x86>
  400d34:	2b00      	cmp	r3, #0
  400d36:	d069      	beq.n	400e0c <pio_set_peripheral+0x104>
  400d38:	e064      	b.n	400e04 <pio_set_peripheral+0xfc>
  400d3a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400d3e:	d065      	beq.n	400e0c <pio_set_peripheral+0x104>
  400d40:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400d44:	d803      	bhi.n	400d4e <pio_set_peripheral+0x46>
  400d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400d4a:	d04a      	beq.n	400de2 <pio_set_peripheral+0xda>
  400d4c:	e05a      	b.n	400e04 <pio_set_peripheral+0xfc>
  400d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400d52:	d05b      	beq.n	400e0c <pio_set_peripheral+0x104>
  400d54:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400d58:	d058      	beq.n	400e0c <pio_set_peripheral+0x104>
  400d5a:	e053      	b.n	400e04 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d5c:	68fb      	ldr	r3, [r7, #12]
  400d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d60:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d62:	68fb      	ldr	r3, [r7, #12]
  400d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d66:	687b      	ldr	r3, [r7, #4]
  400d68:	43d9      	mvns	r1, r3
  400d6a:	697b      	ldr	r3, [r7, #20]
  400d6c:	400b      	ands	r3, r1
  400d6e:	401a      	ands	r2, r3
  400d70:	68fb      	ldr	r3, [r7, #12]
  400d72:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d74:	68fb      	ldr	r3, [r7, #12]
  400d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400d78:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d7a:	68fb      	ldr	r3, [r7, #12]
  400d7c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d7e:	687b      	ldr	r3, [r7, #4]
  400d80:	43d9      	mvns	r1, r3
  400d82:	697b      	ldr	r3, [r7, #20]
  400d84:	400b      	ands	r3, r1
  400d86:	401a      	ands	r2, r3
  400d88:	68fb      	ldr	r3, [r7, #12]
  400d8a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400d8c:	e03a      	b.n	400e04 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d8e:	68fb      	ldr	r3, [r7, #12]
  400d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d92:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d94:	687a      	ldr	r2, [r7, #4]
  400d96:	697b      	ldr	r3, [r7, #20]
  400d98:	431a      	orrs	r2, r3
  400d9a:	68fb      	ldr	r3, [r7, #12]
  400d9c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d9e:	68fb      	ldr	r3, [r7, #12]
  400da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400da2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400da4:	68fb      	ldr	r3, [r7, #12]
  400da6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400da8:	687b      	ldr	r3, [r7, #4]
  400daa:	43d9      	mvns	r1, r3
  400dac:	697b      	ldr	r3, [r7, #20]
  400dae:	400b      	ands	r3, r1
  400db0:	401a      	ands	r2, r3
  400db2:	68fb      	ldr	r3, [r7, #12]
  400db4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400db6:	e025      	b.n	400e04 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400dbc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400dbe:	68fb      	ldr	r3, [r7, #12]
  400dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dc2:	687b      	ldr	r3, [r7, #4]
  400dc4:	43d9      	mvns	r1, r3
  400dc6:	697b      	ldr	r3, [r7, #20]
  400dc8:	400b      	ands	r3, r1
  400dca:	401a      	ands	r2, r3
  400dcc:	68fb      	ldr	r3, [r7, #12]
  400dce:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400dd0:	68fb      	ldr	r3, [r7, #12]
  400dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400dd4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400dd6:	687a      	ldr	r2, [r7, #4]
  400dd8:	697b      	ldr	r3, [r7, #20]
  400dda:	431a      	orrs	r2, r3
  400ddc:	68fb      	ldr	r3, [r7, #12]
  400dde:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400de0:	e010      	b.n	400e04 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400de2:	68fb      	ldr	r3, [r7, #12]
  400de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400de6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400de8:	687a      	ldr	r2, [r7, #4]
  400dea:	697b      	ldr	r3, [r7, #20]
  400dec:	431a      	orrs	r2, r3
  400dee:	68fb      	ldr	r3, [r7, #12]
  400df0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400df2:	68fb      	ldr	r3, [r7, #12]
  400df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400df6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400df8:	687a      	ldr	r2, [r7, #4]
  400dfa:	697b      	ldr	r3, [r7, #20]
  400dfc:	431a      	orrs	r2, r3
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e02:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e04:	68fb      	ldr	r3, [r7, #12]
  400e06:	687a      	ldr	r2, [r7, #4]
  400e08:	605a      	str	r2, [r3, #4]
  400e0a:	e000      	b.n	400e0e <pio_set_peripheral+0x106>
		return;
  400e0c:	bf00      	nop
}
  400e0e:	371c      	adds	r7, #28
  400e10:	46bd      	mov	sp, r7
  400e12:	bc80      	pop	{r7}
  400e14:	4770      	bx	lr
	...

00400e18 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400e18:	b580      	push	{r7, lr}
  400e1a:	b084      	sub	sp, #16
  400e1c:	af00      	add	r7, sp, #0
  400e1e:	60f8      	str	r0, [r7, #12]
  400e20:	60b9      	str	r1, [r7, #8]
  400e22:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400e24:	68b9      	ldr	r1, [r7, #8]
  400e26:	68f8      	ldr	r0, [r7, #12]
  400e28:	4b19      	ldr	r3, [pc, #100]	; (400e90 <pio_set_input+0x78>)
  400e2a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400e2c:	687b      	ldr	r3, [r7, #4]
  400e2e:	f003 0301 	and.w	r3, r3, #1
  400e32:	461a      	mov	r2, r3
  400e34:	68b9      	ldr	r1, [r7, #8]
  400e36:	68f8      	ldr	r0, [r7, #12]
  400e38:	4b16      	ldr	r3, [pc, #88]	; (400e94 <pio_set_input+0x7c>)
  400e3a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e3c:	687b      	ldr	r3, [r7, #4]
  400e3e:	f003 030a 	and.w	r3, r3, #10
  400e42:	2b00      	cmp	r3, #0
  400e44:	d003      	beq.n	400e4e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400e46:	68fb      	ldr	r3, [r7, #12]
  400e48:	68ba      	ldr	r2, [r7, #8]
  400e4a:	621a      	str	r2, [r3, #32]
  400e4c:	e002      	b.n	400e54 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400e4e:	68fb      	ldr	r3, [r7, #12]
  400e50:	68ba      	ldr	r2, [r7, #8]
  400e52:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400e54:	687b      	ldr	r3, [r7, #4]
  400e56:	f003 0302 	and.w	r3, r3, #2
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d004      	beq.n	400e68 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400e5e:	68fb      	ldr	r3, [r7, #12]
  400e60:	68ba      	ldr	r2, [r7, #8]
  400e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400e66:	e008      	b.n	400e7a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400e68:	687b      	ldr	r3, [r7, #4]
  400e6a:	f003 0308 	and.w	r3, r3, #8
  400e6e:	2b00      	cmp	r3, #0
  400e70:	d003      	beq.n	400e7a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400e72:	68fb      	ldr	r3, [r7, #12]
  400e74:	68ba      	ldr	r2, [r7, #8]
  400e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400e7a:	68fb      	ldr	r3, [r7, #12]
  400e7c:	68ba      	ldr	r2, [r7, #8]
  400e7e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400e80:	68fb      	ldr	r3, [r7, #12]
  400e82:	68ba      	ldr	r2, [r7, #8]
  400e84:	601a      	str	r2, [r3, #0]
}
  400e86:	bf00      	nop
  400e88:	3710      	adds	r7, #16
  400e8a:	46bd      	mov	sp, r7
  400e8c:	bd80      	pop	{r7, pc}
  400e8e:	bf00      	nop
  400e90:	00400f81 	.word	0x00400f81
  400e94:	00400ca9 	.word	0x00400ca9

00400e98 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400e98:	b580      	push	{r7, lr}
  400e9a:	b084      	sub	sp, #16
  400e9c:	af00      	add	r7, sp, #0
  400e9e:	60f8      	str	r0, [r7, #12]
  400ea0:	60b9      	str	r1, [r7, #8]
  400ea2:	607a      	str	r2, [r7, #4]
  400ea4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400ea6:	68b9      	ldr	r1, [r7, #8]
  400ea8:	68f8      	ldr	r0, [r7, #12]
  400eaa:	4b12      	ldr	r3, [pc, #72]	; (400ef4 <pio_set_output+0x5c>)
  400eac:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400eae:	69ba      	ldr	r2, [r7, #24]
  400eb0:	68b9      	ldr	r1, [r7, #8]
  400eb2:	68f8      	ldr	r0, [r7, #12]
  400eb4:	4b10      	ldr	r3, [pc, #64]	; (400ef8 <pio_set_output+0x60>)
  400eb6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400eb8:	683b      	ldr	r3, [r7, #0]
  400eba:	2b00      	cmp	r3, #0
  400ebc:	d003      	beq.n	400ec6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400ebe:	68fb      	ldr	r3, [r7, #12]
  400ec0:	68ba      	ldr	r2, [r7, #8]
  400ec2:	651a      	str	r2, [r3, #80]	; 0x50
  400ec4:	e002      	b.n	400ecc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400ec6:	68fb      	ldr	r3, [r7, #12]
  400ec8:	68ba      	ldr	r2, [r7, #8]
  400eca:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	2b00      	cmp	r3, #0
  400ed0:	d003      	beq.n	400eda <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400ed2:	68fb      	ldr	r3, [r7, #12]
  400ed4:	68ba      	ldr	r2, [r7, #8]
  400ed6:	631a      	str	r2, [r3, #48]	; 0x30
  400ed8:	e002      	b.n	400ee0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400eda:	68fb      	ldr	r3, [r7, #12]
  400edc:	68ba      	ldr	r2, [r7, #8]
  400ede:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400ee0:	68fb      	ldr	r3, [r7, #12]
  400ee2:	68ba      	ldr	r2, [r7, #8]
  400ee4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400ee6:	68fb      	ldr	r3, [r7, #12]
  400ee8:	68ba      	ldr	r2, [r7, #8]
  400eea:	601a      	str	r2, [r3, #0]
}
  400eec:	bf00      	nop
  400eee:	3710      	adds	r7, #16
  400ef0:	46bd      	mov	sp, r7
  400ef2:	bd80      	pop	{r7, pc}
  400ef4:	00400f81 	.word	0x00400f81
  400ef8:	00400ca9 	.word	0x00400ca9

00400efc <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400efc:	b480      	push	{r7}
  400efe:	b085      	sub	sp, #20
  400f00:	af00      	add	r7, sp, #0
  400f02:	60f8      	str	r0, [r7, #12]
  400f04:	60b9      	str	r1, [r7, #8]
  400f06:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400f08:	687b      	ldr	r3, [r7, #4]
  400f0a:	f003 0310 	and.w	r3, r3, #16
  400f0e:	2b00      	cmp	r3, #0
  400f10:	d020      	beq.n	400f54 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400f12:	68fb      	ldr	r3, [r7, #12]
  400f14:	68ba      	ldr	r2, [r7, #8]
  400f16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400f1a:	687b      	ldr	r3, [r7, #4]
  400f1c:	f003 0320 	and.w	r3, r3, #32
  400f20:	2b00      	cmp	r3, #0
  400f22:	d004      	beq.n	400f2e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	68ba      	ldr	r2, [r7, #8]
  400f28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400f2c:	e003      	b.n	400f36 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400f2e:	68fb      	ldr	r3, [r7, #12]
  400f30:	68ba      	ldr	r2, [r7, #8]
  400f32:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400f36:	687b      	ldr	r3, [r7, #4]
  400f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	d004      	beq.n	400f4a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400f40:	68fb      	ldr	r3, [r7, #12]
  400f42:	68ba      	ldr	r2, [r7, #8]
  400f44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400f48:	e008      	b.n	400f5c <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400f4a:	68fb      	ldr	r3, [r7, #12]
  400f4c:	68ba      	ldr	r2, [r7, #8]
  400f4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400f52:	e003      	b.n	400f5c <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400f54:	68fb      	ldr	r3, [r7, #12]
  400f56:	68ba      	ldr	r2, [r7, #8]
  400f58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400f5c:	bf00      	nop
  400f5e:	3714      	adds	r7, #20
  400f60:	46bd      	mov	sp, r7
  400f62:	bc80      	pop	{r7}
  400f64:	4770      	bx	lr

00400f66 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400f66:	b480      	push	{r7}
  400f68:	b083      	sub	sp, #12
  400f6a:	af00      	add	r7, sp, #0
  400f6c:	6078      	str	r0, [r7, #4]
  400f6e:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	683a      	ldr	r2, [r7, #0]
  400f74:	641a      	str	r2, [r3, #64]	; 0x40
}
  400f76:	bf00      	nop
  400f78:	370c      	adds	r7, #12
  400f7a:	46bd      	mov	sp, r7
  400f7c:	bc80      	pop	{r7}
  400f7e:	4770      	bx	lr

00400f80 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400f80:	b480      	push	{r7}
  400f82:	b083      	sub	sp, #12
  400f84:	af00      	add	r7, sp, #0
  400f86:	6078      	str	r0, [r7, #4]
  400f88:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400f8a:	687b      	ldr	r3, [r7, #4]
  400f8c:	683a      	ldr	r2, [r7, #0]
  400f8e:	645a      	str	r2, [r3, #68]	; 0x44
}
  400f90:	bf00      	nop
  400f92:	370c      	adds	r7, #12
  400f94:	46bd      	mov	sp, r7
  400f96:	bc80      	pop	{r7}
  400f98:	4770      	bx	lr

00400f9a <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400f9a:	b480      	push	{r7}
  400f9c:	b083      	sub	sp, #12
  400f9e:	af00      	add	r7, sp, #0
  400fa0:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400fa2:	687b      	ldr	r3, [r7, #4]
  400fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400fa6:	4618      	mov	r0, r3
  400fa8:	370c      	adds	r7, #12
  400faa:	46bd      	mov	sp, r7
  400fac:	bc80      	pop	{r7}
  400fae:	4770      	bx	lr

00400fb0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400fb0:	b480      	push	{r7}
  400fb2:	b083      	sub	sp, #12
  400fb4:	af00      	add	r7, sp, #0
  400fb6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400fbc:	4618      	mov	r0, r3
  400fbe:	370c      	adds	r7, #12
  400fc0:	46bd      	mov	sp, r7
  400fc2:	bc80      	pop	{r7}
  400fc4:	4770      	bx	lr
	...

00400fc8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400fc8:	b590      	push	{r4, r7, lr}
  400fca:	b087      	sub	sp, #28
  400fcc:	af02      	add	r7, sp, #8
  400fce:	6078      	str	r0, [r7, #4]
  400fd0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400fd2:	6878      	ldr	r0, [r7, #4]
  400fd4:	4b63      	ldr	r3, [pc, #396]	; (401164 <pio_configure_pin+0x19c>)
  400fd6:	4798      	blx	r3
  400fd8:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400fda:	683b      	ldr	r3, [r7, #0]
  400fdc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400fe4:	d067      	beq.n	4010b6 <pio_configure_pin+0xee>
  400fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400fea:	d809      	bhi.n	401000 <pio_configure_pin+0x38>
  400fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400ff0:	d02b      	beq.n	40104a <pio_configure_pin+0x82>
  400ff2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400ff6:	d043      	beq.n	401080 <pio_configure_pin+0xb8>
  400ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400ffc:	d00a      	beq.n	401014 <pio_configure_pin+0x4c>
  400ffe:	e0a9      	b.n	401154 <pio_configure_pin+0x18c>
  401000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401004:	d07e      	beq.n	401104 <pio_configure_pin+0x13c>
  401006:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40100a:	d07b      	beq.n	401104 <pio_configure_pin+0x13c>
  40100c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401010:	d06c      	beq.n	4010ec <pio_configure_pin+0x124>
  401012:	e09f      	b.n	401154 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401014:	687b      	ldr	r3, [r7, #4]
  401016:	f003 031f 	and.w	r3, r3, #31
  40101a:	2201      	movs	r2, #1
  40101c:	fa02 f303 	lsl.w	r3, r2, r3
  401020:	461a      	mov	r2, r3
  401022:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401026:	68f8      	ldr	r0, [r7, #12]
  401028:	4b4f      	ldr	r3, [pc, #316]	; (401168 <pio_configure_pin+0x1a0>)
  40102a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40102c:	687b      	ldr	r3, [r7, #4]
  40102e:	f003 031f 	and.w	r3, r3, #31
  401032:	2201      	movs	r2, #1
  401034:	fa02 f303 	lsl.w	r3, r2, r3
  401038:	4619      	mov	r1, r3
  40103a:	683b      	ldr	r3, [r7, #0]
  40103c:	f003 0301 	and.w	r3, r3, #1
  401040:	461a      	mov	r2, r3
  401042:	68f8      	ldr	r0, [r7, #12]
  401044:	4b49      	ldr	r3, [pc, #292]	; (40116c <pio_configure_pin+0x1a4>)
  401046:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401048:	e086      	b.n	401158 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40104a:	687b      	ldr	r3, [r7, #4]
  40104c:	f003 031f 	and.w	r3, r3, #31
  401050:	2201      	movs	r2, #1
  401052:	fa02 f303 	lsl.w	r3, r2, r3
  401056:	461a      	mov	r2, r3
  401058:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40105c:	68f8      	ldr	r0, [r7, #12]
  40105e:	4b42      	ldr	r3, [pc, #264]	; (401168 <pio_configure_pin+0x1a0>)
  401060:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401062:	687b      	ldr	r3, [r7, #4]
  401064:	f003 031f 	and.w	r3, r3, #31
  401068:	2201      	movs	r2, #1
  40106a:	fa02 f303 	lsl.w	r3, r2, r3
  40106e:	4619      	mov	r1, r3
  401070:	683b      	ldr	r3, [r7, #0]
  401072:	f003 0301 	and.w	r3, r3, #1
  401076:	461a      	mov	r2, r3
  401078:	68f8      	ldr	r0, [r7, #12]
  40107a:	4b3c      	ldr	r3, [pc, #240]	; (40116c <pio_configure_pin+0x1a4>)
  40107c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40107e:	e06b      	b.n	401158 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401080:	687b      	ldr	r3, [r7, #4]
  401082:	f003 031f 	and.w	r3, r3, #31
  401086:	2201      	movs	r2, #1
  401088:	fa02 f303 	lsl.w	r3, r2, r3
  40108c:	461a      	mov	r2, r3
  40108e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401092:	68f8      	ldr	r0, [r7, #12]
  401094:	4b34      	ldr	r3, [pc, #208]	; (401168 <pio_configure_pin+0x1a0>)
  401096:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401098:	687b      	ldr	r3, [r7, #4]
  40109a:	f003 031f 	and.w	r3, r3, #31
  40109e:	2201      	movs	r2, #1
  4010a0:	fa02 f303 	lsl.w	r3, r2, r3
  4010a4:	4619      	mov	r1, r3
  4010a6:	683b      	ldr	r3, [r7, #0]
  4010a8:	f003 0301 	and.w	r3, r3, #1
  4010ac:	461a      	mov	r2, r3
  4010ae:	68f8      	ldr	r0, [r7, #12]
  4010b0:	4b2e      	ldr	r3, [pc, #184]	; (40116c <pio_configure_pin+0x1a4>)
  4010b2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010b4:	e050      	b.n	401158 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4010b6:	687b      	ldr	r3, [r7, #4]
  4010b8:	f003 031f 	and.w	r3, r3, #31
  4010bc:	2201      	movs	r2, #1
  4010be:	fa02 f303 	lsl.w	r3, r2, r3
  4010c2:	461a      	mov	r2, r3
  4010c4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4010c8:	68f8      	ldr	r0, [r7, #12]
  4010ca:	4b27      	ldr	r3, [pc, #156]	; (401168 <pio_configure_pin+0x1a0>)
  4010cc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	f003 031f 	and.w	r3, r3, #31
  4010d4:	2201      	movs	r2, #1
  4010d6:	fa02 f303 	lsl.w	r3, r2, r3
  4010da:	4619      	mov	r1, r3
  4010dc:	683b      	ldr	r3, [r7, #0]
  4010de:	f003 0301 	and.w	r3, r3, #1
  4010e2:	461a      	mov	r2, r3
  4010e4:	68f8      	ldr	r0, [r7, #12]
  4010e6:	4b21      	ldr	r3, [pc, #132]	; (40116c <pio_configure_pin+0x1a4>)
  4010e8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010ea:	e035      	b.n	401158 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4010ec:	687b      	ldr	r3, [r7, #4]
  4010ee:	f003 031f 	and.w	r3, r3, #31
  4010f2:	2201      	movs	r2, #1
  4010f4:	fa02 f303 	lsl.w	r3, r2, r3
  4010f8:	683a      	ldr	r2, [r7, #0]
  4010fa:	4619      	mov	r1, r3
  4010fc:	68f8      	ldr	r0, [r7, #12]
  4010fe:	4b1c      	ldr	r3, [pc, #112]	; (401170 <pio_configure_pin+0x1a8>)
  401100:	4798      	blx	r3
		break;
  401102:	e029      	b.n	401158 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401104:	687b      	ldr	r3, [r7, #4]
  401106:	f003 031f 	and.w	r3, r3, #31
  40110a:	2201      	movs	r2, #1
  40110c:	fa02 f303 	lsl.w	r3, r2, r3
  401110:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401112:	683b      	ldr	r3, [r7, #0]
  401114:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401118:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40111c:	bf0c      	ite	eq
  40111e:	2301      	moveq	r3, #1
  401120:	2300      	movne	r3, #0
  401122:	b2db      	uxtb	r3, r3
  401124:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401126:	683b      	ldr	r3, [r7, #0]
  401128:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40112c:	2b00      	cmp	r3, #0
  40112e:	bf14      	ite	ne
  401130:	2301      	movne	r3, #1
  401132:	2300      	moveq	r3, #0
  401134:	b2db      	uxtb	r3, r3
  401136:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401138:	683b      	ldr	r3, [r7, #0]
  40113a:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40113e:	2b00      	cmp	r3, #0
  401140:	bf14      	ite	ne
  401142:	2301      	movne	r3, #1
  401144:	2300      	moveq	r3, #0
  401146:	b2db      	uxtb	r3, r3
  401148:	9300      	str	r3, [sp, #0]
  40114a:	4603      	mov	r3, r0
  40114c:	68f8      	ldr	r0, [r7, #12]
  40114e:	4c09      	ldr	r4, [pc, #36]	; (401174 <pio_configure_pin+0x1ac>)
  401150:	47a0      	blx	r4
		break;
  401152:	e001      	b.n	401158 <pio_configure_pin+0x190>

	default:
		return 0;
  401154:	2300      	movs	r3, #0
  401156:	e000      	b.n	40115a <pio_configure_pin+0x192>
	}

	return 1;
  401158:	2301      	movs	r3, #1
}
  40115a:	4618      	mov	r0, r3
  40115c:	3714      	adds	r7, #20
  40115e:	46bd      	mov	sp, r7
  401160:	bd90      	pop	{r4, r7, pc}
  401162:	bf00      	nop
  401164:	00401179 	.word	0x00401179
  401168:	00400d09 	.word	0x00400d09
  40116c:	00400ca9 	.word	0x00400ca9
  401170:	00400e19 	.word	0x00400e19
  401174:	00400e99 	.word	0x00400e99

00401178 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401178:	b480      	push	{r7}
  40117a:	b085      	sub	sp, #20
  40117c:	af00      	add	r7, sp, #0
  40117e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401180:	687b      	ldr	r3, [r7, #4]
  401182:	095b      	lsrs	r3, r3, #5
  401184:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401188:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40118c:	025b      	lsls	r3, r3, #9
  40118e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401190:	68fb      	ldr	r3, [r7, #12]
}
  401192:	4618      	mov	r0, r3
  401194:	3714      	adds	r7, #20
  401196:	46bd      	mov	sp, r7
  401198:	bc80      	pop	{r7}
  40119a:	4770      	bx	lr

0040119c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40119c:	b480      	push	{r7}
  40119e:	b085      	sub	sp, #20
  4011a0:	af00      	add	r7, sp, #0
  4011a2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011a4:	491c      	ldr	r1, [pc, #112]	; (401218 <pmc_switch_mck_to_pllack+0x7c>)
  4011a6:	4b1c      	ldr	r3, [pc, #112]	; (401218 <pmc_switch_mck_to_pllack+0x7c>)
  4011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4011ae:	687b      	ldr	r3, [r7, #4]
  4011b0:	4313      	orrs	r3, r2
  4011b2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011b8:	60fb      	str	r3, [r7, #12]
  4011ba:	e007      	b.n	4011cc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011bc:	68fb      	ldr	r3, [r7, #12]
  4011be:	2b00      	cmp	r3, #0
  4011c0:	d101      	bne.n	4011c6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4011c2:	2301      	movs	r3, #1
  4011c4:	e023      	b.n	40120e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4011c6:	68fb      	ldr	r3, [r7, #12]
  4011c8:	3b01      	subs	r3, #1
  4011ca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011cc:	4b12      	ldr	r3, [pc, #72]	; (401218 <pmc_switch_mck_to_pllack+0x7c>)
  4011ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011d0:	f003 0308 	and.w	r3, r3, #8
  4011d4:	2b00      	cmp	r3, #0
  4011d6:	d0f1      	beq.n	4011bc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011d8:	4a0f      	ldr	r2, [pc, #60]	; (401218 <pmc_switch_mck_to_pllack+0x7c>)
  4011da:	4b0f      	ldr	r3, [pc, #60]	; (401218 <pmc_switch_mck_to_pllack+0x7c>)
  4011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011de:	f023 0303 	bic.w	r3, r3, #3
  4011e2:	f043 0302 	orr.w	r3, r3, #2
  4011e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011ec:	60fb      	str	r3, [r7, #12]
  4011ee:	e007      	b.n	401200 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011f0:	68fb      	ldr	r3, [r7, #12]
  4011f2:	2b00      	cmp	r3, #0
  4011f4:	d101      	bne.n	4011fa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4011f6:	2301      	movs	r3, #1
  4011f8:	e009      	b.n	40120e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4011fa:	68fb      	ldr	r3, [r7, #12]
  4011fc:	3b01      	subs	r3, #1
  4011fe:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401200:	4b05      	ldr	r3, [pc, #20]	; (401218 <pmc_switch_mck_to_pllack+0x7c>)
  401202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401204:	f003 0308 	and.w	r3, r3, #8
  401208:	2b00      	cmp	r3, #0
  40120a:	d0f1      	beq.n	4011f0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40120c:	2300      	movs	r3, #0
}
  40120e:	4618      	mov	r0, r3
  401210:	3714      	adds	r7, #20
  401212:	46bd      	mov	sp, r7
  401214:	bc80      	pop	{r7}
  401216:	4770      	bx	lr
  401218:	400e0400 	.word	0x400e0400

0040121c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40121c:	b480      	push	{r7}
  40121e:	b083      	sub	sp, #12
  401220:	af00      	add	r7, sp, #0
  401222:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401224:	687b      	ldr	r3, [r7, #4]
  401226:	2b01      	cmp	r3, #1
  401228:	d107      	bne.n	40123a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40122a:	4a08      	ldr	r2, [pc, #32]	; (40124c <pmc_switch_sclk_to_32kxtal+0x30>)
  40122c:	4b07      	ldr	r3, [pc, #28]	; (40124c <pmc_switch_sclk_to_32kxtal+0x30>)
  40122e:	689b      	ldr	r3, [r3, #8]
  401230:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401238:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40123a:	4b04      	ldr	r3, [pc, #16]	; (40124c <pmc_switch_sclk_to_32kxtal+0x30>)
  40123c:	4a04      	ldr	r2, [pc, #16]	; (401250 <pmc_switch_sclk_to_32kxtal+0x34>)
  40123e:	601a      	str	r2, [r3, #0]
}
  401240:	bf00      	nop
  401242:	370c      	adds	r7, #12
  401244:	46bd      	mov	sp, r7
  401246:	bc80      	pop	{r7}
  401248:	4770      	bx	lr
  40124a:	bf00      	nop
  40124c:	400e1410 	.word	0x400e1410
  401250:	a5000008 	.word	0xa5000008

00401254 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401254:	b480      	push	{r7}
  401256:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401258:	4b09      	ldr	r3, [pc, #36]	; (401280 <pmc_osc_is_ready_32kxtal+0x2c>)
  40125a:	695b      	ldr	r3, [r3, #20]
  40125c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401260:	2b00      	cmp	r3, #0
  401262:	d007      	beq.n	401274 <pmc_osc_is_ready_32kxtal+0x20>
  401264:	4b07      	ldr	r3, [pc, #28]	; (401284 <pmc_osc_is_ready_32kxtal+0x30>)
  401266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401268:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40126c:	2b00      	cmp	r3, #0
  40126e:	d001      	beq.n	401274 <pmc_osc_is_ready_32kxtal+0x20>
  401270:	2301      	movs	r3, #1
  401272:	e000      	b.n	401276 <pmc_osc_is_ready_32kxtal+0x22>
  401274:	2300      	movs	r3, #0
}
  401276:	4618      	mov	r0, r3
  401278:	46bd      	mov	sp, r7
  40127a:	bc80      	pop	{r7}
  40127c:	4770      	bx	lr
  40127e:	bf00      	nop
  401280:	400e1410 	.word	0x400e1410
  401284:	400e0400 	.word	0x400e0400

00401288 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401288:	b480      	push	{r7}
  40128a:	b083      	sub	sp, #12
  40128c:	af00      	add	r7, sp, #0
  40128e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401290:	4a18      	ldr	r2, [pc, #96]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401292:	4b18      	ldr	r3, [pc, #96]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401294:	6a1b      	ldr	r3, [r3, #32]
  401296:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40129a:	f043 0308 	orr.w	r3, r3, #8
  40129e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012a0:	bf00      	nop
  4012a2:	4b14      	ldr	r3, [pc, #80]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4012aa:	2b00      	cmp	r3, #0
  4012ac:	d0f9      	beq.n	4012a2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4012ae:	4911      	ldr	r1, [pc, #68]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012b0:	4b10      	ldr	r3, [pc, #64]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012b2:	6a1b      	ldr	r3, [r3, #32]
  4012b4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4012b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4012bc:	687a      	ldr	r2, [r7, #4]
  4012be:	4313      	orrs	r3, r2
  4012c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4012c4:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012c6:	bf00      	nop
  4012c8:	4b0a      	ldr	r3, [pc, #40]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4012d0:	2b00      	cmp	r3, #0
  4012d2:	d0f9      	beq.n	4012c8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4012d4:	4a07      	ldr	r2, [pc, #28]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012d6:	4b07      	ldr	r3, [pc, #28]	; (4012f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012d8:	6a1b      	ldr	r3, [r3, #32]
  4012da:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4012de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4012e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012e6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4012e8:	bf00      	nop
  4012ea:	370c      	adds	r7, #12
  4012ec:	46bd      	mov	sp, r7
  4012ee:	bc80      	pop	{r7}
  4012f0:	4770      	bx	lr
  4012f2:	bf00      	nop
  4012f4:	400e0400 	.word	0x400e0400

004012f8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4012f8:	b480      	push	{r7}
  4012fa:	b083      	sub	sp, #12
  4012fc:	af00      	add	r7, sp, #0
  4012fe:	6078      	str	r0, [r7, #4]
  401300:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401302:	687b      	ldr	r3, [r7, #4]
  401304:	2b00      	cmp	r3, #0
  401306:	d008      	beq.n	40131a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401308:	4916      	ldr	r1, [pc, #88]	; (401364 <pmc_switch_mainck_to_xtal+0x6c>)
  40130a:	4b16      	ldr	r3, [pc, #88]	; (401364 <pmc_switch_mainck_to_xtal+0x6c>)
  40130c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40130e:	4a16      	ldr	r2, [pc, #88]	; (401368 <pmc_switch_mainck_to_xtal+0x70>)
  401310:	401a      	ands	r2, r3
  401312:	4b16      	ldr	r3, [pc, #88]	; (40136c <pmc_switch_mainck_to_xtal+0x74>)
  401314:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401316:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401318:	e01e      	b.n	401358 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40131a:	4912      	ldr	r1, [pc, #72]	; (401364 <pmc_switch_mainck_to_xtal+0x6c>)
  40131c:	4b11      	ldr	r3, [pc, #68]	; (401364 <pmc_switch_mainck_to_xtal+0x6c>)
  40131e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401320:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401324:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401328:	683a      	ldr	r2, [r7, #0]
  40132a:	0212      	lsls	r2, r2, #8
  40132c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40132e:	4313      	orrs	r3, r2
  401330:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401334:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401338:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40133a:	bf00      	nop
  40133c:	4b09      	ldr	r3, [pc, #36]	; (401364 <pmc_switch_mainck_to_xtal+0x6c>)
  40133e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401340:	f003 0301 	and.w	r3, r3, #1
  401344:	2b00      	cmp	r3, #0
  401346:	d0f9      	beq.n	40133c <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401348:	4a06      	ldr	r2, [pc, #24]	; (401364 <pmc_switch_mainck_to_xtal+0x6c>)
  40134a:	4b06      	ldr	r3, [pc, #24]	; (401364 <pmc_switch_mainck_to_xtal+0x6c>)
  40134c:	6a1b      	ldr	r3, [r3, #32]
  40134e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401356:	6213      	str	r3, [r2, #32]
}
  401358:	bf00      	nop
  40135a:	370c      	adds	r7, #12
  40135c:	46bd      	mov	sp, r7
  40135e:	bc80      	pop	{r7}
  401360:	4770      	bx	lr
  401362:	bf00      	nop
  401364:	400e0400 	.word	0x400e0400
  401368:	fec8fffc 	.word	0xfec8fffc
  40136c:	01370002 	.word	0x01370002

00401370 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401370:	b480      	push	{r7}
  401372:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401374:	4b03      	ldr	r3, [pc, #12]	; (401384 <pmc_osc_is_ready_mainck+0x14>)
  401376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40137c:	4618      	mov	r0, r3
  40137e:	46bd      	mov	sp, r7
  401380:	bc80      	pop	{r7}
  401382:	4770      	bx	lr
  401384:	400e0400 	.word	0x400e0400

00401388 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401388:	b480      	push	{r7}
  40138a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40138c:	4b03      	ldr	r3, [pc, #12]	; (40139c <pmc_disable_pllack+0x14>)
  40138e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401392:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401394:	bf00      	nop
  401396:	46bd      	mov	sp, r7
  401398:	bc80      	pop	{r7}
  40139a:	4770      	bx	lr
  40139c:	400e0400 	.word	0x400e0400

004013a0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4013a0:	b480      	push	{r7}
  4013a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4013a4:	4b03      	ldr	r3, [pc, #12]	; (4013b4 <pmc_is_locked_pllack+0x14>)
  4013a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013a8:	f003 0302 	and.w	r3, r3, #2
}
  4013ac:	4618      	mov	r0, r3
  4013ae:	46bd      	mov	sp, r7
  4013b0:	bc80      	pop	{r7}
  4013b2:	4770      	bx	lr
  4013b4:	400e0400 	.word	0x400e0400

004013b8 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4013b8:	b480      	push	{r7}
  4013ba:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4013bc:	4b03      	ldr	r3, [pc, #12]	; (4013cc <pmc_disable_pllbck+0x14>)
  4013be:	2200      	movs	r2, #0
  4013c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4013c2:	bf00      	nop
  4013c4:	46bd      	mov	sp, r7
  4013c6:	bc80      	pop	{r7}
  4013c8:	4770      	bx	lr
  4013ca:	bf00      	nop
  4013cc:	400e0400 	.word	0x400e0400

004013d0 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4013d0:	b480      	push	{r7}
  4013d2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4013d4:	4b03      	ldr	r3, [pc, #12]	; (4013e4 <pmc_is_locked_pllbck+0x14>)
  4013d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013d8:	f003 0304 	and.w	r3, r3, #4
}
  4013dc:	4618      	mov	r0, r3
  4013de:	46bd      	mov	sp, r7
  4013e0:	bc80      	pop	{r7}
  4013e2:	4770      	bx	lr
  4013e4:	400e0400 	.word	0x400e0400

004013e8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4013e8:	b480      	push	{r7}
  4013ea:	b083      	sub	sp, #12
  4013ec:	af00      	add	r7, sp, #0
  4013ee:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4013f0:	687b      	ldr	r3, [r7, #4]
  4013f2:	2b22      	cmp	r3, #34	; 0x22
  4013f4:	d901      	bls.n	4013fa <pmc_enable_periph_clk+0x12>
		return 1;
  4013f6:	2301      	movs	r3, #1
  4013f8:	e02f      	b.n	40145a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4013fa:	687b      	ldr	r3, [r7, #4]
  4013fc:	2b1f      	cmp	r3, #31
  4013fe:	d813      	bhi.n	401428 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401400:	4b18      	ldr	r3, [pc, #96]	; (401464 <pmc_enable_periph_clk+0x7c>)
  401402:	699a      	ldr	r2, [r3, #24]
  401404:	2101      	movs	r1, #1
  401406:	687b      	ldr	r3, [r7, #4]
  401408:	fa01 f303 	lsl.w	r3, r1, r3
  40140c:	401a      	ands	r2, r3
  40140e:	2101      	movs	r1, #1
  401410:	687b      	ldr	r3, [r7, #4]
  401412:	fa01 f303 	lsl.w	r3, r1, r3
  401416:	429a      	cmp	r2, r3
  401418:	d01e      	beq.n	401458 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40141a:	4a12      	ldr	r2, [pc, #72]	; (401464 <pmc_enable_periph_clk+0x7c>)
  40141c:	2101      	movs	r1, #1
  40141e:	687b      	ldr	r3, [r7, #4]
  401420:	fa01 f303 	lsl.w	r3, r1, r3
  401424:	6113      	str	r3, [r2, #16]
  401426:	e017      	b.n	401458 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401428:	687b      	ldr	r3, [r7, #4]
  40142a:	3b20      	subs	r3, #32
  40142c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40142e:	4b0d      	ldr	r3, [pc, #52]	; (401464 <pmc_enable_periph_clk+0x7c>)
  401430:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401434:	2101      	movs	r1, #1
  401436:	687b      	ldr	r3, [r7, #4]
  401438:	fa01 f303 	lsl.w	r3, r1, r3
  40143c:	401a      	ands	r2, r3
  40143e:	2101      	movs	r1, #1
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	fa01 f303 	lsl.w	r3, r1, r3
  401446:	429a      	cmp	r2, r3
  401448:	d006      	beq.n	401458 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40144a:	4a06      	ldr	r2, [pc, #24]	; (401464 <pmc_enable_periph_clk+0x7c>)
  40144c:	2101      	movs	r1, #1
  40144e:	687b      	ldr	r3, [r7, #4]
  401450:	fa01 f303 	lsl.w	r3, r1, r3
  401454:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401458:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40145a:	4618      	mov	r0, r3
  40145c:	370c      	adds	r7, #12
  40145e:	46bd      	mov	sp, r7
  401460:	bc80      	pop	{r7}
  401462:	4770      	bx	lr
  401464:	400e0400 	.word	0x400e0400

00401468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401468:	b480      	push	{r7}
  40146a:	b083      	sub	sp, #12
  40146c:	af00      	add	r7, sp, #0
  40146e:	4603      	mov	r3, r0
  401470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401472:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401476:	2b00      	cmp	r3, #0
  401478:	db0b      	blt.n	401492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40147a:	4908      	ldr	r1, [pc, #32]	; (40149c <__NVIC_EnableIRQ+0x34>)
  40147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401480:	095b      	lsrs	r3, r3, #5
  401482:	79fa      	ldrb	r2, [r7, #7]
  401484:	f002 021f 	and.w	r2, r2, #31
  401488:	2001      	movs	r0, #1
  40148a:	fa00 f202 	lsl.w	r2, r0, r2
  40148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  401492:	bf00      	nop
  401494:	370c      	adds	r7, #12
  401496:	46bd      	mov	sp, r7
  401498:	bc80      	pop	{r7}
  40149a:	4770      	bx	lr
  40149c:	e000e100 	.word	0xe000e100

004014a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4014a0:	b480      	push	{r7}
  4014a2:	b083      	sub	sp, #12
  4014a4:	af00      	add	r7, sp, #0
  4014a6:	4603      	mov	r3, r0
  4014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	db10      	blt.n	4014d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014b2:	490b      	ldr	r1, [pc, #44]	; (4014e0 <__NVIC_DisableIRQ+0x40>)
  4014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4014b8:	095b      	lsrs	r3, r3, #5
  4014ba:	79fa      	ldrb	r2, [r7, #7]
  4014bc:	f002 021f 	and.w	r2, r2, #31
  4014c0:	2001      	movs	r0, #1
  4014c2:	fa00 f202 	lsl.w	r2, r0, r2
  4014c6:	3320      	adds	r3, #32
  4014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4014cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4014d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  4014d4:	bf00      	nop
  4014d6:	370c      	adds	r7, #12
  4014d8:	46bd      	mov	sp, r7
  4014da:	bc80      	pop	{r7}
  4014dc:	4770      	bx	lr
  4014de:	bf00      	nop
  4014e0:	e000e100 	.word	0xe000e100

004014e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4014e4:	b480      	push	{r7}
  4014e6:	b083      	sub	sp, #12
  4014e8:	af00      	add	r7, sp, #0
  4014ea:	4603      	mov	r3, r0
  4014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4014f2:	2b00      	cmp	r3, #0
  4014f4:	db0c      	blt.n	401510 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014f6:	4909      	ldr	r1, [pc, #36]	; (40151c <__NVIC_ClearPendingIRQ+0x38>)
  4014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4014fc:	095b      	lsrs	r3, r3, #5
  4014fe:	79fa      	ldrb	r2, [r7, #7]
  401500:	f002 021f 	and.w	r2, r2, #31
  401504:	2001      	movs	r0, #1
  401506:	fa00 f202 	lsl.w	r2, r0, r2
  40150a:	3360      	adds	r3, #96	; 0x60
  40150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  401510:	bf00      	nop
  401512:	370c      	adds	r7, #12
  401514:	46bd      	mov	sp, r7
  401516:	bc80      	pop	{r7}
  401518:	4770      	bx	lr
  40151a:	bf00      	nop
  40151c:	e000e100 	.word	0xe000e100

00401520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401520:	b480      	push	{r7}
  401522:	b083      	sub	sp, #12
  401524:	af00      	add	r7, sp, #0
  401526:	4603      	mov	r3, r0
  401528:	6039      	str	r1, [r7, #0]
  40152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401530:	2b00      	cmp	r3, #0
  401532:	db0a      	blt.n	40154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401534:	490d      	ldr	r1, [pc, #52]	; (40156c <__NVIC_SetPriority+0x4c>)
  401536:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40153a:	683a      	ldr	r2, [r7, #0]
  40153c:	b2d2      	uxtb	r2, r2
  40153e:	0112      	lsls	r2, r2, #4
  401540:	b2d2      	uxtb	r2, r2
  401542:	440b      	add	r3, r1
  401544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  401548:	e00a      	b.n	401560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40154a:	4909      	ldr	r1, [pc, #36]	; (401570 <__NVIC_SetPriority+0x50>)
  40154c:	79fb      	ldrb	r3, [r7, #7]
  40154e:	f003 030f 	and.w	r3, r3, #15
  401552:	3b04      	subs	r3, #4
  401554:	683a      	ldr	r2, [r7, #0]
  401556:	b2d2      	uxtb	r2, r2
  401558:	0112      	lsls	r2, r2, #4
  40155a:	b2d2      	uxtb	r2, r2
  40155c:	440b      	add	r3, r1
  40155e:	761a      	strb	r2, [r3, #24]
}
  401560:	bf00      	nop
  401562:	370c      	adds	r7, #12
  401564:	46bd      	mov	sp, r7
  401566:	bc80      	pop	{r7}
  401568:	4770      	bx	lr
  40156a:	bf00      	nop
  40156c:	e000e100 	.word	0xe000e100
  401570:	e000ed00 	.word	0xe000ed00

00401574 <osc_get_rate>:
{
  401574:	b480      	push	{r7}
  401576:	b083      	sub	sp, #12
  401578:	af00      	add	r7, sp, #0
  40157a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40157c:	687b      	ldr	r3, [r7, #4]
  40157e:	2b07      	cmp	r3, #7
  401580:	d825      	bhi.n	4015ce <osc_get_rate+0x5a>
  401582:	a201      	add	r2, pc, #4	; (adr r2, 401588 <osc_get_rate+0x14>)
  401584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401588:	004015a9 	.word	0x004015a9
  40158c:	004015af 	.word	0x004015af
  401590:	004015b5 	.word	0x004015b5
  401594:	004015bb 	.word	0x004015bb
  401598:	004015bf 	.word	0x004015bf
  40159c:	004015c3 	.word	0x004015c3
  4015a0:	004015c7 	.word	0x004015c7
  4015a4:	004015cb 	.word	0x004015cb
		return OSC_SLCK_32K_RC_HZ;
  4015a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4015ac:	e010      	b.n	4015d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4015ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015b2:	e00d      	b.n	4015d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4015b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015b8:	e00a      	b.n	4015d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4015ba:	4b08      	ldr	r3, [pc, #32]	; (4015dc <osc_get_rate+0x68>)
  4015bc:	e008      	b.n	4015d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4015be:	4b08      	ldr	r3, [pc, #32]	; (4015e0 <osc_get_rate+0x6c>)
  4015c0:	e006      	b.n	4015d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4015c2:	4b08      	ldr	r3, [pc, #32]	; (4015e4 <osc_get_rate+0x70>)
  4015c4:	e004      	b.n	4015d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4015c6:	4b07      	ldr	r3, [pc, #28]	; (4015e4 <osc_get_rate+0x70>)
  4015c8:	e002      	b.n	4015d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4015ca:	4b06      	ldr	r3, [pc, #24]	; (4015e4 <osc_get_rate+0x70>)
  4015cc:	e000      	b.n	4015d0 <osc_get_rate+0x5c>
	return 0;
  4015ce:	2300      	movs	r3, #0
}
  4015d0:	4618      	mov	r0, r3
  4015d2:	370c      	adds	r7, #12
  4015d4:	46bd      	mov	sp, r7
  4015d6:	bc80      	pop	{r7}
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop
  4015dc:	003d0900 	.word	0x003d0900
  4015e0:	007a1200 	.word	0x007a1200
  4015e4:	00b71b00 	.word	0x00b71b00

004015e8 <sysclk_get_main_hz>:
{
  4015e8:	b580      	push	{r7, lr}
  4015ea:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4015ec:	2006      	movs	r0, #6
  4015ee:	4b04      	ldr	r3, [pc, #16]	; (401600 <sysclk_get_main_hz+0x18>)
  4015f0:	4798      	blx	r3
  4015f2:	4602      	mov	r2, r0
  4015f4:	4613      	mov	r3, r2
  4015f6:	009b      	lsls	r3, r3, #2
  4015f8:	4413      	add	r3, r2
  4015fa:	009b      	lsls	r3, r3, #2
}
  4015fc:	4618      	mov	r0, r3
  4015fe:	bd80      	pop	{r7, pc}
  401600:	00401575 	.word	0x00401575

00401604 <sysclk_get_cpu_hz>:
{
  401604:	b580      	push	{r7, lr}
  401606:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401608:	4b02      	ldr	r3, [pc, #8]	; (401614 <sysclk_get_cpu_hz+0x10>)
  40160a:	4798      	blx	r3
  40160c:	4603      	mov	r3, r0
  40160e:	085b      	lsrs	r3, r3, #1
}
  401610:	4618      	mov	r0, r3
  401612:	bd80      	pop	{r7, pc}
  401614:	004015e9 	.word	0x004015e9

00401618 <vsync_handler>:

uint16_t cap_line = (IMAGE_WIDTH * 2);
uint16_t cap_rows = IMAGE_HEIGHT;

void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401618:	b480      	push	{r7}
  40161a:	b083      	sub	sp, #12
  40161c:	af00      	add	r7, sp, #0
  40161e:	6078      	str	r0, [r7, #4]
  401620:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	vsync_flag = true;
  401622:	4b04      	ldr	r3, [pc, #16]	; (401634 <vsync_handler+0x1c>)
  401624:	2201      	movs	r2, #1
  401626:	601a      	str	r2, [r3, #0]
}
  401628:	bf00      	nop
  40162a:	370c      	adds	r7, #12
  40162c:	46bd      	mov	sp, r7
  40162e:	bc80      	pop	{r7}
  401630:	4770      	bx	lr
  401632:	bf00      	nop
  401634:	200004d4 	.word	0x200004d4

00401638 <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  401638:	b590      	push	{r4, r7, lr}
  40163a:	b083      	sub	sp, #12
  40163c:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(CAM_VSYNC_ID);
  40163e:	200b      	movs	r0, #11
  401640:	4b0b      	ldr	r3, [pc, #44]	; (401670 <init_vsync_interrupts+0x38>)
  401642:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(CAM_VSYNC_PIO, CAM_VSYNC_ID, CAM_VSYNC_MASK,
  401644:	4b0b      	ldr	r3, [pc, #44]	; (401674 <init_vsync_interrupts+0x3c>)
  401646:	9300      	str	r3, [sp, #0]
  401648:	2301      	movs	r3, #1
  40164a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40164e:	210b      	movs	r1, #11
  401650:	4809      	ldr	r0, [pc, #36]	; (401678 <init_vsync_interrupts+0x40>)
  401652:	4c0a      	ldr	r4, [pc, #40]	; (40167c <init_vsync_interrupts+0x44>)
  401654:	47a0      	blx	r4
			CAM_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)CAM_VSYNC_ID);
  401656:	200b      	movs	r0, #11
  401658:	4b09      	ldr	r3, [pc, #36]	; (401680 <init_vsync_interrupts+0x48>)
  40165a:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(CAM_VSYNC_PIO, CAM_VSYNC_MASK);
  40165c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401660:	4805      	ldr	r0, [pc, #20]	; (401678 <init_vsync_interrupts+0x40>)
  401662:	4b08      	ldr	r3, [pc, #32]	; (401684 <init_vsync_interrupts+0x4c>)
  401664:	4798      	blx	r3
}
  401666:	bf00      	nop
  401668:	3704      	adds	r7, #4
  40166a:	46bd      	mov	sp, r7
  40166c:	bd90      	pop	{r4, r7, pc}
  40166e:	bf00      	nop
  401670:	004013e9 	.word	0x004013e9
  401674:	00401619 	.word	0x00401619
  401678:	400e0e00 	.word	0x400e0e00
  40167c:	00400865 	.word	0x00400865
  401680:	00401469 	.word	0x00401469
  401684:	00400f67 	.word	0x00400f67

00401688 <pio_capture_init>:



void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  401688:	b580      	push	{r7, lr}
  40168a:	b082      	sub	sp, #8
  40168c:	af00      	add	r7, sp, #0
  40168e:	6078      	str	r0, [r7, #4]
  401690:	6039      	str	r1, [r7, #0]
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  401692:	6838      	ldr	r0, [r7, #0]
  401694:	4b22      	ldr	r3, [pc, #136]	; (401720 <pio_capture_init+0x98>)
  401696:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  401698:	687b      	ldr	r3, [r7, #4]
  40169a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40169e:	f023 0201 	bic.w	r2, r3, #1
  4016a2:	687b      	ldr	r3, [r7, #4]
  4016a4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  4016a8:	687b      	ldr	r3, [r7, #4]
  4016aa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  4016ae:	f043 0208 	orr.w	r2, r3, #8
  4016b2:	687b      	ldr	r3, [r7, #4]
  4016b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  4016b8:	687b      	ldr	r3, [r7, #4]
  4016ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4016be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  4016c2:	687b      	ldr	r3, [r7, #4]
  4016c4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4016c8:	687b      	ldr	r3, [r7, #4]
  4016ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4016ce:	f043 0220 	orr.w	r2, r3, #32
  4016d2:	687b      	ldr	r3, [r7, #4]
  4016d4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4016de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4016e8:	687b      	ldr	r3, [r7, #4]
  4016ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4016ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  4016f2:	687b      	ldr	r3, [r7, #4]
  4016f4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	#if !defined(DEFAULT_MODE_COLORED)
	/* Samples only data with even index */
	p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
  4016f8:	687b      	ldr	r3, [r7, #4]
  4016fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4016fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
  401702:	687b      	ldr	r3, [r7, #4]
  401704:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
  401708:	687b      	ldr	r3, [r7, #4]
  40170a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40170e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  401712:	687b      	ldr	r3, [r7, #4]
  401714:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	#endif
}
  401718:	bf00      	nop
  40171a:	3708      	adds	r7, #8
  40171c:	46bd      	mov	sp, r7
  40171e:	bd80      	pop	{r7, pc}
  401720:	004013e9 	.word	0x004013e9

00401724 <init_camera>:
		return 0;
	}
}

void init_camera(void)
{
  401724:	b580      	push	{r7, lr}
  401726:	af00      	add	r7, sp, #0

	/* Init Vsync handler*/
	init_vsync_interrupts();
  401728:	4b0b      	ldr	r3, [pc, #44]	; (401758 <init_camera+0x34>)
  40172a:	4798      	blx	r3

	/* Init PIO capture*/
	pio_capture_init(CAM_DATA_BUS_PIO, CAM_DATA_BUS_ID);
  40172c:	210b      	movs	r1, #11
  40172e:	480b      	ldr	r0, [pc, #44]	; (40175c <init_camera+0x38>)
  401730:	4b0b      	ldr	r3, [pc, #44]	; (401760 <init_camera+0x3c>)
  401732:	4798      	blx	r3


	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  401734:	4b0b      	ldr	r3, [pc, #44]	; (401764 <init_camera+0x40>)
  401736:	2222      	movs	r2, #34	; 0x22
  401738:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  40173a:	4b0a      	ldr	r3, [pc, #40]	; (401764 <init_camera+0x40>)
  40173c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401740:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  401742:	bf00      	nop
  401744:	4b07      	ldr	r3, [pc, #28]	; (401764 <init_camera+0x40>)
  401746:	689b      	ldr	r3, [r3, #8]
  401748:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40174c:	2b00      	cmp	r3, #0
  40174e:	d0f9      	beq.n	401744 <init_camera+0x20>
	}

	configure_twi();
  401750:	4b05      	ldr	r3, [pc, #20]	; (401768 <init_camera+0x44>)
  401752:	4798      	blx	r3

}
  401754:	bf00      	nop
  401756:	bd80      	pop	{r7, pc}
  401758:	00401639 	.word	0x00401639
  40175c:	400e0e00 	.word	0x400e0e00
  401760:	00401689 	.word	0x00401689
  401764:	400e0400 	.word	0x400e0400
  401768:	0040176d 	.word	0x0040176d

0040176c <configure_twi>:

void configure_twi(void){
  40176c:	b580      	push	{r7, lr}
  40176e:	b084      	sub	sp, #16
  401770:	af00      	add	r7, sp, #0
	twi_options_t opt;
	
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401772:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401776:	2003      	movs	r0, #3
  401778:	4b12      	ldr	r3, [pc, #72]	; (4017c4 <configure_twi+0x58>)
  40177a:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40177c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401780:	2004      	movs	r0, #4
  401782:	4b10      	ldr	r3, [pc, #64]	; (4017c4 <configure_twi+0x58>)
  401784:	4798      	blx	r3
		
		/* Enable TWI peripheral */
		pmc_enable_periph_clk(ID_BOARD_TWI);
  401786:	2013      	movs	r0, #19
  401788:	4b0f      	ldr	r3, [pc, #60]	; (4017c8 <configure_twi+0x5c>)
  40178a:	4798      	blx	r3

		/* Init TWI peripheral */
		opt.master_clk = sysclk_get_cpu_hz();
  40178c:	4b0f      	ldr	r3, [pc, #60]	; (4017cc <configure_twi+0x60>)
  40178e:	4798      	blx	r3
  401790:	4603      	mov	r3, r0
  401792:	607b      	str	r3, [r7, #4]
		opt.speed      = TWI_CLK;
  401794:	4b0e      	ldr	r3, [pc, #56]	; (4017d0 <configure_twi+0x64>)
  401796:	60bb      	str	r3, [r7, #8]
		twi_master_init(BOARD_TWI, &opt);
  401798:	1d3b      	adds	r3, r7, #4
  40179a:	4619      	mov	r1, r3
  40179c:	480d      	ldr	r0, [pc, #52]	; (4017d4 <configure_twi+0x68>)
  40179e:	4b0e      	ldr	r3, [pc, #56]	; (4017d8 <configure_twi+0x6c>)
  4017a0:	4798      	blx	r3

		/* Configure TWI interrupts */
		NVIC_DisableIRQ(BOARD_TWI_IRQn);
  4017a2:	2013      	movs	r0, #19
  4017a4:	4b0d      	ldr	r3, [pc, #52]	; (4017dc <configure_twi+0x70>)
  4017a6:	4798      	blx	r3
		NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  4017a8:	2013      	movs	r0, #19
  4017aa:	4b0d      	ldr	r3, [pc, #52]	; (4017e0 <configure_twi+0x74>)
  4017ac:	4798      	blx	r3
		NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  4017ae:	2100      	movs	r1, #0
  4017b0:	2013      	movs	r0, #19
  4017b2:	4b0c      	ldr	r3, [pc, #48]	; (4017e4 <configure_twi+0x78>)
  4017b4:	4798      	blx	r3
		NVIC_EnableIRQ(BOARD_TWI_IRQn);
  4017b6:	2013      	movs	r0, #19
  4017b8:	4b0b      	ldr	r3, [pc, #44]	; (4017e8 <configure_twi+0x7c>)
  4017ba:	4798      	blx	r3
}
  4017bc:	bf00      	nop
  4017be:	3710      	adds	r7, #16
  4017c0:	46bd      	mov	sp, r7
  4017c2:	bd80      	pop	{r7, pc}
  4017c4:	00400fc9 	.word	0x00400fc9
  4017c8:	004013e9 	.word	0x004013e9
  4017cc:	00401605 	.word	0x00401605
  4017d0:	00061a80 	.word	0x00061a80
  4017d4:	40018000 	.word	0x40018000
  4017d8:	004002c5 	.word	0x004002c5
  4017dc:	004014a1 	.word	0x004014a1
  4017e0:	004014e5 	.word	0x004014e5
  4017e4:	00401521 	.word	0x00401521
  4017e8:	00401469 	.word	0x00401469

004017ec <__NVIC_EnableIRQ>:
{
  4017ec:	b480      	push	{r7}
  4017ee:	b083      	sub	sp, #12
  4017f0:	af00      	add	r7, sp, #0
  4017f2:	4603      	mov	r3, r0
  4017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017fa:	2b00      	cmp	r3, #0
  4017fc:	db0b      	blt.n	401816 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017fe:	4908      	ldr	r1, [pc, #32]	; (401820 <__NVIC_EnableIRQ+0x34>)
  401800:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401804:	095b      	lsrs	r3, r3, #5
  401806:	79fa      	ldrb	r2, [r7, #7]
  401808:	f002 021f 	and.w	r2, r2, #31
  40180c:	2001      	movs	r0, #1
  40180e:	fa00 f202 	lsl.w	r2, r0, r2
  401812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401816:	bf00      	nop
  401818:	370c      	adds	r7, #12
  40181a:	46bd      	mov	sp, r7
  40181c:	bc80      	pop	{r7}
  40181e:	4770      	bx	lr
  401820:	e000e100 	.word	0xe000e100

00401824 <osc_get_rate>:
{
  401824:	b480      	push	{r7}
  401826:	b083      	sub	sp, #12
  401828:	af00      	add	r7, sp, #0
  40182a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40182c:	687b      	ldr	r3, [r7, #4]
  40182e:	2b07      	cmp	r3, #7
  401830:	d825      	bhi.n	40187e <osc_get_rate+0x5a>
  401832:	a201      	add	r2, pc, #4	; (adr r2, 401838 <osc_get_rate+0x14>)
  401834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401838:	00401859 	.word	0x00401859
  40183c:	0040185f 	.word	0x0040185f
  401840:	00401865 	.word	0x00401865
  401844:	0040186b 	.word	0x0040186b
  401848:	0040186f 	.word	0x0040186f
  40184c:	00401873 	.word	0x00401873
  401850:	00401877 	.word	0x00401877
  401854:	0040187b 	.word	0x0040187b
		return OSC_SLCK_32K_RC_HZ;
  401858:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40185c:	e010      	b.n	401880 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40185e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401862:	e00d      	b.n	401880 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401868:	e00a      	b.n	401880 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40186a:	4b08      	ldr	r3, [pc, #32]	; (40188c <osc_get_rate+0x68>)
  40186c:	e008      	b.n	401880 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40186e:	4b08      	ldr	r3, [pc, #32]	; (401890 <osc_get_rate+0x6c>)
  401870:	e006      	b.n	401880 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401872:	4b08      	ldr	r3, [pc, #32]	; (401894 <osc_get_rate+0x70>)
  401874:	e004      	b.n	401880 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401876:	4b07      	ldr	r3, [pc, #28]	; (401894 <osc_get_rate+0x70>)
  401878:	e002      	b.n	401880 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40187a:	4b06      	ldr	r3, [pc, #24]	; (401894 <osc_get_rate+0x70>)
  40187c:	e000      	b.n	401880 <osc_get_rate+0x5c>
	return 0;
  40187e:	2300      	movs	r3, #0
}
  401880:	4618      	mov	r0, r3
  401882:	370c      	adds	r7, #12
  401884:	46bd      	mov	sp, r7
  401886:	bc80      	pop	{r7}
  401888:	4770      	bx	lr
  40188a:	bf00      	nop
  40188c:	003d0900 	.word	0x003d0900
  401890:	007a1200 	.word	0x007a1200
  401894:	00b71b00 	.word	0x00b71b00

00401898 <sysclk_get_main_hz>:
{
  401898:	b580      	push	{r7, lr}
  40189a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40189c:	2006      	movs	r0, #6
  40189e:	4b04      	ldr	r3, [pc, #16]	; (4018b0 <sysclk_get_main_hz+0x18>)
  4018a0:	4798      	blx	r3
  4018a2:	4602      	mov	r2, r0
  4018a4:	4613      	mov	r3, r2
  4018a6:	009b      	lsls	r3, r3, #2
  4018a8:	4413      	add	r3, r2
  4018aa:	009b      	lsls	r3, r3, #2
}
  4018ac:	4618      	mov	r0, r3
  4018ae:	bd80      	pop	{r7, pc}
  4018b0:	00401825 	.word	0x00401825

004018b4 <sysclk_get_cpu_hz>:
{
  4018b4:	b580      	push	{r7, lr}
  4018b6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4018b8:	4b02      	ldr	r3, [pc, #8]	; (4018c4 <sysclk_get_cpu_hz+0x10>)
  4018ba:	4798      	blx	r3
  4018bc:	4603      	mov	r3, r0
  4018be:	085b      	lsrs	r3, r3, #1
}
  4018c0:	4618      	mov	r0, r3
  4018c2:	bd80      	pop	{r7, pc}
  4018c4:	00401899 	.word	0x00401899

004018c8 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4018c8:	b580      	push	{r7, lr}
  4018ca:	b082      	sub	sp, #8
  4018cc:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  4018ce:	2100      	movs	r1, #0
  4018d0:	4809      	ldr	r0, [pc, #36]	; (4018f8 <TC0_Handler+0x30>)
  4018d2:	4b0a      	ldr	r3, [pc, #40]	; (4018fc <TC0_Handler+0x34>)
  4018d4:	4798      	blx	r3
  4018d6:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4018d8:	687b      	ldr	r3, [r7, #4]
  4018da:	f003 0310 	and.w	r3, r3, #16
  4018de:	2b00      	cmp	r3, #0
  4018e0:	d006      	beq.n	4018f0 <TC0_Handler+0x28>
		counts++;
  4018e2:	4b07      	ldr	r3, [pc, #28]	; (401900 <TC0_Handler+0x38>)
  4018e4:	781b      	ldrb	r3, [r3, #0]
  4018e6:	b2db      	uxtb	r3, r3
  4018e8:	3301      	adds	r3, #1
  4018ea:	b2da      	uxtb	r2, r3
  4018ec:	4b04      	ldr	r3, [pc, #16]	; (401900 <TC0_Handler+0x38>)
  4018ee:	701a      	strb	r2, [r3, #0]
	}
}
  4018f0:	bf00      	nop
  4018f2:	3708      	adds	r7, #8
  4018f4:	46bd      	mov	sp, r7
  4018f6:	bd80      	pop	{r7, pc}
  4018f8:	40010000 	.word	0x40010000
  4018fc:	004001db 	.word	0x004001db
  401900:	200004ec 	.word	0x200004ec

00401904 <configure_tc>:

void configure_tc(void)
{
  401904:	b590      	push	{r4, r7, lr}
  401906:	b087      	sub	sp, #28
  401908:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  40190a:	4b18      	ldr	r3, [pc, #96]	; (40196c <configure_tc+0x68>)
  40190c:	4798      	blx	r3
  40190e:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  401910:	2017      	movs	r0, #23
  401912:	4b17      	ldr	r3, [pc, #92]	; (401970 <configure_tc+0x6c>)
  401914:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401916:	1d39      	adds	r1, r7, #4
  401918:	f107 0208 	add.w	r2, r7, #8
  40191c:	68fb      	ldr	r3, [r7, #12]
  40191e:	9300      	str	r3, [sp, #0]
  401920:	460b      	mov	r3, r1
  401922:	68f9      	ldr	r1, [r7, #12]
  401924:	2001      	movs	r0, #1
  401926:	4c13      	ldr	r4, [pc, #76]	; (401974 <configure_tc+0x70>)
  401928:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40192a:	687b      	ldr	r3, [r7, #4]
  40192c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  401930:	461a      	mov	r2, r3
  401932:	2100      	movs	r1, #0
  401934:	4810      	ldr	r0, [pc, #64]	; (401978 <configure_tc+0x74>)
  401936:	4b11      	ldr	r3, [pc, #68]	; (40197c <configure_tc+0x78>)
  401938:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  40193a:	68bb      	ldr	r3, [r7, #8]
  40193c:	68fa      	ldr	r2, [r7, #12]
  40193e:	fbb2 f3f3 	udiv	r3, r2, r3
  401942:	461a      	mov	r2, r3
  401944:	2100      	movs	r1, #0
  401946:	480c      	ldr	r0, [pc, #48]	; (401978 <configure_tc+0x74>)
  401948:	4b0d      	ldr	r3, [pc, #52]	; (401980 <configure_tc+0x7c>)
  40194a:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  40194c:	2017      	movs	r0, #23
  40194e:	4b0d      	ldr	r3, [pc, #52]	; (401984 <configure_tc+0x80>)
  401950:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  401952:	2210      	movs	r2, #16
  401954:	2100      	movs	r1, #0
  401956:	4808      	ldr	r0, [pc, #32]	; (401978 <configure_tc+0x74>)
  401958:	4b0b      	ldr	r3, [pc, #44]	; (401988 <configure_tc+0x84>)
  40195a:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  40195c:	2100      	movs	r1, #0
  40195e:	4806      	ldr	r0, [pc, #24]	; (401978 <configure_tc+0x74>)
  401960:	4b0a      	ldr	r3, [pc, #40]	; (40198c <configure_tc+0x88>)
  401962:	4798      	blx	r3
  401964:	bf00      	nop
  401966:	3714      	adds	r7, #20
  401968:	46bd      	mov	sp, r7
  40196a:	bd90      	pop	{r4, r7, pc}
  40196c:	004018b5 	.word	0x004018b5
  401970:	004013e9 	.word	0x004013e9
  401974:	004001fd 	.word	0x004001fd
  401978:	40010000 	.word	0x40010000
  40197c:	00400139 	.word	0x00400139
  401980:	00400191 	.word	0x00400191
  401984:	004017ed 	.word	0x004017ed
  401988:	004001b5 	.word	0x004001b5
  40198c:	00400171 	.word	0x00400171

00401990 <__NVIC_EnableIRQ>:
{
  401990:	b480      	push	{r7}
  401992:	b083      	sub	sp, #12
  401994:	af00      	add	r7, sp, #0
  401996:	4603      	mov	r3, r0
  401998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40199e:	2b00      	cmp	r3, #0
  4019a0:	db0b      	blt.n	4019ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4019a2:	4908      	ldr	r1, [pc, #32]	; (4019c4 <__NVIC_EnableIRQ+0x34>)
  4019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019a8:	095b      	lsrs	r3, r3, #5
  4019aa:	79fa      	ldrb	r2, [r7, #7]
  4019ac:	f002 021f 	and.w	r2, r2, #31
  4019b0:	2001      	movs	r0, #1
  4019b2:	fa00 f202 	lsl.w	r2, r0, r2
  4019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4019ba:	bf00      	nop
  4019bc:	370c      	adds	r7, #12
  4019be:	46bd      	mov	sp, r7
  4019c0:	bc80      	pop	{r7}
  4019c2:	4770      	bx	lr
  4019c4:	e000e100 	.word	0xe000e100

004019c8 <osc_get_rate>:
{
  4019c8:	b480      	push	{r7}
  4019ca:	b083      	sub	sp, #12
  4019cc:	af00      	add	r7, sp, #0
  4019ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4019d0:	687b      	ldr	r3, [r7, #4]
  4019d2:	2b07      	cmp	r3, #7
  4019d4:	d825      	bhi.n	401a22 <osc_get_rate+0x5a>
  4019d6:	a201      	add	r2, pc, #4	; (adr r2, 4019dc <osc_get_rate+0x14>)
  4019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4019dc:	004019fd 	.word	0x004019fd
  4019e0:	00401a03 	.word	0x00401a03
  4019e4:	00401a09 	.word	0x00401a09
  4019e8:	00401a0f 	.word	0x00401a0f
  4019ec:	00401a13 	.word	0x00401a13
  4019f0:	00401a17 	.word	0x00401a17
  4019f4:	00401a1b 	.word	0x00401a1b
  4019f8:	00401a1f 	.word	0x00401a1f
		return OSC_SLCK_32K_RC_HZ;
  4019fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a00:	e010      	b.n	401a24 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a06:	e00d      	b.n	401a24 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a0c:	e00a      	b.n	401a24 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401a0e:	4b08      	ldr	r3, [pc, #32]	; (401a30 <osc_get_rate+0x68>)
  401a10:	e008      	b.n	401a24 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401a12:	4b08      	ldr	r3, [pc, #32]	; (401a34 <osc_get_rate+0x6c>)
  401a14:	e006      	b.n	401a24 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401a16:	4b08      	ldr	r3, [pc, #32]	; (401a38 <osc_get_rate+0x70>)
  401a18:	e004      	b.n	401a24 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401a1a:	4b07      	ldr	r3, [pc, #28]	; (401a38 <osc_get_rate+0x70>)
  401a1c:	e002      	b.n	401a24 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401a1e:	4b06      	ldr	r3, [pc, #24]	; (401a38 <osc_get_rate+0x70>)
  401a20:	e000      	b.n	401a24 <osc_get_rate+0x5c>
	return 0;
  401a22:	2300      	movs	r3, #0
}
  401a24:	4618      	mov	r0, r3
  401a26:	370c      	adds	r7, #12
  401a28:	46bd      	mov	sp, r7
  401a2a:	bc80      	pop	{r7}
  401a2c:	4770      	bx	lr
  401a2e:	bf00      	nop
  401a30:	003d0900 	.word	0x003d0900
  401a34:	007a1200 	.word	0x007a1200
  401a38:	00b71b00 	.word	0x00b71b00

00401a3c <sysclk_get_main_hz>:
{
  401a3c:	b580      	push	{r7, lr}
  401a3e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401a40:	2006      	movs	r0, #6
  401a42:	4b04      	ldr	r3, [pc, #16]	; (401a54 <sysclk_get_main_hz+0x18>)
  401a44:	4798      	blx	r3
  401a46:	4602      	mov	r2, r0
  401a48:	4613      	mov	r3, r2
  401a4a:	009b      	lsls	r3, r3, #2
  401a4c:	4413      	add	r3, r2
  401a4e:	009b      	lsls	r3, r3, #2
}
  401a50:	4618      	mov	r0, r3
  401a52:	bd80      	pop	{r7, pc}
  401a54:	004019c9 	.word	0x004019c9

00401a58 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401a58:	b580      	push	{r7, lr}
  401a5a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401a5c:	4b02      	ldr	r3, [pc, #8]	; (401a68 <sysclk_get_peripheral_hz+0x10>)
  401a5e:	4798      	blx	r3
  401a60:	4603      	mov	r3, r0
  401a62:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401a64:	4618      	mov	r0, r3
  401a66:	bd80      	pop	{r7, pc}
  401a68:	00401a3d 	.word	0x00401a3d

00401a6c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401a6c:	b580      	push	{r7, lr}
  401a6e:	b082      	sub	sp, #8
  401a70:	af00      	add	r7, sp, #0
  401a72:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401a74:	6878      	ldr	r0, [r7, #4]
  401a76:	4b03      	ldr	r3, [pc, #12]	; (401a84 <sysclk_enable_peripheral_clock+0x18>)
  401a78:	4798      	blx	r3
}
  401a7a:	bf00      	nop
  401a7c:	3708      	adds	r7, #8
  401a7e:	46bd      	mov	sp, r7
  401a80:	bd80      	pop	{r7, pc}
  401a82:	bf00      	nop
  401a84:	004013e9 	.word	0x004013e9

00401a88 <USART0_Handler>:
volatile uint32_t received_byte_wifi = 0;
volatile uint32_t wifi_web_setup_flag = 0;
volatile unsigned int input_pos_wifi = 0;

void wifi_usart_handler(void)
{
  401a88:	b580      	push	{r7, lr}
  401a8a:	b082      	sub	sp, #8
  401a8c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(WIFI_USART);
  401a8e:	480b      	ldr	r0, [pc, #44]	; (401abc <USART0_Handler+0x34>)
  401a90:	4b0b      	ldr	r3, [pc, #44]	; (401ac0 <USART0_Handler+0x38>)
  401a92:	4798      	blx	r3
  401a94:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF){
  401a96:	687b      	ldr	r3, [r7, #4]
  401a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  401a9c:	2b00      	cmp	r3, #0
  401a9e:	d009      	beq.n	401ab4 <USART0_Handler+0x2c>
		usart_read(WIFI_USART, &received_byte_wifi);
  401aa0:	4908      	ldr	r1, [pc, #32]	; (401ac4 <USART0_Handler+0x3c>)
  401aa2:	4806      	ldr	r0, [pc, #24]	; (401abc <USART0_Handler+0x34>)
  401aa4:	4b08      	ldr	r3, [pc, #32]	; (401ac8 <USART0_Handler+0x40>)
  401aa6:	4798      	blx	r3
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  401aa8:	4b06      	ldr	r3, [pc, #24]	; (401ac4 <USART0_Handler+0x3c>)
  401aaa:	681b      	ldr	r3, [r3, #0]
  401aac:	b2db      	uxtb	r3, r3
  401aae:	4618      	mov	r0, r3
  401ab0:	4b06      	ldr	r3, [pc, #24]	; (401acc <USART0_Handler+0x44>)
  401ab2:	4798      	blx	r3
	}
}
  401ab4:	bf00      	nop
  401ab6:	3708      	adds	r7, #8
  401ab8:	46bd      	mov	sp, r7
  401aba:	bd80      	pop	{r7, pc}
  401abc:	40024000 	.word	0x40024000
  401ac0:	00400679 	.word	0x00400679
  401ac4:	200004d8 	.word	0x200004d8
  401ac8:	0040073d 	.word	0x0040073d
  401acc:	00401c91 	.word	0x00401c91

00401ad0 <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401ad0:	b580      	push	{r7, lr}
  401ad2:	b084      	sub	sp, #16
  401ad4:	af00      	add	r7, sp, #0
  401ad6:	6078      	str	r0, [r7, #4]
  401ad8:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	process_data_wifi();
  401ada:	4b0c      	ldr	r3, [pc, #48]	; (401b0c <wifi_command_response_handler+0x3c>)
  401adc:	4798      	blx	r3
	for(int jj=0; jj<1000; jj++) input_line_wifi[jj] = 0;
  401ade:	2300      	movs	r3, #0
  401ae0:	60fb      	str	r3, [r7, #12]
  401ae2:	e007      	b.n	401af4 <wifi_command_response_handler+0x24>
  401ae4:	4a0a      	ldr	r2, [pc, #40]	; (401b10 <wifi_command_response_handler+0x40>)
  401ae6:	68fb      	ldr	r3, [r7, #12]
  401ae8:	4413      	add	r3, r2
  401aea:	2200      	movs	r2, #0
  401aec:	701a      	strb	r2, [r3, #0]
  401aee:	68fb      	ldr	r3, [r7, #12]
  401af0:	3301      	adds	r3, #1
  401af2:	60fb      	str	r3, [r7, #12]
  401af4:	68fb      	ldr	r3, [r7, #12]
  401af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401afa:	dbf3      	blt.n	401ae4 <wifi_command_response_handler+0x14>
	input_pos_wifi = 0;
  401afc:	4b05      	ldr	r3, [pc, #20]	; (401b14 <wifi_command_response_handler+0x44>)
  401afe:	2200      	movs	r2, #0
  401b00:	601a      	str	r2, [r3, #0]
}
  401b02:	bf00      	nop
  401b04:	3710      	adds	r7, #16
  401b06:	46bd      	mov	sp, r7
  401b08:	bd80      	pop	{r7, pc}
  401b0a:	bf00      	nop
  401b0c:	00401cbd 	.word	0x00401cbd
  401b10:	200004f0 	.word	0x200004f0
  401b14:	200004e0 	.word	0x200004e0

00401b18 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401b18:	b480      	push	{r7}
  401b1a:	b083      	sub	sp, #12
  401b1c:	af00      	add	r7, sp, #0
  401b1e:	6078      	str	r0, [r7, #4]
  401b20:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_web_setup_flag = true;
  401b22:	4b04      	ldr	r3, [pc, #16]	; (401b34 <wifi_web_setup_handler+0x1c>)
  401b24:	2201      	movs	r2, #1
  401b26:	601a      	str	r2, [r3, #0]
}
  401b28:	bf00      	nop
  401b2a:	370c      	adds	r7, #12
  401b2c:	46bd      	mov	sp, r7
  401b2e:	bc80      	pop	{r7}
  401b30:	4770      	bx	lr
  401b32:	bf00      	nop
  401b34:	200004dc 	.word	0x200004dc

00401b38 <configure_usart_wifi>:

void configure_usart_wifi(void)
{
  401b38:	b5b0      	push	{r4, r5, r7, lr}
  401b3a:	b086      	sub	sp, #24
  401b3c:	af00      	add	r7, sp, #0
	
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  401b3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b42:	2005      	movs	r0, #5
  401b44:	4b1c      	ldr	r3, [pc, #112]	; (401bb8 <configure_usart_wifi+0x80>)
  401b46:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401b48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b4c:	2006      	movs	r0, #6
  401b4e:	4b1a      	ldr	r3, [pc, #104]	; (401bb8 <configure_usart_wifi+0x80>)
  401b50:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  401b52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b56:	2008      	movs	r0, #8
  401b58:	4b17      	ldr	r3, [pc, #92]	; (401bb8 <configure_usart_wifi+0x80>)
  401b5a:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401b5c:	4b17      	ldr	r3, [pc, #92]	; (401bbc <configure_usart_wifi+0x84>)
  401b5e:	463c      	mov	r4, r7
  401b60:	461d      	mov	r5, r3
  401b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401b66:	e895 0003 	ldmia.w	r5, {r0, r1}
  401b6a:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401b6e:	4b14      	ldr	r3, [pc, #80]	; (401bc0 <configure_usart_wifi+0x88>)
  401b70:	4798      	blx	r3
  401b72:	4602      	mov	r2, r0
  401b74:	4b13      	ldr	r3, [pc, #76]	; (401bc4 <configure_usart_wifi+0x8c>)
  401b76:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(WIFI_ID_USART);
  401b78:	200e      	movs	r0, #14
  401b7a:	4b13      	ldr	r3, [pc, #76]	; (401bc8 <configure_usart_wifi+0x90>)
  401b7c:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(WIFI_USART, &usart_console_settings, ul_sysclk);
  401b7e:	4b11      	ldr	r3, [pc, #68]	; (401bc4 <configure_usart_wifi+0x8c>)
  401b80:	681a      	ldr	r2, [r3, #0]
  401b82:	463b      	mov	r3, r7
  401b84:	4619      	mov	r1, r3
  401b86:	4811      	ldr	r0, [pc, #68]	; (401bcc <configure_usart_wifi+0x94>)
  401b88:	4b11      	ldr	r3, [pc, #68]	; (401bd0 <configure_usart_wifi+0x98>)
  401b8a:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  401b8c:	f04f 31ff 	mov.w	r1, #4294967295
  401b90:	480e      	ldr	r0, [pc, #56]	; (401bcc <configure_usart_wifi+0x94>)
  401b92:	4b10      	ldr	r3, [pc, #64]	; (401bd4 <configure_usart_wifi+0x9c>)
  401b94:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  401b96:	480d      	ldr	r0, [pc, #52]	; (401bcc <configure_usart_wifi+0x94>)
  401b98:	4b0f      	ldr	r3, [pc, #60]	; (401bd8 <configure_usart_wifi+0xa0>)
  401b9a:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  401b9c:	480b      	ldr	r0, [pc, #44]	; (401bcc <configure_usart_wifi+0x94>)
  401b9e:	4b0f      	ldr	r3, [pc, #60]	; (401bdc <configure_usart_wifi+0xa4>)
  401ba0:	4798      	blx	r3
	
	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  401ba2:	2101      	movs	r1, #1
  401ba4:	4809      	ldr	r0, [pc, #36]	; (401bcc <configure_usart_wifi+0x94>)
  401ba6:	4b0e      	ldr	r3, [pc, #56]	; (401be0 <configure_usart_wifi+0xa8>)
  401ba8:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401baa:	200e      	movs	r0, #14
  401bac:	4b0d      	ldr	r3, [pc, #52]	; (401be4 <configure_usart_wifi+0xac>)
  401bae:	4798      	blx	r3
}
  401bb0:	bf00      	nop
  401bb2:	3718      	adds	r7, #24
  401bb4:	46bd      	mov	sp, r7
  401bb6:	bdb0      	pop	{r4, r5, r7, pc}
  401bb8:	00400fc9 	.word	0x00400fc9
  401bbc:	0040294c 	.word	0x0040294c
  401bc0:	00401a59 	.word	0x00401a59
  401bc4:	200004e4 	.word	0x200004e4
  401bc8:	00401a6d 	.word	0x00401a6d
  401bcc:	40024000 	.word	0x40024000
  401bd0:	004005a5 	.word	0x004005a5
  401bd4:	0040065f 	.word	0x0040065f
  401bd8:	004005e5 	.word	0x004005e5
  401bdc:	00400615 	.word	0x00400615
  401be0:	00400645 	.word	0x00400645
  401be4:	00401991 	.word	0x00401991

00401be8 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  401be8:	b590      	push	{r4, r7, lr}
  401bea:	b083      	sub	sp, #12
  401bec:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  401bee:	200b      	movs	r0, #11
  401bf0:	4b0b      	ldr	r3, [pc, #44]	; (401c20 <configure_wifi_comm_pin+0x38>)
  401bf2:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  401bf4:	4b0b      	ldr	r3, [pc, #44]	; (401c24 <configure_wifi_comm_pin+0x3c>)
  401bf6:	9300      	str	r3, [sp, #0]
  401bf8:	2370      	movs	r3, #112	; 0x70
  401bfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401bfe:	210b      	movs	r1, #11
  401c00:	4809      	ldr	r0, [pc, #36]	; (401c28 <configure_wifi_comm_pin+0x40>)
  401c02:	4c0a      	ldr	r4, [pc, #40]	; (401c2c <configure_wifi_comm_pin+0x44>)
  401c04:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  401c06:	200b      	movs	r0, #11
  401c08:	4b09      	ldr	r3, [pc, #36]	; (401c30 <configure_wifi_comm_pin+0x48>)
  401c0a:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401c10:	4805      	ldr	r0, [pc, #20]	; (401c28 <configure_wifi_comm_pin+0x40>)
  401c12:	4b08      	ldr	r3, [pc, #32]	; (401c34 <configure_wifi_comm_pin+0x4c>)
  401c14:	4798      	blx	r3
}
  401c16:	bf00      	nop
  401c18:	3704      	adds	r7, #4
  401c1a:	46bd      	mov	sp, r7
  401c1c:	bd90      	pop	{r4, r7, pc}
  401c1e:	bf00      	nop
  401c20:	004013e9 	.word	0x004013e9
  401c24:	00401ad1 	.word	0x00401ad1
  401c28:	400e0e00 	.word	0x400e0e00
  401c2c:	00400865 	.word	0x00400865
  401c30:	00401991 	.word	0x00401991
  401c34:	00400f67 	.word	0x00400f67

00401c38 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  401c38:	b590      	push	{r4, r7, lr}
  401c3a:	b083      	sub	sp, #12
  401c3c:	af02      	add	r7, sp, #8
		/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  401c3e:	200b      	movs	r0, #11
  401c40:	4b0c      	ldr	r3, [pc, #48]	; (401c74 <configure_wifi_web_setup_pin+0x3c>)
  401c42:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_PIN_MSK, 10);
  401c44:	220a      	movs	r2, #10
  401c46:	2101      	movs	r1, #1
  401c48:	480b      	ldr	r0, [pc, #44]	; (401c78 <configure_wifi_web_setup_pin+0x40>)
  401c4a:	4b0c      	ldr	r3, [pc, #48]	; (401c7c <configure_wifi_web_setup_pin+0x44>)
  401c4c:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_PIN_MSK,
  401c4e:	4b0c      	ldr	r3, [pc, #48]	; (401c80 <configure_wifi_web_setup_pin+0x48>)
  401c50:	9300      	str	r3, [sp, #0]
  401c52:	2379      	movs	r3, #121	; 0x79
  401c54:	2201      	movs	r2, #1
  401c56:	210b      	movs	r1, #11
  401c58:	4807      	ldr	r0, [pc, #28]	; (401c78 <configure_wifi_web_setup_pin+0x40>)
  401c5a:	4c0a      	ldr	r4, [pc, #40]	; (401c84 <configure_wifi_web_setup_pin+0x4c>)
  401c5c:	47a0      	blx	r4
			WIFI_SETUP_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_SETUP_ID);
  401c5e:	200b      	movs	r0, #11
  401c60:	4b09      	ldr	r3, [pc, #36]	; (401c88 <configure_wifi_web_setup_pin+0x50>)
  401c62:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_PIN_MSK);
  401c64:	2101      	movs	r1, #1
  401c66:	4804      	ldr	r0, [pc, #16]	; (401c78 <configure_wifi_web_setup_pin+0x40>)
  401c68:	4b08      	ldr	r3, [pc, #32]	; (401c8c <configure_wifi_web_setup_pin+0x54>)
  401c6a:	4798      	blx	r3
	
}
  401c6c:	bf00      	nop
  401c6e:	3704      	adds	r7, #4
  401c70:	46bd      	mov	sp, r7
  401c72:	bd90      	pop	{r4, r7, pc}
  401c74:	004013e9 	.word	0x004013e9
  401c78:	400e0e00 	.word	0x400e0e00
  401c7c:	00400cd3 	.word	0x00400cd3
  401c80:	00401b19 	.word	0x00401b19
  401c84:	00400865 	.word	0x00400865
  401c88:	00401991 	.word	0x00401991
  401c8c:	00400f67 	.word	0x00400f67

00401c90 <process_incoming_byte_wifi>:

void process_incoming_byte_wifi(uint8_t in_byte){
  401c90:	b480      	push	{r7}
  401c92:	b083      	sub	sp, #12
  401c94:	af00      	add	r7, sp, #0
  401c96:	4603      	mov	r3, r0
  401c98:	71fb      	strb	r3, [r7, #7]
	input_line_wifi[input_pos_wifi++] = in_byte;
  401c9a:	4b06      	ldr	r3, [pc, #24]	; (401cb4 <process_incoming_byte_wifi+0x24>)
  401c9c:	681b      	ldr	r3, [r3, #0]
  401c9e:	1c5a      	adds	r2, r3, #1
  401ca0:	4904      	ldr	r1, [pc, #16]	; (401cb4 <process_incoming_byte_wifi+0x24>)
  401ca2:	600a      	str	r2, [r1, #0]
  401ca4:	4904      	ldr	r1, [pc, #16]	; (401cb8 <process_incoming_byte_wifi+0x28>)
  401ca6:	79fa      	ldrb	r2, [r7, #7]
  401ca8:	54ca      	strb	r2, [r1, r3]
}
  401caa:	bf00      	nop
  401cac:	370c      	adds	r7, #12
  401cae:	46bd      	mov	sp, r7
  401cb0:	bc80      	pop	{r7}
  401cb2:	4770      	bx	lr
  401cb4:	200004e0 	.word	0x200004e0
  401cb8:	200004f0 	.word	0x200004f0

00401cbc <process_data_wifi>:

void process_data_wifi(){
  401cbc:	b480      	push	{r7}
  401cbe:	af00      	add	r7, sp, #0
	//if (strstr(input_line_wifi, "Unknown command")){
	//	ioport_toggle_pin_level(LED_PIN);
	//}
	;
}
  401cc0:	bf00      	nop
  401cc2:	46bd      	mov	sp, r7
  401cc4:	bc80      	pop	{r7}
  401cc6:	4770      	bx	lr

00401cc8 <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{
  401cc8:	b580      	push	{r7, lr}
  401cca:	b082      	sub	sp, #8
  401ccc:	af00      	add	r7, sp, #0
  401cce:	6078      	str	r0, [r7, #4]
  401cd0:	460b      	mov	r3, r1
  401cd2:	70fb      	strb	r3, [r7, #3]
	usart_write_line(WIFI_USART,comm);
  401cd4:	6879      	ldr	r1, [r7, #4]
  401cd6:	4813      	ldr	r0, [pc, #76]	; (401d24 <write_wifi_command+0x5c>)
  401cd8:	4b13      	ldr	r3, [pc, #76]	; (401d28 <write_wifi_command+0x60>)
  401cda:	4798      	blx	r3
	while ((counts<cnt) & (received_byte_wifi==0) ){;}
  401cdc:	bf00      	nop
  401cde:	4b13      	ldr	r3, [pc, #76]	; (401d2c <write_wifi_command+0x64>)
  401ce0:	781b      	ldrb	r3, [r3, #0]
  401ce2:	b2db      	uxtb	r3, r3
  401ce4:	78fa      	ldrb	r2, [r7, #3]
  401ce6:	429a      	cmp	r2, r3
  401ce8:	bf8c      	ite	hi
  401cea:	2301      	movhi	r3, #1
  401cec:	2300      	movls	r3, #0
  401cee:	b2da      	uxtb	r2, r3
  401cf0:	4b0f      	ldr	r3, [pc, #60]	; (401d30 <write_wifi_command+0x68>)
  401cf2:	681b      	ldr	r3, [r3, #0]
  401cf4:	2b00      	cmp	r3, #0
  401cf6:	bf0c      	ite	eq
  401cf8:	2301      	moveq	r3, #1
  401cfa:	2300      	movne	r3, #0
  401cfc:	b2db      	uxtb	r3, r3
  401cfe:	4013      	ands	r3, r2
  401d00:	b2db      	uxtb	r3, r3
  401d02:	2b00      	cmp	r3, #0
  401d04:	d1eb      	bne.n	401cde <write_wifi_command+0x16>
		if (counts>cnt){
  401d06:	4b09      	ldr	r3, [pc, #36]	; (401d2c <write_wifi_command+0x64>)
  401d08:	781b      	ldrb	r3, [r3, #0]
  401d0a:	b2db      	uxtb	r3, r3
  401d0c:	78fa      	ldrb	r2, [r7, #3]
  401d0e:	429a      	cmp	r2, r3
  401d10:	d204      	bcs.n	401d1c <write_wifi_command+0x54>
			write_wifi_command(comm,cnt);// timeout. Do something
  401d12:	78fb      	ldrb	r3, [r7, #3]
  401d14:	4619      	mov	r1, r3
  401d16:	6878      	ldr	r0, [r7, #4]
  401d18:	f7ff ffd6 	bl	401cc8 <write_wifi_command>
		}
}
  401d1c:	bf00      	nop
  401d1e:	3708      	adds	r7, #8
  401d20:	46bd      	mov	sp, r7
  401d22:	bd80      	pop	{r7, pc}
  401d24:	40024000 	.word	0x40024000
  401d28:	0040070d 	.word	0x0040070d
  401d2c:	200004ec 	.word	0x200004ec
  401d30:	200004d8 	.word	0x200004d8

00401d34 <sysclk_enable_peripheral_clock>:
{
  401d34:	b580      	push	{r7, lr}
  401d36:	b082      	sub	sp, #8
  401d38:	af00      	add	r7, sp, #0
  401d3a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401d3c:	6878      	ldr	r0, [r7, #4]
  401d3e:	4b03      	ldr	r3, [pc, #12]	; (401d4c <sysclk_enable_peripheral_clock+0x18>)
  401d40:	4798      	blx	r3
}
  401d42:	bf00      	nop
  401d44:	3708      	adds	r7, #8
  401d46:	46bd      	mov	sp, r7
  401d48:	bd80      	pop	{r7, pc}
  401d4a:	bf00      	nop
  401d4c:	004013e9 	.word	0x004013e9

00401d50 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  401d50:	b580      	push	{r7, lr}
  401d52:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  401d54:	200b      	movs	r0, #11
  401d56:	4b03      	ldr	r3, [pc, #12]	; (401d64 <ioport_init+0x14>)
  401d58:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  401d5a:	200c      	movs	r0, #12
  401d5c:	4b01      	ldr	r3, [pc, #4]	; (401d64 <ioport_init+0x14>)
  401d5e:	4798      	blx	r3
	arch_ioport_init();
}
  401d60:	bf00      	nop
  401d62:	bd80      	pop	{r7, pc}
  401d64:	00401d35 	.word	0x00401d35

00401d68 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  401d68:	b480      	push	{r7}
  401d6a:	b08d      	sub	sp, #52	; 0x34
  401d6c:	af00      	add	r7, sp, #0
  401d6e:	6078      	str	r0, [r7, #4]
  401d70:	6039      	str	r1, [r7, #0]
  401d72:	687b      	ldr	r3, [r7, #4]
  401d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  401d76:	683b      	ldr	r3, [r7, #0]
  401d78:	62bb      	str	r3, [r7, #40]	; 0x28
  401d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d7c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d80:	095a      	lsrs	r2, r3, #5
  401d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d84:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401d86:	6a3b      	ldr	r3, [r7, #32]
  401d88:	f003 031f 	and.w	r3, r3, #31
  401d8c:	2101      	movs	r1, #1
  401d8e:	fa01 f303 	lsl.w	r3, r1, r3
  401d92:	61fa      	str	r2, [r7, #28]
  401d94:	61bb      	str	r3, [r7, #24]
  401d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401d98:	617b      	str	r3, [r7, #20]
  401d9a:	69fb      	ldr	r3, [r7, #28]
  401d9c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d9e:	693b      	ldr	r3, [r7, #16]
  401da0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401da4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401da8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  401daa:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401dac:	697b      	ldr	r3, [r7, #20]
  401dae:	f003 0308 	and.w	r3, r3, #8
  401db2:	2b00      	cmp	r3, #0
  401db4:	d003      	beq.n	401dbe <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401db6:	68fb      	ldr	r3, [r7, #12]
  401db8:	69ba      	ldr	r2, [r7, #24]
  401dba:	665a      	str	r2, [r3, #100]	; 0x64
  401dbc:	e002      	b.n	401dc4 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  401dbe:	68fb      	ldr	r3, [r7, #12]
  401dc0:	69ba      	ldr	r2, [r7, #24]
  401dc2:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401dc4:	697b      	ldr	r3, [r7, #20]
  401dc6:	f003 0310 	and.w	r3, r3, #16
  401dca:	2b00      	cmp	r3, #0
  401dcc:	d004      	beq.n	401dd8 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  401dce:	68fb      	ldr	r3, [r7, #12]
  401dd0:	69ba      	ldr	r2, [r7, #24]
  401dd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401dd6:	e003      	b.n	401de0 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  401dd8:	68fb      	ldr	r3, [r7, #12]
  401dda:	69ba      	ldr	r2, [r7, #24]
  401ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401de0:	697b      	ldr	r3, [r7, #20]
  401de2:	f003 0320 	and.w	r3, r3, #32
  401de6:	2b00      	cmp	r3, #0
  401de8:	d003      	beq.n	401df2 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401dea:	68fb      	ldr	r3, [r7, #12]
  401dec:	69ba      	ldr	r2, [r7, #24]
  401dee:	651a      	str	r2, [r3, #80]	; 0x50
  401df0:	e002      	b.n	401df8 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  401df2:	68fb      	ldr	r3, [r7, #12]
  401df4:	69ba      	ldr	r2, [r7, #24]
  401df6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401df8:	697b      	ldr	r3, [r7, #20]
  401dfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401dfe:	2b00      	cmp	r3, #0
  401e00:	d003      	beq.n	401e0a <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  401e02:	68fb      	ldr	r3, [r7, #12]
  401e04:	69ba      	ldr	r2, [r7, #24]
  401e06:	621a      	str	r2, [r3, #32]
  401e08:	e002      	b.n	401e10 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  401e0a:	68fb      	ldr	r3, [r7, #12]
  401e0c:	69ba      	ldr	r2, [r7, #24]
  401e0e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  401e10:	697b      	ldr	r3, [r7, #20]
  401e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401e16:	2b00      	cmp	r3, #0
  401e18:	d004      	beq.n	401e24 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  401e1a:	68fb      	ldr	r3, [r7, #12]
  401e1c:	69ba      	ldr	r2, [r7, #24]
  401e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401e22:	e003      	b.n	401e2c <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401e24:	68fb      	ldr	r3, [r7, #12]
  401e26:	69ba      	ldr	r2, [r7, #24]
  401e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401e2c:	697b      	ldr	r3, [r7, #20]
  401e2e:	f003 0301 	and.w	r3, r3, #1
  401e32:	2b00      	cmp	r3, #0
  401e34:	d006      	beq.n	401e44 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  401e36:	68fb      	ldr	r3, [r7, #12]
  401e38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401e3a:	69bb      	ldr	r3, [r7, #24]
  401e3c:	431a      	orrs	r2, r3
  401e3e:	68fb      	ldr	r3, [r7, #12]
  401e40:	671a      	str	r2, [r3, #112]	; 0x70
  401e42:	e006      	b.n	401e52 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401e44:	68fb      	ldr	r3, [r7, #12]
  401e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401e48:	69bb      	ldr	r3, [r7, #24]
  401e4a:	43db      	mvns	r3, r3
  401e4c:	401a      	ands	r2, r3
  401e4e:	68fb      	ldr	r3, [r7, #12]
  401e50:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  401e52:	697b      	ldr	r3, [r7, #20]
  401e54:	f003 0302 	and.w	r3, r3, #2
  401e58:	2b00      	cmp	r3, #0
  401e5a:	d006      	beq.n	401e6a <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  401e5c:	68fb      	ldr	r3, [r7, #12]
  401e5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e60:	69bb      	ldr	r3, [r7, #24]
  401e62:	431a      	orrs	r2, r3
  401e64:	68fb      	ldr	r3, [r7, #12]
  401e66:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  401e68:	e006      	b.n	401e78 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401e6a:	68fb      	ldr	r3, [r7, #12]
  401e6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e6e:	69bb      	ldr	r3, [r7, #24]
  401e70:	43db      	mvns	r3, r3
  401e72:	401a      	ands	r2, r3
  401e74:	68fb      	ldr	r3, [r7, #12]
  401e76:	675a      	str	r2, [r3, #116]	; 0x74
  401e78:	bf00      	nop
  401e7a:	3734      	adds	r7, #52	; 0x34
  401e7c:	46bd      	mov	sp, r7
  401e7e:	bc80      	pop	{r7}
  401e80:	4770      	bx	lr

00401e82 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401e82:	b480      	push	{r7}
  401e84:	b08d      	sub	sp, #52	; 0x34
  401e86:	af00      	add	r7, sp, #0
  401e88:	6078      	str	r0, [r7, #4]
  401e8a:	460b      	mov	r3, r1
  401e8c:	70fb      	strb	r3, [r7, #3]
  401e8e:	687b      	ldr	r3, [r7, #4]
  401e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  401e92:	78fb      	ldrb	r3, [r7, #3]
  401e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e9a:	627b      	str	r3, [r7, #36]	; 0x24
  401e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e9e:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401ea0:	6a3b      	ldr	r3, [r7, #32]
  401ea2:	095b      	lsrs	r3, r3, #5
  401ea4:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401ea6:	69fb      	ldr	r3, [r7, #28]
  401ea8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401eac:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401eb0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401eb2:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401eb8:	2b01      	cmp	r3, #1
  401eba:	d109      	bne.n	401ed0 <ioport_set_pin_dir+0x4e>
  401ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ebe:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401ec0:	697b      	ldr	r3, [r7, #20]
  401ec2:	f003 031f 	and.w	r3, r3, #31
  401ec6:	2201      	movs	r2, #1
  401ec8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401eca:	69bb      	ldr	r3, [r7, #24]
  401ecc:	611a      	str	r2, [r3, #16]
  401ece:	e00c      	b.n	401eea <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ed4:	2b00      	cmp	r3, #0
  401ed6:	d108      	bne.n	401eea <ioport_set_pin_dir+0x68>
  401ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401eda:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401edc:	693b      	ldr	r3, [r7, #16]
  401ede:	f003 031f 	and.w	r3, r3, #31
  401ee2:	2201      	movs	r2, #1
  401ee4:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ee6:	69bb      	ldr	r3, [r7, #24]
  401ee8:	615a      	str	r2, [r3, #20]
  401eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401eec:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401eee:	68fb      	ldr	r3, [r7, #12]
  401ef0:	f003 031f 	and.w	r3, r3, #31
  401ef4:	2201      	movs	r2, #1
  401ef6:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ef8:	69bb      	ldr	r3, [r7, #24]
  401efa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401efe:	bf00      	nop
  401f00:	3734      	adds	r7, #52	; 0x34
  401f02:	46bd      	mov	sp, r7
  401f04:	bc80      	pop	{r7}
  401f06:	4770      	bx	lr

00401f08 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401f08:	b480      	push	{r7}
  401f0a:	b08b      	sub	sp, #44	; 0x2c
  401f0c:	af00      	add	r7, sp, #0
  401f0e:	6078      	str	r0, [r7, #4]
  401f10:	460b      	mov	r3, r1
  401f12:	70fb      	strb	r3, [r7, #3]
  401f14:	687b      	ldr	r3, [r7, #4]
  401f16:	627b      	str	r3, [r7, #36]	; 0x24
  401f18:	78fb      	ldrb	r3, [r7, #3]
  401f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f20:	61fb      	str	r3, [r7, #28]
  401f22:	69fb      	ldr	r3, [r7, #28]
  401f24:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401f26:	69bb      	ldr	r3, [r7, #24]
  401f28:	095b      	lsrs	r3, r3, #5
  401f2a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401f2c:	697b      	ldr	r3, [r7, #20]
  401f2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401f32:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401f36:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401f38:	613b      	str	r3, [r7, #16]

	if (level) {
  401f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d009      	beq.n	401f56 <ioport_set_pin_level+0x4e>
  401f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f44:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401f46:	68fb      	ldr	r3, [r7, #12]
  401f48:	f003 031f 	and.w	r3, r3, #31
  401f4c:	2201      	movs	r2, #1
  401f4e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f50:	693b      	ldr	r3, [r7, #16]
  401f52:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401f54:	e008      	b.n	401f68 <ioport_set_pin_level+0x60>
  401f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f58:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401f5a:	68bb      	ldr	r3, [r7, #8]
  401f5c:	f003 031f 	and.w	r3, r3, #31
  401f60:	2201      	movs	r2, #1
  401f62:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401f64:	693b      	ldr	r3, [r7, #16]
  401f66:	635a      	str	r2, [r3, #52]	; 0x34
  401f68:	bf00      	nop
  401f6a:	372c      	adds	r7, #44	; 0x2c
  401f6c:	46bd      	mov	sp, r7
  401f6e:	bc80      	pop	{r7}
  401f70:	4770      	bx	lr
	...

00401f74 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  401f74:	b580      	push	{r7, lr}
  401f76:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	ioport_init();
  401f78:	4b0d      	ldr	r3, [pc, #52]	; (401fb0 <board_init+0x3c>)
  401f7a:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  401f7c:	2101      	movs	r1, #1
  401f7e:	2013      	movs	r0, #19
  401f80:	4b0c      	ldr	r3, [pc, #48]	; (401fb4 <board_init+0x40>)
  401f82:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  401f84:	2101      	movs	r1, #1
  401f86:	2013      	movs	r0, #19
  401f88:	4b0b      	ldr	r3, [pc, #44]	; (401fb8 <board_init+0x44>)
  401f8a:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_SETUP_BUTTON_PIN, IOPORT_DIR_INPUT);
  401f8c:	2100      	movs	r1, #0
  401f8e:	2000      	movs	r0, #0
  401f90:	4b08      	ldr	r3, [pc, #32]	; (401fb4 <board_init+0x40>)
  401f92:	4798      	blx	r3
	ioport_set_pin_mode(WIFI_SETUP_BUTTON_PIN, IOPORT_MODE_PULLUP);
  401f94:	2108      	movs	r1, #8
  401f96:	2000      	movs	r0, #0
  401f98:	4b08      	ldr	r3, [pc, #32]	; (401fbc <board_init+0x48>)
  401f9a:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
  401f9c:	2101      	movs	r1, #1
  401f9e:	2007      	movs	r0, #7
  401fa0:	4b04      	ldr	r3, [pc, #16]	; (401fb4 <board_init+0x40>)
  401fa2:	4798      	blx	r3
	ioport_set_pin_level(WIFI_CTS_PIN, false);
  401fa4:	2100      	movs	r1, #0
  401fa6:	2007      	movs	r0, #7
  401fa8:	4b03      	ldr	r3, [pc, #12]	; (401fb8 <board_init+0x44>)
  401faa:	4798      	blx	r3
		gpio_configure_pin(CAM_DATA_BUS_D4, CAM_DATA_BUS_FLAGS);
		gpio_configure_pin(CAM_DATA_BUS_D5, CAM_DATA_BUS_FLAGS);
		gpio_configure_pin(CAM_DATA_BUS_D6, CAM_DATA_BUS_FLAGS);
		gpio_configure_pin(CAM_DATA_BUS_D7, CAM_DATA_BUS_FLAGS);
	#endif	
}
  401fac:	bf00      	nop
  401fae:	bd80      	pop	{r7, pc}
  401fb0:	00401d51 	.word	0x00401d51
  401fb4:	00401e83 	.word	0x00401e83
  401fb8:	00401f09 	.word	0x00401f09
  401fbc:	00401d69 	.word	0x00401d69

00401fc0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401fc0:	b580      	push	{r7, lr}
  401fc2:	b084      	sub	sp, #16
  401fc4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401fc6:	4b27      	ldr	r3, [pc, #156]	; (402064 <Reset_Handler+0xa4>)
  401fc8:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401fca:	4b27      	ldr	r3, [pc, #156]	; (402068 <Reset_Handler+0xa8>)
  401fcc:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401fce:	68fa      	ldr	r2, [r7, #12]
  401fd0:	68bb      	ldr	r3, [r7, #8]
  401fd2:	429a      	cmp	r2, r3
  401fd4:	d90d      	bls.n	401ff2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401fd6:	e007      	b.n	401fe8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401fd8:	68bb      	ldr	r3, [r7, #8]
  401fda:	1d1a      	adds	r2, r3, #4
  401fdc:	60ba      	str	r2, [r7, #8]
  401fde:	68fa      	ldr	r2, [r7, #12]
  401fe0:	1d11      	adds	r1, r2, #4
  401fe2:	60f9      	str	r1, [r7, #12]
  401fe4:	6812      	ldr	r2, [r2, #0]
  401fe6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401fe8:	68bb      	ldr	r3, [r7, #8]
  401fea:	4a20      	ldr	r2, [pc, #128]	; (40206c <Reset_Handler+0xac>)
  401fec:	4293      	cmp	r3, r2
  401fee:	d3f3      	bcc.n	401fd8 <Reset_Handler+0x18>
  401ff0:	e020      	b.n	402034 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401ff2:	68fa      	ldr	r2, [r7, #12]
  401ff4:	68bb      	ldr	r3, [r7, #8]
  401ff6:	429a      	cmp	r2, r3
  401ff8:	d21c      	bcs.n	402034 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401ffa:	4a1c      	ldr	r2, [pc, #112]	; (40206c <Reset_Handler+0xac>)
  401ffc:	4b1a      	ldr	r3, [pc, #104]	; (402068 <Reset_Handler+0xa8>)
  401ffe:	1ad3      	subs	r3, r2, r3
  402000:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402002:	68fa      	ldr	r2, [r7, #12]
  402004:	687b      	ldr	r3, [r7, #4]
  402006:	4413      	add	r3, r2
  402008:	3b04      	subs	r3, #4
  40200a:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  40200c:	68ba      	ldr	r2, [r7, #8]
  40200e:	687b      	ldr	r3, [r7, #4]
  402010:	4413      	add	r3, r2
  402012:	3b04      	subs	r3, #4
  402014:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402016:	e00a      	b.n	40202e <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402018:	68bb      	ldr	r3, [r7, #8]
  40201a:	1f1a      	subs	r2, r3, #4
  40201c:	60ba      	str	r2, [r7, #8]
  40201e:	68fa      	ldr	r2, [r7, #12]
  402020:	1f11      	subs	r1, r2, #4
  402022:	60f9      	str	r1, [r7, #12]
  402024:	6812      	ldr	r2, [r2, #0]
  402026:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402028:	687b      	ldr	r3, [r7, #4]
  40202a:	3b04      	subs	r3, #4
  40202c:	607b      	str	r3, [r7, #4]
  40202e:	687b      	ldr	r3, [r7, #4]
  402030:	2b00      	cmp	r3, #0
  402032:	d1f1      	bne.n	402018 <Reset_Handler+0x58>
		}
	}
	__NOP();
  402034:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402036:	4b0e      	ldr	r3, [pc, #56]	; (402070 <Reset_Handler+0xb0>)
  402038:	60bb      	str	r3, [r7, #8]
  40203a:	e004      	b.n	402046 <Reset_Handler+0x86>
		*pDest++ = 0;
  40203c:	68bb      	ldr	r3, [r7, #8]
  40203e:	1d1a      	adds	r2, r3, #4
  402040:	60ba      	str	r2, [r7, #8]
  402042:	2200      	movs	r2, #0
  402044:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402046:	68bb      	ldr	r3, [r7, #8]
  402048:	4a0a      	ldr	r2, [pc, #40]	; (402074 <Reset_Handler+0xb4>)
  40204a:	4293      	cmp	r3, r2
  40204c:	d3f6      	bcc.n	40203c <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40204e:	4b0a      	ldr	r3, [pc, #40]	; (402078 <Reset_Handler+0xb8>)
  402050:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402052:	4a0a      	ldr	r2, [pc, #40]	; (40207c <Reset_Handler+0xbc>)
  402054:	68fb      	ldr	r3, [r7, #12]
  402056:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402058:	4b09      	ldr	r3, [pc, #36]	; (402080 <Reset_Handler+0xc0>)
  40205a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40205c:	4b09      	ldr	r3, [pc, #36]	; (402084 <Reset_Handler+0xc4>)
  40205e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402060:	e7fe      	b.n	402060 <Reset_Handler+0xa0>
  402062:	bf00      	nop
  402064:	004029c8 	.word	0x004029c8
  402068:	20000000 	.word	0x20000000
  40206c:	2000043c 	.word	0x2000043c
  402070:	2000043c 	.word	0x2000043c
  402074:	200008fc 	.word	0x200008fc
  402078:	00400000 	.word	0x00400000
  40207c:	e000ed00 	.word	0xe000ed00
  402080:	004027dd 	.word	0x004027dd
  402084:	004023cd 	.word	0x004023cd

00402088 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402088:	b480      	push	{r7}
  40208a:	af00      	add	r7, sp, #0
	while (1) {
  40208c:	e7fe      	b.n	40208c <Dummy_Handler+0x4>
	...

00402090 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402090:	b480      	push	{r7}
  402092:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402094:	4b5d      	ldr	r3, [pc, #372]	; (40220c <SystemCoreClockUpdate+0x17c>)
  402096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402098:	f003 0303 	and.w	r3, r3, #3
  40209c:	2b03      	cmp	r3, #3
  40209e:	f200 8096 	bhi.w	4021ce <SystemCoreClockUpdate+0x13e>
  4020a2:	a201      	add	r2, pc, #4	; (adr r2, 4020a8 <SystemCoreClockUpdate+0x18>)
  4020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4020a8:	004020b9 	.word	0x004020b9
  4020ac:	004020d9 	.word	0x004020d9
  4020b0:	00402123 	.word	0x00402123
  4020b4:	00402123 	.word	0x00402123
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4020b8:	4b55      	ldr	r3, [pc, #340]	; (402210 <SystemCoreClockUpdate+0x180>)
  4020ba:	695b      	ldr	r3, [r3, #20]
  4020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	d004      	beq.n	4020ce <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4020c4:	4b53      	ldr	r3, [pc, #332]	; (402214 <SystemCoreClockUpdate+0x184>)
  4020c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4020ca:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4020cc:	e080      	b.n	4021d0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4020ce:	4b51      	ldr	r3, [pc, #324]	; (402214 <SystemCoreClockUpdate+0x184>)
  4020d0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4020d4:	601a      	str	r2, [r3, #0]
		break;
  4020d6:	e07b      	b.n	4021d0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4020d8:	4b4c      	ldr	r3, [pc, #304]	; (40220c <SystemCoreClockUpdate+0x17c>)
  4020da:	6a1b      	ldr	r3, [r3, #32]
  4020dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4020e0:	2b00      	cmp	r3, #0
  4020e2:	d003      	beq.n	4020ec <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4020e4:	4b4b      	ldr	r3, [pc, #300]	; (402214 <SystemCoreClockUpdate+0x184>)
  4020e6:	4a4c      	ldr	r2, [pc, #304]	; (402218 <SystemCoreClockUpdate+0x188>)
  4020e8:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4020ea:	e071      	b.n	4021d0 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020ec:	4b49      	ldr	r3, [pc, #292]	; (402214 <SystemCoreClockUpdate+0x184>)
  4020ee:	4a4b      	ldr	r2, [pc, #300]	; (40221c <SystemCoreClockUpdate+0x18c>)
  4020f0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4020f2:	4b46      	ldr	r3, [pc, #280]	; (40220c <SystemCoreClockUpdate+0x17c>)
  4020f4:	6a1b      	ldr	r3, [r3, #32]
  4020f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020fa:	2b10      	cmp	r3, #16
  4020fc:	d008      	beq.n	402110 <SystemCoreClockUpdate+0x80>
  4020fe:	2b20      	cmp	r3, #32
  402100:	d00a      	beq.n	402118 <SystemCoreClockUpdate+0x88>
  402102:	2b00      	cmp	r3, #0
  402104:	d000      	beq.n	402108 <SystemCoreClockUpdate+0x78>
			break;
  402106:	e00b      	b.n	402120 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402108:	4b42      	ldr	r3, [pc, #264]	; (402214 <SystemCoreClockUpdate+0x184>)
  40210a:	4a44      	ldr	r2, [pc, #272]	; (40221c <SystemCoreClockUpdate+0x18c>)
  40210c:	601a      	str	r2, [r3, #0]
			break;
  40210e:	e007      	b.n	402120 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402110:	4b40      	ldr	r3, [pc, #256]	; (402214 <SystemCoreClockUpdate+0x184>)
  402112:	4a43      	ldr	r2, [pc, #268]	; (402220 <SystemCoreClockUpdate+0x190>)
  402114:	601a      	str	r2, [r3, #0]
			break;
  402116:	e003      	b.n	402120 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402118:	4b3e      	ldr	r3, [pc, #248]	; (402214 <SystemCoreClockUpdate+0x184>)
  40211a:	4a3f      	ldr	r2, [pc, #252]	; (402218 <SystemCoreClockUpdate+0x188>)
  40211c:	601a      	str	r2, [r3, #0]
			break;
  40211e:	bf00      	nop
		break;
  402120:	e056      	b.n	4021d0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402122:	4b3a      	ldr	r3, [pc, #232]	; (40220c <SystemCoreClockUpdate+0x17c>)
  402124:	6a1b      	ldr	r3, [r3, #32]
  402126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40212a:	2b00      	cmp	r3, #0
  40212c:	d003      	beq.n	402136 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40212e:	4b39      	ldr	r3, [pc, #228]	; (402214 <SystemCoreClockUpdate+0x184>)
  402130:	4a39      	ldr	r2, [pc, #228]	; (402218 <SystemCoreClockUpdate+0x188>)
  402132:	601a      	str	r2, [r3, #0]
  402134:	e019      	b.n	40216a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402136:	4b37      	ldr	r3, [pc, #220]	; (402214 <SystemCoreClockUpdate+0x184>)
  402138:	4a38      	ldr	r2, [pc, #224]	; (40221c <SystemCoreClockUpdate+0x18c>)
  40213a:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40213c:	4b33      	ldr	r3, [pc, #204]	; (40220c <SystemCoreClockUpdate+0x17c>)
  40213e:	6a1b      	ldr	r3, [r3, #32]
  402140:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402144:	2b10      	cmp	r3, #16
  402146:	d008      	beq.n	40215a <SystemCoreClockUpdate+0xca>
  402148:	2b20      	cmp	r3, #32
  40214a:	d00a      	beq.n	402162 <SystemCoreClockUpdate+0xd2>
  40214c:	2b00      	cmp	r3, #0
  40214e:	d000      	beq.n	402152 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402150:	e00b      	b.n	40216a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402152:	4b30      	ldr	r3, [pc, #192]	; (402214 <SystemCoreClockUpdate+0x184>)
  402154:	4a31      	ldr	r2, [pc, #196]	; (40221c <SystemCoreClockUpdate+0x18c>)
  402156:	601a      	str	r2, [r3, #0]
					break;
  402158:	e007      	b.n	40216a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40215a:	4b2e      	ldr	r3, [pc, #184]	; (402214 <SystemCoreClockUpdate+0x184>)
  40215c:	4a30      	ldr	r2, [pc, #192]	; (402220 <SystemCoreClockUpdate+0x190>)
  40215e:	601a      	str	r2, [r3, #0]
					break;
  402160:	e003      	b.n	40216a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402162:	4b2c      	ldr	r3, [pc, #176]	; (402214 <SystemCoreClockUpdate+0x184>)
  402164:	4a2c      	ldr	r2, [pc, #176]	; (402218 <SystemCoreClockUpdate+0x188>)
  402166:	601a      	str	r2, [r3, #0]
					break;
  402168:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40216a:	4b28      	ldr	r3, [pc, #160]	; (40220c <SystemCoreClockUpdate+0x17c>)
  40216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40216e:	f003 0303 	and.w	r3, r3, #3
  402172:	2b02      	cmp	r3, #2
  402174:	d115      	bne.n	4021a2 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402176:	4b25      	ldr	r3, [pc, #148]	; (40220c <SystemCoreClockUpdate+0x17c>)
  402178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40217a:	0c1b      	lsrs	r3, r3, #16
  40217c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402180:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402182:	4a24      	ldr	r2, [pc, #144]	; (402214 <SystemCoreClockUpdate+0x184>)
  402184:	6812      	ldr	r2, [r2, #0]
  402186:	fb02 f303 	mul.w	r3, r2, r3
  40218a:	4a22      	ldr	r2, [pc, #136]	; (402214 <SystemCoreClockUpdate+0x184>)
  40218c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40218e:	4b1f      	ldr	r3, [pc, #124]	; (40220c <SystemCoreClockUpdate+0x17c>)
  402190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402192:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402194:	4a1f      	ldr	r2, [pc, #124]	; (402214 <SystemCoreClockUpdate+0x184>)
  402196:	6812      	ldr	r2, [r2, #0]
  402198:	fbb2 f3f3 	udiv	r3, r2, r3
  40219c:	4a1d      	ldr	r2, [pc, #116]	; (402214 <SystemCoreClockUpdate+0x184>)
  40219e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4021a0:	e016      	b.n	4021d0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4021a2:	4b1a      	ldr	r3, [pc, #104]	; (40220c <SystemCoreClockUpdate+0x17c>)
  4021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4021a6:	0c1b      	lsrs	r3, r3, #16
  4021a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4021ac:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4021ae:	4a19      	ldr	r2, [pc, #100]	; (402214 <SystemCoreClockUpdate+0x184>)
  4021b0:	6812      	ldr	r2, [r2, #0]
  4021b2:	fb02 f303 	mul.w	r3, r2, r3
  4021b6:	4a17      	ldr	r2, [pc, #92]	; (402214 <SystemCoreClockUpdate+0x184>)
  4021b8:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4021ba:	4b14      	ldr	r3, [pc, #80]	; (40220c <SystemCoreClockUpdate+0x17c>)
  4021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4021be:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4021c0:	4a14      	ldr	r2, [pc, #80]	; (402214 <SystemCoreClockUpdate+0x184>)
  4021c2:	6812      	ldr	r2, [r2, #0]
  4021c4:	fbb2 f3f3 	udiv	r3, r2, r3
  4021c8:	4a12      	ldr	r2, [pc, #72]	; (402214 <SystemCoreClockUpdate+0x184>)
  4021ca:	6013      	str	r3, [r2, #0]
		break;
  4021cc:	e000      	b.n	4021d0 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4021ce:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4021d0:	4b0e      	ldr	r3, [pc, #56]	; (40220c <SystemCoreClockUpdate+0x17c>)
  4021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021d8:	2b70      	cmp	r3, #112	; 0x70
  4021da:	d108      	bne.n	4021ee <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4021dc:	4b0d      	ldr	r3, [pc, #52]	; (402214 <SystemCoreClockUpdate+0x184>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	4a10      	ldr	r2, [pc, #64]	; (402224 <SystemCoreClockUpdate+0x194>)
  4021e2:	fba2 2303 	umull	r2, r3, r2, r3
  4021e6:	085b      	lsrs	r3, r3, #1
  4021e8:	4a0a      	ldr	r2, [pc, #40]	; (402214 <SystemCoreClockUpdate+0x184>)
  4021ea:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4021ec:	e00a      	b.n	402204 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4021ee:	4b07      	ldr	r3, [pc, #28]	; (40220c <SystemCoreClockUpdate+0x17c>)
  4021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021f2:	091b      	lsrs	r3, r3, #4
  4021f4:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4021f8:	4a06      	ldr	r2, [pc, #24]	; (402214 <SystemCoreClockUpdate+0x184>)
  4021fa:	6812      	ldr	r2, [r2, #0]
  4021fc:	fa22 f303 	lsr.w	r3, r2, r3
  402200:	4a04      	ldr	r2, [pc, #16]	; (402214 <SystemCoreClockUpdate+0x184>)
  402202:	6013      	str	r3, [r2, #0]
}
  402204:	bf00      	nop
  402206:	46bd      	mov	sp, r7
  402208:	bc80      	pop	{r7}
  40220a:	4770      	bx	lr
  40220c:	400e0400 	.word	0x400e0400
  402210:	400e1410 	.word	0x400e1410
  402214:	2000000c 	.word	0x2000000c
  402218:	00b71b00 	.word	0x00b71b00
  40221c:	003d0900 	.word	0x003d0900
  402220:	007a1200 	.word	0x007a1200
  402224:	aaaaaaab 	.word	0xaaaaaaab

00402228 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402228:	b480      	push	{r7}
  40222a:	b083      	sub	sp, #12
  40222c:	af00      	add	r7, sp, #0
  40222e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402230:	687b      	ldr	r3, [r7, #4]
  402232:	4a18      	ldr	r2, [pc, #96]	; (402294 <system_init_flash+0x6c>)
  402234:	4293      	cmp	r3, r2
  402236:	d804      	bhi.n	402242 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402238:	4b17      	ldr	r3, [pc, #92]	; (402298 <system_init_flash+0x70>)
  40223a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40223e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402240:	e023      	b.n	40228a <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402242:	687b      	ldr	r3, [r7, #4]
  402244:	4a15      	ldr	r2, [pc, #84]	; (40229c <system_init_flash+0x74>)
  402246:	4293      	cmp	r3, r2
  402248:	d803      	bhi.n	402252 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40224a:	4b13      	ldr	r3, [pc, #76]	; (402298 <system_init_flash+0x70>)
  40224c:	4a14      	ldr	r2, [pc, #80]	; (4022a0 <system_init_flash+0x78>)
  40224e:	601a      	str	r2, [r3, #0]
}
  402250:	e01b      	b.n	40228a <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402252:	687b      	ldr	r3, [r7, #4]
  402254:	4a13      	ldr	r2, [pc, #76]	; (4022a4 <system_init_flash+0x7c>)
  402256:	4293      	cmp	r3, r2
  402258:	d803      	bhi.n	402262 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40225a:	4b0f      	ldr	r3, [pc, #60]	; (402298 <system_init_flash+0x70>)
  40225c:	4a12      	ldr	r2, [pc, #72]	; (4022a8 <system_init_flash+0x80>)
  40225e:	601a      	str	r2, [r3, #0]
}
  402260:	e013      	b.n	40228a <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402262:	687b      	ldr	r3, [r7, #4]
  402264:	4a11      	ldr	r2, [pc, #68]	; (4022ac <system_init_flash+0x84>)
  402266:	4293      	cmp	r3, r2
  402268:	d803      	bhi.n	402272 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40226a:	4b0b      	ldr	r3, [pc, #44]	; (402298 <system_init_flash+0x70>)
  40226c:	4a10      	ldr	r2, [pc, #64]	; (4022b0 <system_init_flash+0x88>)
  40226e:	601a      	str	r2, [r3, #0]
}
  402270:	e00b      	b.n	40228a <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402272:	687b      	ldr	r3, [r7, #4]
  402274:	4a0f      	ldr	r2, [pc, #60]	; (4022b4 <system_init_flash+0x8c>)
  402276:	4293      	cmp	r3, r2
  402278:	d804      	bhi.n	402284 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40227a:	4b07      	ldr	r3, [pc, #28]	; (402298 <system_init_flash+0x70>)
  40227c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402280:	601a      	str	r2, [r3, #0]
}
  402282:	e002      	b.n	40228a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402284:	4b04      	ldr	r3, [pc, #16]	; (402298 <system_init_flash+0x70>)
  402286:	4a0c      	ldr	r2, [pc, #48]	; (4022b8 <system_init_flash+0x90>)
  402288:	601a      	str	r2, [r3, #0]
}
  40228a:	bf00      	nop
  40228c:	370c      	adds	r7, #12
  40228e:	46bd      	mov	sp, r7
  402290:	bc80      	pop	{r7}
  402292:	4770      	bx	lr
  402294:	01312cff 	.word	0x01312cff
  402298:	400e0a00 	.word	0x400e0a00
  40229c:	026259ff 	.word	0x026259ff
  4022a0:	04000100 	.word	0x04000100
  4022a4:	039386ff 	.word	0x039386ff
  4022a8:	04000200 	.word	0x04000200
  4022ac:	04c4b3ff 	.word	0x04c4b3ff
  4022b0:	04000300 	.word	0x04000300
  4022b4:	05f5e0ff 	.word	0x05f5e0ff
  4022b8:	04000500 	.word	0x04000500

004022bc <osc_get_rate>:
{
  4022bc:	b480      	push	{r7}
  4022be:	b083      	sub	sp, #12
  4022c0:	af00      	add	r7, sp, #0
  4022c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4022c4:	687b      	ldr	r3, [r7, #4]
  4022c6:	2b07      	cmp	r3, #7
  4022c8:	d825      	bhi.n	402316 <osc_get_rate+0x5a>
  4022ca:	a201      	add	r2, pc, #4	; (adr r2, 4022d0 <osc_get_rate+0x14>)
  4022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022d0:	004022f1 	.word	0x004022f1
  4022d4:	004022f7 	.word	0x004022f7
  4022d8:	004022fd 	.word	0x004022fd
  4022dc:	00402303 	.word	0x00402303
  4022e0:	00402307 	.word	0x00402307
  4022e4:	0040230b 	.word	0x0040230b
  4022e8:	0040230f 	.word	0x0040230f
  4022ec:	00402313 	.word	0x00402313
		return OSC_SLCK_32K_RC_HZ;
  4022f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4022f4:	e010      	b.n	402318 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4022f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022fa:	e00d      	b.n	402318 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4022fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402300:	e00a      	b.n	402318 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402302:	4b08      	ldr	r3, [pc, #32]	; (402324 <osc_get_rate+0x68>)
  402304:	e008      	b.n	402318 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402306:	4b08      	ldr	r3, [pc, #32]	; (402328 <osc_get_rate+0x6c>)
  402308:	e006      	b.n	402318 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40230a:	4b08      	ldr	r3, [pc, #32]	; (40232c <osc_get_rate+0x70>)
  40230c:	e004      	b.n	402318 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40230e:	4b07      	ldr	r3, [pc, #28]	; (40232c <osc_get_rate+0x70>)
  402310:	e002      	b.n	402318 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402312:	4b06      	ldr	r3, [pc, #24]	; (40232c <osc_get_rate+0x70>)
  402314:	e000      	b.n	402318 <osc_get_rate+0x5c>
	return 0;
  402316:	2300      	movs	r3, #0
}
  402318:	4618      	mov	r0, r3
  40231a:	370c      	adds	r7, #12
  40231c:	46bd      	mov	sp, r7
  40231e:	bc80      	pop	{r7}
  402320:	4770      	bx	lr
  402322:	bf00      	nop
  402324:	003d0900 	.word	0x003d0900
  402328:	007a1200 	.word	0x007a1200
  40232c:	00b71b00 	.word	0x00b71b00

00402330 <sysclk_get_main_hz>:
{
  402330:	b580      	push	{r7, lr}
  402332:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402334:	2006      	movs	r0, #6
  402336:	4b04      	ldr	r3, [pc, #16]	; (402348 <sysclk_get_main_hz+0x18>)
  402338:	4798      	blx	r3
  40233a:	4602      	mov	r2, r0
  40233c:	4613      	mov	r3, r2
  40233e:	009b      	lsls	r3, r3, #2
  402340:	4413      	add	r3, r2
  402342:	009b      	lsls	r3, r3, #2
}
  402344:	4618      	mov	r0, r3
  402346:	bd80      	pop	{r7, pc}
  402348:	004022bd 	.word	0x004022bd

0040234c <sysclk_get_cpu_hz>:
{
  40234c:	b580      	push	{r7, lr}
  40234e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402350:	4b02      	ldr	r3, [pc, #8]	; (40235c <sysclk_get_cpu_hz+0x10>)
  402352:	4798      	blx	r3
  402354:	4603      	mov	r3, r0
  402356:	085b      	lsrs	r3, r3, #1
}
  402358:	4618      	mov	r0, r3
  40235a:	bd80      	pop	{r7, pc}
  40235c:	00402331 	.word	0x00402331

00402360 <ioport_set_pin_level>:
{
  402360:	b480      	push	{r7}
  402362:	b08b      	sub	sp, #44	; 0x2c
  402364:	af00      	add	r7, sp, #0
  402366:	6078      	str	r0, [r7, #4]
  402368:	460b      	mov	r3, r1
  40236a:	70fb      	strb	r3, [r7, #3]
  40236c:	687b      	ldr	r3, [r7, #4]
  40236e:	627b      	str	r3, [r7, #36]	; 0x24
  402370:	78fb      	ldrb	r3, [r7, #3]
  402372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402378:	61fb      	str	r3, [r7, #28]
  40237a:	69fb      	ldr	r3, [r7, #28]
  40237c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40237e:	69bb      	ldr	r3, [r7, #24]
  402380:	095b      	lsrs	r3, r3, #5
  402382:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402384:	697b      	ldr	r3, [r7, #20]
  402386:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40238a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40238e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402390:	613b      	str	r3, [r7, #16]
	if (level) {
  402392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402396:	2b00      	cmp	r3, #0
  402398:	d009      	beq.n	4023ae <ioport_set_pin_level+0x4e>
  40239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40239c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40239e:	68fb      	ldr	r3, [r7, #12]
  4023a0:	f003 031f 	and.w	r3, r3, #31
  4023a4:	2201      	movs	r2, #1
  4023a6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4023a8:	693b      	ldr	r3, [r7, #16]
  4023aa:	631a      	str	r2, [r3, #48]	; 0x30
}
  4023ac:	e008      	b.n	4023c0 <ioport_set_pin_level+0x60>
  4023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023b0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4023b2:	68bb      	ldr	r3, [r7, #8]
  4023b4:	f003 031f 	and.w	r3, r3, #31
  4023b8:	2201      	movs	r2, #1
  4023ba:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4023bc:	693b      	ldr	r3, [r7, #16]
  4023be:	635a      	str	r2, [r3, #52]	; 0x34
  4023c0:	bf00      	nop
  4023c2:	372c      	adds	r7, #44	; 0x2c
  4023c4:	46bd      	mov	sp, r7
  4023c6:	bc80      	pop	{r7}
  4023c8:	4770      	bx	lr
	...

004023cc <main>:
#include "camera.h"
#include "wifi.h"
#include "timer_interface.h"

int main (void)
{
  4023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023ce:	af00      	add	r7, sp, #0
	// Initialization
	sysclk_init();
  4023d0:	4b2c      	ldr	r3, [pc, #176]	; (402484 <main+0xb8>)
  4023d2:	4798      	blx	r3
	wdt_disable(WDT);
  4023d4:	482c      	ldr	r0, [pc, #176]	; (402488 <main+0xbc>)
  4023d6:	4b2d      	ldr	r3, [pc, #180]	; (40248c <main+0xc0>)
  4023d8:	4798      	blx	r3
	board_init();
  4023da:	4b2d      	ldr	r3, [pc, #180]	; (402490 <main+0xc4>)
  4023dc:	4798      	blx	r3
	init_camera();
  4023de:	4b2d      	ldr	r3, [pc, #180]	; (402494 <main+0xc8>)
  4023e0:	4798      	blx	r3
	
	// Configure peripheral pins, Initialize WiFi and camera modules
	//configure_camera();
	configure_tc();
  4023e2:	4b2d      	ldr	r3, [pc, #180]	; (402498 <main+0xcc>)
  4023e4:	4798      	blx	r3
	configure_usart_wifi();
  4023e6:	4b2d      	ldr	r3, [pc, #180]	; (40249c <main+0xd0>)
  4023e8:	4798      	blx	r3
	configure_wifi_comm_pin();
  4023ea:	4b2d      	ldr	r3, [pc, #180]	; (4024a0 <main+0xd4>)
  4023ec:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  4023ee:	4b2d      	ldr	r3, [pc, #180]	; (4024a4 <main+0xd8>)
  4023f0:	4798      	blx	r3
	
	
	
	// Reset wifi module
	ioport_set_pin_level(WIFI_RESET_PIN, false);
  4023f2:	2100      	movs	r1, #0
  4023f4:	2013      	movs	r0, #19
  4023f6:	4b2c      	ldr	r3, [pc, #176]	; (4024a8 <main+0xdc>)
  4023f8:	4798      	blx	r3
	delay_ms(100);
  4023fa:	4b2c      	ldr	r3, [pc, #176]	; (4024ac <main+0xe0>)
  4023fc:	4798      	blx	r3
  4023fe:	4603      	mov	r3, r0
  402400:	4619      	mov	r1, r3
  402402:	f04f 0200 	mov.w	r2, #0
  402406:	460b      	mov	r3, r1
  402408:	4614      	mov	r4, r2
  40240a:	18db      	adds	r3, r3, r3
  40240c:	eb44 0404 	adc.w	r4, r4, r4
  402410:	185b      	adds	r3, r3, r1
  402412:	eb44 0402 	adc.w	r4, r4, r2
  402416:	0166      	lsls	r6, r4, #5
  402418:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  40241c:	015d      	lsls	r5, r3, #5
  40241e:	195b      	adds	r3, r3, r5
  402420:	eb44 0406 	adc.w	r4, r4, r6
  402424:	185b      	adds	r3, r3, r1
  402426:	eb44 0402 	adc.w	r4, r4, r2
  40242a:	f243 61af 	movw	r1, #13999	; 0x36af
  40242e:	f04f 0200 	mov.w	r2, #0
  402432:	185d      	adds	r5, r3, r1
  402434:	eb44 0602 	adc.w	r6, r4, r2
  402438:	4628      	mov	r0, r5
  40243a:	4631      	mov	r1, r6
  40243c:	4c1c      	ldr	r4, [pc, #112]	; (4024b0 <main+0xe4>)
  40243e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402442:	f04f 0300 	mov.w	r3, #0
  402446:	47a0      	blx	r4
  402448:	4603      	mov	r3, r0
  40244a:	460c      	mov	r4, r1
  40244c:	4618      	mov	r0, r3
  40244e:	4b19      	ldr	r3, [pc, #100]	; (4024b4 <main+0xe8>)
  402450:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  402452:	2101      	movs	r1, #1
  402454:	2013      	movs	r0, #19
  402456:	4b14      	ldr	r3, [pc, #80]	; (4024a8 <main+0xdc>)
  402458:	4798      	blx	r3
	
	// Tell the WiFi to turn off the command prompt and command  echo
	write_wifi_command("set sy c p off\r\n",30);
  40245a:	211e      	movs	r1, #30
  40245c:	4816      	ldr	r0, [pc, #88]	; (4024b8 <main+0xec>)
  40245e:	4b17      	ldr	r3, [pc, #92]	; (4024bc <main+0xf0>)
  402460:	4798      	blx	r3
	write_wifi_command("set sy c e off\r\n",30);
  402462:	211e      	movs	r1, #30
  402464:	4816      	ldr	r0, [pc, #88]	; (4024c0 <main+0xf4>)
  402466:	4b15      	ldr	r3, [pc, #84]	; (4024bc <main+0xf0>)
  402468:	4798      	blx	r3
	
	while (1){
		if (wifi_web_setup_flag){
  40246a:	4b16      	ldr	r3, [pc, #88]	; (4024c4 <main+0xf8>)
  40246c:	681b      	ldr	r3, [r3, #0]
  40246e:	2b00      	cmp	r3, #0
  402470:	d0fb      	beq.n	40246a <main+0x9e>
			wifi_web_setup_flag = 0;
  402472:	4b14      	ldr	r3, [pc, #80]	; (4024c4 <main+0xf8>)
  402474:	2200      	movs	r2, #0
  402476:	601a      	str	r2, [r3, #0]
			write_wifi_command("setup web\r\n",3);
  402478:	2103      	movs	r1, #3
  40247a:	4813      	ldr	r0, [pc, #76]	; (4024c8 <main+0xfc>)
  40247c:	4b0f      	ldr	r3, [pc, #60]	; (4024bc <main+0xf0>)
  40247e:	4798      	blx	r3
		if (wifi_web_setup_flag){
  402480:	e7f3      	b.n	40246a <main+0x9e>
  402482:	bf00      	nop
  402484:	00400c39 	.word	0x00400c39
  402488:	400e1450 	.word	0x400e1450
  40248c:	00400935 	.word	0x00400935
  402490:	00401f75 	.word	0x00401f75
  402494:	00401725 	.word	0x00401725
  402498:	00401905 	.word	0x00401905
  40249c:	00401b39 	.word	0x00401b39
  4024a0:	00401be9 	.word	0x00401be9
  4024a4:	00401c39 	.word	0x00401c39
  4024a8:	00402361 	.word	0x00402361
  4024ac:	0040234d 	.word	0x0040234d
  4024b0:	004024cd 	.word	0x004024cd
  4024b4:	20000001 	.word	0x20000001
  4024b8:	00402964 	.word	0x00402964
  4024bc:	00401cc9 	.word	0x00401cc9
  4024c0:	00402978 	.word	0x00402978
  4024c4:	200004dc 	.word	0x200004dc
  4024c8:	0040298c 	.word	0x0040298c

004024cc <__aeabi_uldivmod>:
  4024cc:	b953      	cbnz	r3, 4024e4 <__aeabi_uldivmod+0x18>
  4024ce:	b94a      	cbnz	r2, 4024e4 <__aeabi_uldivmod+0x18>
  4024d0:	2900      	cmp	r1, #0
  4024d2:	bf08      	it	eq
  4024d4:	2800      	cmpeq	r0, #0
  4024d6:	bf1c      	itt	ne
  4024d8:	f04f 31ff 	movne.w	r1, #4294967295
  4024dc:	f04f 30ff 	movne.w	r0, #4294967295
  4024e0:	f000 b97a 	b.w	4027d8 <__aeabi_idiv0>
  4024e4:	f1ad 0c08 	sub.w	ip, sp, #8
  4024e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4024ec:	f000 f806 	bl	4024fc <__udivmoddi4>
  4024f0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4024f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4024f8:	b004      	add	sp, #16
  4024fa:	4770      	bx	lr

004024fc <__udivmoddi4>:
  4024fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402500:	468c      	mov	ip, r1
  402502:	460d      	mov	r5, r1
  402504:	4604      	mov	r4, r0
  402506:	9e08      	ldr	r6, [sp, #32]
  402508:	2b00      	cmp	r3, #0
  40250a:	d151      	bne.n	4025b0 <__udivmoddi4+0xb4>
  40250c:	428a      	cmp	r2, r1
  40250e:	4617      	mov	r7, r2
  402510:	d96d      	bls.n	4025ee <__udivmoddi4+0xf2>
  402512:	fab2 fe82 	clz	lr, r2
  402516:	f1be 0f00 	cmp.w	lr, #0
  40251a:	d00b      	beq.n	402534 <__udivmoddi4+0x38>
  40251c:	f1ce 0c20 	rsb	ip, lr, #32
  402520:	fa01 f50e 	lsl.w	r5, r1, lr
  402524:	fa20 fc0c 	lsr.w	ip, r0, ip
  402528:	fa02 f70e 	lsl.w	r7, r2, lr
  40252c:	ea4c 0c05 	orr.w	ip, ip, r5
  402530:	fa00 f40e 	lsl.w	r4, r0, lr
  402534:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402538:	0c25      	lsrs	r5, r4, #16
  40253a:	fbbc f8fa 	udiv	r8, ip, sl
  40253e:	fa1f f987 	uxth.w	r9, r7
  402542:	fb0a cc18 	mls	ip, sl, r8, ip
  402546:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40254a:	fb08 f309 	mul.w	r3, r8, r9
  40254e:	42ab      	cmp	r3, r5
  402550:	d90a      	bls.n	402568 <__udivmoddi4+0x6c>
  402552:	19ed      	adds	r5, r5, r7
  402554:	f108 32ff 	add.w	r2, r8, #4294967295
  402558:	f080 8123 	bcs.w	4027a2 <__udivmoddi4+0x2a6>
  40255c:	42ab      	cmp	r3, r5
  40255e:	f240 8120 	bls.w	4027a2 <__udivmoddi4+0x2a6>
  402562:	f1a8 0802 	sub.w	r8, r8, #2
  402566:	443d      	add	r5, r7
  402568:	1aed      	subs	r5, r5, r3
  40256a:	b2a4      	uxth	r4, r4
  40256c:	fbb5 f0fa 	udiv	r0, r5, sl
  402570:	fb0a 5510 	mls	r5, sl, r0, r5
  402574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402578:	fb00 f909 	mul.w	r9, r0, r9
  40257c:	45a1      	cmp	r9, r4
  40257e:	d909      	bls.n	402594 <__udivmoddi4+0x98>
  402580:	19e4      	adds	r4, r4, r7
  402582:	f100 33ff 	add.w	r3, r0, #4294967295
  402586:	f080 810a 	bcs.w	40279e <__udivmoddi4+0x2a2>
  40258a:	45a1      	cmp	r9, r4
  40258c:	f240 8107 	bls.w	40279e <__udivmoddi4+0x2a2>
  402590:	3802      	subs	r0, #2
  402592:	443c      	add	r4, r7
  402594:	eba4 0409 	sub.w	r4, r4, r9
  402598:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40259c:	2100      	movs	r1, #0
  40259e:	2e00      	cmp	r6, #0
  4025a0:	d061      	beq.n	402666 <__udivmoddi4+0x16a>
  4025a2:	fa24 f40e 	lsr.w	r4, r4, lr
  4025a6:	2300      	movs	r3, #0
  4025a8:	6034      	str	r4, [r6, #0]
  4025aa:	6073      	str	r3, [r6, #4]
  4025ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025b0:	428b      	cmp	r3, r1
  4025b2:	d907      	bls.n	4025c4 <__udivmoddi4+0xc8>
  4025b4:	2e00      	cmp	r6, #0
  4025b6:	d054      	beq.n	402662 <__udivmoddi4+0x166>
  4025b8:	2100      	movs	r1, #0
  4025ba:	e886 0021 	stmia.w	r6, {r0, r5}
  4025be:	4608      	mov	r0, r1
  4025c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025c4:	fab3 f183 	clz	r1, r3
  4025c8:	2900      	cmp	r1, #0
  4025ca:	f040 808e 	bne.w	4026ea <__udivmoddi4+0x1ee>
  4025ce:	42ab      	cmp	r3, r5
  4025d0:	d302      	bcc.n	4025d8 <__udivmoddi4+0xdc>
  4025d2:	4282      	cmp	r2, r0
  4025d4:	f200 80fa 	bhi.w	4027cc <__udivmoddi4+0x2d0>
  4025d8:	1a84      	subs	r4, r0, r2
  4025da:	eb65 0503 	sbc.w	r5, r5, r3
  4025de:	2001      	movs	r0, #1
  4025e0:	46ac      	mov	ip, r5
  4025e2:	2e00      	cmp	r6, #0
  4025e4:	d03f      	beq.n	402666 <__udivmoddi4+0x16a>
  4025e6:	e886 1010 	stmia.w	r6, {r4, ip}
  4025ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025ee:	b912      	cbnz	r2, 4025f6 <__udivmoddi4+0xfa>
  4025f0:	2701      	movs	r7, #1
  4025f2:	fbb7 f7f2 	udiv	r7, r7, r2
  4025f6:	fab7 fe87 	clz	lr, r7
  4025fa:	f1be 0f00 	cmp.w	lr, #0
  4025fe:	d134      	bne.n	40266a <__udivmoddi4+0x16e>
  402600:	1beb      	subs	r3, r5, r7
  402602:	0c3a      	lsrs	r2, r7, #16
  402604:	fa1f fc87 	uxth.w	ip, r7
  402608:	2101      	movs	r1, #1
  40260a:	fbb3 f8f2 	udiv	r8, r3, r2
  40260e:	0c25      	lsrs	r5, r4, #16
  402610:	fb02 3318 	mls	r3, r2, r8, r3
  402614:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402618:	fb0c f308 	mul.w	r3, ip, r8
  40261c:	42ab      	cmp	r3, r5
  40261e:	d907      	bls.n	402630 <__udivmoddi4+0x134>
  402620:	19ed      	adds	r5, r5, r7
  402622:	f108 30ff 	add.w	r0, r8, #4294967295
  402626:	d202      	bcs.n	40262e <__udivmoddi4+0x132>
  402628:	42ab      	cmp	r3, r5
  40262a:	f200 80d1 	bhi.w	4027d0 <__udivmoddi4+0x2d4>
  40262e:	4680      	mov	r8, r0
  402630:	1aed      	subs	r5, r5, r3
  402632:	b2a3      	uxth	r3, r4
  402634:	fbb5 f0f2 	udiv	r0, r5, r2
  402638:	fb02 5510 	mls	r5, r2, r0, r5
  40263c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402640:	fb0c fc00 	mul.w	ip, ip, r0
  402644:	45a4      	cmp	ip, r4
  402646:	d907      	bls.n	402658 <__udivmoddi4+0x15c>
  402648:	19e4      	adds	r4, r4, r7
  40264a:	f100 33ff 	add.w	r3, r0, #4294967295
  40264e:	d202      	bcs.n	402656 <__udivmoddi4+0x15a>
  402650:	45a4      	cmp	ip, r4
  402652:	f200 80b8 	bhi.w	4027c6 <__udivmoddi4+0x2ca>
  402656:	4618      	mov	r0, r3
  402658:	eba4 040c 	sub.w	r4, r4, ip
  40265c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402660:	e79d      	b.n	40259e <__udivmoddi4+0xa2>
  402662:	4631      	mov	r1, r6
  402664:	4630      	mov	r0, r6
  402666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40266a:	f1ce 0420 	rsb	r4, lr, #32
  40266e:	fa05 f30e 	lsl.w	r3, r5, lr
  402672:	fa07 f70e 	lsl.w	r7, r7, lr
  402676:	fa20 f804 	lsr.w	r8, r0, r4
  40267a:	0c3a      	lsrs	r2, r7, #16
  40267c:	fa25 f404 	lsr.w	r4, r5, r4
  402680:	ea48 0803 	orr.w	r8, r8, r3
  402684:	fbb4 f1f2 	udiv	r1, r4, r2
  402688:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40268c:	fb02 4411 	mls	r4, r2, r1, r4
  402690:	fa1f fc87 	uxth.w	ip, r7
  402694:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402698:	fb01 f30c 	mul.w	r3, r1, ip
  40269c:	42ab      	cmp	r3, r5
  40269e:	fa00 f40e 	lsl.w	r4, r0, lr
  4026a2:	d909      	bls.n	4026b8 <__udivmoddi4+0x1bc>
  4026a4:	19ed      	adds	r5, r5, r7
  4026a6:	f101 30ff 	add.w	r0, r1, #4294967295
  4026aa:	f080 808a 	bcs.w	4027c2 <__udivmoddi4+0x2c6>
  4026ae:	42ab      	cmp	r3, r5
  4026b0:	f240 8087 	bls.w	4027c2 <__udivmoddi4+0x2c6>
  4026b4:	3902      	subs	r1, #2
  4026b6:	443d      	add	r5, r7
  4026b8:	1aeb      	subs	r3, r5, r3
  4026ba:	fa1f f588 	uxth.w	r5, r8
  4026be:	fbb3 f0f2 	udiv	r0, r3, r2
  4026c2:	fb02 3310 	mls	r3, r2, r0, r3
  4026c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4026ca:	fb00 f30c 	mul.w	r3, r0, ip
  4026ce:	42ab      	cmp	r3, r5
  4026d0:	d907      	bls.n	4026e2 <__udivmoddi4+0x1e6>
  4026d2:	19ed      	adds	r5, r5, r7
  4026d4:	f100 38ff 	add.w	r8, r0, #4294967295
  4026d8:	d26f      	bcs.n	4027ba <__udivmoddi4+0x2be>
  4026da:	42ab      	cmp	r3, r5
  4026dc:	d96d      	bls.n	4027ba <__udivmoddi4+0x2be>
  4026de:	3802      	subs	r0, #2
  4026e0:	443d      	add	r5, r7
  4026e2:	1aeb      	subs	r3, r5, r3
  4026e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4026e8:	e78f      	b.n	40260a <__udivmoddi4+0x10e>
  4026ea:	f1c1 0720 	rsb	r7, r1, #32
  4026ee:	fa22 f807 	lsr.w	r8, r2, r7
  4026f2:	408b      	lsls	r3, r1
  4026f4:	fa05 f401 	lsl.w	r4, r5, r1
  4026f8:	ea48 0303 	orr.w	r3, r8, r3
  4026fc:	fa20 fe07 	lsr.w	lr, r0, r7
  402700:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402704:	40fd      	lsrs	r5, r7
  402706:	ea4e 0e04 	orr.w	lr, lr, r4
  40270a:	fbb5 f9fc 	udiv	r9, r5, ip
  40270e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402712:	fb0c 5519 	mls	r5, ip, r9, r5
  402716:	fa1f f883 	uxth.w	r8, r3
  40271a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40271e:	fb09 f408 	mul.w	r4, r9, r8
  402722:	42ac      	cmp	r4, r5
  402724:	fa02 f201 	lsl.w	r2, r2, r1
  402728:	fa00 fa01 	lsl.w	sl, r0, r1
  40272c:	d908      	bls.n	402740 <__udivmoddi4+0x244>
  40272e:	18ed      	adds	r5, r5, r3
  402730:	f109 30ff 	add.w	r0, r9, #4294967295
  402734:	d243      	bcs.n	4027be <__udivmoddi4+0x2c2>
  402736:	42ac      	cmp	r4, r5
  402738:	d941      	bls.n	4027be <__udivmoddi4+0x2c2>
  40273a:	f1a9 0902 	sub.w	r9, r9, #2
  40273e:	441d      	add	r5, r3
  402740:	1b2d      	subs	r5, r5, r4
  402742:	fa1f fe8e 	uxth.w	lr, lr
  402746:	fbb5 f0fc 	udiv	r0, r5, ip
  40274a:	fb0c 5510 	mls	r5, ip, r0, r5
  40274e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402752:	fb00 f808 	mul.w	r8, r0, r8
  402756:	45a0      	cmp	r8, r4
  402758:	d907      	bls.n	40276a <__udivmoddi4+0x26e>
  40275a:	18e4      	adds	r4, r4, r3
  40275c:	f100 35ff 	add.w	r5, r0, #4294967295
  402760:	d229      	bcs.n	4027b6 <__udivmoddi4+0x2ba>
  402762:	45a0      	cmp	r8, r4
  402764:	d927      	bls.n	4027b6 <__udivmoddi4+0x2ba>
  402766:	3802      	subs	r0, #2
  402768:	441c      	add	r4, r3
  40276a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40276e:	eba4 0408 	sub.w	r4, r4, r8
  402772:	fba0 8902 	umull	r8, r9, r0, r2
  402776:	454c      	cmp	r4, r9
  402778:	46c6      	mov	lr, r8
  40277a:	464d      	mov	r5, r9
  40277c:	d315      	bcc.n	4027aa <__udivmoddi4+0x2ae>
  40277e:	d012      	beq.n	4027a6 <__udivmoddi4+0x2aa>
  402780:	b156      	cbz	r6, 402798 <__udivmoddi4+0x29c>
  402782:	ebba 030e 	subs.w	r3, sl, lr
  402786:	eb64 0405 	sbc.w	r4, r4, r5
  40278a:	fa04 f707 	lsl.w	r7, r4, r7
  40278e:	40cb      	lsrs	r3, r1
  402790:	431f      	orrs	r7, r3
  402792:	40cc      	lsrs	r4, r1
  402794:	6037      	str	r7, [r6, #0]
  402796:	6074      	str	r4, [r6, #4]
  402798:	2100      	movs	r1, #0
  40279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40279e:	4618      	mov	r0, r3
  4027a0:	e6f8      	b.n	402594 <__udivmoddi4+0x98>
  4027a2:	4690      	mov	r8, r2
  4027a4:	e6e0      	b.n	402568 <__udivmoddi4+0x6c>
  4027a6:	45c2      	cmp	sl, r8
  4027a8:	d2ea      	bcs.n	402780 <__udivmoddi4+0x284>
  4027aa:	ebb8 0e02 	subs.w	lr, r8, r2
  4027ae:	eb69 0503 	sbc.w	r5, r9, r3
  4027b2:	3801      	subs	r0, #1
  4027b4:	e7e4      	b.n	402780 <__udivmoddi4+0x284>
  4027b6:	4628      	mov	r0, r5
  4027b8:	e7d7      	b.n	40276a <__udivmoddi4+0x26e>
  4027ba:	4640      	mov	r0, r8
  4027bc:	e791      	b.n	4026e2 <__udivmoddi4+0x1e6>
  4027be:	4681      	mov	r9, r0
  4027c0:	e7be      	b.n	402740 <__udivmoddi4+0x244>
  4027c2:	4601      	mov	r1, r0
  4027c4:	e778      	b.n	4026b8 <__udivmoddi4+0x1bc>
  4027c6:	3802      	subs	r0, #2
  4027c8:	443c      	add	r4, r7
  4027ca:	e745      	b.n	402658 <__udivmoddi4+0x15c>
  4027cc:	4608      	mov	r0, r1
  4027ce:	e708      	b.n	4025e2 <__udivmoddi4+0xe6>
  4027d0:	f1a8 0802 	sub.w	r8, r8, #2
  4027d4:	443d      	add	r5, r7
  4027d6:	e72b      	b.n	402630 <__udivmoddi4+0x134>

004027d8 <__aeabi_idiv0>:
  4027d8:	4770      	bx	lr
  4027da:	bf00      	nop

004027dc <__libc_init_array>:
  4027dc:	b570      	push	{r4, r5, r6, lr}
  4027de:	4e0f      	ldr	r6, [pc, #60]	; (40281c <__libc_init_array+0x40>)
  4027e0:	4d0f      	ldr	r5, [pc, #60]	; (402820 <__libc_init_array+0x44>)
  4027e2:	1b76      	subs	r6, r6, r5
  4027e4:	10b6      	asrs	r6, r6, #2
  4027e6:	bf18      	it	ne
  4027e8:	2400      	movne	r4, #0
  4027ea:	d005      	beq.n	4027f8 <__libc_init_array+0x1c>
  4027ec:	3401      	adds	r4, #1
  4027ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4027f2:	4798      	blx	r3
  4027f4:	42a6      	cmp	r6, r4
  4027f6:	d1f9      	bne.n	4027ec <__libc_init_array+0x10>
  4027f8:	4e0a      	ldr	r6, [pc, #40]	; (402824 <__libc_init_array+0x48>)
  4027fa:	4d0b      	ldr	r5, [pc, #44]	; (402828 <__libc_init_array+0x4c>)
  4027fc:	1b76      	subs	r6, r6, r5
  4027fe:	f000 f8cd 	bl	40299c <_init>
  402802:	10b6      	asrs	r6, r6, #2
  402804:	bf18      	it	ne
  402806:	2400      	movne	r4, #0
  402808:	d006      	beq.n	402818 <__libc_init_array+0x3c>
  40280a:	3401      	adds	r4, #1
  40280c:	f855 3b04 	ldr.w	r3, [r5], #4
  402810:	4798      	blx	r3
  402812:	42a6      	cmp	r6, r4
  402814:	d1f9      	bne.n	40280a <__libc_init_array+0x2e>
  402816:	bd70      	pop	{r4, r5, r6, pc}
  402818:	bd70      	pop	{r4, r5, r6, pc}
  40281a:	bf00      	nop
  40281c:	004029a8 	.word	0x004029a8
  402820:	004029a8 	.word	0x004029a8
  402824:	004029b0 	.word	0x004029b0
  402828:	004029a8 	.word	0x004029a8

0040282c <register_fini>:
  40282c:	4b02      	ldr	r3, [pc, #8]	; (402838 <register_fini+0xc>)
  40282e:	b113      	cbz	r3, 402836 <register_fini+0xa>
  402830:	4802      	ldr	r0, [pc, #8]	; (40283c <register_fini+0x10>)
  402832:	f000 b805 	b.w	402840 <atexit>
  402836:	4770      	bx	lr
  402838:	00000000 	.word	0x00000000
  40283c:	0040284d 	.word	0x0040284d

00402840 <atexit>:
  402840:	2300      	movs	r3, #0
  402842:	4601      	mov	r1, r0
  402844:	461a      	mov	r2, r3
  402846:	4618      	mov	r0, r3
  402848:	f000 b81e 	b.w	402888 <__register_exitproc>

0040284c <__libc_fini_array>:
  40284c:	b538      	push	{r3, r4, r5, lr}
  40284e:	4c0a      	ldr	r4, [pc, #40]	; (402878 <__libc_fini_array+0x2c>)
  402850:	4d0a      	ldr	r5, [pc, #40]	; (40287c <__libc_fini_array+0x30>)
  402852:	1b64      	subs	r4, r4, r5
  402854:	10a4      	asrs	r4, r4, #2
  402856:	d00a      	beq.n	40286e <__libc_fini_array+0x22>
  402858:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40285c:	3b01      	subs	r3, #1
  40285e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402862:	3c01      	subs	r4, #1
  402864:	f855 3904 	ldr.w	r3, [r5], #-4
  402868:	4798      	blx	r3
  40286a:	2c00      	cmp	r4, #0
  40286c:	d1f9      	bne.n	402862 <__libc_fini_array+0x16>
  40286e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402872:	f000 b89d 	b.w	4029b0 <_fini>
  402876:	bf00      	nop
  402878:	004029c0 	.word	0x004029c0
  40287c:	004029bc 	.word	0x004029bc

00402880 <__retarget_lock_acquire_recursive>:
  402880:	4770      	bx	lr
  402882:	bf00      	nop

00402884 <__retarget_lock_release_recursive>:
  402884:	4770      	bx	lr
  402886:	bf00      	nop

00402888 <__register_exitproc>:
  402888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40288c:	4d2c      	ldr	r5, [pc, #176]	; (402940 <__register_exitproc+0xb8>)
  40288e:	4606      	mov	r6, r0
  402890:	6828      	ldr	r0, [r5, #0]
  402892:	4698      	mov	r8, r3
  402894:	460f      	mov	r7, r1
  402896:	4691      	mov	r9, r2
  402898:	f7ff fff2 	bl	402880 <__retarget_lock_acquire_recursive>
  40289c:	4b29      	ldr	r3, [pc, #164]	; (402944 <__register_exitproc+0xbc>)
  40289e:	681c      	ldr	r4, [r3, #0]
  4028a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4028a4:	2b00      	cmp	r3, #0
  4028a6:	d03e      	beq.n	402926 <__register_exitproc+0x9e>
  4028a8:	685a      	ldr	r2, [r3, #4]
  4028aa:	2a1f      	cmp	r2, #31
  4028ac:	dc1c      	bgt.n	4028e8 <__register_exitproc+0x60>
  4028ae:	f102 0e01 	add.w	lr, r2, #1
  4028b2:	b176      	cbz	r6, 4028d2 <__register_exitproc+0x4a>
  4028b4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4028b8:	2401      	movs	r4, #1
  4028ba:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4028be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4028c2:	4094      	lsls	r4, r2
  4028c4:	4320      	orrs	r0, r4
  4028c6:	2e02      	cmp	r6, #2
  4028c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4028cc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4028d0:	d023      	beq.n	40291a <__register_exitproc+0x92>
  4028d2:	3202      	adds	r2, #2
  4028d4:	f8c3 e004 	str.w	lr, [r3, #4]
  4028d8:	6828      	ldr	r0, [r5, #0]
  4028da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4028de:	f7ff ffd1 	bl	402884 <__retarget_lock_release_recursive>
  4028e2:	2000      	movs	r0, #0
  4028e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4028e8:	4b17      	ldr	r3, [pc, #92]	; (402948 <__register_exitproc+0xc0>)
  4028ea:	b30b      	cbz	r3, 402930 <__register_exitproc+0xa8>
  4028ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4028f0:	f3af 8000 	nop.w
  4028f4:	4603      	mov	r3, r0
  4028f6:	b1d8      	cbz	r0, 402930 <__register_exitproc+0xa8>
  4028f8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4028fc:	6002      	str	r2, [r0, #0]
  4028fe:	2100      	movs	r1, #0
  402900:	6041      	str	r1, [r0, #4]
  402902:	460a      	mov	r2, r1
  402904:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402908:	f04f 0e01 	mov.w	lr, #1
  40290c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402910:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402914:	2e00      	cmp	r6, #0
  402916:	d0dc      	beq.n	4028d2 <__register_exitproc+0x4a>
  402918:	e7cc      	b.n	4028b4 <__register_exitproc+0x2c>
  40291a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40291e:	430c      	orrs	r4, r1
  402920:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402924:	e7d5      	b.n	4028d2 <__register_exitproc+0x4a>
  402926:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40292a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40292e:	e7bb      	b.n	4028a8 <__register_exitproc+0x20>
  402930:	6828      	ldr	r0, [r5, #0]
  402932:	f7ff ffa7 	bl	402884 <__retarget_lock_release_recursive>
  402936:	f04f 30ff 	mov.w	r0, #4294967295
  40293a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40293e:	bf00      	nop
  402940:	20000438 	.word	0x20000438
  402944:	00402998 	.word	0x00402998
  402948:	00000000 	.word	0x00000000
  40294c:	0001c200 	.word	0x0001c200
  402950:	000000c0 	.word	0x000000c0
  402954:	00000800 	.word	0x00000800
	...
  402964:	20746573 	.word	0x20746573
  402968:	63207973 	.word	0x63207973
  40296c:	6f207020 	.word	0x6f207020
  402970:	0a0d6666 	.word	0x0a0d6666
  402974:	00000000 	.word	0x00000000
  402978:	20746573 	.word	0x20746573
  40297c:	63207973 	.word	0x63207973
  402980:	6f206520 	.word	0x6f206520
  402984:	0a0d6666 	.word	0x0a0d6666
  402988:	00000000 	.word	0x00000000
  40298c:	75746573 	.word	0x75746573
  402990:	65772070 	.word	0x65772070
  402994:	000a0d62 	.word	0x000a0d62

00402998 <_global_impure_ptr>:
  402998:	20000010                                ... 

0040299c <_init>:
  40299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40299e:	bf00      	nop
  4029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4029a2:	bc08      	pop	{r3}
  4029a4:	469e      	mov	lr, r3
  4029a6:	4770      	bx	lr

004029a8 <__init_array_start>:
  4029a8:	0040282d 	.word	0x0040282d

004029ac <__frame_dummy_init_array_entry>:
  4029ac:	004000f1                                ..@.

004029b0 <_fini>:
  4029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4029b2:	bf00      	nop
  4029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4029b6:	bc08      	pop	{r3}
  4029b8:	469e      	mov	lr, r3
  4029ba:	4770      	bx	lr

004029bc <__fini_array_start>:
  4029bc:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	08d8 2000                                   ... 
