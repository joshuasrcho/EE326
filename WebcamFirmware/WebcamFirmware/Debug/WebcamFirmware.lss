
WebcamFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e04  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403e04  00403e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  00403e0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004c0  2000043c  00404248  0002043c  2**2
                  ALLOC
  4 .stack        00003004  200008fc  00404708  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016017  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d35  00000000  00000000  000364d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006c18  00000000  00000000  0003920b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bf8  00000000  00000000  0003fe23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b30  00000000  00000000  00040a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007396  00000000  00000000  0004154b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ee3f  00000000  00000000  000488e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000516bc  00000000  00000000  00057720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000033dc  00000000  00000000  000a8ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 39 00 20 e5 27 40 00 ad 28 40 00 ad 28 40 00     .9. .'@..(@..(@.
  400010:	ad 28 40 00 ad 28 40 00 ad 28 40 00 00 00 00 00     .(@..(@..(@.....
	...
  40002c:	ad 28 40 00 ad 28 40 00 00 00 00 00 ad 28 40 00     .(@..(@......(@.
  40003c:	ad 28 40 00 ad 28 40 00 ad 28 40 00 ad 28 40 00     .(@..(@..(@..(@.
  40004c:	ad 28 40 00 ad 28 40 00 ad 28 40 00 ad 28 40 00     .(@..(@..(@..(@.
  40005c:	00 00 00 00 ad 28 40 00 ad 28 40 00 00 00 00 00     .....(@..(@.....
  40006c:	49 0b 40 00 61 0b 40 00 00 00 00 00 b9 22 40 00     I.@.a.@......"@.
  40007c:	ad 28 40 00 00 00 00 00 00 00 00 00 ad 28 40 00     .(@..........(@.
  40008c:	ad 28 40 00 ad 28 40 00 ad 28 40 00 ad 28 40 00     .(@..(@..(@..(@.
  40009c:	f9 20 40 00 ad 28 40 00 ad 28 40 00 00 00 00 00     . @..(@..(@.....
	...
  4000b4:	ad 28 40 00 ad 28 40 00 ad 28 40 00 ad 28 40 00     .(@..(@..(@..(@.
  4000c4:	ad 28 40 00 ad 28 40 00                             .(@..(@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403e0c 	.word	0x00403e0c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00403e0c 	.word	0x00403e0c
  40012c:	20000440 	.word	0x20000440
  400130:	00403e0c 	.word	0x00403e0c
  400134:	00000000 	.word	0x00000000

00400138 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400138:	b480      	push	{r7}
  40013a:	b087      	sub	sp, #28
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400144:	68fa      	ldr	r2, [r7, #12]
  400146:	68bb      	ldr	r3, [r7, #8]
  400148:	019b      	lsls	r3, r3, #6
  40014a:	4413      	add	r3, r2
  40014c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40014e:	697b      	ldr	r3, [r7, #20]
  400150:	2202      	movs	r2, #2
  400152:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f04f 32ff 	mov.w	r2, #4294967295
  40015a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40015c:	697b      	ldr	r3, [r7, #20]
  40015e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400160:	697b      	ldr	r3, [r7, #20]
  400162:	687a      	ldr	r2, [r7, #4]
  400164:	605a      	str	r2, [r3, #4]
}
  400166:	bf00      	nop
  400168:	371c      	adds	r7, #28
  40016a:	46bd      	mov	sp, r7
  40016c:	bc80      	pop	{r7}
  40016e:	4770      	bx	lr

00400170 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
  400178:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40017a:	687a      	ldr	r2, [r7, #4]
  40017c:	683b      	ldr	r3, [r7, #0]
  40017e:	019b      	lsls	r3, r3, #6
  400180:	4413      	add	r3, r2
  400182:	2205      	movs	r2, #5
  400184:	601a      	str	r2, [r3, #0]
}
  400186:	bf00      	nop
  400188:	370c      	adds	r7, #12
  40018a:	46bd      	mov	sp, r7
  40018c:	bc80      	pop	{r7}
  40018e:	4770      	bx	lr

00400190 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400190:	b480      	push	{r7}
  400192:	b085      	sub	sp, #20
  400194:	af00      	add	r7, sp, #0
  400196:	60f8      	str	r0, [r7, #12]
  400198:	60b9      	str	r1, [r7, #8]
  40019a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40019c:	68fa      	ldr	r2, [r7, #12]
  40019e:	68bb      	ldr	r3, [r7, #8]
  4001a0:	019b      	lsls	r3, r3, #6
  4001a2:	4413      	add	r3, r2
  4001a4:	331c      	adds	r3, #28
  4001a6:	687a      	ldr	r2, [r7, #4]
  4001a8:	601a      	str	r2, [r3, #0]
}
  4001aa:	bf00      	nop
  4001ac:	3714      	adds	r7, #20
  4001ae:	46bd      	mov	sp, r7
  4001b0:	bc80      	pop	{r7}
  4001b2:	4770      	bx	lr

004001b4 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4001b4:	b480      	push	{r7}
  4001b6:	b087      	sub	sp, #28
  4001b8:	af00      	add	r7, sp, #0
  4001ba:	60f8      	str	r0, [r7, #12]
  4001bc:	60b9      	str	r1, [r7, #8]
  4001be:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001c0:	68fa      	ldr	r2, [r7, #12]
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	019b      	lsls	r3, r3, #6
  4001c6:	4413      	add	r3, r2
  4001c8:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  4001ca:	697b      	ldr	r3, [r7, #20]
  4001cc:	687a      	ldr	r2, [r7, #4]
  4001ce:	625a      	str	r2, [r3, #36]	; 0x24
}
  4001d0:	bf00      	nop
  4001d2:	371c      	adds	r7, #28
  4001d4:	46bd      	mov	sp, r7
  4001d6:	bc80      	pop	{r7}
  4001d8:	4770      	bx	lr

004001da <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4001da:	b480      	push	{r7}
  4001dc:	b085      	sub	sp, #20
  4001de:	af00      	add	r7, sp, #0
  4001e0:	6078      	str	r0, [r7, #4]
  4001e2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001e4:	687a      	ldr	r2, [r7, #4]
  4001e6:	683b      	ldr	r3, [r7, #0]
  4001e8:	019b      	lsls	r3, r3, #6
  4001ea:	4413      	add	r3, r2
  4001ec:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4001ee:	68fb      	ldr	r3, [r7, #12]
  4001f0:	6a1b      	ldr	r3, [r3, #32]
}
  4001f2:	4618      	mov	r0, r3
  4001f4:	3714      	adds	r7, #20
  4001f6:	46bd      	mov	sp, r7
  4001f8:	bc80      	pop	{r7}
  4001fa:	4770      	bx	lr

004001fc <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4001fc:	b480      	push	{r7}
  4001fe:	b08d      	sub	sp, #52	; 0x34
  400200:	af00      	add	r7, sp, #0
  400202:	60f8      	str	r0, [r7, #12]
  400204:	60b9      	str	r1, [r7, #8]
  400206:	607a      	str	r2, [r7, #4]
  400208:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40020a:	2302      	movs	r3, #2
  40020c:	613b      	str	r3, [r7, #16]
  40020e:	2308      	movs	r3, #8
  400210:	617b      	str	r3, [r7, #20]
  400212:	2320      	movs	r3, #32
  400214:	61bb      	str	r3, [r7, #24]
  400216:	2380      	movs	r3, #128	; 0x80
  400218:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40021c:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40021e:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400220:	2300      	movs	r3, #0
  400222:	62fb      	str	r3, [r7, #44]	; 0x2c
  400224:	e01a      	b.n	40025c <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400228:	009b      	lsls	r3, r3, #2
  40022a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40022e:	4413      	add	r3, r2
  400230:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400234:	68ba      	ldr	r2, [r7, #8]
  400236:	fbb2 f3f3 	udiv	r3, r2, r3
  40023a:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  40023c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40023e:	0c1b      	lsrs	r3, r3, #16
  400240:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400242:	68fa      	ldr	r2, [r7, #12]
  400244:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400246:	429a      	cmp	r2, r3
  400248:	d901      	bls.n	40024e <tc_find_mck_divisor+0x52>
			return 0;
  40024a:	2300      	movs	r3, #0
  40024c:	e023      	b.n	400296 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40024e:	68fa      	ldr	r2, [r7, #12]
  400250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400252:	429a      	cmp	r2, r3
  400254:	d206      	bcs.n	400264 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400258:	3301      	adds	r3, #1
  40025a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  40025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40025e:	2b04      	cmp	r3, #4
  400260:	d9e1      	bls.n	400226 <tc_find_mck_divisor+0x2a>
  400262:	e000      	b.n	400266 <tc_find_mck_divisor+0x6a>
			break;
  400264:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400268:	2b04      	cmp	r3, #4
  40026a:	d901      	bls.n	400270 <tc_find_mck_divisor+0x74>
		return 0;
  40026c:	2300      	movs	r3, #0
  40026e:	e012      	b.n	400296 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400270:	687b      	ldr	r3, [r7, #4]
  400272:	2b00      	cmp	r3, #0
  400274:	d008      	beq.n	400288 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400278:	009b      	lsls	r3, r3, #2
  40027a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40027e:	4413      	add	r3, r2
  400280:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400288:	683b      	ldr	r3, [r7, #0]
  40028a:	2b00      	cmp	r3, #0
  40028c:	d002      	beq.n	400294 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40028e:	683b      	ldr	r3, [r7, #0]
  400290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400292:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400294:	2301      	movs	r3, #1
}
  400296:	4618      	mov	r0, r3
  400298:	3734      	adds	r7, #52	; 0x34
  40029a:	46bd      	mov	sp, r7
  40029c:	bc80      	pop	{r7}
  40029e:	4770      	bx	lr

004002a0 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4002a0:	b480      	push	{r7}
  4002a2:	b083      	sub	sp, #12
  4002a4:	af00      	add	r7, sp, #0
  4002a6:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4002a8:	687b      	ldr	r3, [r7, #4]
  4002aa:	2208      	movs	r2, #8
  4002ac:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4002ae:	687b      	ldr	r3, [r7, #4]
  4002b0:	2220      	movs	r2, #32
  4002b2:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2204      	movs	r2, #4
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	b084      	sub	sp, #16
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	6078      	str	r0, [r7, #4]
  4002cc:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4002ce:	2300      	movs	r3, #0
  4002d0:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4002d2:	687b      	ldr	r3, [r7, #4]
  4002d4:	f04f 32ff 	mov.w	r2, #4294967295
  4002d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4002da:	687b      	ldr	r3, [r7, #4]
  4002dc:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4002de:	6878      	ldr	r0, [r7, #4]
  4002e0:	4b0e      	ldr	r3, [pc, #56]	; (40031c <twi_master_init+0x58>)
  4002e2:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4002e4:	6878      	ldr	r0, [r7, #4]
  4002e6:	4b0e      	ldr	r3, [pc, #56]	; (400320 <twi_master_init+0x5c>)
  4002e8:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4002ea:	683b      	ldr	r3, [r7, #0]
  4002ec:	6859      	ldr	r1, [r3, #4]
  4002ee:	683b      	ldr	r3, [r7, #0]
  4002f0:	681b      	ldr	r3, [r3, #0]
  4002f2:	461a      	mov	r2, r3
  4002f4:	6878      	ldr	r0, [r7, #4]
  4002f6:	4b0b      	ldr	r3, [pc, #44]	; (400324 <twi_master_init+0x60>)
  4002f8:	4798      	blx	r3
  4002fa:	4603      	mov	r3, r0
  4002fc:	2b01      	cmp	r3, #1
  4002fe:	d101      	bne.n	400304 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400300:	2301      	movs	r3, #1
  400302:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400304:	683b      	ldr	r3, [r7, #0]
  400306:	7a5b      	ldrb	r3, [r3, #9]
  400308:	2b01      	cmp	r3, #1
  40030a:	d102      	bne.n	400312 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  40030c:	687b      	ldr	r3, [r7, #4]
  40030e:	2240      	movs	r2, #64	; 0x40
  400310:	601a      	str	r2, [r3, #0]
	}

	return status;
  400312:	68fb      	ldr	r3, [r7, #12]
}
  400314:	4618      	mov	r0, r3
  400316:	3710      	adds	r7, #16
  400318:	46bd      	mov	sp, r7
  40031a:	bd80      	pop	{r7, pc}
  40031c:	00400661 	.word	0x00400661
  400320:	004002a1 	.word	0x004002a1
  400324:	00400329 	.word	0x00400329

00400328 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400328:	b480      	push	{r7}
  40032a:	b089      	sub	sp, #36	; 0x24
  40032c:	af00      	add	r7, sp, #0
  40032e:	60f8      	str	r0, [r7, #12]
  400330:	60b9      	str	r1, [r7, #8]
  400332:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400334:	2300      	movs	r3, #0
  400336:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400338:	68bb      	ldr	r3, [r7, #8]
  40033a:	4a34      	ldr	r2, [pc, #208]	; (40040c <twi_set_speed+0xe4>)
  40033c:	4293      	cmp	r3, r2
  40033e:	d901      	bls.n	400344 <twi_set_speed+0x1c>
		return FAIL;
  400340:	2301      	movs	r3, #1
  400342:	e05d      	b.n	400400 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400344:	68bb      	ldr	r3, [r7, #8]
  400346:	4a32      	ldr	r2, [pc, #200]	; (400410 <twi_set_speed+0xe8>)
  400348:	4293      	cmp	r3, r2
  40034a:	d937      	bls.n	4003bc <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	4a31      	ldr	r2, [pc, #196]	; (400414 <twi_set_speed+0xec>)
  400350:	fba2 2303 	umull	r2, r3, r2, r3
  400354:	0b9b      	lsrs	r3, r3, #14
  400356:	3b04      	subs	r3, #4
  400358:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40035a:	68ba      	ldr	r2, [r7, #8]
  40035c:	4b2e      	ldr	r3, [pc, #184]	; (400418 <twi_set_speed+0xf0>)
  40035e:	4413      	add	r3, r2
  400360:	009b      	lsls	r3, r3, #2
  400362:	687a      	ldr	r2, [r7, #4]
  400364:	fbb2 f3f3 	udiv	r3, r2, r3
  400368:	3b04      	subs	r3, #4
  40036a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40036c:	e005      	b.n	40037a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  40036e:	69fb      	ldr	r3, [r7, #28]
  400370:	3301      	adds	r3, #1
  400372:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400374:	697b      	ldr	r3, [r7, #20]
  400376:	085b      	lsrs	r3, r3, #1
  400378:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40037a:	697b      	ldr	r3, [r7, #20]
  40037c:	2bff      	cmp	r3, #255	; 0xff
  40037e:	d909      	bls.n	400394 <twi_set_speed+0x6c>
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	2b06      	cmp	r3, #6
  400384:	d9f3      	bls.n	40036e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400386:	e005      	b.n	400394 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400388:	69fb      	ldr	r3, [r7, #28]
  40038a:	3301      	adds	r3, #1
  40038c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40038e:	693b      	ldr	r3, [r7, #16]
  400390:	085b      	lsrs	r3, r3, #1
  400392:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400394:	693b      	ldr	r3, [r7, #16]
  400396:	2bff      	cmp	r3, #255	; 0xff
  400398:	d902      	bls.n	4003a0 <twi_set_speed+0x78>
  40039a:	69fb      	ldr	r3, [r7, #28]
  40039c:	2b06      	cmp	r3, #6
  40039e:	d9f3      	bls.n	400388 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003a0:	697b      	ldr	r3, [r7, #20]
  4003a2:	b2da      	uxtb	r2, r3
  4003a4:	693b      	ldr	r3, [r7, #16]
  4003a6:	021b      	lsls	r3, r3, #8
  4003a8:	b29b      	uxth	r3, r3
  4003aa:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4003ac:	69fb      	ldr	r3, [r7, #28]
  4003ae:	041b      	lsls	r3, r3, #16
  4003b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003b4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4003b6:	68fb      	ldr	r3, [r7, #12]
  4003b8:	611a      	str	r2, [r3, #16]
  4003ba:	e020      	b.n	4003fe <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4003bc:	68bb      	ldr	r3, [r7, #8]
  4003be:	005b      	lsls	r3, r3, #1
  4003c0:	687a      	ldr	r2, [r7, #4]
  4003c2:	fbb2 f3f3 	udiv	r3, r2, r3
  4003c6:	3b04      	subs	r3, #4
  4003c8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003ca:	e005      	b.n	4003d8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4003cc:	69fb      	ldr	r3, [r7, #28]
  4003ce:	3301      	adds	r3, #1
  4003d0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4003d2:	69bb      	ldr	r3, [r7, #24]
  4003d4:	085b      	lsrs	r3, r3, #1
  4003d6:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003d8:	69bb      	ldr	r3, [r7, #24]
  4003da:	2bff      	cmp	r3, #255	; 0xff
  4003dc:	d902      	bls.n	4003e4 <twi_set_speed+0xbc>
  4003de:	69fb      	ldr	r3, [r7, #28]
  4003e0:	2b06      	cmp	r3, #6
  4003e2:	d9f3      	bls.n	4003cc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4003e4:	69bb      	ldr	r3, [r7, #24]
  4003e6:	b2da      	uxtb	r2, r3
  4003e8:	69bb      	ldr	r3, [r7, #24]
  4003ea:	021b      	lsls	r3, r3, #8
  4003ec:	b29b      	uxth	r3, r3
  4003ee:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  4003f0:	69fb      	ldr	r3, [r7, #28]
  4003f2:	041b      	lsls	r3, r3, #16
  4003f4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4003f8:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4003fa:	68fb      	ldr	r3, [r7, #12]
  4003fc:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  4003fe:	2300      	movs	r3, #0
}
  400400:	4618      	mov	r0, r3
  400402:	3724      	adds	r7, #36	; 0x24
  400404:	46bd      	mov	sp, r7
  400406:	bc80      	pop	{r7}
  400408:	4770      	bx	lr
  40040a:	bf00      	nop
  40040c:	00061a80 	.word	0x00061a80
  400410:	0005dc00 	.word	0x0005dc00
  400414:	057619f1 	.word	0x057619f1
  400418:	3ffd1200 	.word	0x3ffd1200

0040041c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  40041c:	b480      	push	{r7}
  40041e:	b085      	sub	sp, #20
  400420:	af00      	add	r7, sp, #0
  400422:	6078      	str	r0, [r7, #4]
  400424:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  400426:	683b      	ldr	r3, [r7, #0]
  400428:	2b00      	cmp	r3, #0
  40042a:	d101      	bne.n	400430 <twi_mk_addr+0x14>
		return 0;
  40042c:	2300      	movs	r3, #0
  40042e:	e01d      	b.n	40046c <twi_mk_addr+0x50>

	val = addr[0];
  400430:	687b      	ldr	r3, [r7, #4]
  400432:	781b      	ldrb	r3, [r3, #0]
  400434:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  400436:	683b      	ldr	r3, [r7, #0]
  400438:	2b01      	cmp	r3, #1
  40043a:	dd09      	ble.n	400450 <twi_mk_addr+0x34>
		val <<= 8;
  40043c:	68fb      	ldr	r3, [r7, #12]
  40043e:	021b      	lsls	r3, r3, #8
  400440:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  400442:	687b      	ldr	r3, [r7, #4]
  400444:	3301      	adds	r3, #1
  400446:	781b      	ldrb	r3, [r3, #0]
  400448:	461a      	mov	r2, r3
  40044a:	68fb      	ldr	r3, [r7, #12]
  40044c:	4313      	orrs	r3, r2
  40044e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400450:	683b      	ldr	r3, [r7, #0]
  400452:	2b02      	cmp	r3, #2
  400454:	dd09      	ble.n	40046a <twi_mk_addr+0x4e>
		val <<= 8;
  400456:	68fb      	ldr	r3, [r7, #12]
  400458:	021b      	lsls	r3, r3, #8
  40045a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  40045c:	687b      	ldr	r3, [r7, #4]
  40045e:	3302      	adds	r3, #2
  400460:	781b      	ldrb	r3, [r3, #0]
  400462:	461a      	mov	r2, r3
  400464:	68fb      	ldr	r3, [r7, #12]
  400466:	4313      	orrs	r3, r2
  400468:	60fb      	str	r3, [r7, #12]
	}
	return val;
  40046a:	68fb      	ldr	r3, [r7, #12]
}
  40046c:	4618      	mov	r0, r3
  40046e:	3714      	adds	r7, #20
  400470:	46bd      	mov	sp, r7
  400472:	bc80      	pop	{r7}
  400474:	4770      	bx	lr
	...

00400478 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400478:	b580      	push	{r7, lr}
  40047a:	b088      	sub	sp, #32
  40047c:	af00      	add	r7, sp, #0
  40047e:	6078      	str	r0, [r7, #4]
  400480:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400482:	683b      	ldr	r3, [r7, #0]
  400484:	68db      	ldr	r3, [r3, #12]
  400486:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  400488:	683b      	ldr	r3, [r7, #0]
  40048a:	689b      	ldr	r3, [r3, #8]
  40048c:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  40048e:	2300      	movs	r3, #0
  400490:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  400492:	f247 5330 	movw	r3, #30000	; 0x7530
  400496:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  400498:	69fb      	ldr	r3, [r7, #28]
  40049a:	2b00      	cmp	r3, #0
  40049c:	d101      	bne.n	4004a2 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  40049e:	2301      	movs	r3, #1
  4004a0:	e069      	b.n	400576 <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4004a2:	687b      	ldr	r3, [r7, #4]
  4004a4:	2200      	movs	r2, #0
  4004a6:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4004a8:	683b      	ldr	r3, [r7, #0]
  4004aa:	7c1b      	ldrb	r3, [r3, #16]
  4004ac:	041b      	lsls	r3, r3, #16
  4004ae:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4004b2:	683b      	ldr	r3, [r7, #0]
  4004b4:	685b      	ldr	r3, [r3, #4]
  4004b6:	021b      	lsls	r3, r3, #8
  4004b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4004bc:	4313      	orrs	r3, r2
  4004be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  4004c2:	687b      	ldr	r3, [r7, #4]
  4004c4:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4004c6:	687b      	ldr	r3, [r7, #4]
  4004c8:	2200      	movs	r2, #0
  4004ca:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4004cc:	683a      	ldr	r2, [r7, #0]
  4004ce:	683b      	ldr	r3, [r7, #0]
  4004d0:	685b      	ldr	r3, [r3, #4]
  4004d2:	4619      	mov	r1, r3
  4004d4:	4610      	mov	r0, r2
  4004d6:	4b2a      	ldr	r3, [pc, #168]	; (400580 <twi_master_read+0x108>)
  4004d8:	4798      	blx	r3
  4004da:	4602      	mov	r2, r0
  4004dc:	687b      	ldr	r3, [r7, #4]
  4004de:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4004e0:	69fb      	ldr	r3, [r7, #28]
  4004e2:	2b01      	cmp	r3, #1
  4004e4:	d105      	bne.n	4004f2 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4004e6:	687b      	ldr	r3, [r7, #4]
  4004e8:	2203      	movs	r2, #3
  4004ea:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  4004ec:	2301      	movs	r3, #1
  4004ee:	75fb      	strb	r3, [r7, #23]
  4004f0:	e034      	b.n	40055c <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4004f2:	687b      	ldr	r3, [r7, #4]
  4004f4:	2201      	movs	r2, #1
  4004f6:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  4004f8:	2300      	movs	r3, #0
  4004fa:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  4004fc:	e02e      	b.n	40055c <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  4004fe:	687b      	ldr	r3, [r7, #4]
  400500:	6a1b      	ldr	r3, [r3, #32]
  400502:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400504:	68fb      	ldr	r3, [r7, #12]
  400506:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40050a:	2b00      	cmp	r3, #0
  40050c:	d001      	beq.n	400512 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  40050e:	2305      	movs	r3, #5
  400510:	e031      	b.n	400576 <twi_master_read+0xfe>
		}

		if (!timeout--) {
  400512:	693b      	ldr	r3, [r7, #16]
  400514:	1e5a      	subs	r2, r3, #1
  400516:	613a      	str	r2, [r7, #16]
  400518:	2b00      	cmp	r3, #0
  40051a:	d101      	bne.n	400520 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  40051c:	2309      	movs	r3, #9
  40051e:	e02a      	b.n	400576 <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400520:	69fb      	ldr	r3, [r7, #28]
  400522:	2b01      	cmp	r3, #1
  400524:	d107      	bne.n	400536 <twi_master_read+0xbe>
  400526:	7dfb      	ldrb	r3, [r7, #23]
  400528:	2b00      	cmp	r3, #0
  40052a:	d104      	bne.n	400536 <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  40052c:	687b      	ldr	r3, [r7, #4]
  40052e:	2202      	movs	r2, #2
  400530:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  400532:	2301      	movs	r3, #1
  400534:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	f003 0302 	and.w	r3, r3, #2
  40053c:	2b00      	cmp	r3, #0
  40053e:	d100      	bne.n	400542 <twi_master_read+0xca>
			continue;
  400540:	e00c      	b.n	40055c <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  400542:	69bb      	ldr	r3, [r7, #24]
  400544:	1c5a      	adds	r2, r3, #1
  400546:	61ba      	str	r2, [r7, #24]
  400548:	687a      	ldr	r2, [r7, #4]
  40054a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40054c:	b2d2      	uxtb	r2, r2
  40054e:	701a      	strb	r2, [r3, #0]

		cnt--;
  400550:	69fb      	ldr	r3, [r7, #28]
  400552:	3b01      	subs	r3, #1
  400554:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  400556:	f247 5330 	movw	r3, #30000	; 0x7530
  40055a:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  40055c:	69fb      	ldr	r3, [r7, #28]
  40055e:	2b00      	cmp	r3, #0
  400560:	d1cd      	bne.n	4004fe <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400562:	bf00      	nop
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	6a1b      	ldr	r3, [r3, #32]
  400568:	f003 0301 	and.w	r3, r3, #1
  40056c:	2b00      	cmp	r3, #0
  40056e:	d0f9      	beq.n	400564 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  400570:	687b      	ldr	r3, [r7, #4]
  400572:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  400574:	2300      	movs	r3, #0
}
  400576:	4618      	mov	r0, r3
  400578:	3720      	adds	r7, #32
  40057a:	46bd      	mov	sp, r7
  40057c:	bd80      	pop	{r7, pc}
  40057e:	bf00      	nop
  400580:	0040041d 	.word	0x0040041d

00400584 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400584:	b580      	push	{r7, lr}
  400586:	b086      	sub	sp, #24
  400588:	af00      	add	r7, sp, #0
  40058a:	6078      	str	r0, [r7, #4]
  40058c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40058e:	683b      	ldr	r3, [r7, #0]
  400590:	68db      	ldr	r3, [r3, #12]
  400592:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  400594:	683b      	ldr	r3, [r7, #0]
  400596:	689b      	ldr	r3, [r3, #8]
  400598:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  40059a:	697b      	ldr	r3, [r7, #20]
  40059c:	2b00      	cmp	r3, #0
  40059e:	d101      	bne.n	4005a4 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  4005a0:	2301      	movs	r3, #1
  4005a2:	e056      	b.n	400652 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4005a4:	687b      	ldr	r3, [r7, #4]
  4005a6:	2200      	movs	r2, #0
  4005a8:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4005aa:	683b      	ldr	r3, [r7, #0]
  4005ac:	7c1b      	ldrb	r3, [r3, #16]
  4005ae:	041b      	lsls	r3, r3, #16
  4005b0:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4005b4:	683b      	ldr	r3, [r7, #0]
  4005b6:	685b      	ldr	r3, [r3, #4]
  4005b8:	021b      	lsls	r3, r3, #8
  4005ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4005be:	431a      	orrs	r2, r3
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4005c4:	687b      	ldr	r3, [r7, #4]
  4005c6:	2200      	movs	r2, #0
  4005c8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4005ca:	683a      	ldr	r2, [r7, #0]
  4005cc:	683b      	ldr	r3, [r7, #0]
  4005ce:	685b      	ldr	r3, [r3, #4]
  4005d0:	4619      	mov	r1, r3
  4005d2:	4610      	mov	r0, r2
  4005d4:	4b21      	ldr	r3, [pc, #132]	; (40065c <twi_master_write+0xd8>)
  4005d6:	4798      	blx	r3
  4005d8:	4602      	mov	r2, r0
  4005da:	687b      	ldr	r3, [r7, #4]
  4005dc:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  4005de:	e019      	b.n	400614 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  4005e0:	687b      	ldr	r3, [r7, #4]
  4005e2:	6a1b      	ldr	r3, [r3, #32]
  4005e4:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4005ec:	2b00      	cmp	r3, #0
  4005ee:	d001      	beq.n	4005f4 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  4005f0:	2305      	movs	r3, #5
  4005f2:	e02e      	b.n	400652 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	f003 0304 	and.w	r3, r3, #4
  4005fa:	2b00      	cmp	r3, #0
  4005fc:	d100      	bne.n	400600 <twi_master_write+0x7c>
			continue;
  4005fe:	e009      	b.n	400614 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  400600:	693b      	ldr	r3, [r7, #16]
  400602:	1c5a      	adds	r2, r3, #1
  400604:	613a      	str	r2, [r7, #16]
  400606:	781b      	ldrb	r3, [r3, #0]
  400608:	461a      	mov	r2, r3
  40060a:	687b      	ldr	r3, [r7, #4]
  40060c:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  40060e:	697b      	ldr	r3, [r7, #20]
  400610:	3b01      	subs	r3, #1
  400612:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  400614:	697b      	ldr	r3, [r7, #20]
  400616:	2b00      	cmp	r3, #0
  400618:	d1e2      	bne.n	4005e0 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40061a:	687b      	ldr	r3, [r7, #4]
  40061c:	6a1b      	ldr	r3, [r3, #32]
  40061e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400620:	68fb      	ldr	r3, [r7, #12]
  400622:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400626:	2b00      	cmp	r3, #0
  400628:	d001      	beq.n	40062e <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  40062a:	2305      	movs	r3, #5
  40062c:	e011      	b.n	400652 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	f003 0304 	and.w	r3, r3, #4
  400634:	2b00      	cmp	r3, #0
  400636:	d100      	bne.n	40063a <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  400638:	e7ef      	b.n	40061a <twi_master_write+0x96>
			break;
  40063a:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	2202      	movs	r2, #2
  400640:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400642:	bf00      	nop
  400644:	687b      	ldr	r3, [r7, #4]
  400646:	6a1b      	ldr	r3, [r3, #32]
  400648:	f003 0301 	and.w	r3, r3, #1
  40064c:	2b00      	cmp	r3, #0
  40064e:	d0f9      	beq.n	400644 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  400650:	2300      	movs	r3, #0
}
  400652:	4618      	mov	r0, r3
  400654:	3718      	adds	r7, #24
  400656:	46bd      	mov	sp, r7
  400658:	bd80      	pop	{r7, pc}
  40065a:	bf00      	nop
  40065c:	0040041d 	.word	0x0040041d

00400660 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400660:	b480      	push	{r7}
  400662:	b083      	sub	sp, #12
  400664:	af00      	add	r7, sp, #0
  400666:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400668:	687b      	ldr	r3, [r7, #4]
  40066a:	2280      	movs	r2, #128	; 0x80
  40066c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40066e:	687b      	ldr	r3, [r7, #4]
  400670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400672:	bf00      	nop
  400674:	370c      	adds	r7, #12
  400676:	46bd      	mov	sp, r7
  400678:	bc80      	pop	{r7}
  40067a:	4770      	bx	lr

0040067c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40067c:	b480      	push	{r7}
  40067e:	b089      	sub	sp, #36	; 0x24
  400680:	af00      	add	r7, sp, #0
  400682:	60f8      	str	r0, [r7, #12]
  400684:	60b9      	str	r1, [r7, #8]
  400686:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400688:	68bb      	ldr	r3, [r7, #8]
  40068a:	011a      	lsls	r2, r3, #4
  40068c:	687b      	ldr	r3, [r7, #4]
  40068e:	429a      	cmp	r2, r3
  400690:	d802      	bhi.n	400698 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400692:	2310      	movs	r3, #16
  400694:	61fb      	str	r3, [r7, #28]
  400696:	e001      	b.n	40069c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400698:	2308      	movs	r3, #8
  40069a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40069c:	687b      	ldr	r3, [r7, #4]
  40069e:	00da      	lsls	r2, r3, #3
  4006a0:	69fb      	ldr	r3, [r7, #28]
  4006a2:	68b9      	ldr	r1, [r7, #8]
  4006a4:	fb01 f303 	mul.w	r3, r1, r3
  4006a8:	085b      	lsrs	r3, r3, #1
  4006aa:	441a      	add	r2, r3
  4006ac:	69fb      	ldr	r3, [r7, #28]
  4006ae:	68b9      	ldr	r1, [r7, #8]
  4006b0:	fb01 f303 	mul.w	r3, r1, r3
  4006b4:	fbb2 f3f3 	udiv	r3, r2, r3
  4006b8:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4006ba:	69bb      	ldr	r3, [r7, #24]
  4006bc:	08db      	lsrs	r3, r3, #3
  4006be:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4006c0:	69bb      	ldr	r3, [r7, #24]
  4006c2:	f003 0307 	and.w	r3, r3, #7
  4006c6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d003      	beq.n	4006d6 <usart_set_async_baudrate+0x5a>
  4006ce:	697b      	ldr	r3, [r7, #20]
  4006d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4006d4:	d301      	bcc.n	4006da <usart_set_async_baudrate+0x5e>
		return 1;
  4006d6:	2301      	movs	r3, #1
  4006d8:	e00f      	b.n	4006fa <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4006da:	69fb      	ldr	r3, [r7, #28]
  4006dc:	2b08      	cmp	r3, #8
  4006de:	d105      	bne.n	4006ec <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4006e0:	68fb      	ldr	r3, [r7, #12]
  4006e2:	685b      	ldr	r3, [r3, #4]
  4006e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4006e8:	68fb      	ldr	r3, [r7, #12]
  4006ea:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4006ec:	693b      	ldr	r3, [r7, #16]
  4006ee:	041a      	lsls	r2, r3, #16
  4006f0:	697b      	ldr	r3, [r7, #20]
  4006f2:	431a      	orrs	r2, r3
  4006f4:	68fb      	ldr	r3, [r7, #12]
  4006f6:	621a      	str	r2, [r3, #32]

	return 0;
  4006f8:	2300      	movs	r3, #0
}
  4006fa:	4618      	mov	r0, r3
  4006fc:	3724      	adds	r7, #36	; 0x24
  4006fe:	46bd      	mov	sp, r7
  400700:	bc80      	pop	{r7}
  400702:	4770      	bx	lr

00400704 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400704:	b580      	push	{r7, lr}
  400706:	b082      	sub	sp, #8
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40070c:	6878      	ldr	r0, [r7, #4]
  40070e:	4b0f      	ldr	r3, [pc, #60]	; (40074c <usart_reset+0x48>)
  400710:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400712:	687b      	ldr	r3, [r7, #4]
  400714:	2200      	movs	r2, #0
  400716:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400718:	687b      	ldr	r3, [r7, #4]
  40071a:	2200      	movs	r2, #0
  40071c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40071e:	687b      	ldr	r3, [r7, #4]
  400720:	2200      	movs	r2, #0
  400722:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400724:	6878      	ldr	r0, [r7, #4]
  400726:	4b0a      	ldr	r3, [pc, #40]	; (400750 <usart_reset+0x4c>)
  400728:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40072a:	6878      	ldr	r0, [r7, #4]
  40072c:	4b09      	ldr	r3, [pc, #36]	; (400754 <usart_reset+0x50>)
  40072e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400730:	6878      	ldr	r0, [r7, #4]
  400732:	4b09      	ldr	r3, [pc, #36]	; (400758 <usart_reset+0x54>)
  400734:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400736:	6878      	ldr	r0, [r7, #4]
  400738:	4b08      	ldr	r3, [pc, #32]	; (40075c <usart_reset+0x58>)
  40073a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  40073c:	6878      	ldr	r0, [r7, #4]
  40073e:	4b08      	ldr	r3, [pc, #32]	; (400760 <usart_reset+0x5c>)
  400740:	4798      	blx	r3
#endif
}
  400742:	bf00      	nop
  400744:	3708      	adds	r7, #8
  400746:	46bd      	mov	sp, r7
  400748:	bd80      	pop	{r7, pc}
  40074a:	bf00      	nop
  40074c:	004009b5 	.word	0x004009b5
  400750:	00400841 	.word	0x00400841
  400754:	00400871 	.word	0x00400871
  400758:	004008d3 	.word	0x004008d3
  40075c:	00400907 	.word	0x00400907
  400760:	004008ed 	.word	0x004008ed

00400764 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400764:	b580      	push	{r7, lr}
  400766:	b084      	sub	sp, #16
  400768:	af00      	add	r7, sp, #0
  40076a:	60f8      	str	r0, [r7, #12]
  40076c:	60b9      	str	r1, [r7, #8]
  40076e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400770:	68f8      	ldr	r0, [r7, #12]
  400772:	4b1a      	ldr	r3, [pc, #104]	; (4007dc <usart_init_rs232+0x78>)
  400774:	4798      	blx	r3

	ul_reg_val = 0;
  400776:	4b1a      	ldr	r3, [pc, #104]	; (4007e0 <usart_init_rs232+0x7c>)
  400778:	2200      	movs	r2, #0
  40077a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40077c:	68bb      	ldr	r3, [r7, #8]
  40077e:	2b00      	cmp	r3, #0
  400780:	d009      	beq.n	400796 <usart_init_rs232+0x32>
  400782:	68bb      	ldr	r3, [r7, #8]
  400784:	681b      	ldr	r3, [r3, #0]
  400786:	687a      	ldr	r2, [r7, #4]
  400788:	4619      	mov	r1, r3
  40078a:	68f8      	ldr	r0, [r7, #12]
  40078c:	4b15      	ldr	r3, [pc, #84]	; (4007e4 <usart_init_rs232+0x80>)
  40078e:	4798      	blx	r3
  400790:	4603      	mov	r3, r0
  400792:	2b00      	cmp	r3, #0
  400794:	d001      	beq.n	40079a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400796:	2301      	movs	r3, #1
  400798:	e01b      	b.n	4007d2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40079a:	68bb      	ldr	r3, [r7, #8]
  40079c:	685a      	ldr	r2, [r3, #4]
  40079e:	68bb      	ldr	r3, [r7, #8]
  4007a0:	689b      	ldr	r3, [r3, #8]
  4007a2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007a4:	68bb      	ldr	r3, [r7, #8]
  4007a6:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007a8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007aa:	68bb      	ldr	r3, [r7, #8]
  4007ac:	68db      	ldr	r3, [r3, #12]
  4007ae:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007b0:	4b0b      	ldr	r3, [pc, #44]	; (4007e0 <usart_init_rs232+0x7c>)
  4007b2:	681b      	ldr	r3, [r3, #0]
  4007b4:	4313      	orrs	r3, r2
  4007b6:	4a0a      	ldr	r2, [pc, #40]	; (4007e0 <usart_init_rs232+0x7c>)
  4007b8:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4007ba:	4b09      	ldr	r3, [pc, #36]	; (4007e0 <usart_init_rs232+0x7c>)
  4007bc:	681b      	ldr	r3, [r3, #0]
  4007be:	4a08      	ldr	r2, [pc, #32]	; (4007e0 <usart_init_rs232+0x7c>)
  4007c0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4007c2:	68fb      	ldr	r3, [r7, #12]
  4007c4:	685a      	ldr	r2, [r3, #4]
  4007c6:	4b06      	ldr	r3, [pc, #24]	; (4007e0 <usart_init_rs232+0x7c>)
  4007c8:	681b      	ldr	r3, [r3, #0]
  4007ca:	431a      	orrs	r2, r3
  4007cc:	68fb      	ldr	r3, [r7, #12]
  4007ce:	605a      	str	r2, [r3, #4]

	return 0;
  4007d0:	2300      	movs	r3, #0
}
  4007d2:	4618      	mov	r0, r3
  4007d4:	3710      	adds	r7, #16
  4007d6:	46bd      	mov	sp, r7
  4007d8:	bd80      	pop	{r7, pc}
  4007da:	bf00      	nop
  4007dc:	00400705 	.word	0x00400705
  4007e0:	20000458 	.word	0x20000458
  4007e4:	0040067d 	.word	0x0040067d

004007e8 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4007e8:	b580      	push	{r7, lr}
  4007ea:	b084      	sub	sp, #16
  4007ec:	af00      	add	r7, sp, #0
  4007ee:	60f8      	str	r0, [r7, #12]
  4007f0:	60b9      	str	r1, [r7, #8]
  4007f2:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4007f4:	687a      	ldr	r2, [r7, #4]
  4007f6:	68b9      	ldr	r1, [r7, #8]
  4007f8:	68f8      	ldr	r0, [r7, #12]
  4007fa:	4b0a      	ldr	r3, [pc, #40]	; (400824 <usart_init_hw_handshaking+0x3c>)
  4007fc:	4798      	blx	r3
  4007fe:	4603      	mov	r3, r0
  400800:	2b00      	cmp	r3, #0
  400802:	d001      	beq.n	400808 <usart_init_hw_handshaking+0x20>
		return 1;
  400804:	2301      	movs	r3, #1
  400806:	e008      	b.n	40081a <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400808:	68fb      	ldr	r3, [r7, #12]
  40080a:	685b      	ldr	r3, [r3, #4]
  40080c:	f023 030f 	bic.w	r3, r3, #15
  400810:	f043 0202 	orr.w	r2, r3, #2
  400814:	68fb      	ldr	r3, [r7, #12]
  400816:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400818:	2300      	movs	r3, #0
}
  40081a:	4618      	mov	r0, r3
  40081c:	3710      	adds	r7, #16
  40081e:	46bd      	mov	sp, r7
  400820:	bd80      	pop	{r7, pc}
  400822:	bf00      	nop
  400824:	00400765 	.word	0x00400765

00400828 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400828:	b480      	push	{r7}
  40082a:	b083      	sub	sp, #12
  40082c:	af00      	add	r7, sp, #0
  40082e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400830:	687b      	ldr	r3, [r7, #4]
  400832:	2240      	movs	r2, #64	; 0x40
  400834:	601a      	str	r2, [r3, #0]
}
  400836:	bf00      	nop
  400838:	370c      	adds	r7, #12
  40083a:	46bd      	mov	sp, r7
  40083c:	bc80      	pop	{r7}
  40083e:	4770      	bx	lr

00400840 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400840:	b480      	push	{r7}
  400842:	b083      	sub	sp, #12
  400844:	af00      	add	r7, sp, #0
  400846:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	2288      	movs	r2, #136	; 0x88
  40084c:	601a      	str	r2, [r3, #0]
}
  40084e:	bf00      	nop
  400850:	370c      	adds	r7, #12
  400852:	46bd      	mov	sp, r7
  400854:	bc80      	pop	{r7}
  400856:	4770      	bx	lr

00400858 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400858:	b480      	push	{r7}
  40085a:	b083      	sub	sp, #12
  40085c:	af00      	add	r7, sp, #0
  40085e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400860:	687b      	ldr	r3, [r7, #4]
  400862:	2210      	movs	r2, #16
  400864:	601a      	str	r2, [r3, #0]
}
  400866:	bf00      	nop
  400868:	370c      	adds	r7, #12
  40086a:	46bd      	mov	sp, r7
  40086c:	bc80      	pop	{r7}
  40086e:	4770      	bx	lr

00400870 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400870:	b480      	push	{r7}
  400872:	b083      	sub	sp, #12
  400874:	af00      	add	r7, sp, #0
  400876:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400878:	687b      	ldr	r3, [r7, #4]
  40087a:	2224      	movs	r2, #36	; 0x24
  40087c:	601a      	str	r2, [r3, #0]
}
  40087e:	bf00      	nop
  400880:	370c      	adds	r7, #12
  400882:	46bd      	mov	sp, r7
  400884:	bc80      	pop	{r7}
  400886:	4770      	bx	lr

00400888 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400888:	b480      	push	{r7}
  40088a:	b083      	sub	sp, #12
  40088c:	af00      	add	r7, sp, #0
  40088e:	6078      	str	r0, [r7, #4]
  400890:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400892:	687b      	ldr	r3, [r7, #4]
  400894:	683a      	ldr	r2, [r7, #0]
  400896:	609a      	str	r2, [r3, #8]
}
  400898:	bf00      	nop
  40089a:	370c      	adds	r7, #12
  40089c:	46bd      	mov	sp, r7
  40089e:	bc80      	pop	{r7}
  4008a0:	4770      	bx	lr

004008a2 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4008a2:	b480      	push	{r7}
  4008a4:	b083      	sub	sp, #12
  4008a6:	af00      	add	r7, sp, #0
  4008a8:	6078      	str	r0, [r7, #4]
  4008aa:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4008ac:	687b      	ldr	r3, [r7, #4]
  4008ae:	683a      	ldr	r2, [r7, #0]
  4008b0:	60da      	str	r2, [r3, #12]
}
  4008b2:	bf00      	nop
  4008b4:	370c      	adds	r7, #12
  4008b6:	46bd      	mov	sp, r7
  4008b8:	bc80      	pop	{r7}
  4008ba:	4770      	bx	lr

004008bc <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4008bc:	b480      	push	{r7}
  4008be:	b083      	sub	sp, #12
  4008c0:	af00      	add	r7, sp, #0
  4008c2:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4008c4:	687b      	ldr	r3, [r7, #4]
  4008c6:	695b      	ldr	r3, [r3, #20]
}
  4008c8:	4618      	mov	r0, r3
  4008ca:	370c      	adds	r7, #12
  4008cc:	46bd      	mov	sp, r7
  4008ce:	bc80      	pop	{r7}
  4008d0:	4770      	bx	lr

004008d2 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4008d2:	b480      	push	{r7}
  4008d4:	b083      	sub	sp, #12
  4008d6:	af00      	add	r7, sp, #0
  4008d8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008e0:	601a      	str	r2, [r3, #0]
}
  4008e2:	bf00      	nop
  4008e4:	370c      	adds	r7, #12
  4008e6:	46bd      	mov	sp, r7
  4008e8:	bc80      	pop	{r7}
  4008ea:	4770      	bx	lr

004008ec <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4008ec:	b480      	push	{r7}
  4008ee:	b083      	sub	sp, #12
  4008f0:	af00      	add	r7, sp, #0
  4008f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4008f4:	687b      	ldr	r3, [r7, #4]
  4008f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4008fa:	601a      	str	r2, [r3, #0]
}
  4008fc:	bf00      	nop
  4008fe:	370c      	adds	r7, #12
  400900:	46bd      	mov	sp, r7
  400902:	bc80      	pop	{r7}
  400904:	4770      	bx	lr

00400906 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400906:	b480      	push	{r7}
  400908:	b083      	sub	sp, #12
  40090a:	af00      	add	r7, sp, #0
  40090c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40090e:	687b      	ldr	r3, [r7, #4]
  400910:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400914:	601a      	str	r2, [r3, #0]
}
  400916:	bf00      	nop
  400918:	370c      	adds	r7, #12
  40091a:	46bd      	mov	sp, r7
  40091c:	bc80      	pop	{r7}
  40091e:	4770      	bx	lr

00400920 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400920:	b480      	push	{r7}
  400922:	b083      	sub	sp, #12
  400924:	af00      	add	r7, sp, #0
  400926:	6078      	str	r0, [r7, #4]
  400928:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40092a:	bf00      	nop
  40092c:	687b      	ldr	r3, [r7, #4]
  40092e:	695b      	ldr	r3, [r3, #20]
  400930:	f003 0302 	and.w	r3, r3, #2
  400934:	2b00      	cmp	r3, #0
  400936:	d0f9      	beq.n	40092c <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400938:	683b      	ldr	r3, [r7, #0]
  40093a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40093e:	687b      	ldr	r3, [r7, #4]
  400940:	61da      	str	r2, [r3, #28]

	return 0;
  400942:	2300      	movs	r3, #0
}
  400944:	4618      	mov	r0, r3
  400946:	370c      	adds	r7, #12
  400948:	46bd      	mov	sp, r7
  40094a:	bc80      	pop	{r7}
  40094c:	4770      	bx	lr
	...

00400950 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400950:	b580      	push	{r7, lr}
  400952:	b082      	sub	sp, #8
  400954:	af00      	add	r7, sp, #0
  400956:	6078      	str	r0, [r7, #4]
  400958:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  40095a:	e007      	b.n	40096c <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  40095c:	683b      	ldr	r3, [r7, #0]
  40095e:	1c5a      	adds	r2, r3, #1
  400960:	603a      	str	r2, [r7, #0]
  400962:	781b      	ldrb	r3, [r3, #0]
  400964:	4619      	mov	r1, r3
  400966:	6878      	ldr	r0, [r7, #4]
  400968:	4b04      	ldr	r3, [pc, #16]	; (40097c <usart_write_line+0x2c>)
  40096a:	4798      	blx	r3
	while (*string != '\0') {
  40096c:	683b      	ldr	r3, [r7, #0]
  40096e:	781b      	ldrb	r3, [r3, #0]
  400970:	2b00      	cmp	r3, #0
  400972:	d1f3      	bne.n	40095c <usart_write_line+0xc>
	}
}
  400974:	bf00      	nop
  400976:	3708      	adds	r7, #8
  400978:	46bd      	mov	sp, r7
  40097a:	bd80      	pop	{r7, pc}
  40097c:	00400921 	.word	0x00400921

00400980 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400980:	b480      	push	{r7}
  400982:	b083      	sub	sp, #12
  400984:	af00      	add	r7, sp, #0
  400986:	6078      	str	r0, [r7, #4]
  400988:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40098a:	687b      	ldr	r3, [r7, #4]
  40098c:	695b      	ldr	r3, [r3, #20]
  40098e:	f003 0301 	and.w	r3, r3, #1
  400992:	2b00      	cmp	r3, #0
  400994:	d101      	bne.n	40099a <usart_read+0x1a>
		return 1;
  400996:	2301      	movs	r3, #1
  400998:	e006      	b.n	4009a8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40099a:	687b      	ldr	r3, [r7, #4]
  40099c:	699b      	ldr	r3, [r3, #24]
  40099e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4009a2:	683b      	ldr	r3, [r7, #0]
  4009a4:	601a      	str	r2, [r3, #0]

	return 0;
  4009a6:	2300      	movs	r3, #0
}
  4009a8:	4618      	mov	r0, r3
  4009aa:	370c      	adds	r7, #12
  4009ac:	46bd      	mov	sp, r7
  4009ae:	bc80      	pop	{r7}
  4009b0:	4770      	bx	lr
	...

004009b4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4009b4:	b480      	push	{r7}
  4009b6:	b083      	sub	sp, #12
  4009b8:	af00      	add	r7, sp, #0
  4009ba:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009bc:	687b      	ldr	r3, [r7, #4]
  4009be:	4a04      	ldr	r2, [pc, #16]	; (4009d0 <usart_disable_writeprotect+0x1c>)
  4009c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4009c4:	bf00      	nop
  4009c6:	370c      	adds	r7, #12
  4009c8:	46bd      	mov	sp, r7
  4009ca:	bc80      	pop	{r7}
  4009cc:	4770      	bx	lr
  4009ce:	bf00      	nop
  4009d0:	55534100 	.word	0x55534100

004009d4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009d4:	b580      	push	{r7, lr}
  4009d6:	b084      	sub	sp, #16
  4009d8:	af00      	add	r7, sp, #0
  4009da:	6078      	str	r0, [r7, #4]
  4009dc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009de:	6878      	ldr	r0, [r7, #4]
  4009e0:	4b2c      	ldr	r3, [pc, #176]	; (400a94 <pio_handler_process+0xc0>)
  4009e2:	4798      	blx	r3
  4009e4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4009e6:	6878      	ldr	r0, [r7, #4]
  4009e8:	4b2b      	ldr	r3, [pc, #172]	; (400a98 <pio_handler_process+0xc4>)
  4009ea:	4798      	blx	r3
  4009ec:	4602      	mov	r2, r0
  4009ee:	68fb      	ldr	r3, [r7, #12]
  4009f0:	4013      	ands	r3, r2
  4009f2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4009f4:	68fb      	ldr	r3, [r7, #12]
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d03c      	beq.n	400a74 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4009fa:	2300      	movs	r3, #0
  4009fc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4009fe:	e034      	b.n	400a6a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a00:	4a26      	ldr	r2, [pc, #152]	; (400a9c <pio_handler_process+0xc8>)
  400a02:	68bb      	ldr	r3, [r7, #8]
  400a04:	011b      	lsls	r3, r3, #4
  400a06:	4413      	add	r3, r2
  400a08:	681a      	ldr	r2, [r3, #0]
  400a0a:	683b      	ldr	r3, [r7, #0]
  400a0c:	429a      	cmp	r2, r3
  400a0e:	d126      	bne.n	400a5e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a10:	4a22      	ldr	r2, [pc, #136]	; (400a9c <pio_handler_process+0xc8>)
  400a12:	68bb      	ldr	r3, [r7, #8]
  400a14:	011b      	lsls	r3, r3, #4
  400a16:	4413      	add	r3, r2
  400a18:	3304      	adds	r3, #4
  400a1a:	681a      	ldr	r2, [r3, #0]
  400a1c:	68fb      	ldr	r3, [r7, #12]
  400a1e:	4013      	ands	r3, r2
  400a20:	2b00      	cmp	r3, #0
  400a22:	d01c      	beq.n	400a5e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a24:	4a1d      	ldr	r2, [pc, #116]	; (400a9c <pio_handler_process+0xc8>)
  400a26:	68bb      	ldr	r3, [r7, #8]
  400a28:	011b      	lsls	r3, r3, #4
  400a2a:	4413      	add	r3, r2
  400a2c:	330c      	adds	r3, #12
  400a2e:	681b      	ldr	r3, [r3, #0]
  400a30:	491a      	ldr	r1, [pc, #104]	; (400a9c <pio_handler_process+0xc8>)
  400a32:	68ba      	ldr	r2, [r7, #8]
  400a34:	0112      	lsls	r2, r2, #4
  400a36:	440a      	add	r2, r1
  400a38:	6810      	ldr	r0, [r2, #0]
  400a3a:	4918      	ldr	r1, [pc, #96]	; (400a9c <pio_handler_process+0xc8>)
  400a3c:	68ba      	ldr	r2, [r7, #8]
  400a3e:	0112      	lsls	r2, r2, #4
  400a40:	440a      	add	r2, r1
  400a42:	3204      	adds	r2, #4
  400a44:	6812      	ldr	r2, [r2, #0]
  400a46:	4611      	mov	r1, r2
  400a48:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a4a:	4a14      	ldr	r2, [pc, #80]	; (400a9c <pio_handler_process+0xc8>)
  400a4c:	68bb      	ldr	r3, [r7, #8]
  400a4e:	011b      	lsls	r3, r3, #4
  400a50:	4413      	add	r3, r2
  400a52:	3304      	adds	r3, #4
  400a54:	681b      	ldr	r3, [r3, #0]
  400a56:	43db      	mvns	r3, r3
  400a58:	68fa      	ldr	r2, [r7, #12]
  400a5a:	4013      	ands	r3, r2
  400a5c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a5e:	68bb      	ldr	r3, [r7, #8]
  400a60:	3301      	adds	r3, #1
  400a62:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a64:	68bb      	ldr	r3, [r7, #8]
  400a66:	2b06      	cmp	r3, #6
  400a68:	d803      	bhi.n	400a72 <pio_handler_process+0x9e>
		while (status != 0) {
  400a6a:	68fb      	ldr	r3, [r7, #12]
  400a6c:	2b00      	cmp	r3, #0
  400a6e:	d1c7      	bne.n	400a00 <pio_handler_process+0x2c>
  400a70:	e000      	b.n	400a74 <pio_handler_process+0xa0>
				break;
  400a72:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400a74:	4b0a      	ldr	r3, [pc, #40]	; (400aa0 <pio_handler_process+0xcc>)
  400a76:	681b      	ldr	r3, [r3, #0]
  400a78:	2b00      	cmp	r3, #0
  400a7a:	d007      	beq.n	400a8c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400a7c:	4b09      	ldr	r3, [pc, #36]	; (400aa4 <pio_handler_process+0xd0>)
  400a7e:	681b      	ldr	r3, [r3, #0]
  400a80:	2b00      	cmp	r3, #0
  400a82:	d003      	beq.n	400a8c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400a84:	4b07      	ldr	r3, [pc, #28]	; (400aa4 <pio_handler_process+0xd0>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	6878      	ldr	r0, [r7, #4]
  400a8a:	4798      	blx	r3
		}
	}
#endif
}
  400a8c:	bf00      	nop
  400a8e:	3710      	adds	r7, #16
  400a90:	46bd      	mov	sp, r7
  400a92:	bd80      	pop	{r7, pc}
  400a94:	004011df 	.word	0x004011df
  400a98:	004011f5 	.word	0x004011f5
  400a9c:	2000045c 	.word	0x2000045c
  400aa0:	200004e8 	.word	0x200004e8
  400aa4:	200004d0 	.word	0x200004d0

00400aa8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400aa8:	b580      	push	{r7, lr}
  400aaa:	b086      	sub	sp, #24
  400aac:	af00      	add	r7, sp, #0
  400aae:	60f8      	str	r0, [r7, #12]
  400ab0:	60b9      	str	r1, [r7, #8]
  400ab2:	607a      	str	r2, [r7, #4]
  400ab4:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400ab6:	4b21      	ldr	r3, [pc, #132]	; (400b3c <pio_handler_set+0x94>)
  400ab8:	681b      	ldr	r3, [r3, #0]
  400aba:	2b06      	cmp	r3, #6
  400abc:	d901      	bls.n	400ac2 <pio_handler_set+0x1a>
		return 1;
  400abe:	2301      	movs	r3, #1
  400ac0:	e038      	b.n	400b34 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400ac2:	2300      	movs	r3, #0
  400ac4:	75fb      	strb	r3, [r7, #23]
  400ac6:	e011      	b.n	400aec <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400ac8:	7dfb      	ldrb	r3, [r7, #23]
  400aca:	011b      	lsls	r3, r3, #4
  400acc:	4a1c      	ldr	r2, [pc, #112]	; (400b40 <pio_handler_set+0x98>)
  400ace:	4413      	add	r3, r2
  400ad0:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400ad2:	693b      	ldr	r3, [r7, #16]
  400ad4:	681a      	ldr	r2, [r3, #0]
  400ad6:	68bb      	ldr	r3, [r7, #8]
  400ad8:	429a      	cmp	r2, r3
  400ada:	d104      	bne.n	400ae6 <pio_handler_set+0x3e>
  400adc:	693b      	ldr	r3, [r7, #16]
  400ade:	685a      	ldr	r2, [r3, #4]
  400ae0:	687b      	ldr	r3, [r7, #4]
  400ae2:	429a      	cmp	r2, r3
  400ae4:	d008      	beq.n	400af8 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400ae6:	7dfb      	ldrb	r3, [r7, #23]
  400ae8:	3301      	adds	r3, #1
  400aea:	75fb      	strb	r3, [r7, #23]
  400aec:	7dfa      	ldrb	r2, [r7, #23]
  400aee:	4b13      	ldr	r3, [pc, #76]	; (400b3c <pio_handler_set+0x94>)
  400af0:	681b      	ldr	r3, [r3, #0]
  400af2:	429a      	cmp	r2, r3
  400af4:	d9e8      	bls.n	400ac8 <pio_handler_set+0x20>
  400af6:	e000      	b.n	400afa <pio_handler_set+0x52>
			break;
  400af8:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400afa:	693b      	ldr	r3, [r7, #16]
  400afc:	68ba      	ldr	r2, [r7, #8]
  400afe:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400b00:	693b      	ldr	r3, [r7, #16]
  400b02:	687a      	ldr	r2, [r7, #4]
  400b04:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400b06:	693b      	ldr	r3, [r7, #16]
  400b08:	683a      	ldr	r2, [r7, #0]
  400b0a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400b0c:	693b      	ldr	r3, [r7, #16]
  400b0e:	6a3a      	ldr	r2, [r7, #32]
  400b10:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400b12:	7dfa      	ldrb	r2, [r7, #23]
  400b14:	4b09      	ldr	r3, [pc, #36]	; (400b3c <pio_handler_set+0x94>)
  400b16:	681b      	ldr	r3, [r3, #0]
  400b18:	3301      	adds	r3, #1
  400b1a:	429a      	cmp	r2, r3
  400b1c:	d104      	bne.n	400b28 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400b1e:	4b07      	ldr	r3, [pc, #28]	; (400b3c <pio_handler_set+0x94>)
  400b20:	681b      	ldr	r3, [r3, #0]
  400b22:	3301      	adds	r3, #1
  400b24:	4a05      	ldr	r2, [pc, #20]	; (400b3c <pio_handler_set+0x94>)
  400b26:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400b28:	683a      	ldr	r2, [r7, #0]
  400b2a:	6879      	ldr	r1, [r7, #4]
  400b2c:	68f8      	ldr	r0, [r7, #12]
  400b2e:	4b05      	ldr	r3, [pc, #20]	; (400b44 <pio_handler_set+0x9c>)
  400b30:	4798      	blx	r3

	return 0;
  400b32:	2300      	movs	r3, #0
}
  400b34:	4618      	mov	r0, r3
  400b36:	3718      	adds	r7, #24
  400b38:	46bd      	mov	sp, r7
  400b3a:	bd80      	pop	{r7, pc}
  400b3c:	200004cc 	.word	0x200004cc
  400b40:	2000045c 	.word	0x2000045c
  400b44:	00401141 	.word	0x00401141

00400b48 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b48:	b580      	push	{r7, lr}
  400b4a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400b4c:	210b      	movs	r1, #11
  400b4e:	4802      	ldr	r0, [pc, #8]	; (400b58 <PIOA_Handler+0x10>)
  400b50:	4b02      	ldr	r3, [pc, #8]	; (400b5c <PIOA_Handler+0x14>)
  400b52:	4798      	blx	r3
}
  400b54:	bf00      	nop
  400b56:	bd80      	pop	{r7, pc}
  400b58:	400e0e00 	.word	0x400e0e00
  400b5c:	004009d5 	.word	0x004009d5

00400b60 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b60:	b580      	push	{r7, lr}
  400b62:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400b64:	210c      	movs	r1, #12
  400b66:	4802      	ldr	r0, [pc, #8]	; (400b70 <PIOB_Handler+0x10>)
  400b68:	4b02      	ldr	r3, [pc, #8]	; (400b74 <PIOB_Handler+0x14>)
  400b6a:	4798      	blx	r3
}
  400b6c:	bf00      	nop
  400b6e:	bd80      	pop	{r7, pc}
  400b70:	400e1000 	.word	0x400e1000
  400b74:	004009d5 	.word	0x004009d5

00400b78 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400b78:	b480      	push	{r7}
  400b7a:	b083      	sub	sp, #12
  400b7c:	af00      	add	r7, sp, #0
  400b7e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b86:	605a      	str	r2, [r3, #4]

}
  400b88:	bf00      	nop
  400b8a:	370c      	adds	r7, #12
  400b8c:	46bd      	mov	sp, r7
  400b8e:	bc80      	pop	{r7}
  400b90:	4770      	bx	lr
	...

00400b94 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400b94:	b580      	push	{r7, lr}
  400b96:	b082      	sub	sp, #8
  400b98:	af00      	add	r7, sp, #0
  400b9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b9c:	687b      	ldr	r3, [r7, #4]
  400b9e:	2b07      	cmp	r3, #7
  400ba0:	d831      	bhi.n	400c06 <osc_enable+0x72>
  400ba2:	a201      	add	r2, pc, #4	; (adr r2, 400ba8 <osc_enable+0x14>)
  400ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ba8:	00400c05 	.word	0x00400c05
  400bac:	00400bc9 	.word	0x00400bc9
  400bb0:	00400bd1 	.word	0x00400bd1
  400bb4:	00400bd9 	.word	0x00400bd9
  400bb8:	00400be1 	.word	0x00400be1
  400bbc:	00400be9 	.word	0x00400be9
  400bc0:	00400bf1 	.word	0x00400bf1
  400bc4:	00400bfb 	.word	0x00400bfb
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400bc8:	2000      	movs	r0, #0
  400bca:	4b11      	ldr	r3, [pc, #68]	; (400c10 <osc_enable+0x7c>)
  400bcc:	4798      	blx	r3
		break;
  400bce:	e01a      	b.n	400c06 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400bd0:	2001      	movs	r0, #1
  400bd2:	4b0f      	ldr	r3, [pc, #60]	; (400c10 <osc_enable+0x7c>)
  400bd4:	4798      	blx	r3
		break;
  400bd6:	e016      	b.n	400c06 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400bd8:	2000      	movs	r0, #0
  400bda:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <osc_enable+0x80>)
  400bdc:	4798      	blx	r3
		break;
  400bde:	e012      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400be0:	2010      	movs	r0, #16
  400be2:	4b0c      	ldr	r3, [pc, #48]	; (400c14 <osc_enable+0x80>)
  400be4:	4798      	blx	r3
		break;
  400be6:	e00e      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400be8:	2020      	movs	r0, #32
  400bea:	4b0a      	ldr	r3, [pc, #40]	; (400c14 <osc_enable+0x80>)
  400bec:	4798      	blx	r3
		break;
  400bee:	e00a      	b.n	400c06 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bf0:	213e      	movs	r1, #62	; 0x3e
  400bf2:	2000      	movs	r0, #0
  400bf4:	4b08      	ldr	r3, [pc, #32]	; (400c18 <osc_enable+0x84>)
  400bf6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400bf8:	e005      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400bfa:	213e      	movs	r1, #62	; 0x3e
  400bfc:	2001      	movs	r0, #1
  400bfe:	4b06      	ldr	r3, [pc, #24]	; (400c18 <osc_enable+0x84>)
  400c00:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400c02:	e000      	b.n	400c06 <osc_enable+0x72>
		break;
  400c04:	bf00      	nop
	}
}
  400c06:	bf00      	nop
  400c08:	3708      	adds	r7, #8
  400c0a:	46bd      	mov	sp, r7
  400c0c:	bd80      	pop	{r7, pc}
  400c0e:	bf00      	nop
  400c10:	00401461 	.word	0x00401461
  400c14:	004014cd 	.word	0x004014cd
  400c18:	0040153d 	.word	0x0040153d

00400c1c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400c1c:	b580      	push	{r7, lr}
  400c1e:	b082      	sub	sp, #8
  400c20:	af00      	add	r7, sp, #0
  400c22:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c24:	687b      	ldr	r3, [r7, #4]
  400c26:	2b07      	cmp	r3, #7
  400c28:	d826      	bhi.n	400c78 <osc_is_ready+0x5c>
  400c2a:	a201      	add	r2, pc, #4	; (adr r2, 400c30 <osc_is_ready+0x14>)
  400c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c30:	00400c51 	.word	0x00400c51
  400c34:	00400c55 	.word	0x00400c55
  400c38:	00400c55 	.word	0x00400c55
  400c3c:	00400c67 	.word	0x00400c67
  400c40:	00400c67 	.word	0x00400c67
  400c44:	00400c67 	.word	0x00400c67
  400c48:	00400c67 	.word	0x00400c67
  400c4c:	00400c67 	.word	0x00400c67
	case OSC_SLCK_32K_RC:
		return 1;
  400c50:	2301      	movs	r3, #1
  400c52:	e012      	b.n	400c7a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400c54:	4b0b      	ldr	r3, [pc, #44]	; (400c84 <osc_is_ready+0x68>)
  400c56:	4798      	blx	r3
  400c58:	4603      	mov	r3, r0
  400c5a:	2b00      	cmp	r3, #0
  400c5c:	bf14      	ite	ne
  400c5e:	2301      	movne	r3, #1
  400c60:	2300      	moveq	r3, #0
  400c62:	b2db      	uxtb	r3, r3
  400c64:	e009      	b.n	400c7a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c66:	4b08      	ldr	r3, [pc, #32]	; (400c88 <osc_is_ready+0x6c>)
  400c68:	4798      	blx	r3
  400c6a:	4603      	mov	r3, r0
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	bf14      	ite	ne
  400c70:	2301      	movne	r3, #1
  400c72:	2300      	moveq	r3, #0
  400c74:	b2db      	uxtb	r3, r3
  400c76:	e000      	b.n	400c7a <osc_is_ready+0x5e>
	}

	return 0;
  400c78:	2300      	movs	r3, #0
}
  400c7a:	4618      	mov	r0, r3
  400c7c:	3708      	adds	r7, #8
  400c7e:	46bd      	mov	sp, r7
  400c80:	bd80      	pop	{r7, pc}
  400c82:	bf00      	nop
  400c84:	00401499 	.word	0x00401499
  400c88:	004015b5 	.word	0x004015b5

00400c8c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c8c:	b480      	push	{r7}
  400c8e:	b083      	sub	sp, #12
  400c90:	af00      	add	r7, sp, #0
  400c92:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c94:	687b      	ldr	r3, [r7, #4]
  400c96:	2b07      	cmp	r3, #7
  400c98:	d825      	bhi.n	400ce6 <osc_get_rate+0x5a>
  400c9a:	a201      	add	r2, pc, #4	; (adr r2, 400ca0 <osc_get_rate+0x14>)
  400c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ca0:	00400cc1 	.word	0x00400cc1
  400ca4:	00400cc7 	.word	0x00400cc7
  400ca8:	00400ccd 	.word	0x00400ccd
  400cac:	00400cd3 	.word	0x00400cd3
  400cb0:	00400cd7 	.word	0x00400cd7
  400cb4:	00400cdb 	.word	0x00400cdb
  400cb8:	00400cdf 	.word	0x00400cdf
  400cbc:	00400ce3 	.word	0x00400ce3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400cc0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400cc4:	e010      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cca:	e00d      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cd0:	e00a      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400cd2:	4b08      	ldr	r3, [pc, #32]	; (400cf4 <osc_get_rate+0x68>)
  400cd4:	e008      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400cd6:	4b08      	ldr	r3, [pc, #32]	; (400cf8 <osc_get_rate+0x6c>)
  400cd8:	e006      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400cda:	4b08      	ldr	r3, [pc, #32]	; (400cfc <osc_get_rate+0x70>)
  400cdc:	e004      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400cde:	4b07      	ldr	r3, [pc, #28]	; (400cfc <osc_get_rate+0x70>)
  400ce0:	e002      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400ce2:	4b06      	ldr	r3, [pc, #24]	; (400cfc <osc_get_rate+0x70>)
  400ce4:	e000      	b.n	400ce8 <osc_get_rate+0x5c>
	}

	return 0;
  400ce6:	2300      	movs	r3, #0
}
  400ce8:	4618      	mov	r0, r3
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	bc80      	pop	{r7}
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop
  400cf4:	003d0900 	.word	0x003d0900
  400cf8:	007a1200 	.word	0x007a1200
  400cfc:	00b71b00 	.word	0x00b71b00

00400d00 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400d00:	b580      	push	{r7, lr}
  400d02:	b082      	sub	sp, #8
  400d04:	af00      	add	r7, sp, #0
  400d06:	4603      	mov	r3, r0
  400d08:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400d0a:	bf00      	nop
  400d0c:	79fb      	ldrb	r3, [r7, #7]
  400d0e:	4618      	mov	r0, r3
  400d10:	4b05      	ldr	r3, [pc, #20]	; (400d28 <osc_wait_ready+0x28>)
  400d12:	4798      	blx	r3
  400d14:	4603      	mov	r3, r0
  400d16:	f083 0301 	eor.w	r3, r3, #1
  400d1a:	b2db      	uxtb	r3, r3
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d1f5      	bne.n	400d0c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400d20:	bf00      	nop
  400d22:	3708      	adds	r7, #8
  400d24:	46bd      	mov	sp, r7
  400d26:	bd80      	pop	{r7, pc}
  400d28:	00400c1d 	.word	0x00400c1d

00400d2c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400d2c:	b580      	push	{r7, lr}
  400d2e:	b086      	sub	sp, #24
  400d30:	af00      	add	r7, sp, #0
  400d32:	60f8      	str	r0, [r7, #12]
  400d34:	607a      	str	r2, [r7, #4]
  400d36:	603b      	str	r3, [r7, #0]
  400d38:	460b      	mov	r3, r1
  400d3a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400d3c:	7afb      	ldrb	r3, [r7, #11]
  400d3e:	4618      	mov	r0, r3
  400d40:	4b0d      	ldr	r3, [pc, #52]	; (400d78 <pll_config_init+0x4c>)
  400d42:	4798      	blx	r3
  400d44:	4602      	mov	r2, r0
  400d46:	687b      	ldr	r3, [r7, #4]
  400d48:	fbb2 f3f3 	udiv	r3, r2, r3
  400d4c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400d4e:	697b      	ldr	r3, [r7, #20]
  400d50:	683a      	ldr	r2, [r7, #0]
  400d52:	fb02 f303 	mul.w	r3, r2, r3
  400d56:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400d58:	683b      	ldr	r3, [r7, #0]
  400d5a:	3b01      	subs	r3, #1
  400d5c:	041a      	lsls	r2, r3, #16
  400d5e:	4b07      	ldr	r3, [pc, #28]	; (400d7c <pll_config_init+0x50>)
  400d60:	4013      	ands	r3, r2
  400d62:	687a      	ldr	r2, [r7, #4]
  400d64:	b2d2      	uxtb	r2, r2
  400d66:	4313      	orrs	r3, r2
  400d68:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400d6c:	68fb      	ldr	r3, [r7, #12]
  400d6e:	601a      	str	r2, [r3, #0]
}
  400d70:	bf00      	nop
  400d72:	3718      	adds	r7, #24
  400d74:	46bd      	mov	sp, r7
  400d76:	bd80      	pop	{r7, pc}
  400d78:	00400c8d 	.word	0x00400c8d
  400d7c:	07ff0000 	.word	0x07ff0000

00400d80 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400d80:	b580      	push	{r7, lr}
  400d82:	b082      	sub	sp, #8
  400d84:	af00      	add	r7, sp, #0
  400d86:	6078      	str	r0, [r7, #4]
  400d88:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400d8a:	683b      	ldr	r3, [r7, #0]
  400d8c:	2b00      	cmp	r3, #0
  400d8e:	d108      	bne.n	400da2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400d90:	4b09      	ldr	r3, [pc, #36]	; (400db8 <pll_enable+0x38>)
  400d92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d94:	4a09      	ldr	r2, [pc, #36]	; (400dbc <pll_enable+0x3c>)
  400d96:	687b      	ldr	r3, [r7, #4]
  400d98:	681b      	ldr	r3, [r3, #0]
  400d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400d9e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400da0:	e005      	b.n	400dae <pll_enable+0x2e>
		pmc_disable_pllbck();
  400da2:	4b07      	ldr	r3, [pc, #28]	; (400dc0 <pll_enable+0x40>)
  400da4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400da6:	4a05      	ldr	r2, [pc, #20]	; (400dbc <pll_enable+0x3c>)
  400da8:	687b      	ldr	r3, [r7, #4]
  400daa:	681b      	ldr	r3, [r3, #0]
  400dac:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400dae:	bf00      	nop
  400db0:	3708      	adds	r7, #8
  400db2:	46bd      	mov	sp, r7
  400db4:	bd80      	pop	{r7, pc}
  400db6:	bf00      	nop
  400db8:	004015cd 	.word	0x004015cd
  400dbc:	400e0400 	.word	0x400e0400
  400dc0:	004015fd 	.word	0x004015fd

00400dc4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400dc4:	b580      	push	{r7, lr}
  400dc6:	b082      	sub	sp, #8
  400dc8:	af00      	add	r7, sp, #0
  400dca:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400dcc:	687b      	ldr	r3, [r7, #4]
  400dce:	2b00      	cmp	r3, #0
  400dd0:	d103      	bne.n	400dda <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400dd2:	4b05      	ldr	r3, [pc, #20]	; (400de8 <pll_is_locked+0x24>)
  400dd4:	4798      	blx	r3
  400dd6:	4603      	mov	r3, r0
  400dd8:	e002      	b.n	400de0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400dda:	4b04      	ldr	r3, [pc, #16]	; (400dec <pll_is_locked+0x28>)
  400ddc:	4798      	blx	r3
  400dde:	4603      	mov	r3, r0
	}
}
  400de0:	4618      	mov	r0, r3
  400de2:	3708      	adds	r7, #8
  400de4:	46bd      	mov	sp, r7
  400de6:	bd80      	pop	{r7, pc}
  400de8:	004015e5 	.word	0x004015e5
  400dec:	00401615 	.word	0x00401615

00400df0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400df0:	b580      	push	{r7, lr}
  400df2:	b082      	sub	sp, #8
  400df4:	af00      	add	r7, sp, #0
  400df6:	4603      	mov	r3, r0
  400df8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400dfa:	79fb      	ldrb	r3, [r7, #7]
  400dfc:	3b03      	subs	r3, #3
  400dfe:	2b04      	cmp	r3, #4
  400e00:	d808      	bhi.n	400e14 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400e02:	79fb      	ldrb	r3, [r7, #7]
  400e04:	4618      	mov	r0, r3
  400e06:	4b06      	ldr	r3, [pc, #24]	; (400e20 <pll_enable_source+0x30>)
  400e08:	4798      	blx	r3
		osc_wait_ready(e_src);
  400e0a:	79fb      	ldrb	r3, [r7, #7]
  400e0c:	4618      	mov	r0, r3
  400e0e:	4b05      	ldr	r3, [pc, #20]	; (400e24 <pll_enable_source+0x34>)
  400e10:	4798      	blx	r3
		break;
  400e12:	e000      	b.n	400e16 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400e14:	bf00      	nop
	}
}
  400e16:	bf00      	nop
  400e18:	3708      	adds	r7, #8
  400e1a:	46bd      	mov	sp, r7
  400e1c:	bd80      	pop	{r7, pc}
  400e1e:	bf00      	nop
  400e20:	00400b95 	.word	0x00400b95
  400e24:	00400d01 	.word	0x00400d01

00400e28 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400e28:	b580      	push	{r7, lr}
  400e2a:	b082      	sub	sp, #8
  400e2c:	af00      	add	r7, sp, #0
  400e2e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e30:	bf00      	nop
  400e32:	6878      	ldr	r0, [r7, #4]
  400e34:	4b04      	ldr	r3, [pc, #16]	; (400e48 <pll_wait_for_lock+0x20>)
  400e36:	4798      	blx	r3
  400e38:	4603      	mov	r3, r0
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	d0f9      	beq.n	400e32 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400e3e:	2300      	movs	r3, #0
}
  400e40:	4618      	mov	r0, r3
  400e42:	3708      	adds	r7, #8
  400e44:	46bd      	mov	sp, r7
  400e46:	bd80      	pop	{r7, pc}
  400e48:	00400dc5 	.word	0x00400dc5

00400e4c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400e4c:	b580      	push	{r7, lr}
  400e4e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400e50:	2006      	movs	r0, #6
  400e52:	4b04      	ldr	r3, [pc, #16]	; (400e64 <sysclk_get_main_hz+0x18>)
  400e54:	4798      	blx	r3
  400e56:	4602      	mov	r2, r0
  400e58:	4613      	mov	r3, r2
  400e5a:	009b      	lsls	r3, r3, #2
  400e5c:	4413      	add	r3, r2
  400e5e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400e60:	4618      	mov	r0, r3
  400e62:	bd80      	pop	{r7, pc}
  400e64:	00400c8d 	.word	0x00400c8d

00400e68 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400e68:	b580      	push	{r7, lr}
  400e6a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400e6c:	4b02      	ldr	r3, [pc, #8]	; (400e78 <sysclk_get_cpu_hz+0x10>)
  400e6e:	4798      	blx	r3
  400e70:	4603      	mov	r3, r0
  400e72:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400e74:	4618      	mov	r0, r3
  400e76:	bd80      	pop	{r7, pc}
  400e78:	00400e4d 	.word	0x00400e4d

00400e7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e7c:	b590      	push	{r4, r7, lr}
  400e7e:	b083      	sub	sp, #12
  400e80:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e82:	4811      	ldr	r0, [pc, #68]	; (400ec8 <sysclk_init+0x4c>)
  400e84:	4b11      	ldr	r3, [pc, #68]	; (400ecc <sysclk_init+0x50>)
  400e86:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400e88:	2006      	movs	r0, #6
  400e8a:	4b11      	ldr	r3, [pc, #68]	; (400ed0 <sysclk_init+0x54>)
  400e8c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400e8e:	1d38      	adds	r0, r7, #4
  400e90:	2314      	movs	r3, #20
  400e92:	2201      	movs	r2, #1
  400e94:	2106      	movs	r1, #6
  400e96:	4c0f      	ldr	r4, [pc, #60]	; (400ed4 <sysclk_init+0x58>)
  400e98:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400e9a:	1d3b      	adds	r3, r7, #4
  400e9c:	2100      	movs	r1, #0
  400e9e:	4618      	mov	r0, r3
  400ea0:	4b0d      	ldr	r3, [pc, #52]	; (400ed8 <sysclk_init+0x5c>)
  400ea2:	4798      	blx	r3
		pll_wait_for_lock(0);
  400ea4:	2000      	movs	r0, #0
  400ea6:	4b0d      	ldr	r3, [pc, #52]	; (400edc <sysclk_init+0x60>)
  400ea8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400eaa:	2010      	movs	r0, #16
  400eac:	4b0c      	ldr	r3, [pc, #48]	; (400ee0 <sysclk_init+0x64>)
  400eae:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400eb0:	4b0c      	ldr	r3, [pc, #48]	; (400ee4 <sysclk_init+0x68>)
  400eb2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400eb4:	4b0c      	ldr	r3, [pc, #48]	; (400ee8 <sysclk_init+0x6c>)
  400eb6:	4798      	blx	r3
  400eb8:	4603      	mov	r3, r0
  400eba:	4618      	mov	r0, r3
  400ebc:	4b03      	ldr	r3, [pc, #12]	; (400ecc <sysclk_init+0x50>)
  400ebe:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400ec0:	bf00      	nop
  400ec2:	370c      	adds	r7, #12
  400ec4:	46bd      	mov	sp, r7
  400ec6:	bd90      	pop	{r4, r7, pc}
  400ec8:	07270e00 	.word	0x07270e00
  400ecc:	00402a4d 	.word	0x00402a4d
  400ed0:	00400df1 	.word	0x00400df1
  400ed4:	00400d2d 	.word	0x00400d2d
  400ed8:	00400d81 	.word	0x00400d81
  400edc:	00400e29 	.word	0x00400e29
  400ee0:	004013e1 	.word	0x004013e1
  400ee4:	004028b5 	.word	0x004028b5
  400ee8:	00400e69 	.word	0x00400e69

00400eec <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400eec:	b480      	push	{r7}
  400eee:	b085      	sub	sp, #20
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	60f8      	str	r0, [r7, #12]
  400ef4:	60b9      	str	r1, [r7, #8]
  400ef6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ef8:	687b      	ldr	r3, [r7, #4]
  400efa:	2b00      	cmp	r3, #0
  400efc:	d003      	beq.n	400f06 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	68ba      	ldr	r2, [r7, #8]
  400f02:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400f04:	e002      	b.n	400f0c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400f06:	68fb      	ldr	r3, [r7, #12]
  400f08:	68ba      	ldr	r2, [r7, #8]
  400f0a:	661a      	str	r2, [r3, #96]	; 0x60
}
  400f0c:	bf00      	nop
  400f0e:	3714      	adds	r7, #20
  400f10:	46bd      	mov	sp, r7
  400f12:	bc80      	pop	{r7}
  400f14:	4770      	bx	lr

00400f16 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400f16:	b480      	push	{r7}
  400f18:	b085      	sub	sp, #20
  400f1a:	af00      	add	r7, sp, #0
  400f1c:	60f8      	str	r0, [r7, #12]
  400f1e:	60b9      	str	r1, [r7, #8]
  400f20:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400f22:	68fb      	ldr	r3, [r7, #12]
  400f24:	68ba      	ldr	r2, [r7, #8]
  400f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400f2a:	687b      	ldr	r3, [r7, #4]
  400f2c:	005b      	lsls	r3, r3, #1
  400f2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f32:	fbb2 f3f3 	udiv	r3, r2, r3
  400f36:	3b01      	subs	r3, #1
  400f38:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400f42:	bf00      	nop
  400f44:	3714      	adds	r7, #20
  400f46:	46bd      	mov	sp, r7
  400f48:	bc80      	pop	{r7}
  400f4a:	4770      	bx	lr

00400f4c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400f4c:	b480      	push	{r7}
  400f4e:	b087      	sub	sp, #28
  400f50:	af00      	add	r7, sp, #0
  400f52:	60f8      	str	r0, [r7, #12]
  400f54:	60b9      	str	r1, [r7, #8]
  400f56:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f58:	68fb      	ldr	r3, [r7, #12]
  400f5a:	687a      	ldr	r2, [r7, #4]
  400f5c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f5e:	68bb      	ldr	r3, [r7, #8]
  400f60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f64:	d04a      	beq.n	400ffc <pio_set_peripheral+0xb0>
  400f66:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f6a:	d808      	bhi.n	400f7e <pio_set_peripheral+0x32>
  400f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400f70:	d016      	beq.n	400fa0 <pio_set_peripheral+0x54>
  400f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400f76:	d02c      	beq.n	400fd2 <pio_set_peripheral+0x86>
  400f78:	2b00      	cmp	r3, #0
  400f7a:	d069      	beq.n	401050 <pio_set_peripheral+0x104>
  400f7c:	e064      	b.n	401048 <pio_set_peripheral+0xfc>
  400f7e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f82:	d065      	beq.n	401050 <pio_set_peripheral+0x104>
  400f84:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f88:	d803      	bhi.n	400f92 <pio_set_peripheral+0x46>
  400f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400f8e:	d04a      	beq.n	401026 <pio_set_peripheral+0xda>
  400f90:	e05a      	b.n	401048 <pio_set_peripheral+0xfc>
  400f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400f96:	d05b      	beq.n	401050 <pio_set_peripheral+0x104>
  400f98:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400f9c:	d058      	beq.n	401050 <pio_set_peripheral+0x104>
  400f9e:	e053      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fa0:	68fb      	ldr	r3, [r7, #12]
  400fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400fa4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400fa6:	68fb      	ldr	r3, [r7, #12]
  400fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	43d9      	mvns	r1, r3
  400fae:	697b      	ldr	r3, [r7, #20]
  400fb0:	400b      	ands	r3, r1
  400fb2:	401a      	ands	r2, r3
  400fb4:	68fb      	ldr	r3, [r7, #12]
  400fb6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fb8:	68fb      	ldr	r3, [r7, #12]
  400fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400fbc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fbe:	68fb      	ldr	r3, [r7, #12]
  400fc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400fc2:	687b      	ldr	r3, [r7, #4]
  400fc4:	43d9      	mvns	r1, r3
  400fc6:	697b      	ldr	r3, [r7, #20]
  400fc8:	400b      	ands	r3, r1
  400fca:	401a      	ands	r2, r3
  400fcc:	68fb      	ldr	r3, [r7, #12]
  400fce:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400fd0:	e03a      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fd2:	68fb      	ldr	r3, [r7, #12]
  400fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400fd6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fd8:	687a      	ldr	r2, [r7, #4]
  400fda:	697b      	ldr	r3, [r7, #20]
  400fdc:	431a      	orrs	r2, r3
  400fde:	68fb      	ldr	r3, [r7, #12]
  400fe0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fe2:	68fb      	ldr	r3, [r7, #12]
  400fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400fe6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fe8:	68fb      	ldr	r3, [r7, #12]
  400fea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400fec:	687b      	ldr	r3, [r7, #4]
  400fee:	43d9      	mvns	r1, r3
  400ff0:	697b      	ldr	r3, [r7, #20]
  400ff2:	400b      	ands	r3, r1
  400ff4:	401a      	ands	r2, r3
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ffa:	e025      	b.n	401048 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ffc:	68fb      	ldr	r3, [r7, #12]
  400ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401000:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401002:	68fb      	ldr	r3, [r7, #12]
  401004:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401006:	687b      	ldr	r3, [r7, #4]
  401008:	43d9      	mvns	r1, r3
  40100a:	697b      	ldr	r3, [r7, #20]
  40100c:	400b      	ands	r3, r1
  40100e:	401a      	ands	r2, r3
  401010:	68fb      	ldr	r3, [r7, #12]
  401012:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401014:	68fb      	ldr	r3, [r7, #12]
  401016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401018:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40101a:	687a      	ldr	r2, [r7, #4]
  40101c:	697b      	ldr	r3, [r7, #20]
  40101e:	431a      	orrs	r2, r3
  401020:	68fb      	ldr	r3, [r7, #12]
  401022:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401024:	e010      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401026:	68fb      	ldr	r3, [r7, #12]
  401028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40102a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40102c:	687a      	ldr	r2, [r7, #4]
  40102e:	697b      	ldr	r3, [r7, #20]
  401030:	431a      	orrs	r2, r3
  401032:	68fb      	ldr	r3, [r7, #12]
  401034:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401036:	68fb      	ldr	r3, [r7, #12]
  401038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40103a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40103c:	687a      	ldr	r2, [r7, #4]
  40103e:	697b      	ldr	r3, [r7, #20]
  401040:	431a      	orrs	r2, r3
  401042:	68fb      	ldr	r3, [r7, #12]
  401044:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401046:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401048:	68fb      	ldr	r3, [r7, #12]
  40104a:	687a      	ldr	r2, [r7, #4]
  40104c:	605a      	str	r2, [r3, #4]
  40104e:	e000      	b.n	401052 <pio_set_peripheral+0x106>
		return;
  401050:	bf00      	nop
}
  401052:	371c      	adds	r7, #28
  401054:	46bd      	mov	sp, r7
  401056:	bc80      	pop	{r7}
  401058:	4770      	bx	lr
	...

0040105c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40105c:	b580      	push	{r7, lr}
  40105e:	b084      	sub	sp, #16
  401060:	af00      	add	r7, sp, #0
  401062:	60f8      	str	r0, [r7, #12]
  401064:	60b9      	str	r1, [r7, #8]
  401066:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401068:	68b9      	ldr	r1, [r7, #8]
  40106a:	68f8      	ldr	r0, [r7, #12]
  40106c:	4b19      	ldr	r3, [pc, #100]	; (4010d4 <pio_set_input+0x78>)
  40106e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	f003 0301 	and.w	r3, r3, #1
  401076:	461a      	mov	r2, r3
  401078:	68b9      	ldr	r1, [r7, #8]
  40107a:	68f8      	ldr	r0, [r7, #12]
  40107c:	4b16      	ldr	r3, [pc, #88]	; (4010d8 <pio_set_input+0x7c>)
  40107e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401080:	687b      	ldr	r3, [r7, #4]
  401082:	f003 030a 	and.w	r3, r3, #10
  401086:	2b00      	cmp	r3, #0
  401088:	d003      	beq.n	401092 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40108a:	68fb      	ldr	r3, [r7, #12]
  40108c:	68ba      	ldr	r2, [r7, #8]
  40108e:	621a      	str	r2, [r3, #32]
  401090:	e002      	b.n	401098 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401092:	68fb      	ldr	r3, [r7, #12]
  401094:	68ba      	ldr	r2, [r7, #8]
  401096:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401098:	687b      	ldr	r3, [r7, #4]
  40109a:	f003 0302 	and.w	r3, r3, #2
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d004      	beq.n	4010ac <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4010a2:	68fb      	ldr	r3, [r7, #12]
  4010a4:	68ba      	ldr	r2, [r7, #8]
  4010a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4010aa:	e008      	b.n	4010be <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4010ac:	687b      	ldr	r3, [r7, #4]
  4010ae:	f003 0308 	and.w	r3, r3, #8
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d003      	beq.n	4010be <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4010b6:	68fb      	ldr	r3, [r7, #12]
  4010b8:	68ba      	ldr	r2, [r7, #8]
  4010ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4010be:	68fb      	ldr	r3, [r7, #12]
  4010c0:	68ba      	ldr	r2, [r7, #8]
  4010c2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	68ba      	ldr	r2, [r7, #8]
  4010c8:	601a      	str	r2, [r3, #0]
}
  4010ca:	bf00      	nop
  4010cc:	3710      	adds	r7, #16
  4010ce:	46bd      	mov	sp, r7
  4010d0:	bd80      	pop	{r7, pc}
  4010d2:	bf00      	nop
  4010d4:	004011c5 	.word	0x004011c5
  4010d8:	00400eed 	.word	0x00400eed

004010dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4010dc:	b580      	push	{r7, lr}
  4010de:	b084      	sub	sp, #16
  4010e0:	af00      	add	r7, sp, #0
  4010e2:	60f8      	str	r0, [r7, #12]
  4010e4:	60b9      	str	r1, [r7, #8]
  4010e6:	607a      	str	r2, [r7, #4]
  4010e8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4010ea:	68b9      	ldr	r1, [r7, #8]
  4010ec:	68f8      	ldr	r0, [r7, #12]
  4010ee:	4b12      	ldr	r3, [pc, #72]	; (401138 <pio_set_output+0x5c>)
  4010f0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4010f2:	69ba      	ldr	r2, [r7, #24]
  4010f4:	68b9      	ldr	r1, [r7, #8]
  4010f6:	68f8      	ldr	r0, [r7, #12]
  4010f8:	4b10      	ldr	r3, [pc, #64]	; (40113c <pio_set_output+0x60>)
  4010fa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4010fc:	683b      	ldr	r3, [r7, #0]
  4010fe:	2b00      	cmp	r3, #0
  401100:	d003      	beq.n	40110a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401102:	68fb      	ldr	r3, [r7, #12]
  401104:	68ba      	ldr	r2, [r7, #8]
  401106:	651a      	str	r2, [r3, #80]	; 0x50
  401108:	e002      	b.n	401110 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40110a:	68fb      	ldr	r3, [r7, #12]
  40110c:	68ba      	ldr	r2, [r7, #8]
  40110e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401110:	687b      	ldr	r3, [r7, #4]
  401112:	2b00      	cmp	r3, #0
  401114:	d003      	beq.n	40111e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401116:	68fb      	ldr	r3, [r7, #12]
  401118:	68ba      	ldr	r2, [r7, #8]
  40111a:	631a      	str	r2, [r3, #48]	; 0x30
  40111c:	e002      	b.n	401124 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40111e:	68fb      	ldr	r3, [r7, #12]
  401120:	68ba      	ldr	r2, [r7, #8]
  401122:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401124:	68fb      	ldr	r3, [r7, #12]
  401126:	68ba      	ldr	r2, [r7, #8]
  401128:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40112a:	68fb      	ldr	r3, [r7, #12]
  40112c:	68ba      	ldr	r2, [r7, #8]
  40112e:	601a      	str	r2, [r3, #0]
}
  401130:	bf00      	nop
  401132:	3710      	adds	r7, #16
  401134:	46bd      	mov	sp, r7
  401136:	bd80      	pop	{r7, pc}
  401138:	004011c5 	.word	0x004011c5
  40113c:	00400eed 	.word	0x00400eed

00401140 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401140:	b480      	push	{r7}
  401142:	b085      	sub	sp, #20
  401144:	af00      	add	r7, sp, #0
  401146:	60f8      	str	r0, [r7, #12]
  401148:	60b9      	str	r1, [r7, #8]
  40114a:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	f003 0310 	and.w	r3, r3, #16
  401152:	2b00      	cmp	r3, #0
  401154:	d020      	beq.n	401198 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401156:	68fb      	ldr	r3, [r7, #12]
  401158:	68ba      	ldr	r2, [r7, #8]
  40115a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	f003 0320 	and.w	r3, r3, #32
  401164:	2b00      	cmp	r3, #0
  401166:	d004      	beq.n	401172 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401168:	68fb      	ldr	r3, [r7, #12]
  40116a:	68ba      	ldr	r2, [r7, #8]
  40116c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401170:	e003      	b.n	40117a <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401172:	68fb      	ldr	r3, [r7, #12]
  401174:	68ba      	ldr	r2, [r7, #8]
  401176:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40117a:	687b      	ldr	r3, [r7, #4]
  40117c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401180:	2b00      	cmp	r3, #0
  401182:	d004      	beq.n	40118e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401184:	68fb      	ldr	r3, [r7, #12]
  401186:	68ba      	ldr	r2, [r7, #8]
  401188:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40118c:	e008      	b.n	4011a0 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40118e:	68fb      	ldr	r3, [r7, #12]
  401190:	68ba      	ldr	r2, [r7, #8]
  401192:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401196:	e003      	b.n	4011a0 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401198:	68fb      	ldr	r3, [r7, #12]
  40119a:	68ba      	ldr	r2, [r7, #8]
  40119c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4011a0:	bf00      	nop
  4011a2:	3714      	adds	r7, #20
  4011a4:	46bd      	mov	sp, r7
  4011a6:	bc80      	pop	{r7}
  4011a8:	4770      	bx	lr

004011aa <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011aa:	b480      	push	{r7}
  4011ac:	b083      	sub	sp, #12
  4011ae:	af00      	add	r7, sp, #0
  4011b0:	6078      	str	r0, [r7, #4]
  4011b2:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4011b4:	687b      	ldr	r3, [r7, #4]
  4011b6:	683a      	ldr	r2, [r7, #0]
  4011b8:	641a      	str	r2, [r3, #64]	; 0x40
}
  4011ba:	bf00      	nop
  4011bc:	370c      	adds	r7, #12
  4011be:	46bd      	mov	sp, r7
  4011c0:	bc80      	pop	{r7}
  4011c2:	4770      	bx	lr

004011c4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011c4:	b480      	push	{r7}
  4011c6:	b083      	sub	sp, #12
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
  4011cc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4011ce:	687b      	ldr	r3, [r7, #4]
  4011d0:	683a      	ldr	r2, [r7, #0]
  4011d2:	645a      	str	r2, [r3, #68]	; 0x44
}
  4011d4:	bf00      	nop
  4011d6:	370c      	adds	r7, #12
  4011d8:	46bd      	mov	sp, r7
  4011da:	bc80      	pop	{r7}
  4011dc:	4770      	bx	lr

004011de <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4011de:	b480      	push	{r7}
  4011e0:	b083      	sub	sp, #12
  4011e2:	af00      	add	r7, sp, #0
  4011e4:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4011e6:	687b      	ldr	r3, [r7, #4]
  4011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4011ea:	4618      	mov	r0, r3
  4011ec:	370c      	adds	r7, #12
  4011ee:	46bd      	mov	sp, r7
  4011f0:	bc80      	pop	{r7}
  4011f2:	4770      	bx	lr

004011f4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4011f4:	b480      	push	{r7}
  4011f6:	b083      	sub	sp, #12
  4011f8:	af00      	add	r7, sp, #0
  4011fa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401200:	4618      	mov	r0, r3
  401202:	370c      	adds	r7, #12
  401204:	46bd      	mov	sp, r7
  401206:	bc80      	pop	{r7}
  401208:	4770      	bx	lr
	...

0040120c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40120c:	b590      	push	{r4, r7, lr}
  40120e:	b087      	sub	sp, #28
  401210:	af02      	add	r7, sp, #8
  401212:	6078      	str	r0, [r7, #4]
  401214:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401216:	6878      	ldr	r0, [r7, #4]
  401218:	4b63      	ldr	r3, [pc, #396]	; (4013a8 <pio_configure_pin+0x19c>)
  40121a:	4798      	blx	r3
  40121c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40121e:	683b      	ldr	r3, [r7, #0]
  401220:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401228:	d067      	beq.n	4012fa <pio_configure_pin+0xee>
  40122a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40122e:	d809      	bhi.n	401244 <pio_configure_pin+0x38>
  401230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401234:	d02b      	beq.n	40128e <pio_configure_pin+0x82>
  401236:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40123a:	d043      	beq.n	4012c4 <pio_configure_pin+0xb8>
  40123c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401240:	d00a      	beq.n	401258 <pio_configure_pin+0x4c>
  401242:	e0a9      	b.n	401398 <pio_configure_pin+0x18c>
  401244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401248:	d07e      	beq.n	401348 <pio_configure_pin+0x13c>
  40124a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40124e:	d07b      	beq.n	401348 <pio_configure_pin+0x13c>
  401250:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401254:	d06c      	beq.n	401330 <pio_configure_pin+0x124>
  401256:	e09f      	b.n	401398 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401258:	687b      	ldr	r3, [r7, #4]
  40125a:	f003 031f 	and.w	r3, r3, #31
  40125e:	2201      	movs	r2, #1
  401260:	fa02 f303 	lsl.w	r3, r2, r3
  401264:	461a      	mov	r2, r3
  401266:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40126a:	68f8      	ldr	r0, [r7, #12]
  40126c:	4b4f      	ldr	r3, [pc, #316]	; (4013ac <pio_configure_pin+0x1a0>)
  40126e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401270:	687b      	ldr	r3, [r7, #4]
  401272:	f003 031f 	and.w	r3, r3, #31
  401276:	2201      	movs	r2, #1
  401278:	fa02 f303 	lsl.w	r3, r2, r3
  40127c:	4619      	mov	r1, r3
  40127e:	683b      	ldr	r3, [r7, #0]
  401280:	f003 0301 	and.w	r3, r3, #1
  401284:	461a      	mov	r2, r3
  401286:	68f8      	ldr	r0, [r7, #12]
  401288:	4b49      	ldr	r3, [pc, #292]	; (4013b0 <pio_configure_pin+0x1a4>)
  40128a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40128c:	e086      	b.n	40139c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40128e:	687b      	ldr	r3, [r7, #4]
  401290:	f003 031f 	and.w	r3, r3, #31
  401294:	2201      	movs	r2, #1
  401296:	fa02 f303 	lsl.w	r3, r2, r3
  40129a:	461a      	mov	r2, r3
  40129c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b42      	ldr	r3, [pc, #264]	; (4013ac <pio_configure_pin+0x1a0>)
  4012a4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4012a6:	687b      	ldr	r3, [r7, #4]
  4012a8:	f003 031f 	and.w	r3, r3, #31
  4012ac:	2201      	movs	r2, #1
  4012ae:	fa02 f303 	lsl.w	r3, r2, r3
  4012b2:	4619      	mov	r1, r3
  4012b4:	683b      	ldr	r3, [r7, #0]
  4012b6:	f003 0301 	and.w	r3, r3, #1
  4012ba:	461a      	mov	r2, r3
  4012bc:	68f8      	ldr	r0, [r7, #12]
  4012be:	4b3c      	ldr	r3, [pc, #240]	; (4013b0 <pio_configure_pin+0x1a4>)
  4012c0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4012c2:	e06b      	b.n	40139c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4012c4:	687b      	ldr	r3, [r7, #4]
  4012c6:	f003 031f 	and.w	r3, r3, #31
  4012ca:	2201      	movs	r2, #1
  4012cc:	fa02 f303 	lsl.w	r3, r2, r3
  4012d0:	461a      	mov	r2, r3
  4012d2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4012d6:	68f8      	ldr	r0, [r7, #12]
  4012d8:	4b34      	ldr	r3, [pc, #208]	; (4013ac <pio_configure_pin+0x1a0>)
  4012da:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4012dc:	687b      	ldr	r3, [r7, #4]
  4012de:	f003 031f 	and.w	r3, r3, #31
  4012e2:	2201      	movs	r2, #1
  4012e4:	fa02 f303 	lsl.w	r3, r2, r3
  4012e8:	4619      	mov	r1, r3
  4012ea:	683b      	ldr	r3, [r7, #0]
  4012ec:	f003 0301 	and.w	r3, r3, #1
  4012f0:	461a      	mov	r2, r3
  4012f2:	68f8      	ldr	r0, [r7, #12]
  4012f4:	4b2e      	ldr	r3, [pc, #184]	; (4013b0 <pio_configure_pin+0x1a4>)
  4012f6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4012f8:	e050      	b.n	40139c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4012fa:	687b      	ldr	r3, [r7, #4]
  4012fc:	f003 031f 	and.w	r3, r3, #31
  401300:	2201      	movs	r2, #1
  401302:	fa02 f303 	lsl.w	r3, r2, r3
  401306:	461a      	mov	r2, r3
  401308:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40130c:	68f8      	ldr	r0, [r7, #12]
  40130e:	4b27      	ldr	r3, [pc, #156]	; (4013ac <pio_configure_pin+0x1a0>)
  401310:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401312:	687b      	ldr	r3, [r7, #4]
  401314:	f003 031f 	and.w	r3, r3, #31
  401318:	2201      	movs	r2, #1
  40131a:	fa02 f303 	lsl.w	r3, r2, r3
  40131e:	4619      	mov	r1, r3
  401320:	683b      	ldr	r3, [r7, #0]
  401322:	f003 0301 	and.w	r3, r3, #1
  401326:	461a      	mov	r2, r3
  401328:	68f8      	ldr	r0, [r7, #12]
  40132a:	4b21      	ldr	r3, [pc, #132]	; (4013b0 <pio_configure_pin+0x1a4>)
  40132c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40132e:	e035      	b.n	40139c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	f003 031f 	and.w	r3, r3, #31
  401336:	2201      	movs	r2, #1
  401338:	fa02 f303 	lsl.w	r3, r2, r3
  40133c:	683a      	ldr	r2, [r7, #0]
  40133e:	4619      	mov	r1, r3
  401340:	68f8      	ldr	r0, [r7, #12]
  401342:	4b1c      	ldr	r3, [pc, #112]	; (4013b4 <pio_configure_pin+0x1a8>)
  401344:	4798      	blx	r3
		break;
  401346:	e029      	b.n	40139c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	f003 031f 	and.w	r3, r3, #31
  40134e:	2201      	movs	r2, #1
  401350:	fa02 f303 	lsl.w	r3, r2, r3
  401354:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401356:	683b      	ldr	r3, [r7, #0]
  401358:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40135c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401360:	bf0c      	ite	eq
  401362:	2301      	moveq	r3, #1
  401364:	2300      	movne	r3, #0
  401366:	b2db      	uxtb	r3, r3
  401368:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40136a:	683b      	ldr	r3, [r7, #0]
  40136c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401370:	2b00      	cmp	r3, #0
  401372:	bf14      	ite	ne
  401374:	2301      	movne	r3, #1
  401376:	2300      	moveq	r3, #0
  401378:	b2db      	uxtb	r3, r3
  40137a:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40137c:	683b      	ldr	r3, [r7, #0]
  40137e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401382:	2b00      	cmp	r3, #0
  401384:	bf14      	ite	ne
  401386:	2301      	movne	r3, #1
  401388:	2300      	moveq	r3, #0
  40138a:	b2db      	uxtb	r3, r3
  40138c:	9300      	str	r3, [sp, #0]
  40138e:	4603      	mov	r3, r0
  401390:	68f8      	ldr	r0, [r7, #12]
  401392:	4c09      	ldr	r4, [pc, #36]	; (4013b8 <pio_configure_pin+0x1ac>)
  401394:	47a0      	blx	r4
		break;
  401396:	e001      	b.n	40139c <pio_configure_pin+0x190>

	default:
		return 0;
  401398:	2300      	movs	r3, #0
  40139a:	e000      	b.n	40139e <pio_configure_pin+0x192>
	}

	return 1;
  40139c:	2301      	movs	r3, #1
}
  40139e:	4618      	mov	r0, r3
  4013a0:	3714      	adds	r7, #20
  4013a2:	46bd      	mov	sp, r7
  4013a4:	bd90      	pop	{r4, r7, pc}
  4013a6:	bf00      	nop
  4013a8:	004013bd 	.word	0x004013bd
  4013ac:	00400f4d 	.word	0x00400f4d
  4013b0:	00400eed 	.word	0x00400eed
  4013b4:	0040105d 	.word	0x0040105d
  4013b8:	004010dd 	.word	0x004010dd

004013bc <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4013bc:	b480      	push	{r7}
  4013be:	b085      	sub	sp, #20
  4013c0:	af00      	add	r7, sp, #0
  4013c2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013c4:	687b      	ldr	r3, [r7, #4]
  4013c6:	095b      	lsrs	r3, r3, #5
  4013c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4013cc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4013d0:	025b      	lsls	r3, r3, #9
  4013d2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4013d4:	68fb      	ldr	r3, [r7, #12]
}
  4013d6:	4618      	mov	r0, r3
  4013d8:	3714      	adds	r7, #20
  4013da:	46bd      	mov	sp, r7
  4013dc:	bc80      	pop	{r7}
  4013de:	4770      	bx	lr

004013e0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4013e0:	b480      	push	{r7}
  4013e2:	b085      	sub	sp, #20
  4013e4:	af00      	add	r7, sp, #0
  4013e6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013e8:	491c      	ldr	r1, [pc, #112]	; (40145c <pmc_switch_mck_to_pllack+0x7c>)
  4013ea:	4b1c      	ldr	r3, [pc, #112]	; (40145c <pmc_switch_mck_to_pllack+0x7c>)
  4013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4013f2:	687b      	ldr	r3, [r7, #4]
  4013f4:	4313      	orrs	r3, r2
  4013f6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4013fc:	60fb      	str	r3, [r7, #12]
  4013fe:	e007      	b.n	401410 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401400:	68fb      	ldr	r3, [r7, #12]
  401402:	2b00      	cmp	r3, #0
  401404:	d101      	bne.n	40140a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401406:	2301      	movs	r3, #1
  401408:	e023      	b.n	401452 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40140a:	68fb      	ldr	r3, [r7, #12]
  40140c:	3b01      	subs	r3, #1
  40140e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401410:	4b12      	ldr	r3, [pc, #72]	; (40145c <pmc_switch_mck_to_pllack+0x7c>)
  401412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401414:	f003 0308 	and.w	r3, r3, #8
  401418:	2b00      	cmp	r3, #0
  40141a:	d0f1      	beq.n	401400 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40141c:	4a0f      	ldr	r2, [pc, #60]	; (40145c <pmc_switch_mck_to_pllack+0x7c>)
  40141e:	4b0f      	ldr	r3, [pc, #60]	; (40145c <pmc_switch_mck_to_pllack+0x7c>)
  401420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401422:	f023 0303 	bic.w	r3, r3, #3
  401426:	f043 0302 	orr.w	r3, r3, #2
  40142a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40142c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401430:	60fb      	str	r3, [r7, #12]
  401432:	e007      	b.n	401444 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401434:	68fb      	ldr	r3, [r7, #12]
  401436:	2b00      	cmp	r3, #0
  401438:	d101      	bne.n	40143e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40143a:	2301      	movs	r3, #1
  40143c:	e009      	b.n	401452 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40143e:	68fb      	ldr	r3, [r7, #12]
  401440:	3b01      	subs	r3, #1
  401442:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401444:	4b05      	ldr	r3, [pc, #20]	; (40145c <pmc_switch_mck_to_pllack+0x7c>)
  401446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401448:	f003 0308 	and.w	r3, r3, #8
  40144c:	2b00      	cmp	r3, #0
  40144e:	d0f1      	beq.n	401434 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401450:	2300      	movs	r3, #0
}
  401452:	4618      	mov	r0, r3
  401454:	3714      	adds	r7, #20
  401456:	46bd      	mov	sp, r7
  401458:	bc80      	pop	{r7}
  40145a:	4770      	bx	lr
  40145c:	400e0400 	.word	0x400e0400

00401460 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401460:	b480      	push	{r7}
  401462:	b083      	sub	sp, #12
  401464:	af00      	add	r7, sp, #0
  401466:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	2b01      	cmp	r3, #1
  40146c:	d107      	bne.n	40147e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40146e:	4a08      	ldr	r2, [pc, #32]	; (401490 <pmc_switch_sclk_to_32kxtal+0x30>)
  401470:	4b07      	ldr	r3, [pc, #28]	; (401490 <pmc_switch_sclk_to_32kxtal+0x30>)
  401472:	689b      	ldr	r3, [r3, #8]
  401474:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40147c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40147e:	4b04      	ldr	r3, [pc, #16]	; (401490 <pmc_switch_sclk_to_32kxtal+0x30>)
  401480:	4a04      	ldr	r2, [pc, #16]	; (401494 <pmc_switch_sclk_to_32kxtal+0x34>)
  401482:	601a      	str	r2, [r3, #0]
}
  401484:	bf00      	nop
  401486:	370c      	adds	r7, #12
  401488:	46bd      	mov	sp, r7
  40148a:	bc80      	pop	{r7}
  40148c:	4770      	bx	lr
  40148e:	bf00      	nop
  401490:	400e1410 	.word	0x400e1410
  401494:	a5000008 	.word	0xa5000008

00401498 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401498:	b480      	push	{r7}
  40149a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40149c:	4b09      	ldr	r3, [pc, #36]	; (4014c4 <pmc_osc_is_ready_32kxtal+0x2c>)
  40149e:	695b      	ldr	r3, [r3, #20]
  4014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d007      	beq.n	4014b8 <pmc_osc_is_ready_32kxtal+0x20>
  4014a8:	4b07      	ldr	r3, [pc, #28]	; (4014c8 <pmc_osc_is_ready_32kxtal+0x30>)
  4014aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4014b0:	2b00      	cmp	r3, #0
  4014b2:	d001      	beq.n	4014b8 <pmc_osc_is_ready_32kxtal+0x20>
  4014b4:	2301      	movs	r3, #1
  4014b6:	e000      	b.n	4014ba <pmc_osc_is_ready_32kxtal+0x22>
  4014b8:	2300      	movs	r3, #0
}
  4014ba:	4618      	mov	r0, r3
  4014bc:	46bd      	mov	sp, r7
  4014be:	bc80      	pop	{r7}
  4014c0:	4770      	bx	lr
  4014c2:	bf00      	nop
  4014c4:	400e1410 	.word	0x400e1410
  4014c8:	400e0400 	.word	0x400e0400

004014cc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4014cc:	b480      	push	{r7}
  4014ce:	b083      	sub	sp, #12
  4014d0:	af00      	add	r7, sp, #0
  4014d2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4014d4:	4a18      	ldr	r2, [pc, #96]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014d6:	4b18      	ldr	r3, [pc, #96]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014d8:	6a1b      	ldr	r3, [r3, #32]
  4014da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4014de:	f043 0308 	orr.w	r3, r3, #8
  4014e2:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014e4:	bf00      	nop
  4014e6:	4b14      	ldr	r3, [pc, #80]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4014ee:	2b00      	cmp	r3, #0
  4014f0:	d0f9      	beq.n	4014e6 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4014f2:	4911      	ldr	r1, [pc, #68]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014f4:	4b10      	ldr	r3, [pc, #64]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014f6:	6a1b      	ldr	r3, [r3, #32]
  4014f8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4014fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401500:	687a      	ldr	r2, [r7, #4]
  401502:	4313      	orrs	r3, r2
  401504:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401508:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40150a:	bf00      	nop
  40150c:	4b0a      	ldr	r3, [pc, #40]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  40150e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401514:	2b00      	cmp	r3, #0
  401516:	d0f9      	beq.n	40150c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401518:	4a07      	ldr	r2, [pc, #28]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  40151a:	4b07      	ldr	r3, [pc, #28]	; (401538 <pmc_switch_mainck_to_fastrc+0x6c>)
  40151c:	6a1b      	ldr	r3, [r3, #32]
  40151e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401526:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40152a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40152c:	bf00      	nop
  40152e:	370c      	adds	r7, #12
  401530:	46bd      	mov	sp, r7
  401532:	bc80      	pop	{r7}
  401534:	4770      	bx	lr
  401536:	bf00      	nop
  401538:	400e0400 	.word	0x400e0400

0040153c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40153c:	b480      	push	{r7}
  40153e:	b083      	sub	sp, #12
  401540:	af00      	add	r7, sp, #0
  401542:	6078      	str	r0, [r7, #4]
  401544:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401546:	687b      	ldr	r3, [r7, #4]
  401548:	2b00      	cmp	r3, #0
  40154a:	d008      	beq.n	40155e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40154c:	4916      	ldr	r1, [pc, #88]	; (4015a8 <pmc_switch_mainck_to_xtal+0x6c>)
  40154e:	4b16      	ldr	r3, [pc, #88]	; (4015a8 <pmc_switch_mainck_to_xtal+0x6c>)
  401550:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401552:	4a16      	ldr	r2, [pc, #88]	; (4015ac <pmc_switch_mainck_to_xtal+0x70>)
  401554:	401a      	ands	r2, r3
  401556:	4b16      	ldr	r3, [pc, #88]	; (4015b0 <pmc_switch_mainck_to_xtal+0x74>)
  401558:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40155a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40155c:	e01e      	b.n	40159c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40155e:	4912      	ldr	r1, [pc, #72]	; (4015a8 <pmc_switch_mainck_to_xtal+0x6c>)
  401560:	4b11      	ldr	r3, [pc, #68]	; (4015a8 <pmc_switch_mainck_to_xtal+0x6c>)
  401562:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401564:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401568:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40156c:	683a      	ldr	r2, [r7, #0]
  40156e:	0212      	lsls	r2, r2, #8
  401570:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401572:	4313      	orrs	r3, r2
  401574:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401578:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40157c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40157e:	bf00      	nop
  401580:	4b09      	ldr	r3, [pc, #36]	; (4015a8 <pmc_switch_mainck_to_xtal+0x6c>)
  401582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401584:	f003 0301 	and.w	r3, r3, #1
  401588:	2b00      	cmp	r3, #0
  40158a:	d0f9      	beq.n	401580 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40158c:	4a06      	ldr	r2, [pc, #24]	; (4015a8 <pmc_switch_mainck_to_xtal+0x6c>)
  40158e:	4b06      	ldr	r3, [pc, #24]	; (4015a8 <pmc_switch_mainck_to_xtal+0x6c>)
  401590:	6a1b      	ldr	r3, [r3, #32]
  401592:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40159a:	6213      	str	r3, [r2, #32]
}
  40159c:	bf00      	nop
  40159e:	370c      	adds	r7, #12
  4015a0:	46bd      	mov	sp, r7
  4015a2:	bc80      	pop	{r7}
  4015a4:	4770      	bx	lr
  4015a6:	bf00      	nop
  4015a8:	400e0400 	.word	0x400e0400
  4015ac:	fec8fffc 	.word	0xfec8fffc
  4015b0:	01370002 	.word	0x01370002

004015b4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4015b4:	b480      	push	{r7}
  4015b6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4015b8:	4b03      	ldr	r3, [pc, #12]	; (4015c8 <pmc_osc_is_ready_mainck+0x14>)
  4015ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4015c0:	4618      	mov	r0, r3
  4015c2:	46bd      	mov	sp, r7
  4015c4:	bc80      	pop	{r7}
  4015c6:	4770      	bx	lr
  4015c8:	400e0400 	.word	0x400e0400

004015cc <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4015cc:	b480      	push	{r7}
  4015ce:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4015d0:	4b03      	ldr	r3, [pc, #12]	; (4015e0 <pmc_disable_pllack+0x14>)
  4015d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4015d8:	bf00      	nop
  4015da:	46bd      	mov	sp, r7
  4015dc:	bc80      	pop	{r7}
  4015de:	4770      	bx	lr
  4015e0:	400e0400 	.word	0x400e0400

004015e4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4015e4:	b480      	push	{r7}
  4015e6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4015e8:	4b03      	ldr	r3, [pc, #12]	; (4015f8 <pmc_is_locked_pllack+0x14>)
  4015ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015ec:	f003 0302 	and.w	r3, r3, #2
}
  4015f0:	4618      	mov	r0, r3
  4015f2:	46bd      	mov	sp, r7
  4015f4:	bc80      	pop	{r7}
  4015f6:	4770      	bx	lr
  4015f8:	400e0400 	.word	0x400e0400

004015fc <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4015fc:	b480      	push	{r7}
  4015fe:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401600:	4b03      	ldr	r3, [pc, #12]	; (401610 <pmc_disable_pllbck+0x14>)
  401602:	2200      	movs	r2, #0
  401604:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401606:	bf00      	nop
  401608:	46bd      	mov	sp, r7
  40160a:	bc80      	pop	{r7}
  40160c:	4770      	bx	lr
  40160e:	bf00      	nop
  401610:	400e0400 	.word	0x400e0400

00401614 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401614:	b480      	push	{r7}
  401616:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401618:	4b03      	ldr	r3, [pc, #12]	; (401628 <pmc_is_locked_pllbck+0x14>)
  40161a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40161c:	f003 0304 	and.w	r3, r3, #4
}
  401620:	4618      	mov	r0, r3
  401622:	46bd      	mov	sp, r7
  401624:	bc80      	pop	{r7}
  401626:	4770      	bx	lr
  401628:	400e0400 	.word	0x400e0400

0040162c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40162c:	b480      	push	{r7}
  40162e:	b083      	sub	sp, #12
  401630:	af00      	add	r7, sp, #0
  401632:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401634:	687b      	ldr	r3, [r7, #4]
  401636:	2b22      	cmp	r3, #34	; 0x22
  401638:	d901      	bls.n	40163e <pmc_enable_periph_clk+0x12>
		return 1;
  40163a:	2301      	movs	r3, #1
  40163c:	e02f      	b.n	40169e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40163e:	687b      	ldr	r3, [r7, #4]
  401640:	2b1f      	cmp	r3, #31
  401642:	d813      	bhi.n	40166c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401644:	4b18      	ldr	r3, [pc, #96]	; (4016a8 <pmc_enable_periph_clk+0x7c>)
  401646:	699a      	ldr	r2, [r3, #24]
  401648:	2101      	movs	r1, #1
  40164a:	687b      	ldr	r3, [r7, #4]
  40164c:	fa01 f303 	lsl.w	r3, r1, r3
  401650:	401a      	ands	r2, r3
  401652:	2101      	movs	r1, #1
  401654:	687b      	ldr	r3, [r7, #4]
  401656:	fa01 f303 	lsl.w	r3, r1, r3
  40165a:	429a      	cmp	r2, r3
  40165c:	d01e      	beq.n	40169c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40165e:	4a12      	ldr	r2, [pc, #72]	; (4016a8 <pmc_enable_periph_clk+0x7c>)
  401660:	2101      	movs	r1, #1
  401662:	687b      	ldr	r3, [r7, #4]
  401664:	fa01 f303 	lsl.w	r3, r1, r3
  401668:	6113      	str	r3, [r2, #16]
  40166a:	e017      	b.n	40169c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40166c:	687b      	ldr	r3, [r7, #4]
  40166e:	3b20      	subs	r3, #32
  401670:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401672:	4b0d      	ldr	r3, [pc, #52]	; (4016a8 <pmc_enable_periph_clk+0x7c>)
  401674:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401678:	2101      	movs	r1, #1
  40167a:	687b      	ldr	r3, [r7, #4]
  40167c:	fa01 f303 	lsl.w	r3, r1, r3
  401680:	401a      	ands	r2, r3
  401682:	2101      	movs	r1, #1
  401684:	687b      	ldr	r3, [r7, #4]
  401686:	fa01 f303 	lsl.w	r3, r1, r3
  40168a:	429a      	cmp	r2, r3
  40168c:	d006      	beq.n	40169c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40168e:	4a06      	ldr	r2, [pc, #24]	; (4016a8 <pmc_enable_periph_clk+0x7c>)
  401690:	2101      	movs	r1, #1
  401692:	687b      	ldr	r3, [r7, #4]
  401694:	fa01 f303 	lsl.w	r3, r1, r3
  401698:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40169c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40169e:	4618      	mov	r0, r3
  4016a0:	370c      	adds	r7, #12
  4016a2:	46bd      	mov	sp, r7
  4016a4:	bc80      	pop	{r7}
  4016a6:	4770      	bx	lr
  4016a8:	400e0400 	.word	0x400e0400

004016ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4016ac:	b480      	push	{r7}
  4016ae:	b083      	sub	sp, #12
  4016b0:	af00      	add	r7, sp, #0
  4016b2:	4603      	mov	r3, r0
  4016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016ba:	2b00      	cmp	r3, #0
  4016bc:	db0b      	blt.n	4016d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016be:	4908      	ldr	r1, [pc, #32]	; (4016e0 <__NVIC_EnableIRQ+0x34>)
  4016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016c4:	095b      	lsrs	r3, r3, #5
  4016c6:	79fa      	ldrb	r2, [r7, #7]
  4016c8:	f002 021f 	and.w	r2, r2, #31
  4016cc:	2001      	movs	r0, #1
  4016ce:	fa00 f202 	lsl.w	r2, r0, r2
  4016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4016d6:	bf00      	nop
  4016d8:	370c      	adds	r7, #12
  4016da:	46bd      	mov	sp, r7
  4016dc:	bc80      	pop	{r7}
  4016de:	4770      	bx	lr
  4016e0:	e000e100 	.word	0xe000e100

004016e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4016e4:	b480      	push	{r7}
  4016e6:	b083      	sub	sp, #12
  4016e8:	af00      	add	r7, sp, #0
  4016ea:	4603      	mov	r3, r0
  4016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016f2:	2b00      	cmp	r3, #0
  4016f4:	db10      	blt.n	401718 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016f6:	490b      	ldr	r1, [pc, #44]	; (401724 <__NVIC_DisableIRQ+0x40>)
  4016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016fc:	095b      	lsrs	r3, r3, #5
  4016fe:	79fa      	ldrb	r2, [r7, #7]
  401700:	f002 021f 	and.w	r2, r2, #31
  401704:	2001      	movs	r0, #1
  401706:	fa00 f202 	lsl.w	r2, r0, r2
  40170a:	3320      	adds	r3, #32
  40170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  401710:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401714:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  401718:	bf00      	nop
  40171a:	370c      	adds	r7, #12
  40171c:	46bd      	mov	sp, r7
  40171e:	bc80      	pop	{r7}
  401720:	4770      	bx	lr
  401722:	bf00      	nop
  401724:	e000e100 	.word	0xe000e100

00401728 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401728:	b480      	push	{r7}
  40172a:	b083      	sub	sp, #12
  40172c:	af00      	add	r7, sp, #0
  40172e:	4603      	mov	r3, r0
  401730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401732:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401736:	2b00      	cmp	r3, #0
  401738:	db0c      	blt.n	401754 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40173a:	4909      	ldr	r1, [pc, #36]	; (401760 <__NVIC_ClearPendingIRQ+0x38>)
  40173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401740:	095b      	lsrs	r3, r3, #5
  401742:	79fa      	ldrb	r2, [r7, #7]
  401744:	f002 021f 	and.w	r2, r2, #31
  401748:	2001      	movs	r0, #1
  40174a:	fa00 f202 	lsl.w	r2, r0, r2
  40174e:	3360      	adds	r3, #96	; 0x60
  401750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  401754:	bf00      	nop
  401756:	370c      	adds	r7, #12
  401758:	46bd      	mov	sp, r7
  40175a:	bc80      	pop	{r7}
  40175c:	4770      	bx	lr
  40175e:	bf00      	nop
  401760:	e000e100 	.word	0xe000e100

00401764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401764:	b480      	push	{r7}
  401766:	b083      	sub	sp, #12
  401768:	af00      	add	r7, sp, #0
  40176a:	4603      	mov	r3, r0
  40176c:	6039      	str	r1, [r7, #0]
  40176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401770:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401774:	2b00      	cmp	r3, #0
  401776:	db0a      	blt.n	40178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401778:	490d      	ldr	r1, [pc, #52]	; (4017b0 <__NVIC_SetPriority+0x4c>)
  40177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40177e:	683a      	ldr	r2, [r7, #0]
  401780:	b2d2      	uxtb	r2, r2
  401782:	0112      	lsls	r2, r2, #4
  401784:	b2d2      	uxtb	r2, r2
  401786:	440b      	add	r3, r1
  401788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  40178c:	e00a      	b.n	4017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40178e:	4909      	ldr	r1, [pc, #36]	; (4017b4 <__NVIC_SetPriority+0x50>)
  401790:	79fb      	ldrb	r3, [r7, #7]
  401792:	f003 030f 	and.w	r3, r3, #15
  401796:	3b04      	subs	r3, #4
  401798:	683a      	ldr	r2, [r7, #0]
  40179a:	b2d2      	uxtb	r2, r2
  40179c:	0112      	lsls	r2, r2, #4
  40179e:	b2d2      	uxtb	r2, r2
  4017a0:	440b      	add	r3, r1
  4017a2:	761a      	strb	r2, [r3, #24]
}
  4017a4:	bf00      	nop
  4017a6:	370c      	adds	r7, #12
  4017a8:	46bd      	mov	sp, r7
  4017aa:	bc80      	pop	{r7}
  4017ac:	4770      	bx	lr
  4017ae:	bf00      	nop
  4017b0:	e000e100 	.word	0xe000e100
  4017b4:	e000ed00 	.word	0xe000ed00

004017b8 <osc_get_rate>:
{
  4017b8:	b480      	push	{r7}
  4017ba:	b083      	sub	sp, #12
  4017bc:	af00      	add	r7, sp, #0
  4017be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4017c0:	687b      	ldr	r3, [r7, #4]
  4017c2:	2b07      	cmp	r3, #7
  4017c4:	d825      	bhi.n	401812 <osc_get_rate+0x5a>
  4017c6:	a201      	add	r2, pc, #4	; (adr r2, 4017cc <osc_get_rate+0x14>)
  4017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017cc:	004017ed 	.word	0x004017ed
  4017d0:	004017f3 	.word	0x004017f3
  4017d4:	004017f9 	.word	0x004017f9
  4017d8:	004017ff 	.word	0x004017ff
  4017dc:	00401803 	.word	0x00401803
  4017e0:	00401807 	.word	0x00401807
  4017e4:	0040180b 	.word	0x0040180b
  4017e8:	0040180f 	.word	0x0040180f
		return OSC_SLCK_32K_RC_HZ;
  4017ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4017f0:	e010      	b.n	401814 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4017f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4017f6:	e00d      	b.n	401814 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4017f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4017fc:	e00a      	b.n	401814 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4017fe:	4b08      	ldr	r3, [pc, #32]	; (401820 <osc_get_rate+0x68>)
  401800:	e008      	b.n	401814 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401802:	4b08      	ldr	r3, [pc, #32]	; (401824 <osc_get_rate+0x6c>)
  401804:	e006      	b.n	401814 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401806:	4b08      	ldr	r3, [pc, #32]	; (401828 <osc_get_rate+0x70>)
  401808:	e004      	b.n	401814 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40180a:	4b07      	ldr	r3, [pc, #28]	; (401828 <osc_get_rate+0x70>)
  40180c:	e002      	b.n	401814 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40180e:	4b06      	ldr	r3, [pc, #24]	; (401828 <osc_get_rate+0x70>)
  401810:	e000      	b.n	401814 <osc_get_rate+0x5c>
	return 0;
  401812:	2300      	movs	r3, #0
}
  401814:	4618      	mov	r0, r3
  401816:	370c      	adds	r7, #12
  401818:	46bd      	mov	sp, r7
  40181a:	bc80      	pop	{r7}
  40181c:	4770      	bx	lr
  40181e:	bf00      	nop
  401820:	003d0900 	.word	0x003d0900
  401824:	007a1200 	.word	0x007a1200
  401828:	00b71b00 	.word	0x00b71b00

0040182c <sysclk_get_main_hz>:
{
  40182c:	b580      	push	{r7, lr}
  40182e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401830:	2006      	movs	r0, #6
  401832:	4b04      	ldr	r3, [pc, #16]	; (401844 <sysclk_get_main_hz+0x18>)
  401834:	4798      	blx	r3
  401836:	4602      	mov	r2, r0
  401838:	4613      	mov	r3, r2
  40183a:	009b      	lsls	r3, r3, #2
  40183c:	4413      	add	r3, r2
  40183e:	009b      	lsls	r3, r3, #2
}
  401840:	4618      	mov	r0, r3
  401842:	bd80      	pop	{r7, pc}
  401844:	004017b9 	.word	0x004017b9

00401848 <sysclk_get_cpu_hz>:
{
  401848:	b580      	push	{r7, lr}
  40184a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40184c:	4b02      	ldr	r3, [pc, #8]	; (401858 <sysclk_get_cpu_hz+0x10>)
  40184e:	4798      	blx	r3
  401850:	4603      	mov	r3, r0
  401852:	085b      	lsrs	r3, r3, #1
}
  401854:	4618      	mov	r0, r3
  401856:	bd80      	pop	{r7, pc}
  401858:	0040182d 	.word	0x0040182d

0040185c <vsync_handler>:

uint16_t cap_line = (IMAGE_WIDTH * 2);
uint16_t cap_rows = IMAGE_HEIGHT;

void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  40185c:	b480      	push	{r7}
  40185e:	b083      	sub	sp, #12
  401860:	af00      	add	r7, sp, #0
  401862:	6078      	str	r0, [r7, #4]
  401864:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	vsync_flag = true;
  401866:	4b04      	ldr	r3, [pc, #16]	; (401878 <vsync_handler+0x1c>)
  401868:	2201      	movs	r2, #1
  40186a:	601a      	str	r2, [r3, #0]
}
  40186c:	bf00      	nop
  40186e:	370c      	adds	r7, #12
  401870:	46bd      	mov	sp, r7
  401872:	bc80      	pop	{r7}
  401874:	4770      	bx	lr
  401876:	bf00      	nop
  401878:	200004d4 	.word	0x200004d4

0040187c <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  40187c:	b590      	push	{r4, r7, lr}
  40187e:	b083      	sub	sp, #12
  401880:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(CAM_VSYNC_ID);
  401882:	200b      	movs	r0, #11
  401884:	4b0b      	ldr	r3, [pc, #44]	; (4018b4 <init_vsync_interrupts+0x38>)
  401886:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(CAM_VSYNC_PIO, CAM_VSYNC_ID, CAM_VSYNC_MASK,
  401888:	4b0b      	ldr	r3, [pc, #44]	; (4018b8 <init_vsync_interrupts+0x3c>)
  40188a:	9300      	str	r3, [sp, #0]
  40188c:	2301      	movs	r3, #1
  40188e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401892:	210b      	movs	r1, #11
  401894:	4809      	ldr	r0, [pc, #36]	; (4018bc <init_vsync_interrupts+0x40>)
  401896:	4c0a      	ldr	r4, [pc, #40]	; (4018c0 <init_vsync_interrupts+0x44>)
  401898:	47a0      	blx	r4
			CAM_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)CAM_VSYNC_ID);
  40189a:	200b      	movs	r0, #11
  40189c:	4b09      	ldr	r3, [pc, #36]	; (4018c4 <init_vsync_interrupts+0x48>)
  40189e:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(CAM_VSYNC_PIO, CAM_VSYNC_MASK);
  4018a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4018a4:	4805      	ldr	r0, [pc, #20]	; (4018bc <init_vsync_interrupts+0x40>)
  4018a6:	4b08      	ldr	r3, [pc, #32]	; (4018c8 <init_vsync_interrupts+0x4c>)
  4018a8:	4798      	blx	r3
}
  4018aa:	bf00      	nop
  4018ac:	3704      	adds	r7, #4
  4018ae:	46bd      	mov	sp, r7
  4018b0:	bd90      	pop	{r4, r7, pc}
  4018b2:	bf00      	nop
  4018b4:	0040162d 	.word	0x0040162d
  4018b8:	0040185d 	.word	0x0040185d
  4018bc:	400e0e00 	.word	0x400e0e00
  4018c0:	00400aa9 	.word	0x00400aa9
  4018c4:	004016ad 	.word	0x004016ad
  4018c8:	004011ab 	.word	0x004011ab

004018cc <pio_capture_init>:



void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  4018cc:	b580      	push	{r7, lr}
  4018ce:	b082      	sub	sp, #8
  4018d0:	af00      	add	r7, sp, #0
  4018d2:	6078      	str	r0, [r7, #4]
  4018d4:	6039      	str	r1, [r7, #0]
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  4018d6:	6838      	ldr	r0, [r7, #0]
  4018d8:	4b22      	ldr	r3, [pc, #136]	; (401964 <pio_capture_init+0x98>)
  4018da:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4018e2:	f023 0201 	bic.w	r2, r3, #1
  4018e6:	687b      	ldr	r3, [r7, #4]
  4018e8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  4018ec:	687b      	ldr	r3, [r7, #4]
  4018ee:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  4018f2:	f043 0208 	orr.w	r2, r3, #8
  4018f6:	687b      	ldr	r3, [r7, #4]
  4018f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  4018fc:	687b      	ldr	r3, [r7, #4]
  4018fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401902:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  401906:	687b      	ldr	r3, [r7, #4]
  401908:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  40190c:	687b      	ldr	r3, [r7, #4]
  40190e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401912:	f043 0220 	orr.w	r2, r3, #32
  401916:	687b      	ldr	r3, [r7, #4]
  401918:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  40191c:	687b      	ldr	r3, [r7, #4]
  40191e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401922:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  401926:	687b      	ldr	r3, [r7, #4]
  401928:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401932:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  401936:	687b      	ldr	r3, [r7, #4]
  401938:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	#if !defined(DEFAULT_MODE_COLORED)
	/* Samples only data with even index */
	p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
  40193c:	687b      	ldr	r3, [r7, #4]
  40193e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401942:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
  401946:	687b      	ldr	r3, [r7, #4]
  401948:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
  40194c:	687b      	ldr	r3, [r7, #4]
  40194e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401952:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  401956:	687b      	ldr	r3, [r7, #4]
  401958:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	#endif
}
  40195c:	bf00      	nop
  40195e:	3708      	adds	r7, #8
  401960:	46bd      	mov	sp, r7
  401962:	bd80      	pop	{r7, pc}
  401964:	0040162d 	.word	0x0040162d

00401968 <init_camera>:
		return 0;
	}
}

void init_camera(void)
{
  401968:	b580      	push	{r7, lr}
  40196a:	af00      	add	r7, sp, #0

	/* Init Vsync handler*/
	init_vsync_interrupts();
  40196c:	4b0e      	ldr	r3, [pc, #56]	; (4019a8 <init_camera+0x40>)
  40196e:	4798      	blx	r3

	/* Init PIO capture*/
	pio_capture_init(CAM_DATA_BUS_PIO, CAM_DATA_BUS_ID);
  401970:	210b      	movs	r1, #11
  401972:	480e      	ldr	r0, [pc, #56]	; (4019ac <init_camera+0x44>)
  401974:	4b0e      	ldr	r3, [pc, #56]	; (4019b0 <init_camera+0x48>)
  401976:	4798      	blx	r3

	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401978:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40197c:	2011      	movs	r0, #17
  40197e:	4b0d      	ldr	r3, [pc, #52]	; (4019b4 <init_camera+0x4c>)
  401980:	4798      	blx	r3

	/* Init PCK1 to work at 36 Mhz */
	/* 72/2=36 Mhz */
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_2 | PMC_PCK_CSS_PLLB_CLK);
  401982:	4b0d      	ldr	r3, [pc, #52]	; (4019b8 <init_camera+0x50>)
  401984:	2213      	movs	r2, #19
  401986:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  401988:	4b0b      	ldr	r3, [pc, #44]	; (4019b8 <init_camera+0x50>)
  40198a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40198e:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {
  401990:	bf00      	nop
  401992:	4b09      	ldr	r3, [pc, #36]	; (4019b8 <init_camera+0x50>)
  401994:	689b      	ldr	r3, [r3, #8]
  401996:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40199a:	2b00      	cmp	r3, #0
  40199c:	d0f9      	beq.n	401992 <init_camera+0x2a>
	}
	
	

	configure_twi();
  40199e:	4b07      	ldr	r3, [pc, #28]	; (4019bc <init_camera+0x54>)
  4019a0:	4798      	blx	r3

}
  4019a2:	bf00      	nop
  4019a4:	bd80      	pop	{r7, pc}
  4019a6:	bf00      	nop
  4019a8:	0040187d 	.word	0x0040187d
  4019ac:	400e0e00 	.word	0x400e0e00
  4019b0:	004018cd 	.word	0x004018cd
  4019b4:	0040120d 	.word	0x0040120d
  4019b8:	400e0400 	.word	0x400e0400
  4019bc:	004019c1 	.word	0x004019c1

004019c0 <configure_twi>:

void configure_twi(void){
  4019c0:	b580      	push	{r7, lr}
  4019c2:	b084      	sub	sp, #16
  4019c4:	af00      	add	r7, sp, #0
	twi_options_t opt;
	
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4019c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019ca:	2003      	movs	r0, #3
  4019cc:	4b12      	ldr	r3, [pc, #72]	; (401a18 <configure_twi+0x58>)
  4019ce:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4019d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019d4:	2004      	movs	r0, #4
  4019d6:	4b10      	ldr	r3, [pc, #64]	; (401a18 <configure_twi+0x58>)
  4019d8:	4798      	blx	r3
		
		/* Enable TWI peripheral */
		pmc_enable_periph_clk(ID_BOARD_TWI);
  4019da:	2013      	movs	r0, #19
  4019dc:	4b0f      	ldr	r3, [pc, #60]	; (401a1c <configure_twi+0x5c>)
  4019de:	4798      	blx	r3

		/* Init TWI peripheral */
		opt.master_clk = sysclk_get_cpu_hz();
  4019e0:	4b0f      	ldr	r3, [pc, #60]	; (401a20 <configure_twi+0x60>)
  4019e2:	4798      	blx	r3
  4019e4:	4603      	mov	r3, r0
  4019e6:	607b      	str	r3, [r7, #4]
		opt.speed      = TWI_CLK;
  4019e8:	4b0e      	ldr	r3, [pc, #56]	; (401a24 <configure_twi+0x64>)
  4019ea:	60bb      	str	r3, [r7, #8]
		twi_master_init(BOARD_TWI, &opt);
  4019ec:	1d3b      	adds	r3, r7, #4
  4019ee:	4619      	mov	r1, r3
  4019f0:	480d      	ldr	r0, [pc, #52]	; (401a28 <configure_twi+0x68>)
  4019f2:	4b0e      	ldr	r3, [pc, #56]	; (401a2c <configure_twi+0x6c>)
  4019f4:	4798      	blx	r3

		/* Configure TWI interrupts */
		NVIC_DisableIRQ(BOARD_TWI_IRQn);
  4019f6:	2013      	movs	r0, #19
  4019f8:	4b0d      	ldr	r3, [pc, #52]	; (401a30 <configure_twi+0x70>)
  4019fa:	4798      	blx	r3
		NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  4019fc:	2013      	movs	r0, #19
  4019fe:	4b0d      	ldr	r3, [pc, #52]	; (401a34 <configure_twi+0x74>)
  401a00:	4798      	blx	r3
		NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  401a02:	2100      	movs	r1, #0
  401a04:	2013      	movs	r0, #19
  401a06:	4b0c      	ldr	r3, [pc, #48]	; (401a38 <configure_twi+0x78>)
  401a08:	4798      	blx	r3
		NVIC_EnableIRQ(BOARD_TWI_IRQn);
  401a0a:	2013      	movs	r0, #19
  401a0c:	4b0b      	ldr	r3, [pc, #44]	; (401a3c <configure_twi+0x7c>)
  401a0e:	4798      	blx	r3
}
  401a10:	bf00      	nop
  401a12:	3710      	adds	r7, #16
  401a14:	46bd      	mov	sp, r7
  401a16:	bd80      	pop	{r7, pc}
  401a18:	0040120d 	.word	0x0040120d
  401a1c:	0040162d 	.word	0x0040162d
  401a20:	00401849 	.word	0x00401849
  401a24:	00061a80 	.word	0x00061a80
  401a28:	40018000 	.word	0x40018000
  401a2c:	004002c5 	.word	0x004002c5
  401a30:	004016e5 	.word	0x004016e5
  401a34:	00401729 	.word	0x00401729
  401a38:	00401765 	.word	0x00401765
  401a3c:	004016ad 	.word	0x004016ad

00401a40 <configure_camera>:

void configure_camera(void){
  401a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a44:	af00      	add	r7, sp, #0
	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  401a46:	bf00      	nop
  401a48:	4826      	ldr	r0, [pc, #152]	; (401ae4 <configure_camera+0xa4>)
  401a4a:	4b27      	ldr	r3, [pc, #156]	; (401ae8 <configure_camera+0xa8>)
  401a4c:	4798      	blx	r3
  401a4e:	4603      	mov	r3, r0
  401a50:	2b01      	cmp	r3, #1
  401a52:	d0f9      	beq.n	401a48 <configure_camera+0x8>
	}

	/* ov2640 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  401a54:	210b      	movs	r1, #11
  401a56:	4823      	ldr	r0, [pc, #140]	; (401ae4 <configure_camera+0xa4>)
  401a58:	4b24      	ldr	r3, [pc, #144]	; (401aec <configure_camera+0xac>)
  401a5a:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  401a5c:	4b24      	ldr	r3, [pc, #144]	; (401af0 <configure_camera+0xb0>)
  401a5e:	4798      	blx	r3
  401a60:	4603      	mov	r3, r0
  401a62:	4619      	mov	r1, r3
  401a64:	f04f 0200 	mov.w	r2, #0
  401a68:	460b      	mov	r3, r1
  401a6a:	4614      	mov	r4, r2
  401a6c:	18db      	adds	r3, r3, r3
  401a6e:	eb44 0404 	adc.w	r4, r4, r4
  401a72:	185b      	adds	r3, r3, r1
  401a74:	eb44 0402 	adc.w	r4, r4, r2
  401a78:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  401a7c:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  401a80:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  401a84:	4653      	mov	r3, sl
  401a86:	465c      	mov	r4, fp
  401a88:	1a5b      	subs	r3, r3, r1
  401a8a:	eb64 0402 	sbc.w	r4, r4, r2
  401a8e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401a92:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401a96:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401a9a:	4643      	mov	r3, r8
  401a9c:	464c      	mov	r4, r9
  401a9e:	1a5b      	subs	r3, r3, r1
  401aa0:	eb64 0402 	sbc.w	r4, r4, r2
  401aa4:	00e6      	lsls	r6, r4, #3
  401aa6:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401aaa:	00dd      	lsls	r5, r3, #3
  401aac:	462b      	mov	r3, r5
  401aae:	4634      	mov	r4, r6
  401ab0:	4619      	mov	r1, r3
  401ab2:	4622      	mov	r2, r4
  401ab4:	f243 63af 	movw	r3, #13999	; 0x36af
  401ab8:	f04f 0400 	mov.w	r4, #0
  401abc:	18cd      	adds	r5, r1, r3
  401abe:	eb42 0604 	adc.w	r6, r2, r4
  401ac2:	4628      	mov	r0, r5
  401ac4:	4631      	mov	r1, r6
  401ac6:	4c0b      	ldr	r4, [pc, #44]	; (401af4 <configure_camera+0xb4>)
  401ac8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401acc:	f04f 0300 	mov.w	r3, #0
  401ad0:	47a0      	blx	r4
  401ad2:	4603      	mov	r3, r0
  401ad4:	460c      	mov	r4, r1
  401ad6:	4618      	mov	r0, r3
  401ad8:	4b07      	ldr	r3, [pc, #28]	; (401af8 <configure_camera+0xb8>)
  401ada:	4798      	blx	r3
}
  401adc:	bf00      	nop
  401ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ae2:	bf00      	nop
  401ae4:	40018000 	.word	0x40018000
  401ae8:	00401e55 	.word	0x00401e55
  401aec:	00401ee1 	.word	0x00401ee1
  401af0:	00401849 	.word	0x00401849
  401af4:	00402cf9 	.word	0x00402cf9
  401af8:	20000001 	.word	0x20000001

00401afc <osc_get_rate>:
{
  401afc:	b480      	push	{r7}
  401afe:	b083      	sub	sp, #12
  401b00:	af00      	add	r7, sp, #0
  401b02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401b04:	687b      	ldr	r3, [r7, #4]
  401b06:	2b07      	cmp	r3, #7
  401b08:	d825      	bhi.n	401b56 <osc_get_rate+0x5a>
  401b0a:	a201      	add	r2, pc, #4	; (adr r2, 401b10 <osc_get_rate+0x14>)
  401b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b10:	00401b31 	.word	0x00401b31
  401b14:	00401b37 	.word	0x00401b37
  401b18:	00401b3d 	.word	0x00401b3d
  401b1c:	00401b43 	.word	0x00401b43
  401b20:	00401b47 	.word	0x00401b47
  401b24:	00401b4b 	.word	0x00401b4b
  401b28:	00401b4f 	.word	0x00401b4f
  401b2c:	00401b53 	.word	0x00401b53
		return OSC_SLCK_32K_RC_HZ;
  401b30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b34:	e010      	b.n	401b58 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b3a:	e00d      	b.n	401b58 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b40:	e00a      	b.n	401b58 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401b42:	4b08      	ldr	r3, [pc, #32]	; (401b64 <osc_get_rate+0x68>)
  401b44:	e008      	b.n	401b58 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401b46:	4b08      	ldr	r3, [pc, #32]	; (401b68 <osc_get_rate+0x6c>)
  401b48:	e006      	b.n	401b58 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401b4a:	4b08      	ldr	r3, [pc, #32]	; (401b6c <osc_get_rate+0x70>)
  401b4c:	e004      	b.n	401b58 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401b4e:	4b07      	ldr	r3, [pc, #28]	; (401b6c <osc_get_rate+0x70>)
  401b50:	e002      	b.n	401b58 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401b52:	4b06      	ldr	r3, [pc, #24]	; (401b6c <osc_get_rate+0x70>)
  401b54:	e000      	b.n	401b58 <osc_get_rate+0x5c>
	return 0;
  401b56:	2300      	movs	r3, #0
}
  401b58:	4618      	mov	r0, r3
  401b5a:	370c      	adds	r7, #12
  401b5c:	46bd      	mov	sp, r7
  401b5e:	bc80      	pop	{r7}
  401b60:	4770      	bx	lr
  401b62:	bf00      	nop
  401b64:	003d0900 	.word	0x003d0900
  401b68:	007a1200 	.word	0x007a1200
  401b6c:	00b71b00 	.word	0x00b71b00

00401b70 <sysclk_get_main_hz>:
{
  401b70:	b580      	push	{r7, lr}
  401b72:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401b74:	2006      	movs	r0, #6
  401b76:	4b04      	ldr	r3, [pc, #16]	; (401b88 <sysclk_get_main_hz+0x18>)
  401b78:	4798      	blx	r3
  401b7a:	4602      	mov	r2, r0
  401b7c:	4613      	mov	r3, r2
  401b7e:	009b      	lsls	r3, r3, #2
  401b80:	4413      	add	r3, r2
  401b82:	009b      	lsls	r3, r3, #2
}
  401b84:	4618      	mov	r0, r3
  401b86:	bd80      	pop	{r7, pc}
  401b88:	00401afd 	.word	0x00401afd

00401b8c <sysclk_get_cpu_hz>:
{
  401b8c:	b580      	push	{r7, lr}
  401b8e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401b90:	4b02      	ldr	r3, [pc, #8]	; (401b9c <sysclk_get_cpu_hz+0x10>)
  401b92:	4798      	blx	r3
  401b94:	4603      	mov	r3, r0
  401b96:	085b      	lsrs	r3, r3, #1
}
  401b98:	4618      	mov	r0, r3
  401b9a:	bd80      	pop	{r7, pc}
  401b9c:	00401b71 	.word	0x00401b71

00401ba0 <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  401ba0:	b580      	push	{r7, lr}
  401ba2:	b08e      	sub	sp, #56	; 0x38
  401ba4:	af00      	add	r7, sp, #0
  401ba6:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  401ba8:	2300      	movs	r3, #0
  401baa:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  401bac:	2300      	movs	r3, #0
  401bae:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401bb0:	2330      	movs	r3, #48	; 0x30
  401bb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  401bb6:	230a      	movs	r3, #10
  401bb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  401bbc:	2301      	movs	r3, #1
  401bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  401bc0:	f107 030c 	add.w	r3, r7, #12
  401bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  401bc6:	2301      	movs	r3, #1
  401bc8:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  401bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401bce:	4619      	mov	r1, r3
  401bd0:	6878      	ldr	r0, [r7, #4]
  401bd2:	4b0e      	ldr	r3, [pc, #56]	; (401c0c <ov_id+0x6c>)
  401bd4:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401bd6:	2330      	movs	r3, #48	; 0x30
  401bd8:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  401bdc:	230b      	movs	r3, #11
  401bde:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401be0:	2301      	movs	r3, #1
  401be2:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  401be4:	f107 0308 	add.w	r3, r7, #8
  401be8:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  401bea:	2301      	movs	r3, #1
  401bec:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  401bee:	f107 0310 	add.w	r3, r7, #16
  401bf2:	4619      	mov	r1, r3
  401bf4:	6878      	ldr	r0, [r7, #4]
  401bf6:	4b05      	ldr	r3, [pc, #20]	; (401c0c <ov_id+0x6c>)
  401bf8:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  401bfa:	68fb      	ldr	r3, [r7, #12]
  401bfc:	021a      	lsls	r2, r3, #8
  401bfe:	68bb      	ldr	r3, [r7, #8]
  401c00:	4313      	orrs	r3, r2
}
  401c02:	4618      	mov	r0, r3
  401c04:	3738      	adds	r7, #56	; 0x38
  401c06:	46bd      	mov	sp, r7
  401c08:	bd80      	pop	{r7, pc}
  401c0a:	bf00      	nop
  401c0c:	00401d39 	.word	0x00401d39

00401c10 <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  401c10:	b580      	push	{r7, lr}
  401c12:	b08a      	sub	sp, #40	; 0x28
  401c14:	af00      	add	r7, sp, #0
  401c16:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  401c18:	2300      	movs	r3, #0
  401c1a:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  401c1c:	2300      	movs	r3, #0
  401c1e:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  401c20:	231c      	movs	r3, #28
  401c22:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401c24:	2301      	movs	r3, #1
  401c26:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401c28:	2330      	movs	r3, #48	; 0x30
  401c2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  401c2e:	f107 0310 	add.w	r3, r7, #16
  401c32:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401c34:	2301      	movs	r3, #1
  401c36:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401c38:	f107 0314 	add.w	r3, r7, #20
  401c3c:	4619      	mov	r1, r3
  401c3e:	6878      	ldr	r0, [r7, #4]
  401c40:	4b10      	ldr	r3, [pc, #64]	; (401c84 <ov_manufacturer+0x74>)
  401c42:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  401c44:	231d      	movs	r3, #29
  401c46:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401c48:	2301      	movs	r3, #1
  401c4a:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401c4c:	2330      	movs	r3, #48	; 0x30
  401c4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  401c52:	f107 030c 	add.w	r3, r7, #12
  401c56:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401c58:	2301      	movs	r3, #1
  401c5a:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401c5c:	f107 0314 	add.w	r3, r7, #20
  401c60:	4619      	mov	r1, r3
  401c62:	6878      	ldr	r0, [r7, #4]
  401c64:	4b07      	ldr	r3, [pc, #28]	; (401c84 <ov_manufacturer+0x74>)
  401c66:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  401c68:	693b      	ldr	r3, [r7, #16]
  401c6a:	2b7f      	cmp	r3, #127	; 0x7f
  401c6c:	d104      	bne.n	401c78 <ov_manufacturer+0x68>
  401c6e:	68fb      	ldr	r3, [r7, #12]
  401c70:	2ba2      	cmp	r3, #162	; 0xa2
  401c72:	d101      	bne.n	401c78 <ov_manufacturer+0x68>
		return 0;
  401c74:	2300      	movs	r3, #0
  401c76:	e000      	b.n	401c7a <ov_manufacturer+0x6a>
	}

	return 1;
  401c78:	2301      	movs	r3, #1
}
  401c7a:	4618      	mov	r0, r3
  401c7c:	3728      	adds	r7, #40	; 0x28
  401c7e:	46bd      	mov	sp, r7
  401c80:	bd80      	pop	{r7, pc}
  401c82:	bf00      	nop
  401c84:	00401d39 	.word	0x00401d39

00401c88 <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  401c88:	b580      	push	{r7, lr}
  401c8a:	b08a      	sub	sp, #40	; 0x28
  401c8c:	af00      	add	r7, sp, #0
  401c8e:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  401c90:	2300      	movs	r3, #0
  401c92:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  401c94:	2300      	movs	r3, #0
  401c96:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  401c98:	2300      	movs	r3, #0
  401c9a:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  401c9c:	2301      	movs	r3, #1
  401c9e:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401ca0:	2301      	movs	r3, #1
  401ca2:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401ca4:	2330      	movs	r3, #48	; 0x30
  401ca6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  401caa:	2301      	movs	r3, #1
  401cac:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  401cae:	f107 030c 	add.w	r3, r7, #12
  401cb2:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401cb4:	f107 0314 	add.w	r3, r7, #20
  401cb8:	4619      	mov	r1, r3
  401cba:	6878      	ldr	r0, [r7, #4]
  401cbc:	4b1c      	ldr	r3, [pc, #112]	; (401d30 <ov_test_write+0xa8>)
  401cbe:	4798      	blx	r3

	ul_entervalue = 0xAD;
  401cc0:	23ad      	movs	r3, #173	; 0xad
  401cc2:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  401cc4:	f107 0308 	add.w	r3, r7, #8
  401cc8:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401cca:	f107 0314 	add.w	r3, r7, #20
  401cce:	4619      	mov	r1, r3
  401cd0:	6878      	ldr	r0, [r7, #4]
  401cd2:	4b18      	ldr	r3, [pc, #96]	; (401d34 <ov_test_write+0xac>)
  401cd4:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401cd6:	f107 0310 	add.w	r3, r7, #16
  401cda:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401cdc:	f107 0314 	add.w	r3, r7, #20
  401ce0:	4619      	mov	r1, r3
  401ce2:	6878      	ldr	r0, [r7, #4]
  401ce4:	4b12      	ldr	r3, [pc, #72]	; (401d30 <ov_test_write+0xa8>)
  401ce6:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  401ce8:	693a      	ldr	r2, [r7, #16]
  401cea:	68bb      	ldr	r3, [r7, #8]
  401cec:	429a      	cmp	r2, r3
  401cee:	d001      	beq.n	401cf4 <ov_test_write+0x6c>
		return 1;
  401cf0:	2301      	movs	r3, #1
  401cf2:	e018      	b.n	401d26 <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  401cf4:	f107 030c 	add.w	r3, r7, #12
  401cf8:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401cfa:	f107 0314 	add.w	r3, r7, #20
  401cfe:	4619      	mov	r1, r3
  401d00:	6878      	ldr	r0, [r7, #4]
  401d02:	4b0c      	ldr	r3, [pc, #48]	; (401d34 <ov_test_write+0xac>)
  401d04:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401d06:	f107 0310 	add.w	r3, r7, #16
  401d0a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401d0c:	f107 0314 	add.w	r3, r7, #20
  401d10:	4619      	mov	r1, r3
  401d12:	6878      	ldr	r0, [r7, #4]
  401d14:	4b06      	ldr	r3, [pc, #24]	; (401d30 <ov_test_write+0xa8>)
  401d16:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401d18:	693a      	ldr	r2, [r7, #16]
  401d1a:	68fb      	ldr	r3, [r7, #12]
  401d1c:	429a      	cmp	r2, r3
  401d1e:	d001      	beq.n	401d24 <ov_test_write+0x9c>
		return 1;
  401d20:	2301      	movs	r3, #1
  401d22:	e000      	b.n	401d26 <ov_test_write+0x9e>
	}

	return 0;
  401d24:	2300      	movs	r3, #0
}
  401d26:	4618      	mov	r0, r3
  401d28:	3728      	adds	r7, #40	; 0x28
  401d2a:	46bd      	mov	sp, r7
  401d2c:	bd80      	pop	{r7, pc}
  401d2e:	bf00      	nop
  401d30:	00401d39 	.word	0x00401d39
  401d34:	00401d5d 	.word	0x00401d5d

00401d38 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401d38:	b580      	push	{r7, lr}
  401d3a:	b084      	sub	sp, #16
  401d3c:	af00      	add	r7, sp, #0
  401d3e:	6078      	str	r0, [r7, #4]
  401d40:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  401d42:	6839      	ldr	r1, [r7, #0]
  401d44:	6878      	ldr	r0, [r7, #4]
  401d46:	4b04      	ldr	r3, [pc, #16]	; (401d58 <ov_read_reg+0x20>)
  401d48:	4798      	blx	r3
  401d4a:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401d4c:	68fb      	ldr	r3, [r7, #12]
}
  401d4e:	4618      	mov	r0, r3
  401d50:	3710      	adds	r7, #16
  401d52:	46bd      	mov	sp, r7
  401d54:	bd80      	pop	{r7, pc}
  401d56:	bf00      	nop
  401d58:	00400479 	.word	0x00400479

00401d5c <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401d5c:	b580      	push	{r7, lr}
  401d5e:	b084      	sub	sp, #16
  401d60:	af00      	add	r7, sp, #0
  401d62:	6078      	str	r0, [r7, #4]
  401d64:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  401d66:	6839      	ldr	r1, [r7, #0]
  401d68:	6878      	ldr	r0, [r7, #4]
  401d6a:	4b04      	ldr	r3, [pc, #16]	; (401d7c <ov_write_reg+0x20>)
  401d6c:	4798      	blx	r3
  401d6e:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401d70:	68fb      	ldr	r3, [r7, #12]
}
  401d72:	4618      	mov	r0, r3
  401d74:	3710      	adds	r7, #16
  401d76:	46bd      	mov	sp, r7
  401d78:	bd80      	pop	{r7, pc}
  401d7a:	bf00      	nop
  401d7c:	00400585 	.word	0x00400585

00401d80 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  401d80:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  401d84:	b08a      	sub	sp, #40	; 0x28
  401d86:	af00      	add	r7, sp, #0
  401d88:	6078      	str	r0, [r7, #4]
  401d8a:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  401d8c:	2300      	movs	r3, #0
  401d8e:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  401d90:	683b      	ldr	r3, [r7, #0]
  401d92:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  401d94:	e048      	b.n	401e28 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  401d96:	6a3b      	ldr	r3, [r7, #32]
  401d98:	781b      	ldrb	r3, [r3, #0]
  401d9a:	2bfe      	cmp	r3, #254	; 0xfe
  401d9c:	d126      	bne.n	401dec <ov_write_regs+0x6c>
			delay_ms(5);
  401d9e:	4b29      	ldr	r3, [pc, #164]	; (401e44 <ov_write_regs+0xc4>)
  401da0:	4798      	blx	r3
  401da2:	4603      	mov	r3, r0
  401da4:	4619      	mov	r1, r3
  401da6:	f04f 0200 	mov.w	r2, #0
  401daa:	460b      	mov	r3, r1
  401dac:	4614      	mov	r4, r2
  401dae:	00a6      	lsls	r6, r4, #2
  401db0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401db4:	009d      	lsls	r5, r3, #2
  401db6:	462b      	mov	r3, r5
  401db8:	4634      	mov	r4, r6
  401dba:	185b      	adds	r3, r3, r1
  401dbc:	eb44 0402 	adc.w	r4, r4, r2
  401dc0:	f243 61af 	movw	r1, #13999	; 0x36af
  401dc4:	f04f 0200 	mov.w	r2, #0
  401dc8:	eb13 0b01 	adds.w	fp, r3, r1
  401dcc:	eb44 0c02 	adc.w	ip, r4, r2
  401dd0:	4658      	mov	r0, fp
  401dd2:	4661      	mov	r1, ip
  401dd4:	4c1c      	ldr	r4, [pc, #112]	; (401e48 <ov_write_regs+0xc8>)
  401dd6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401dda:	f04f 0300 	mov.w	r3, #0
  401dde:	47a0      	blx	r4
  401de0:	4603      	mov	r3, r0
  401de2:	460c      	mov	r4, r1
  401de4:	4618      	mov	r0, r3
  401de6:	4b19      	ldr	r3, [pc, #100]	; (401e4c <ov_write_regs+0xcc>)
  401de8:	4798      	blx	r3
  401dea:	e01a      	b.n	401e22 <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  401dec:	6a3b      	ldr	r3, [r7, #32]
  401dee:	781b      	ldrb	r3, [r3, #0]
  401df0:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  401df2:	2301      	movs	r3, #1
  401df4:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  401df6:	2330      	movs	r3, #48	; 0x30
  401df8:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  401dfa:	2301      	movs	r3, #1
  401dfc:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  401dfe:	6a3b      	ldr	r3, [r7, #32]
  401e00:	3301      	adds	r3, #1
  401e02:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  401e04:	f107 0308 	add.w	r3, r7, #8
  401e08:	4619      	mov	r1, r3
  401e0a:	6878      	ldr	r0, [r7, #4]
  401e0c:	4b10      	ldr	r3, [pc, #64]	; (401e50 <ov_write_regs+0xd0>)
  401e0e:	4798      	blx	r3
  401e10:	61f8      	str	r0, [r7, #28]
			ul_size++;
  401e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e14:	3301      	adds	r3, #1
  401e16:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  401e18:	69fb      	ldr	r3, [r7, #28]
  401e1a:	2b08      	cmp	r3, #8
  401e1c:	d101      	bne.n	401e22 <ov_write_regs+0xa2>
				return ul_err;
  401e1e:	69fb      	ldr	r3, [r7, #28]
  401e20:	e00b      	b.n	401e3a <ov_write_regs+0xba>
			}
		}

		p_next++;
  401e22:	6a3b      	ldr	r3, [r7, #32]
  401e24:	3302      	adds	r3, #2
  401e26:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  401e28:	6a3b      	ldr	r3, [r7, #32]
  401e2a:	781b      	ldrb	r3, [r3, #0]
  401e2c:	2bff      	cmp	r3, #255	; 0xff
  401e2e:	d1b2      	bne.n	401d96 <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  401e30:	6a3b      	ldr	r3, [r7, #32]
  401e32:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  401e34:	2bff      	cmp	r3, #255	; 0xff
  401e36:	d1ae      	bne.n	401d96 <ov_write_regs+0x16>
	}
	return 0;
  401e38:	2300      	movs	r3, #0
}
  401e3a:	4618      	mov	r0, r3
  401e3c:	3728      	adds	r7, #40	; 0x28
  401e3e:	46bd      	mov	sp, r7
  401e40:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  401e44:	00401b8d 	.word	0x00401b8d
  401e48:	00402cf9 	.word	0x00402cf9
  401e4c:	20000001 	.word	0x20000001
  401e50:	00401d5d 	.word	0x00401d5d

00401e54 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  401e54:	b580      	push	{r7, lr}
  401e56:	b08a      	sub	sp, #40	; 0x28
  401e58:	af00      	add	r7, sp, #0
  401e5a:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  401e5c:	2301      	movs	r3, #1
  401e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  401e62:	f107 030c 	add.w	r3, r7, #12
  401e66:	2200      	movs	r2, #0
  401e68:	601a      	str	r2, [r3, #0]
  401e6a:	605a      	str	r2, [r3, #4]
  401e6c:	609a      	str	r2, [r3, #8]
  401e6e:	60da      	str	r2, [r3, #12]
  401e70:	611a      	str	r2, [r3, #16]
  401e72:	23ff      	movs	r3, #255	; 0xff
  401e74:	733b      	strb	r3, [r7, #12]
  401e76:	2301      	movs	r3, #1
  401e78:	613b      	str	r3, [r7, #16]
  401e7a:	f107 0323 	add.w	r3, r7, #35	; 0x23
  401e7e:	617b      	str	r3, [r7, #20]
  401e80:	2301      	movs	r3, #1
  401e82:	61bb      	str	r3, [r7, #24]
  401e84:	2330      	movs	r3, #48	; 0x30
  401e86:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  401e88:	f107 030c 	add.w	r3, r7, #12
  401e8c:	4619      	mov	r1, r3
  401e8e:	6878      	ldr	r0, [r7, #4]
  401e90:	4b0f      	ldr	r3, [pc, #60]	; (401ed0 <ov_init+0x7c>)
  401e92:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  401e94:	2300      	movs	r3, #0
  401e96:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  401e98:	6878      	ldr	r0, [r7, #4]
  401e9a:	4b0e      	ldr	r3, [pc, #56]	; (401ed4 <ov_init+0x80>)
  401e9c:	4798      	blx	r3
  401e9e:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  401ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401ea2:	0a1b      	lsrs	r3, r3, #8
  401ea4:	b2db      	uxtb	r3, r3
  401ea6:	2b26      	cmp	r3, #38	; 0x26
  401ea8:	d10d      	bne.n	401ec6 <ov_init+0x72>
		if (ov_manufacturer( p_twi ) == 0) {
  401eaa:	6878      	ldr	r0, [r7, #4]
  401eac:	4b0a      	ldr	r3, [pc, #40]	; (401ed8 <ov_init+0x84>)
  401eae:	4798      	blx	r3
  401eb0:	4603      	mov	r3, r0
  401eb2:	2b00      	cmp	r3, #0
  401eb4:	d107      	bne.n	401ec6 <ov_init+0x72>
			if (ov_test_write( p_twi ) == 0) {
  401eb6:	6878      	ldr	r0, [r7, #4]
  401eb8:	4b08      	ldr	r3, [pc, #32]	; (401edc <ov_init+0x88>)
  401eba:	4798      	blx	r3
  401ebc:	4603      	mov	r3, r0
  401ebe:	2b00      	cmp	r3, #0
  401ec0:	d101      	bne.n	401ec6 <ov_init+0x72>
				return 0;
  401ec2:	2300      	movs	r3, #0
  401ec4:	e000      	b.n	401ec8 <ov_init+0x74>
			}
		}
	}

	return 1;
  401ec6:	2301      	movs	r3, #1
}
  401ec8:	4618      	mov	r0, r3
  401eca:	3728      	adds	r7, #40	; 0x28
  401ecc:	46bd      	mov	sp, r7
  401ece:	bd80      	pop	{r7, pc}
  401ed0:	00401d5d 	.word	0x00401d5d
  401ed4:	00401ba1 	.word	0x00401ba1
  401ed8:	00401c11 	.word	0x00401c11
  401edc:	00401c89 	.word	0x00401c89

00401ee0 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  401ee0:	b580      	push	{r7, lr}
  401ee2:	b084      	sub	sp, #16
  401ee4:	af00      	add	r7, sp, #0
  401ee6:	6078      	str	r0, [r7, #4]
  401ee8:	460b      	mov	r3, r1
  401eea:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  401eec:	2300      	movs	r3, #0
  401eee:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  401ef0:	78fb      	ldrb	r3, [r7, #3]
  401ef2:	2b11      	cmp	r3, #17
  401ef4:	d85c      	bhi.n	401fb0 <ov_configure+0xd0>
  401ef6:	a201      	add	r2, pc, #4	; (adr r2, 401efc <ov_configure+0x1c>)
  401ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401efc:	00401f45 	.word	0x00401f45
  401f00:	00401f4b 	.word	0x00401f4b
  401f04:	00401f51 	.word	0x00401f51
  401f08:	00401f57 	.word	0x00401f57
  401f0c:	00401f5d 	.word	0x00401f5d
  401f10:	00401f63 	.word	0x00401f63
  401f14:	00401f69 	.word	0x00401f69
  401f18:	00401f6f 	.word	0x00401f6f
  401f1c:	00401f75 	.word	0x00401f75
  401f20:	00401f7b 	.word	0x00401f7b
  401f24:	00401f81 	.word	0x00401f81
  401f28:	00401f87 	.word	0x00401f87
  401f2c:	00401f8d 	.word	0x00401f8d
  401f30:	00401f93 	.word	0x00401f93
  401f34:	00401f99 	.word	0x00401f99
  401f38:	00401f9f 	.word	0x00401f9f
  401f3c:	00401fa5 	.word	0x00401fa5
  401f40:	00401fab 	.word	0x00401fab
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  401f44:	4b22      	ldr	r3, [pc, #136]	; (401fd0 <ov_configure+0xf0>)
  401f46:	60fb      	str	r3, [r7, #12]
		break;
  401f48:	e033      	b.n	401fb2 <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  401f4a:	4b22      	ldr	r3, [pc, #136]	; (401fd4 <ov_configure+0xf4>)
  401f4c:	60fb      	str	r3, [r7, #12]
		break;
  401f4e:	e030      	b.n	401fb2 <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  401f50:	4b21      	ldr	r3, [pc, #132]	; (401fd8 <ov_configure+0xf8>)
  401f52:	60fb      	str	r3, [r7, #12]
		break;
  401f54:	e02d      	b.n	401fb2 <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  401f56:	4b21      	ldr	r3, [pc, #132]	; (401fdc <ov_configure+0xfc>)
  401f58:	60fb      	str	r3, [r7, #12]
		break;
  401f5a:	e02a      	b.n	401fb2 <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  401f5c:	4b20      	ldr	r3, [pc, #128]	; (401fe0 <ov_configure+0x100>)
  401f5e:	60fb      	str	r3, [r7, #12]
		break;
  401f60:	e027      	b.n	401fb2 <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  401f62:	4b20      	ldr	r3, [pc, #128]	; (401fe4 <ov_configure+0x104>)
  401f64:	60fb      	str	r3, [r7, #12]
		break;
  401f66:	e024      	b.n	401fb2 <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  401f68:	4b1f      	ldr	r3, [pc, #124]	; (401fe8 <ov_configure+0x108>)
  401f6a:	60fb      	str	r3, [r7, #12]
		break;
  401f6c:	e021      	b.n	401fb2 <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  401f6e:	4b1f      	ldr	r3, [pc, #124]	; (401fec <ov_configure+0x10c>)
  401f70:	60fb      	str	r3, [r7, #12]
		break;
  401f72:	e01e      	b.n	401fb2 <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  401f74:	4b1e      	ldr	r3, [pc, #120]	; (401ff0 <ov_configure+0x110>)
  401f76:	60fb      	str	r3, [r7, #12]
		break;
  401f78:	e01b      	b.n	401fb2 <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  401f7a:	4b1e      	ldr	r3, [pc, #120]	; (401ff4 <ov_configure+0x114>)
  401f7c:	60fb      	str	r3, [r7, #12]
		break;
  401f7e:	e018      	b.n	401fb2 <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  401f80:	4b1d      	ldr	r3, [pc, #116]	; (401ff8 <ov_configure+0x118>)
  401f82:	60fb      	str	r3, [r7, #12]
		break;
  401f84:	e015      	b.n	401fb2 <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  401f86:	4b1d      	ldr	r3, [pc, #116]	; (401ffc <ov_configure+0x11c>)
  401f88:	60fb      	str	r3, [r7, #12]
		break;
  401f8a:	e012      	b.n	401fb2 <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  401f8c:	4b1c      	ldr	r3, [pc, #112]	; (402000 <ov_configure+0x120>)
  401f8e:	60fb      	str	r3, [r7, #12]
		break;
  401f90:	e00f      	b.n	401fb2 <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  401f92:	4b1c      	ldr	r3, [pc, #112]	; (402004 <ov_configure+0x124>)
  401f94:	60fb      	str	r3, [r7, #12]
		break;
  401f96:	e00c      	b.n	401fb2 <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  401f98:	4b1b      	ldr	r3, [pc, #108]	; (402008 <ov_configure+0x128>)
  401f9a:	60fb      	str	r3, [r7, #12]
		break;
  401f9c:	e009      	b.n	401fb2 <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  401f9e:	4b1b      	ldr	r3, [pc, #108]	; (40200c <ov_configure+0x12c>)
  401fa0:	60fb      	str	r3, [r7, #12]
		break;
  401fa2:	e006      	b.n	401fb2 <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  401fa4:	4b1a      	ldr	r3, [pc, #104]	; (402010 <ov_configure+0x130>)
  401fa6:	60fb      	str	r3, [r7, #12]
		break;
  401fa8:	e003      	b.n	401fb2 <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  401faa:	4b1a      	ldr	r3, [pc, #104]	; (402014 <ov_configure+0x134>)
  401fac:	60fb      	str	r3, [r7, #12]
		break;
  401fae:	e000      	b.n	401fb2 <ov_configure+0xd2>

	default:
		break;
  401fb0:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  401fb2:	68fb      	ldr	r3, [r7, #12]
  401fb4:	2b00      	cmp	r3, #0
  401fb6:	d005      	beq.n	401fc4 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  401fb8:	68f9      	ldr	r1, [r7, #12]
  401fba:	6878      	ldr	r0, [r7, #4]
  401fbc:	4b16      	ldr	r3, [pc, #88]	; (402018 <ov_configure+0x138>)
  401fbe:	4798      	blx	r3
		return 0;
  401fc0:	2300      	movs	r3, #0
  401fc2:	e000      	b.n	401fc6 <ov_configure+0xe6>
	}

	return 1;
  401fc4:	2301      	movs	r3, #1
}
  401fc6:	4618      	mov	r0, r3
  401fc8:	3710      	adds	r7, #16
  401fca:	46bd      	mov	sp, r7
  401fcc:	bd80      	pop	{r7, pc}
  401fce:	bf00      	nop
  401fd0:	00403178 	.word	0x00403178
  401fd4:	004032f8 	.word	0x004032f8
  401fd8:	0040330c 	.word	0x0040330c
  401fdc:	00403320 	.word	0x00403320
  401fe0:	00403370 	.word	0x00403370
  401fe4:	004033c4 	.word	0x004033c4
  401fe8:	00403418 	.word	0x00403418
  401fec:	00403468 	.word	0x00403468
  401ff0:	004034bc 	.word	0x004034bc
  401ff4:	00403510 	.word	0x00403510
  401ff8:	00403600 	.word	0x00403600
  401ffc:	004036f0 	.word	0x004036f0
  402000:	004037e0 	.word	0x004037e0
  402004:	004038d0 	.word	0x004038d0
  402008:	004039c4 	.word	0x004039c4
  40200c:	00403ab8 	.word	0x00403ab8
  402010:	00403bac 	.word	0x00403bac
  402014:	00403ca0 	.word	0x00403ca0
  402018:	00401d81 	.word	0x00401d81

0040201c <__NVIC_EnableIRQ>:
{
  40201c:	b480      	push	{r7}
  40201e:	b083      	sub	sp, #12
  402020:	af00      	add	r7, sp, #0
  402022:	4603      	mov	r3, r0
  402024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402026:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40202a:	2b00      	cmp	r3, #0
  40202c:	db0b      	blt.n	402046 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40202e:	4908      	ldr	r1, [pc, #32]	; (402050 <__NVIC_EnableIRQ+0x34>)
  402030:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402034:	095b      	lsrs	r3, r3, #5
  402036:	79fa      	ldrb	r2, [r7, #7]
  402038:	f002 021f 	and.w	r2, r2, #31
  40203c:	2001      	movs	r0, #1
  40203e:	fa00 f202 	lsl.w	r2, r0, r2
  402042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402046:	bf00      	nop
  402048:	370c      	adds	r7, #12
  40204a:	46bd      	mov	sp, r7
  40204c:	bc80      	pop	{r7}
  40204e:	4770      	bx	lr
  402050:	e000e100 	.word	0xe000e100

00402054 <osc_get_rate>:
{
  402054:	b480      	push	{r7}
  402056:	b083      	sub	sp, #12
  402058:	af00      	add	r7, sp, #0
  40205a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40205c:	687b      	ldr	r3, [r7, #4]
  40205e:	2b07      	cmp	r3, #7
  402060:	d825      	bhi.n	4020ae <osc_get_rate+0x5a>
  402062:	a201      	add	r2, pc, #4	; (adr r2, 402068 <osc_get_rate+0x14>)
  402064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402068:	00402089 	.word	0x00402089
  40206c:	0040208f 	.word	0x0040208f
  402070:	00402095 	.word	0x00402095
  402074:	0040209b 	.word	0x0040209b
  402078:	0040209f 	.word	0x0040209f
  40207c:	004020a3 	.word	0x004020a3
  402080:	004020a7 	.word	0x004020a7
  402084:	004020ab 	.word	0x004020ab
		return OSC_SLCK_32K_RC_HZ;
  402088:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40208c:	e010      	b.n	4020b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40208e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402092:	e00d      	b.n	4020b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402098:	e00a      	b.n	4020b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40209a:	4b08      	ldr	r3, [pc, #32]	; (4020bc <osc_get_rate+0x68>)
  40209c:	e008      	b.n	4020b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40209e:	4b08      	ldr	r3, [pc, #32]	; (4020c0 <osc_get_rate+0x6c>)
  4020a0:	e006      	b.n	4020b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4020a2:	4b08      	ldr	r3, [pc, #32]	; (4020c4 <osc_get_rate+0x70>)
  4020a4:	e004      	b.n	4020b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4020a6:	4b07      	ldr	r3, [pc, #28]	; (4020c4 <osc_get_rate+0x70>)
  4020a8:	e002      	b.n	4020b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4020aa:	4b06      	ldr	r3, [pc, #24]	; (4020c4 <osc_get_rate+0x70>)
  4020ac:	e000      	b.n	4020b0 <osc_get_rate+0x5c>
	return 0;
  4020ae:	2300      	movs	r3, #0
}
  4020b0:	4618      	mov	r0, r3
  4020b2:	370c      	adds	r7, #12
  4020b4:	46bd      	mov	sp, r7
  4020b6:	bc80      	pop	{r7}
  4020b8:	4770      	bx	lr
  4020ba:	bf00      	nop
  4020bc:	003d0900 	.word	0x003d0900
  4020c0:	007a1200 	.word	0x007a1200
  4020c4:	00b71b00 	.word	0x00b71b00

004020c8 <sysclk_get_main_hz>:
{
  4020c8:	b580      	push	{r7, lr}
  4020ca:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4020cc:	2006      	movs	r0, #6
  4020ce:	4b04      	ldr	r3, [pc, #16]	; (4020e0 <sysclk_get_main_hz+0x18>)
  4020d0:	4798      	blx	r3
  4020d2:	4602      	mov	r2, r0
  4020d4:	4613      	mov	r3, r2
  4020d6:	009b      	lsls	r3, r3, #2
  4020d8:	4413      	add	r3, r2
  4020da:	009b      	lsls	r3, r3, #2
}
  4020dc:	4618      	mov	r0, r3
  4020de:	bd80      	pop	{r7, pc}
  4020e0:	00402055 	.word	0x00402055

004020e4 <sysclk_get_cpu_hz>:
{
  4020e4:	b580      	push	{r7, lr}
  4020e6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4020e8:	4b02      	ldr	r3, [pc, #8]	; (4020f4 <sysclk_get_cpu_hz+0x10>)
  4020ea:	4798      	blx	r3
  4020ec:	4603      	mov	r3, r0
  4020ee:	085b      	lsrs	r3, r3, #1
}
  4020f0:	4618      	mov	r0, r3
  4020f2:	bd80      	pop	{r7, pc}
  4020f4:	004020c9 	.word	0x004020c9

004020f8 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4020f8:	b580      	push	{r7, lr}
  4020fa:	b082      	sub	sp, #8
  4020fc:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  4020fe:	2100      	movs	r1, #0
  402100:	4809      	ldr	r0, [pc, #36]	; (402128 <TC0_Handler+0x30>)
  402102:	4b0a      	ldr	r3, [pc, #40]	; (40212c <TC0_Handler+0x34>)
  402104:	4798      	blx	r3
  402106:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  402108:	687b      	ldr	r3, [r7, #4]
  40210a:	f003 0310 	and.w	r3, r3, #16
  40210e:	2b00      	cmp	r3, #0
  402110:	d006      	beq.n	402120 <TC0_Handler+0x28>
		counts++;
  402112:	4b07      	ldr	r3, [pc, #28]	; (402130 <TC0_Handler+0x38>)
  402114:	781b      	ldrb	r3, [r3, #0]
  402116:	b2db      	uxtb	r3, r3
  402118:	3301      	adds	r3, #1
  40211a:	b2da      	uxtb	r2, r3
  40211c:	4b04      	ldr	r3, [pc, #16]	; (402130 <TC0_Handler+0x38>)
  40211e:	701a      	strb	r2, [r3, #0]
	}
}
  402120:	bf00      	nop
  402122:	3708      	adds	r7, #8
  402124:	46bd      	mov	sp, r7
  402126:	bd80      	pop	{r7, pc}
  402128:	40010000 	.word	0x40010000
  40212c:	004001db 	.word	0x004001db
  402130:	200004ec 	.word	0x200004ec

00402134 <configure_tc>:

void configure_tc(void)
{
  402134:	b590      	push	{r4, r7, lr}
  402136:	b087      	sub	sp, #28
  402138:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  40213a:	4b18      	ldr	r3, [pc, #96]	; (40219c <configure_tc+0x68>)
  40213c:	4798      	blx	r3
  40213e:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  402140:	2017      	movs	r0, #23
  402142:	4b17      	ldr	r3, [pc, #92]	; (4021a0 <configure_tc+0x6c>)
  402144:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402146:	1d39      	adds	r1, r7, #4
  402148:	f107 0208 	add.w	r2, r7, #8
  40214c:	68fb      	ldr	r3, [r7, #12]
  40214e:	9300      	str	r3, [sp, #0]
  402150:	460b      	mov	r3, r1
  402152:	68f9      	ldr	r1, [r7, #12]
  402154:	2001      	movs	r0, #1
  402156:	4c13      	ldr	r4, [pc, #76]	; (4021a4 <configure_tc+0x70>)
  402158:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40215a:	687b      	ldr	r3, [r7, #4]
  40215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  402160:	461a      	mov	r2, r3
  402162:	2100      	movs	r1, #0
  402164:	4810      	ldr	r0, [pc, #64]	; (4021a8 <configure_tc+0x74>)
  402166:	4b11      	ldr	r3, [pc, #68]	; (4021ac <configure_tc+0x78>)
  402168:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  40216a:	68bb      	ldr	r3, [r7, #8]
  40216c:	68fa      	ldr	r2, [r7, #12]
  40216e:	fbb2 f3f3 	udiv	r3, r2, r3
  402172:	461a      	mov	r2, r3
  402174:	2100      	movs	r1, #0
  402176:	480c      	ldr	r0, [pc, #48]	; (4021a8 <configure_tc+0x74>)
  402178:	4b0d      	ldr	r3, [pc, #52]	; (4021b0 <configure_tc+0x7c>)
  40217a:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  40217c:	2017      	movs	r0, #23
  40217e:	4b0d      	ldr	r3, [pc, #52]	; (4021b4 <configure_tc+0x80>)
  402180:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  402182:	2210      	movs	r2, #16
  402184:	2100      	movs	r1, #0
  402186:	4808      	ldr	r0, [pc, #32]	; (4021a8 <configure_tc+0x74>)
  402188:	4b0b      	ldr	r3, [pc, #44]	; (4021b8 <configure_tc+0x84>)
  40218a:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  40218c:	2100      	movs	r1, #0
  40218e:	4806      	ldr	r0, [pc, #24]	; (4021a8 <configure_tc+0x74>)
  402190:	4b0a      	ldr	r3, [pc, #40]	; (4021bc <configure_tc+0x88>)
  402192:	4798      	blx	r3
  402194:	bf00      	nop
  402196:	3714      	adds	r7, #20
  402198:	46bd      	mov	sp, r7
  40219a:	bd90      	pop	{r4, r7, pc}
  40219c:	004020e5 	.word	0x004020e5
  4021a0:	0040162d 	.word	0x0040162d
  4021a4:	004001fd 	.word	0x004001fd
  4021a8:	40010000 	.word	0x40010000
  4021ac:	00400139 	.word	0x00400139
  4021b0:	00400191 	.word	0x00400191
  4021b4:	0040201d 	.word	0x0040201d
  4021b8:	004001b5 	.word	0x004001b5
  4021bc:	00400171 	.word	0x00400171

004021c0 <__NVIC_EnableIRQ>:
{
  4021c0:	b480      	push	{r7}
  4021c2:	b083      	sub	sp, #12
  4021c4:	af00      	add	r7, sp, #0
  4021c6:	4603      	mov	r3, r0
  4021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021ce:	2b00      	cmp	r3, #0
  4021d0:	db0b      	blt.n	4021ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4021d2:	4908      	ldr	r1, [pc, #32]	; (4021f4 <__NVIC_EnableIRQ+0x34>)
  4021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021d8:	095b      	lsrs	r3, r3, #5
  4021da:	79fa      	ldrb	r2, [r7, #7]
  4021dc:	f002 021f 	and.w	r2, r2, #31
  4021e0:	2001      	movs	r0, #1
  4021e2:	fa00 f202 	lsl.w	r2, r0, r2
  4021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4021ea:	bf00      	nop
  4021ec:	370c      	adds	r7, #12
  4021ee:	46bd      	mov	sp, r7
  4021f0:	bc80      	pop	{r7}
  4021f2:	4770      	bx	lr
  4021f4:	e000e100 	.word	0xe000e100

004021f8 <osc_get_rate>:
{
  4021f8:	b480      	push	{r7}
  4021fa:	b083      	sub	sp, #12
  4021fc:	af00      	add	r7, sp, #0
  4021fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402200:	687b      	ldr	r3, [r7, #4]
  402202:	2b07      	cmp	r3, #7
  402204:	d825      	bhi.n	402252 <osc_get_rate+0x5a>
  402206:	a201      	add	r2, pc, #4	; (adr r2, 40220c <osc_get_rate+0x14>)
  402208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40220c:	0040222d 	.word	0x0040222d
  402210:	00402233 	.word	0x00402233
  402214:	00402239 	.word	0x00402239
  402218:	0040223f 	.word	0x0040223f
  40221c:	00402243 	.word	0x00402243
  402220:	00402247 	.word	0x00402247
  402224:	0040224b 	.word	0x0040224b
  402228:	0040224f 	.word	0x0040224f
		return OSC_SLCK_32K_RC_HZ;
  40222c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402230:	e010      	b.n	402254 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402236:	e00d      	b.n	402254 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40223c:	e00a      	b.n	402254 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40223e:	4b08      	ldr	r3, [pc, #32]	; (402260 <osc_get_rate+0x68>)
  402240:	e008      	b.n	402254 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402242:	4b08      	ldr	r3, [pc, #32]	; (402264 <osc_get_rate+0x6c>)
  402244:	e006      	b.n	402254 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402246:	4b08      	ldr	r3, [pc, #32]	; (402268 <osc_get_rate+0x70>)
  402248:	e004      	b.n	402254 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40224a:	4b07      	ldr	r3, [pc, #28]	; (402268 <osc_get_rate+0x70>)
  40224c:	e002      	b.n	402254 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40224e:	4b06      	ldr	r3, [pc, #24]	; (402268 <osc_get_rate+0x70>)
  402250:	e000      	b.n	402254 <osc_get_rate+0x5c>
	return 0;
  402252:	2300      	movs	r3, #0
}
  402254:	4618      	mov	r0, r3
  402256:	370c      	adds	r7, #12
  402258:	46bd      	mov	sp, r7
  40225a:	bc80      	pop	{r7}
  40225c:	4770      	bx	lr
  40225e:	bf00      	nop
  402260:	003d0900 	.word	0x003d0900
  402264:	007a1200 	.word	0x007a1200
  402268:	00b71b00 	.word	0x00b71b00

0040226c <sysclk_get_main_hz>:
{
  40226c:	b580      	push	{r7, lr}
  40226e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402270:	2006      	movs	r0, #6
  402272:	4b04      	ldr	r3, [pc, #16]	; (402284 <sysclk_get_main_hz+0x18>)
  402274:	4798      	blx	r3
  402276:	4602      	mov	r2, r0
  402278:	4613      	mov	r3, r2
  40227a:	009b      	lsls	r3, r3, #2
  40227c:	4413      	add	r3, r2
  40227e:	009b      	lsls	r3, r3, #2
}
  402280:	4618      	mov	r0, r3
  402282:	bd80      	pop	{r7, pc}
  402284:	004021f9 	.word	0x004021f9

00402288 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402288:	b580      	push	{r7, lr}
  40228a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40228c:	4b02      	ldr	r3, [pc, #8]	; (402298 <sysclk_get_peripheral_hz+0x10>)
  40228e:	4798      	blx	r3
  402290:	4603      	mov	r3, r0
  402292:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402294:	4618      	mov	r0, r3
  402296:	bd80      	pop	{r7, pc}
  402298:	0040226d 	.word	0x0040226d

0040229c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40229c:	b580      	push	{r7, lr}
  40229e:	b082      	sub	sp, #8
  4022a0:	af00      	add	r7, sp, #0
  4022a2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4022a4:	6878      	ldr	r0, [r7, #4]
  4022a6:	4b03      	ldr	r3, [pc, #12]	; (4022b4 <sysclk_enable_peripheral_clock+0x18>)
  4022a8:	4798      	blx	r3
}
  4022aa:	bf00      	nop
  4022ac:	3708      	adds	r7, #8
  4022ae:	46bd      	mov	sp, r7
  4022b0:	bd80      	pop	{r7, pc}
  4022b2:	bf00      	nop
  4022b4:	0040162d 	.word	0x0040162d

004022b8 <USART0_Handler>:
volatile uint32_t received_byte_wifi = 0;
volatile uint32_t wifi_web_setup_flag = 0;
volatile unsigned int input_pos_wifi = 0;

void wifi_usart_handler(void)
{
  4022b8:	b580      	push	{r7, lr}
  4022ba:	b082      	sub	sp, #8
  4022bc:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(WIFI_USART);
  4022be:	480b      	ldr	r0, [pc, #44]	; (4022ec <USART0_Handler+0x34>)
  4022c0:	4b0b      	ldr	r3, [pc, #44]	; (4022f0 <USART0_Handler+0x38>)
  4022c2:	4798      	blx	r3
  4022c4:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF){
  4022c6:	687b      	ldr	r3, [r7, #4]
  4022c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4022cc:	2b00      	cmp	r3, #0
  4022ce:	d009      	beq.n	4022e4 <USART0_Handler+0x2c>
		usart_read(WIFI_USART, &received_byte_wifi);
  4022d0:	4908      	ldr	r1, [pc, #32]	; (4022f4 <USART0_Handler+0x3c>)
  4022d2:	4806      	ldr	r0, [pc, #24]	; (4022ec <USART0_Handler+0x34>)
  4022d4:	4b08      	ldr	r3, [pc, #32]	; (4022f8 <USART0_Handler+0x40>)
  4022d6:	4798      	blx	r3
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4022d8:	4b06      	ldr	r3, [pc, #24]	; (4022f4 <USART0_Handler+0x3c>)
  4022da:	681b      	ldr	r3, [r3, #0]
  4022dc:	b2db      	uxtb	r3, r3
  4022de:	4618      	mov	r0, r3
  4022e0:	4b06      	ldr	r3, [pc, #24]	; (4022fc <USART0_Handler+0x44>)
  4022e2:	4798      	blx	r3
	}
}
  4022e4:	bf00      	nop
  4022e6:	3708      	adds	r7, #8
  4022e8:	46bd      	mov	sp, r7
  4022ea:	bd80      	pop	{r7, pc}
  4022ec:	40024000 	.word	0x40024000
  4022f0:	004008bd 	.word	0x004008bd
  4022f4:	200004d8 	.word	0x200004d8
  4022f8:	00400981 	.word	0x00400981
  4022fc:	004024c1 	.word	0x004024c1

00402300 <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402300:	b580      	push	{r7, lr}
  402302:	b084      	sub	sp, #16
  402304:	af00      	add	r7, sp, #0
  402306:	6078      	str	r0, [r7, #4]
  402308:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	process_data_wifi();
  40230a:	4b0c      	ldr	r3, [pc, #48]	; (40233c <wifi_command_response_handler+0x3c>)
  40230c:	4798      	blx	r3
	for(int jj=0; jj<1000; jj++) input_line_wifi[jj] = 0;
  40230e:	2300      	movs	r3, #0
  402310:	60fb      	str	r3, [r7, #12]
  402312:	e007      	b.n	402324 <wifi_command_response_handler+0x24>
  402314:	4a0a      	ldr	r2, [pc, #40]	; (402340 <wifi_command_response_handler+0x40>)
  402316:	68fb      	ldr	r3, [r7, #12]
  402318:	4413      	add	r3, r2
  40231a:	2200      	movs	r2, #0
  40231c:	701a      	strb	r2, [r3, #0]
  40231e:	68fb      	ldr	r3, [r7, #12]
  402320:	3301      	adds	r3, #1
  402322:	60fb      	str	r3, [r7, #12]
  402324:	68fb      	ldr	r3, [r7, #12]
  402326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40232a:	dbf3      	blt.n	402314 <wifi_command_response_handler+0x14>
	input_pos_wifi = 0;
  40232c:	4b05      	ldr	r3, [pc, #20]	; (402344 <wifi_command_response_handler+0x44>)
  40232e:	2200      	movs	r2, #0
  402330:	601a      	str	r2, [r3, #0]
}
  402332:	bf00      	nop
  402334:	3710      	adds	r7, #16
  402336:	46bd      	mov	sp, r7
  402338:	bd80      	pop	{r7, pc}
  40233a:	bf00      	nop
  40233c:	004024ed 	.word	0x004024ed
  402340:	200004f0 	.word	0x200004f0
  402344:	200004e0 	.word	0x200004e0

00402348 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402348:	b480      	push	{r7}
  40234a:	b083      	sub	sp, #12
  40234c:	af00      	add	r7, sp, #0
  40234e:	6078      	str	r0, [r7, #4]
  402350:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_web_setup_flag = true;
  402352:	4b04      	ldr	r3, [pc, #16]	; (402364 <wifi_web_setup_handler+0x1c>)
  402354:	2201      	movs	r2, #1
  402356:	601a      	str	r2, [r3, #0]
}
  402358:	bf00      	nop
  40235a:	370c      	adds	r7, #12
  40235c:	46bd      	mov	sp, r7
  40235e:	bc80      	pop	{r7}
  402360:	4770      	bx	lr
  402362:	bf00      	nop
  402364:	200004dc 	.word	0x200004dc

00402368 <configure_usart_wifi>:

void configure_usart_wifi(void)
{
  402368:	b5b0      	push	{r4, r5, r7, lr}
  40236a:	b086      	sub	sp, #24
  40236c:	af00      	add	r7, sp, #0
	
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  40236e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402372:	2005      	movs	r0, #5
  402374:	4b1c      	ldr	r3, [pc, #112]	; (4023e8 <configure_usart_wifi+0x80>)
  402376:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  402378:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40237c:	2006      	movs	r0, #6
  40237e:	4b1a      	ldr	r3, [pc, #104]	; (4023e8 <configure_usart_wifi+0x80>)
  402380:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  402382:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402386:	2008      	movs	r0, #8
  402388:	4b17      	ldr	r3, [pc, #92]	; (4023e8 <configure_usart_wifi+0x80>)
  40238a:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  40238c:	4b17      	ldr	r3, [pc, #92]	; (4023ec <configure_usart_wifi+0x84>)
  40238e:	463c      	mov	r4, r7
  402390:	461d      	mov	r5, r3
  402392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402396:	e895 0003 	ldmia.w	r5, {r0, r1}
  40239a:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  40239e:	4b14      	ldr	r3, [pc, #80]	; (4023f0 <configure_usart_wifi+0x88>)
  4023a0:	4798      	blx	r3
  4023a2:	4602      	mov	r2, r0
  4023a4:	4b13      	ldr	r3, [pc, #76]	; (4023f4 <configure_usart_wifi+0x8c>)
  4023a6:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(WIFI_ID_USART);
  4023a8:	200e      	movs	r0, #14
  4023aa:	4b13      	ldr	r3, [pc, #76]	; (4023f8 <configure_usart_wifi+0x90>)
  4023ac:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(WIFI_USART, &usart_console_settings, ul_sysclk);
  4023ae:	4b11      	ldr	r3, [pc, #68]	; (4023f4 <configure_usart_wifi+0x8c>)
  4023b0:	681a      	ldr	r2, [r3, #0]
  4023b2:	463b      	mov	r3, r7
  4023b4:	4619      	mov	r1, r3
  4023b6:	4811      	ldr	r0, [pc, #68]	; (4023fc <configure_usart_wifi+0x94>)
  4023b8:	4b11      	ldr	r3, [pc, #68]	; (402400 <configure_usart_wifi+0x98>)
  4023ba:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  4023bc:	f04f 31ff 	mov.w	r1, #4294967295
  4023c0:	480e      	ldr	r0, [pc, #56]	; (4023fc <configure_usart_wifi+0x94>)
  4023c2:	4b10      	ldr	r3, [pc, #64]	; (402404 <configure_usart_wifi+0x9c>)
  4023c4:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  4023c6:	480d      	ldr	r0, [pc, #52]	; (4023fc <configure_usart_wifi+0x94>)
  4023c8:	4b0f      	ldr	r3, [pc, #60]	; (402408 <configure_usart_wifi+0xa0>)
  4023ca:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  4023cc:	480b      	ldr	r0, [pc, #44]	; (4023fc <configure_usart_wifi+0x94>)
  4023ce:	4b0f      	ldr	r3, [pc, #60]	; (40240c <configure_usart_wifi+0xa4>)
  4023d0:	4798      	blx	r3
	
	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  4023d2:	2101      	movs	r1, #1
  4023d4:	4809      	ldr	r0, [pc, #36]	; (4023fc <configure_usart_wifi+0x94>)
  4023d6:	4b0e      	ldr	r3, [pc, #56]	; (402410 <configure_usart_wifi+0xa8>)
  4023d8:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4023da:	200e      	movs	r0, #14
  4023dc:	4b0d      	ldr	r3, [pc, #52]	; (402414 <configure_usart_wifi+0xac>)
  4023de:	4798      	blx	r3
}
  4023e0:	bf00      	nop
  4023e2:	3718      	adds	r7, #24
  4023e4:	46bd      	mov	sp, r7
  4023e6:	bdb0      	pop	{r4, r5, r7, pc}
  4023e8:	0040120d 	.word	0x0040120d
  4023ec:	00403d90 	.word	0x00403d90
  4023f0:	00402289 	.word	0x00402289
  4023f4:	200004e4 	.word	0x200004e4
  4023f8:	0040229d 	.word	0x0040229d
  4023fc:	40024000 	.word	0x40024000
  402400:	004007e9 	.word	0x004007e9
  402404:	004008a3 	.word	0x004008a3
  402408:	00400829 	.word	0x00400829
  40240c:	00400859 	.word	0x00400859
  402410:	00400889 	.word	0x00400889
  402414:	004021c1 	.word	0x004021c1

00402418 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  402418:	b590      	push	{r4, r7, lr}
  40241a:	b083      	sub	sp, #12
  40241c:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  40241e:	200b      	movs	r0, #11
  402420:	4b0b      	ldr	r3, [pc, #44]	; (402450 <configure_wifi_comm_pin+0x38>)
  402422:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  402424:	4b0b      	ldr	r3, [pc, #44]	; (402454 <configure_wifi_comm_pin+0x3c>)
  402426:	9300      	str	r3, [sp, #0]
  402428:	2370      	movs	r3, #112	; 0x70
  40242a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40242e:	210b      	movs	r1, #11
  402430:	4809      	ldr	r0, [pc, #36]	; (402458 <configure_wifi_comm_pin+0x40>)
  402432:	4c0a      	ldr	r4, [pc, #40]	; (40245c <configure_wifi_comm_pin+0x44>)
  402434:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  402436:	200b      	movs	r0, #11
  402438:	4b09      	ldr	r3, [pc, #36]	; (402460 <configure_wifi_comm_pin+0x48>)
  40243a:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  40243c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402440:	4805      	ldr	r0, [pc, #20]	; (402458 <configure_wifi_comm_pin+0x40>)
  402442:	4b08      	ldr	r3, [pc, #32]	; (402464 <configure_wifi_comm_pin+0x4c>)
  402444:	4798      	blx	r3
}
  402446:	bf00      	nop
  402448:	3704      	adds	r7, #4
  40244a:	46bd      	mov	sp, r7
  40244c:	bd90      	pop	{r4, r7, pc}
  40244e:	bf00      	nop
  402450:	0040162d 	.word	0x0040162d
  402454:	00402301 	.word	0x00402301
  402458:	400e0e00 	.word	0x400e0e00
  40245c:	00400aa9 	.word	0x00400aa9
  402460:	004021c1 	.word	0x004021c1
  402464:	004011ab 	.word	0x004011ab

00402468 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  402468:	b590      	push	{r4, r7, lr}
  40246a:	b083      	sub	sp, #12
  40246c:	af02      	add	r7, sp, #8
		/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  40246e:	200b      	movs	r0, #11
  402470:	4b0c      	ldr	r3, [pc, #48]	; (4024a4 <configure_wifi_web_setup_pin+0x3c>)
  402472:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_PIN_MSK, 10);
  402474:	220a      	movs	r2, #10
  402476:	2101      	movs	r1, #1
  402478:	480b      	ldr	r0, [pc, #44]	; (4024a8 <configure_wifi_web_setup_pin+0x40>)
  40247a:	4b0c      	ldr	r3, [pc, #48]	; (4024ac <configure_wifi_web_setup_pin+0x44>)
  40247c:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_PIN_MSK,
  40247e:	4b0c      	ldr	r3, [pc, #48]	; (4024b0 <configure_wifi_web_setup_pin+0x48>)
  402480:	9300      	str	r3, [sp, #0]
  402482:	2379      	movs	r3, #121	; 0x79
  402484:	2201      	movs	r2, #1
  402486:	210b      	movs	r1, #11
  402488:	4807      	ldr	r0, [pc, #28]	; (4024a8 <configure_wifi_web_setup_pin+0x40>)
  40248a:	4c0a      	ldr	r4, [pc, #40]	; (4024b4 <configure_wifi_web_setup_pin+0x4c>)
  40248c:	47a0      	blx	r4
			WIFI_SETUP_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_SETUP_ID);
  40248e:	200b      	movs	r0, #11
  402490:	4b09      	ldr	r3, [pc, #36]	; (4024b8 <configure_wifi_web_setup_pin+0x50>)
  402492:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_PIN_MSK);
  402494:	2101      	movs	r1, #1
  402496:	4804      	ldr	r0, [pc, #16]	; (4024a8 <configure_wifi_web_setup_pin+0x40>)
  402498:	4b08      	ldr	r3, [pc, #32]	; (4024bc <configure_wifi_web_setup_pin+0x54>)
  40249a:	4798      	blx	r3
	
}
  40249c:	bf00      	nop
  40249e:	3704      	adds	r7, #4
  4024a0:	46bd      	mov	sp, r7
  4024a2:	bd90      	pop	{r4, r7, pc}
  4024a4:	0040162d 	.word	0x0040162d
  4024a8:	400e0e00 	.word	0x400e0e00
  4024ac:	00400f17 	.word	0x00400f17
  4024b0:	00402349 	.word	0x00402349
  4024b4:	00400aa9 	.word	0x00400aa9
  4024b8:	004021c1 	.word	0x004021c1
  4024bc:	004011ab 	.word	0x004011ab

004024c0 <process_incoming_byte_wifi>:

void process_incoming_byte_wifi(uint8_t in_byte){
  4024c0:	b480      	push	{r7}
  4024c2:	b083      	sub	sp, #12
  4024c4:	af00      	add	r7, sp, #0
  4024c6:	4603      	mov	r3, r0
  4024c8:	71fb      	strb	r3, [r7, #7]
	input_line_wifi[input_pos_wifi++] = in_byte;
  4024ca:	4b06      	ldr	r3, [pc, #24]	; (4024e4 <process_incoming_byte_wifi+0x24>)
  4024cc:	681b      	ldr	r3, [r3, #0]
  4024ce:	1c5a      	adds	r2, r3, #1
  4024d0:	4904      	ldr	r1, [pc, #16]	; (4024e4 <process_incoming_byte_wifi+0x24>)
  4024d2:	600a      	str	r2, [r1, #0]
  4024d4:	4904      	ldr	r1, [pc, #16]	; (4024e8 <process_incoming_byte_wifi+0x28>)
  4024d6:	79fa      	ldrb	r2, [r7, #7]
  4024d8:	54ca      	strb	r2, [r1, r3]
}
  4024da:	bf00      	nop
  4024dc:	370c      	adds	r7, #12
  4024de:	46bd      	mov	sp, r7
  4024e0:	bc80      	pop	{r7}
  4024e2:	4770      	bx	lr
  4024e4:	200004e0 	.word	0x200004e0
  4024e8:	200004f0 	.word	0x200004f0

004024ec <process_data_wifi>:

void process_data_wifi(){
  4024ec:	b480      	push	{r7}
  4024ee:	af00      	add	r7, sp, #0
	//if (strstr(input_line_wifi, "Unknown command")){
	//	ioport_toggle_pin_level(LED_PIN);
	//}
	;
}
  4024f0:	bf00      	nop
  4024f2:	46bd      	mov	sp, r7
  4024f4:	bc80      	pop	{r7}
  4024f6:	4770      	bx	lr

004024f8 <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{
  4024f8:	b580      	push	{r7, lr}
  4024fa:	b082      	sub	sp, #8
  4024fc:	af00      	add	r7, sp, #0
  4024fe:	6078      	str	r0, [r7, #4]
  402500:	460b      	mov	r3, r1
  402502:	70fb      	strb	r3, [r7, #3]
	usart_write_line(WIFI_USART,comm);
  402504:	6879      	ldr	r1, [r7, #4]
  402506:	4810      	ldr	r0, [pc, #64]	; (402548 <write_wifi_command+0x50>)
  402508:	4b10      	ldr	r3, [pc, #64]	; (40254c <write_wifi_command+0x54>)
  40250a:	4798      	blx	r3
	while ((counts<cnt) & (received_byte_wifi==0) ){;}
  40250c:	bf00      	nop
  40250e:	4b10      	ldr	r3, [pc, #64]	; (402550 <write_wifi_command+0x58>)
  402510:	781b      	ldrb	r3, [r3, #0]
  402512:	b2db      	uxtb	r3, r3
  402514:	78fa      	ldrb	r2, [r7, #3]
  402516:	429a      	cmp	r2, r3
  402518:	bf8c      	ite	hi
  40251a:	2301      	movhi	r3, #1
  40251c:	2300      	movls	r3, #0
  40251e:	b2da      	uxtb	r2, r3
  402520:	4b0c      	ldr	r3, [pc, #48]	; (402554 <write_wifi_command+0x5c>)
  402522:	681b      	ldr	r3, [r3, #0]
  402524:	2b00      	cmp	r3, #0
  402526:	bf0c      	ite	eq
  402528:	2301      	moveq	r3, #1
  40252a:	2300      	movne	r3, #0
  40252c:	b2db      	uxtb	r3, r3
  40252e:	4013      	ands	r3, r2
  402530:	b2db      	uxtb	r3, r3
  402532:	2b00      	cmp	r3, #0
  402534:	d1eb      	bne.n	40250e <write_wifi_command+0x16>
		if (counts>cnt){
  402536:	4b06      	ldr	r3, [pc, #24]	; (402550 <write_wifi_command+0x58>)
  402538:	781b      	ldrb	r3, [r3, #0]
  40253a:	b2db      	uxtb	r3, r3
  40253c:	78fa      	ldrb	r2, [r7, #3]
  40253e:	429a      	cmp	r2, r3
			return;// timeout
		}
}
  402540:	3708      	adds	r7, #8
  402542:	46bd      	mov	sp, r7
  402544:	bd80      	pop	{r7, pc}
  402546:	bf00      	nop
  402548:	40024000 	.word	0x40024000
  40254c:	00400951 	.word	0x00400951
  402550:	200004ec 	.word	0x200004ec
  402554:	200004d8 	.word	0x200004d8

00402558 <sysclk_enable_peripheral_clock>:
{
  402558:	b580      	push	{r7, lr}
  40255a:	b082      	sub	sp, #8
  40255c:	af00      	add	r7, sp, #0
  40255e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402560:	6878      	ldr	r0, [r7, #4]
  402562:	4b03      	ldr	r3, [pc, #12]	; (402570 <sysclk_enable_peripheral_clock+0x18>)
  402564:	4798      	blx	r3
}
  402566:	bf00      	nop
  402568:	3708      	adds	r7, #8
  40256a:	46bd      	mov	sp, r7
  40256c:	bd80      	pop	{r7, pc}
  40256e:	bf00      	nop
  402570:	0040162d 	.word	0x0040162d

00402574 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402574:	b580      	push	{r7, lr}
  402576:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402578:	200b      	movs	r0, #11
  40257a:	4b03      	ldr	r3, [pc, #12]	; (402588 <ioport_init+0x14>)
  40257c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40257e:	200c      	movs	r0, #12
  402580:	4b01      	ldr	r3, [pc, #4]	; (402588 <ioport_init+0x14>)
  402582:	4798      	blx	r3
	arch_ioport_init();
}
  402584:	bf00      	nop
  402586:	bd80      	pop	{r7, pc}
  402588:	00402559 	.word	0x00402559

0040258c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  40258c:	b480      	push	{r7}
  40258e:	b08d      	sub	sp, #52	; 0x34
  402590:	af00      	add	r7, sp, #0
  402592:	6078      	str	r0, [r7, #4]
  402594:	6039      	str	r1, [r7, #0]
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	62fb      	str	r3, [r7, #44]	; 0x2c
  40259a:	683b      	ldr	r3, [r7, #0]
  40259c:	62bb      	str	r3, [r7, #40]	; 0x28
  40259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025a0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025a4:	095a      	lsrs	r2, r3, #5
  4025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025a8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4025aa:	6a3b      	ldr	r3, [r7, #32]
  4025ac:	f003 031f 	and.w	r3, r3, #31
  4025b0:	2101      	movs	r1, #1
  4025b2:	fa01 f303 	lsl.w	r3, r1, r3
  4025b6:	61fa      	str	r2, [r7, #28]
  4025b8:	61bb      	str	r3, [r7, #24]
  4025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4025bc:	617b      	str	r3, [r7, #20]
  4025be:	69fb      	ldr	r3, [r7, #28]
  4025c0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4025c2:	693b      	ldr	r3, [r7, #16]
  4025c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4025c8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4025cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4025ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4025d0:	697b      	ldr	r3, [r7, #20]
  4025d2:	f003 0308 	and.w	r3, r3, #8
  4025d6:	2b00      	cmp	r3, #0
  4025d8:	d003      	beq.n	4025e2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4025da:	68fb      	ldr	r3, [r7, #12]
  4025dc:	69ba      	ldr	r2, [r7, #24]
  4025de:	665a      	str	r2, [r3, #100]	; 0x64
  4025e0:	e002      	b.n	4025e8 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4025e2:	68fb      	ldr	r3, [r7, #12]
  4025e4:	69ba      	ldr	r2, [r7, #24]
  4025e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4025e8:	697b      	ldr	r3, [r7, #20]
  4025ea:	f003 0310 	and.w	r3, r3, #16
  4025ee:	2b00      	cmp	r3, #0
  4025f0:	d004      	beq.n	4025fc <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4025f2:	68fb      	ldr	r3, [r7, #12]
  4025f4:	69ba      	ldr	r2, [r7, #24]
  4025f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4025fa:	e003      	b.n	402604 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  4025fc:	68fb      	ldr	r3, [r7, #12]
  4025fe:	69ba      	ldr	r2, [r7, #24]
  402600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  402604:	697b      	ldr	r3, [r7, #20]
  402606:	f003 0320 	and.w	r3, r3, #32
  40260a:	2b00      	cmp	r3, #0
  40260c:	d003      	beq.n	402616 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40260e:	68fb      	ldr	r3, [r7, #12]
  402610:	69ba      	ldr	r2, [r7, #24]
  402612:	651a      	str	r2, [r3, #80]	; 0x50
  402614:	e002      	b.n	40261c <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  402616:	68fb      	ldr	r3, [r7, #12]
  402618:	69ba      	ldr	r2, [r7, #24]
  40261a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40261c:	697b      	ldr	r3, [r7, #20]
  40261e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  402622:	2b00      	cmp	r3, #0
  402624:	d003      	beq.n	40262e <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  402626:	68fb      	ldr	r3, [r7, #12]
  402628:	69ba      	ldr	r2, [r7, #24]
  40262a:	621a      	str	r2, [r3, #32]
  40262c:	e002      	b.n	402634 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  40262e:	68fb      	ldr	r3, [r7, #12]
  402630:	69ba      	ldr	r2, [r7, #24]
  402632:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  402634:	697b      	ldr	r3, [r7, #20]
  402636:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40263a:	2b00      	cmp	r3, #0
  40263c:	d004      	beq.n	402648 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40263e:	68fb      	ldr	r3, [r7, #12]
  402640:	69ba      	ldr	r2, [r7, #24]
  402642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402646:	e003      	b.n	402650 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402648:	68fb      	ldr	r3, [r7, #12]
  40264a:	69ba      	ldr	r2, [r7, #24]
  40264c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402650:	697b      	ldr	r3, [r7, #20]
  402652:	f003 0301 	and.w	r3, r3, #1
  402656:	2b00      	cmp	r3, #0
  402658:	d006      	beq.n	402668 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40265a:	68fb      	ldr	r3, [r7, #12]
  40265c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40265e:	69bb      	ldr	r3, [r7, #24]
  402660:	431a      	orrs	r2, r3
  402662:	68fb      	ldr	r3, [r7, #12]
  402664:	671a      	str	r2, [r3, #112]	; 0x70
  402666:	e006      	b.n	402676 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402668:	68fb      	ldr	r3, [r7, #12]
  40266a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40266c:	69bb      	ldr	r3, [r7, #24]
  40266e:	43db      	mvns	r3, r3
  402670:	401a      	ands	r2, r3
  402672:	68fb      	ldr	r3, [r7, #12]
  402674:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  402676:	697b      	ldr	r3, [r7, #20]
  402678:	f003 0302 	and.w	r3, r3, #2
  40267c:	2b00      	cmp	r3, #0
  40267e:	d006      	beq.n	40268e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402680:	68fb      	ldr	r3, [r7, #12]
  402682:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402684:	69bb      	ldr	r3, [r7, #24]
  402686:	431a      	orrs	r2, r3
  402688:	68fb      	ldr	r3, [r7, #12]
  40268a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40268c:	e006      	b.n	40269c <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40268e:	68fb      	ldr	r3, [r7, #12]
  402690:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402692:	69bb      	ldr	r3, [r7, #24]
  402694:	43db      	mvns	r3, r3
  402696:	401a      	ands	r2, r3
  402698:	68fb      	ldr	r3, [r7, #12]
  40269a:	675a      	str	r2, [r3, #116]	; 0x74
  40269c:	bf00      	nop
  40269e:	3734      	adds	r7, #52	; 0x34
  4026a0:	46bd      	mov	sp, r7
  4026a2:	bc80      	pop	{r7}
  4026a4:	4770      	bx	lr

004026a6 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4026a6:	b480      	push	{r7}
  4026a8:	b08d      	sub	sp, #52	; 0x34
  4026aa:	af00      	add	r7, sp, #0
  4026ac:	6078      	str	r0, [r7, #4]
  4026ae:	460b      	mov	r3, r1
  4026b0:	70fb      	strb	r3, [r7, #3]
  4026b2:	687b      	ldr	r3, [r7, #4]
  4026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4026b6:	78fb      	ldrb	r3, [r7, #3]
  4026b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4026be:	627b      	str	r3, [r7, #36]	; 0x24
  4026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4026c2:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4026c4:	6a3b      	ldr	r3, [r7, #32]
  4026c6:	095b      	lsrs	r3, r3, #5
  4026c8:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4026ca:	69fb      	ldr	r3, [r7, #28]
  4026cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4026d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4026d4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4026d6:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4026d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4026dc:	2b01      	cmp	r3, #1
  4026de:	d109      	bne.n	4026f4 <ioport_set_pin_dir+0x4e>
  4026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4026e2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4026e4:	697b      	ldr	r3, [r7, #20]
  4026e6:	f003 031f 	and.w	r3, r3, #31
  4026ea:	2201      	movs	r2, #1
  4026ec:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026ee:	69bb      	ldr	r3, [r7, #24]
  4026f0:	611a      	str	r2, [r3, #16]
  4026f2:	e00c      	b.n	40270e <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4026f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4026f8:	2b00      	cmp	r3, #0
  4026fa:	d108      	bne.n	40270e <ioport_set_pin_dir+0x68>
  4026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4026fe:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402700:	693b      	ldr	r3, [r7, #16]
  402702:	f003 031f 	and.w	r3, r3, #31
  402706:	2201      	movs	r2, #1
  402708:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40270a:	69bb      	ldr	r3, [r7, #24]
  40270c:	615a      	str	r2, [r3, #20]
  40270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402710:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402712:	68fb      	ldr	r3, [r7, #12]
  402714:	f003 031f 	and.w	r3, r3, #31
  402718:	2201      	movs	r2, #1
  40271a:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40271c:	69bb      	ldr	r3, [r7, #24]
  40271e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402722:	bf00      	nop
  402724:	3734      	adds	r7, #52	; 0x34
  402726:	46bd      	mov	sp, r7
  402728:	bc80      	pop	{r7}
  40272a:	4770      	bx	lr

0040272c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40272c:	b480      	push	{r7}
  40272e:	b08b      	sub	sp, #44	; 0x2c
  402730:	af00      	add	r7, sp, #0
  402732:	6078      	str	r0, [r7, #4]
  402734:	460b      	mov	r3, r1
  402736:	70fb      	strb	r3, [r7, #3]
  402738:	687b      	ldr	r3, [r7, #4]
  40273a:	627b      	str	r3, [r7, #36]	; 0x24
  40273c:	78fb      	ldrb	r3, [r7, #3]
  40273e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402744:	61fb      	str	r3, [r7, #28]
  402746:	69fb      	ldr	r3, [r7, #28]
  402748:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40274a:	69bb      	ldr	r3, [r7, #24]
  40274c:	095b      	lsrs	r3, r3, #5
  40274e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402750:	697b      	ldr	r3, [r7, #20]
  402752:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402756:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40275a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40275c:	613b      	str	r3, [r7, #16]

	if (level) {
  40275e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402762:	2b00      	cmp	r3, #0
  402764:	d009      	beq.n	40277a <ioport_set_pin_level+0x4e>
  402766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402768:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40276a:	68fb      	ldr	r3, [r7, #12]
  40276c:	f003 031f 	and.w	r3, r3, #31
  402770:	2201      	movs	r2, #1
  402772:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402774:	693b      	ldr	r3, [r7, #16]
  402776:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  402778:	e008      	b.n	40278c <ioport_set_pin_level+0x60>
  40277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40277c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40277e:	68bb      	ldr	r3, [r7, #8]
  402780:	f003 031f 	and.w	r3, r3, #31
  402784:	2201      	movs	r2, #1
  402786:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402788:	693b      	ldr	r3, [r7, #16]
  40278a:	635a      	str	r2, [r3, #52]	; 0x34
  40278c:	bf00      	nop
  40278e:	372c      	adds	r7, #44	; 0x2c
  402790:	46bd      	mov	sp, r7
  402792:	bc80      	pop	{r7}
  402794:	4770      	bx	lr
	...

00402798 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  402798:	b580      	push	{r7, lr}
  40279a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	ioport_init();
  40279c:	4b0d      	ldr	r3, [pc, #52]	; (4027d4 <board_init+0x3c>)
  40279e:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  4027a0:	2101      	movs	r1, #1
  4027a2:	2013      	movs	r0, #19
  4027a4:	4b0c      	ldr	r3, [pc, #48]	; (4027d8 <board_init+0x40>)
  4027a6:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  4027a8:	2101      	movs	r1, #1
  4027aa:	2013      	movs	r0, #19
  4027ac:	4b0b      	ldr	r3, [pc, #44]	; (4027dc <board_init+0x44>)
  4027ae:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_SETUP_BUTTON_PIN, IOPORT_DIR_INPUT);
  4027b0:	2100      	movs	r1, #0
  4027b2:	2000      	movs	r0, #0
  4027b4:	4b08      	ldr	r3, [pc, #32]	; (4027d8 <board_init+0x40>)
  4027b6:	4798      	blx	r3
	ioport_set_pin_mode(WIFI_SETUP_BUTTON_PIN, IOPORT_MODE_PULLUP);
  4027b8:	2108      	movs	r1, #8
  4027ba:	2000      	movs	r0, #0
  4027bc:	4b08      	ldr	r3, [pc, #32]	; (4027e0 <board_init+0x48>)
  4027be:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
  4027c0:	2101      	movs	r1, #1
  4027c2:	2007      	movs	r0, #7
  4027c4:	4b04      	ldr	r3, [pc, #16]	; (4027d8 <board_init+0x40>)
  4027c6:	4798      	blx	r3
	ioport_set_pin_level(WIFI_CTS_PIN, false);
  4027c8:	2100      	movs	r1, #0
  4027ca:	2007      	movs	r0, #7
  4027cc:	4b03      	ldr	r3, [pc, #12]	; (4027dc <board_init+0x44>)
  4027ce:	4798      	blx	r3
	/* Configure PCK0 pins */
	#ifdef CONF_BOARD_PCK1
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
	#endif

}
  4027d0:	bf00      	nop
  4027d2:	bd80      	pop	{r7, pc}
  4027d4:	00402575 	.word	0x00402575
  4027d8:	004026a7 	.word	0x004026a7
  4027dc:	0040272d 	.word	0x0040272d
  4027e0:	0040258d 	.word	0x0040258d

004027e4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4027e4:	b580      	push	{r7, lr}
  4027e6:	b084      	sub	sp, #16
  4027e8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4027ea:	4b27      	ldr	r3, [pc, #156]	; (402888 <Reset_Handler+0xa4>)
  4027ec:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4027ee:	4b27      	ldr	r3, [pc, #156]	; (40288c <Reset_Handler+0xa8>)
  4027f0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4027f2:	68fa      	ldr	r2, [r7, #12]
  4027f4:	68bb      	ldr	r3, [r7, #8]
  4027f6:	429a      	cmp	r2, r3
  4027f8:	d90d      	bls.n	402816 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4027fa:	e007      	b.n	40280c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4027fc:	68bb      	ldr	r3, [r7, #8]
  4027fe:	1d1a      	adds	r2, r3, #4
  402800:	60ba      	str	r2, [r7, #8]
  402802:	68fa      	ldr	r2, [r7, #12]
  402804:	1d11      	adds	r1, r2, #4
  402806:	60f9      	str	r1, [r7, #12]
  402808:	6812      	ldr	r2, [r2, #0]
  40280a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  40280c:	68bb      	ldr	r3, [r7, #8]
  40280e:	4a20      	ldr	r2, [pc, #128]	; (402890 <Reset_Handler+0xac>)
  402810:	4293      	cmp	r3, r2
  402812:	d3f3      	bcc.n	4027fc <Reset_Handler+0x18>
  402814:	e020      	b.n	402858 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  402816:	68fa      	ldr	r2, [r7, #12]
  402818:	68bb      	ldr	r3, [r7, #8]
  40281a:	429a      	cmp	r2, r3
  40281c:	d21c      	bcs.n	402858 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40281e:	4a1c      	ldr	r2, [pc, #112]	; (402890 <Reset_Handler+0xac>)
  402820:	4b1a      	ldr	r3, [pc, #104]	; (40288c <Reset_Handler+0xa8>)
  402822:	1ad3      	subs	r3, r2, r3
  402824:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402826:	68fa      	ldr	r2, [r7, #12]
  402828:	687b      	ldr	r3, [r7, #4]
  40282a:	4413      	add	r3, r2
  40282c:	3b04      	subs	r3, #4
  40282e:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402830:	68ba      	ldr	r2, [r7, #8]
  402832:	687b      	ldr	r3, [r7, #4]
  402834:	4413      	add	r3, r2
  402836:	3b04      	subs	r3, #4
  402838:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40283a:	e00a      	b.n	402852 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40283c:	68bb      	ldr	r3, [r7, #8]
  40283e:	1f1a      	subs	r2, r3, #4
  402840:	60ba      	str	r2, [r7, #8]
  402842:	68fa      	ldr	r2, [r7, #12]
  402844:	1f11      	subs	r1, r2, #4
  402846:	60f9      	str	r1, [r7, #12]
  402848:	6812      	ldr	r2, [r2, #0]
  40284a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  40284c:	687b      	ldr	r3, [r7, #4]
  40284e:	3b04      	subs	r3, #4
  402850:	607b      	str	r3, [r7, #4]
  402852:	687b      	ldr	r3, [r7, #4]
  402854:	2b00      	cmp	r3, #0
  402856:	d1f1      	bne.n	40283c <Reset_Handler+0x58>
		}
	}
	__NOP();
  402858:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40285a:	4b0e      	ldr	r3, [pc, #56]	; (402894 <Reset_Handler+0xb0>)
  40285c:	60bb      	str	r3, [r7, #8]
  40285e:	e004      	b.n	40286a <Reset_Handler+0x86>
		*pDest++ = 0;
  402860:	68bb      	ldr	r3, [r7, #8]
  402862:	1d1a      	adds	r2, r3, #4
  402864:	60ba      	str	r2, [r7, #8]
  402866:	2200      	movs	r2, #0
  402868:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40286a:	68bb      	ldr	r3, [r7, #8]
  40286c:	4a0a      	ldr	r2, [pc, #40]	; (402898 <Reset_Handler+0xb4>)
  40286e:	4293      	cmp	r3, r2
  402870:	d3f6      	bcc.n	402860 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402872:	4b0a      	ldr	r3, [pc, #40]	; (40289c <Reset_Handler+0xb8>)
  402874:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402876:	4a0a      	ldr	r2, [pc, #40]	; (4028a0 <Reset_Handler+0xbc>)
  402878:	68fb      	ldr	r3, [r7, #12]
  40287a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40287c:	4b09      	ldr	r3, [pc, #36]	; (4028a4 <Reset_Handler+0xc0>)
  40287e:	4798      	blx	r3

	/* Branch to main function */
	main();
  402880:	4b09      	ldr	r3, [pc, #36]	; (4028a8 <Reset_Handler+0xc4>)
  402882:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402884:	e7fe      	b.n	402884 <Reset_Handler+0xa0>
  402886:	bf00      	nop
  402888:	00403e0c 	.word	0x00403e0c
  40288c:	20000000 	.word	0x20000000
  402890:	2000043c 	.word	0x2000043c
  402894:	2000043c 	.word	0x2000043c
  402898:	200008fc 	.word	0x200008fc
  40289c:	00400000 	.word	0x00400000
  4028a0:	e000ed00 	.word	0xe000ed00
  4028a4:	00403009 	.word	0x00403009
  4028a8:	00402bf1 	.word	0x00402bf1

004028ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4028ac:	b480      	push	{r7}
  4028ae:	af00      	add	r7, sp, #0
	while (1) {
  4028b0:	e7fe      	b.n	4028b0 <Dummy_Handler+0x4>
	...

004028b4 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4028b4:	b480      	push	{r7}
  4028b6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4028b8:	4b5d      	ldr	r3, [pc, #372]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  4028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028bc:	f003 0303 	and.w	r3, r3, #3
  4028c0:	2b03      	cmp	r3, #3
  4028c2:	f200 8096 	bhi.w	4029f2 <SystemCoreClockUpdate+0x13e>
  4028c6:	a201      	add	r2, pc, #4	; (adr r2, 4028cc <SystemCoreClockUpdate+0x18>)
  4028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4028cc:	004028dd 	.word	0x004028dd
  4028d0:	004028fd 	.word	0x004028fd
  4028d4:	00402947 	.word	0x00402947
  4028d8:	00402947 	.word	0x00402947
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4028dc:	4b55      	ldr	r3, [pc, #340]	; (402a34 <SystemCoreClockUpdate+0x180>)
  4028de:	695b      	ldr	r3, [r3, #20]
  4028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4028e4:	2b00      	cmp	r3, #0
  4028e6:	d004      	beq.n	4028f2 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4028e8:	4b53      	ldr	r3, [pc, #332]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4028ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4028ee:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4028f0:	e080      	b.n	4029f4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4028f2:	4b51      	ldr	r3, [pc, #324]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4028f4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4028f8:	601a      	str	r2, [r3, #0]
		break;
  4028fa:	e07b      	b.n	4029f4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4028fc:	4b4c      	ldr	r3, [pc, #304]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  4028fe:	6a1b      	ldr	r3, [r3, #32]
  402900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402904:	2b00      	cmp	r3, #0
  402906:	d003      	beq.n	402910 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402908:	4b4b      	ldr	r3, [pc, #300]	; (402a38 <SystemCoreClockUpdate+0x184>)
  40290a:	4a4c      	ldr	r2, [pc, #304]	; (402a3c <SystemCoreClockUpdate+0x188>)
  40290c:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  40290e:	e071      	b.n	4029f4 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402910:	4b49      	ldr	r3, [pc, #292]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402912:	4a4b      	ldr	r2, [pc, #300]	; (402a40 <SystemCoreClockUpdate+0x18c>)
  402914:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402916:	4b46      	ldr	r3, [pc, #280]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  402918:	6a1b      	ldr	r3, [r3, #32]
  40291a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40291e:	2b10      	cmp	r3, #16
  402920:	d008      	beq.n	402934 <SystemCoreClockUpdate+0x80>
  402922:	2b20      	cmp	r3, #32
  402924:	d00a      	beq.n	40293c <SystemCoreClockUpdate+0x88>
  402926:	2b00      	cmp	r3, #0
  402928:	d000      	beq.n	40292c <SystemCoreClockUpdate+0x78>
			break;
  40292a:	e00b      	b.n	402944 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40292c:	4b42      	ldr	r3, [pc, #264]	; (402a38 <SystemCoreClockUpdate+0x184>)
  40292e:	4a44      	ldr	r2, [pc, #272]	; (402a40 <SystemCoreClockUpdate+0x18c>)
  402930:	601a      	str	r2, [r3, #0]
			break;
  402932:	e007      	b.n	402944 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402934:	4b40      	ldr	r3, [pc, #256]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402936:	4a43      	ldr	r2, [pc, #268]	; (402a44 <SystemCoreClockUpdate+0x190>)
  402938:	601a      	str	r2, [r3, #0]
			break;
  40293a:	e003      	b.n	402944 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40293c:	4b3e      	ldr	r3, [pc, #248]	; (402a38 <SystemCoreClockUpdate+0x184>)
  40293e:	4a3f      	ldr	r2, [pc, #252]	; (402a3c <SystemCoreClockUpdate+0x188>)
  402940:	601a      	str	r2, [r3, #0]
			break;
  402942:	bf00      	nop
		break;
  402944:	e056      	b.n	4029f4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402946:	4b3a      	ldr	r3, [pc, #232]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  402948:	6a1b      	ldr	r3, [r3, #32]
  40294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40294e:	2b00      	cmp	r3, #0
  402950:	d003      	beq.n	40295a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402952:	4b39      	ldr	r3, [pc, #228]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402954:	4a39      	ldr	r2, [pc, #228]	; (402a3c <SystemCoreClockUpdate+0x188>)
  402956:	601a      	str	r2, [r3, #0]
  402958:	e019      	b.n	40298e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40295a:	4b37      	ldr	r3, [pc, #220]	; (402a38 <SystemCoreClockUpdate+0x184>)
  40295c:	4a38      	ldr	r2, [pc, #224]	; (402a40 <SystemCoreClockUpdate+0x18c>)
  40295e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402960:	4b33      	ldr	r3, [pc, #204]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  402962:	6a1b      	ldr	r3, [r3, #32]
  402964:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402968:	2b10      	cmp	r3, #16
  40296a:	d008      	beq.n	40297e <SystemCoreClockUpdate+0xca>
  40296c:	2b20      	cmp	r3, #32
  40296e:	d00a      	beq.n	402986 <SystemCoreClockUpdate+0xd2>
  402970:	2b00      	cmp	r3, #0
  402972:	d000      	beq.n	402976 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402974:	e00b      	b.n	40298e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402976:	4b30      	ldr	r3, [pc, #192]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402978:	4a31      	ldr	r2, [pc, #196]	; (402a40 <SystemCoreClockUpdate+0x18c>)
  40297a:	601a      	str	r2, [r3, #0]
					break;
  40297c:	e007      	b.n	40298e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40297e:	4b2e      	ldr	r3, [pc, #184]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402980:	4a30      	ldr	r2, [pc, #192]	; (402a44 <SystemCoreClockUpdate+0x190>)
  402982:	601a      	str	r2, [r3, #0]
					break;
  402984:	e003      	b.n	40298e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402986:	4b2c      	ldr	r3, [pc, #176]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402988:	4a2c      	ldr	r2, [pc, #176]	; (402a3c <SystemCoreClockUpdate+0x188>)
  40298a:	601a      	str	r2, [r3, #0]
					break;
  40298c:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40298e:	4b28      	ldr	r3, [pc, #160]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  402990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402992:	f003 0303 	and.w	r3, r3, #3
  402996:	2b02      	cmp	r3, #2
  402998:	d115      	bne.n	4029c6 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40299a:	4b25      	ldr	r3, [pc, #148]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  40299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40299e:	0c1b      	lsrs	r3, r3, #16
  4029a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4029a4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4029a6:	4a24      	ldr	r2, [pc, #144]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029a8:	6812      	ldr	r2, [r2, #0]
  4029aa:	fb02 f303 	mul.w	r3, r2, r3
  4029ae:	4a22      	ldr	r2, [pc, #136]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029b0:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4029b2:	4b1f      	ldr	r3, [pc, #124]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  4029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4029b6:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4029b8:	4a1f      	ldr	r2, [pc, #124]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029ba:	6812      	ldr	r2, [r2, #0]
  4029bc:	fbb2 f3f3 	udiv	r3, r2, r3
  4029c0:	4a1d      	ldr	r2, [pc, #116]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029c2:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4029c4:	e016      	b.n	4029f4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4029c6:	4b1a      	ldr	r3, [pc, #104]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  4029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4029ca:	0c1b      	lsrs	r3, r3, #16
  4029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4029d0:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4029d2:	4a19      	ldr	r2, [pc, #100]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029d4:	6812      	ldr	r2, [r2, #0]
  4029d6:	fb02 f303 	mul.w	r3, r2, r3
  4029da:	4a17      	ldr	r2, [pc, #92]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029dc:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029de:	4b14      	ldr	r3, [pc, #80]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  4029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4029e2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029e4:	4a14      	ldr	r2, [pc, #80]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029e6:	6812      	ldr	r2, [r2, #0]
  4029e8:	fbb2 f3f3 	udiv	r3, r2, r3
  4029ec:	4a12      	ldr	r2, [pc, #72]	; (402a38 <SystemCoreClockUpdate+0x184>)
  4029ee:	6013      	str	r3, [r2, #0]
		break;
  4029f0:	e000      	b.n	4029f4 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4029f2:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4029f4:	4b0e      	ldr	r3, [pc, #56]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  4029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029fc:	2b70      	cmp	r3, #112	; 0x70
  4029fe:	d108      	bne.n	402a12 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402a00:	4b0d      	ldr	r3, [pc, #52]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402a02:	681b      	ldr	r3, [r3, #0]
  402a04:	4a10      	ldr	r2, [pc, #64]	; (402a48 <SystemCoreClockUpdate+0x194>)
  402a06:	fba2 2303 	umull	r2, r3, r2, r3
  402a0a:	085b      	lsrs	r3, r3, #1
  402a0c:	4a0a      	ldr	r2, [pc, #40]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402a0e:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402a10:	e00a      	b.n	402a28 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402a12:	4b07      	ldr	r3, [pc, #28]	; (402a30 <SystemCoreClockUpdate+0x17c>)
  402a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a16:	091b      	lsrs	r3, r3, #4
  402a18:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402a1c:	4a06      	ldr	r2, [pc, #24]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402a1e:	6812      	ldr	r2, [r2, #0]
  402a20:	fa22 f303 	lsr.w	r3, r2, r3
  402a24:	4a04      	ldr	r2, [pc, #16]	; (402a38 <SystemCoreClockUpdate+0x184>)
  402a26:	6013      	str	r3, [r2, #0]
}
  402a28:	bf00      	nop
  402a2a:	46bd      	mov	sp, r7
  402a2c:	bc80      	pop	{r7}
  402a2e:	4770      	bx	lr
  402a30:	400e0400 	.word	0x400e0400
  402a34:	400e1410 	.word	0x400e1410
  402a38:	2000000c 	.word	0x2000000c
  402a3c:	00b71b00 	.word	0x00b71b00
  402a40:	003d0900 	.word	0x003d0900
  402a44:	007a1200 	.word	0x007a1200
  402a48:	aaaaaaab 	.word	0xaaaaaaab

00402a4c <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402a4c:	b480      	push	{r7}
  402a4e:	b083      	sub	sp, #12
  402a50:	af00      	add	r7, sp, #0
  402a52:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402a54:	687b      	ldr	r3, [r7, #4]
  402a56:	4a18      	ldr	r2, [pc, #96]	; (402ab8 <system_init_flash+0x6c>)
  402a58:	4293      	cmp	r3, r2
  402a5a:	d804      	bhi.n	402a66 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a5c:	4b17      	ldr	r3, [pc, #92]	; (402abc <system_init_flash+0x70>)
  402a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a62:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402a64:	e023      	b.n	402aae <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402a66:	687b      	ldr	r3, [r7, #4]
  402a68:	4a15      	ldr	r2, [pc, #84]	; (402ac0 <system_init_flash+0x74>)
  402a6a:	4293      	cmp	r3, r2
  402a6c:	d803      	bhi.n	402a76 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402a6e:	4b13      	ldr	r3, [pc, #76]	; (402abc <system_init_flash+0x70>)
  402a70:	4a14      	ldr	r2, [pc, #80]	; (402ac4 <system_init_flash+0x78>)
  402a72:	601a      	str	r2, [r3, #0]
}
  402a74:	e01b      	b.n	402aae <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402a76:	687b      	ldr	r3, [r7, #4]
  402a78:	4a13      	ldr	r2, [pc, #76]	; (402ac8 <system_init_flash+0x7c>)
  402a7a:	4293      	cmp	r3, r2
  402a7c:	d803      	bhi.n	402a86 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402a7e:	4b0f      	ldr	r3, [pc, #60]	; (402abc <system_init_flash+0x70>)
  402a80:	4a12      	ldr	r2, [pc, #72]	; (402acc <system_init_flash+0x80>)
  402a82:	601a      	str	r2, [r3, #0]
}
  402a84:	e013      	b.n	402aae <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402a86:	687b      	ldr	r3, [r7, #4]
  402a88:	4a11      	ldr	r2, [pc, #68]	; (402ad0 <system_init_flash+0x84>)
  402a8a:	4293      	cmp	r3, r2
  402a8c:	d803      	bhi.n	402a96 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402a8e:	4b0b      	ldr	r3, [pc, #44]	; (402abc <system_init_flash+0x70>)
  402a90:	4a10      	ldr	r2, [pc, #64]	; (402ad4 <system_init_flash+0x88>)
  402a92:	601a      	str	r2, [r3, #0]
}
  402a94:	e00b      	b.n	402aae <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402a96:	687b      	ldr	r3, [r7, #4]
  402a98:	4a0f      	ldr	r2, [pc, #60]	; (402ad8 <system_init_flash+0x8c>)
  402a9a:	4293      	cmp	r3, r2
  402a9c:	d804      	bhi.n	402aa8 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a9e:	4b07      	ldr	r3, [pc, #28]	; (402abc <system_init_flash+0x70>)
  402aa0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402aa4:	601a      	str	r2, [r3, #0]
}
  402aa6:	e002      	b.n	402aae <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402aa8:	4b04      	ldr	r3, [pc, #16]	; (402abc <system_init_flash+0x70>)
  402aaa:	4a0c      	ldr	r2, [pc, #48]	; (402adc <system_init_flash+0x90>)
  402aac:	601a      	str	r2, [r3, #0]
}
  402aae:	bf00      	nop
  402ab0:	370c      	adds	r7, #12
  402ab2:	46bd      	mov	sp, r7
  402ab4:	bc80      	pop	{r7}
  402ab6:	4770      	bx	lr
  402ab8:	01312cff 	.word	0x01312cff
  402abc:	400e0a00 	.word	0x400e0a00
  402ac0:	026259ff 	.word	0x026259ff
  402ac4:	04000100 	.word	0x04000100
  402ac8:	039386ff 	.word	0x039386ff
  402acc:	04000200 	.word	0x04000200
  402ad0:	04c4b3ff 	.word	0x04c4b3ff
  402ad4:	04000300 	.word	0x04000300
  402ad8:	05f5e0ff 	.word	0x05f5e0ff
  402adc:	04000500 	.word	0x04000500

00402ae0 <osc_get_rate>:
{
  402ae0:	b480      	push	{r7}
  402ae2:	b083      	sub	sp, #12
  402ae4:	af00      	add	r7, sp, #0
  402ae6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402ae8:	687b      	ldr	r3, [r7, #4]
  402aea:	2b07      	cmp	r3, #7
  402aec:	d825      	bhi.n	402b3a <osc_get_rate+0x5a>
  402aee:	a201      	add	r2, pc, #4	; (adr r2, 402af4 <osc_get_rate+0x14>)
  402af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402af4:	00402b15 	.word	0x00402b15
  402af8:	00402b1b 	.word	0x00402b1b
  402afc:	00402b21 	.word	0x00402b21
  402b00:	00402b27 	.word	0x00402b27
  402b04:	00402b2b 	.word	0x00402b2b
  402b08:	00402b2f 	.word	0x00402b2f
  402b0c:	00402b33 	.word	0x00402b33
  402b10:	00402b37 	.word	0x00402b37
		return OSC_SLCK_32K_RC_HZ;
  402b14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402b18:	e010      	b.n	402b3c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402b1e:	e00d      	b.n	402b3c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402b24:	e00a      	b.n	402b3c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402b26:	4b08      	ldr	r3, [pc, #32]	; (402b48 <osc_get_rate+0x68>)
  402b28:	e008      	b.n	402b3c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402b2a:	4b08      	ldr	r3, [pc, #32]	; (402b4c <osc_get_rate+0x6c>)
  402b2c:	e006      	b.n	402b3c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402b2e:	4b08      	ldr	r3, [pc, #32]	; (402b50 <osc_get_rate+0x70>)
  402b30:	e004      	b.n	402b3c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402b32:	4b07      	ldr	r3, [pc, #28]	; (402b50 <osc_get_rate+0x70>)
  402b34:	e002      	b.n	402b3c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402b36:	4b06      	ldr	r3, [pc, #24]	; (402b50 <osc_get_rate+0x70>)
  402b38:	e000      	b.n	402b3c <osc_get_rate+0x5c>
	return 0;
  402b3a:	2300      	movs	r3, #0
}
  402b3c:	4618      	mov	r0, r3
  402b3e:	370c      	adds	r7, #12
  402b40:	46bd      	mov	sp, r7
  402b42:	bc80      	pop	{r7}
  402b44:	4770      	bx	lr
  402b46:	bf00      	nop
  402b48:	003d0900 	.word	0x003d0900
  402b4c:	007a1200 	.word	0x007a1200
  402b50:	00b71b00 	.word	0x00b71b00

00402b54 <sysclk_get_main_hz>:
{
  402b54:	b580      	push	{r7, lr}
  402b56:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402b58:	2006      	movs	r0, #6
  402b5a:	4b04      	ldr	r3, [pc, #16]	; (402b6c <sysclk_get_main_hz+0x18>)
  402b5c:	4798      	blx	r3
  402b5e:	4602      	mov	r2, r0
  402b60:	4613      	mov	r3, r2
  402b62:	009b      	lsls	r3, r3, #2
  402b64:	4413      	add	r3, r2
  402b66:	009b      	lsls	r3, r3, #2
}
  402b68:	4618      	mov	r0, r3
  402b6a:	bd80      	pop	{r7, pc}
  402b6c:	00402ae1 	.word	0x00402ae1

00402b70 <sysclk_get_cpu_hz>:
{
  402b70:	b580      	push	{r7, lr}
  402b72:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402b74:	4b02      	ldr	r3, [pc, #8]	; (402b80 <sysclk_get_cpu_hz+0x10>)
  402b76:	4798      	blx	r3
  402b78:	4603      	mov	r3, r0
  402b7a:	085b      	lsrs	r3, r3, #1
}
  402b7c:	4618      	mov	r0, r3
  402b7e:	bd80      	pop	{r7, pc}
  402b80:	00402b55 	.word	0x00402b55

00402b84 <ioport_set_pin_level>:
{
  402b84:	b480      	push	{r7}
  402b86:	b08b      	sub	sp, #44	; 0x2c
  402b88:	af00      	add	r7, sp, #0
  402b8a:	6078      	str	r0, [r7, #4]
  402b8c:	460b      	mov	r3, r1
  402b8e:	70fb      	strb	r3, [r7, #3]
  402b90:	687b      	ldr	r3, [r7, #4]
  402b92:	627b      	str	r3, [r7, #36]	; 0x24
  402b94:	78fb      	ldrb	r3, [r7, #3]
  402b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b9c:	61fb      	str	r3, [r7, #28]
  402b9e:	69fb      	ldr	r3, [r7, #28]
  402ba0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402ba2:	69bb      	ldr	r3, [r7, #24]
  402ba4:	095b      	lsrs	r3, r3, #5
  402ba6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402ba8:	697b      	ldr	r3, [r7, #20]
  402baa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402bae:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402bb2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402bb4:	613b      	str	r3, [r7, #16]
	if (level) {
  402bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402bba:	2b00      	cmp	r3, #0
  402bbc:	d009      	beq.n	402bd2 <ioport_set_pin_level+0x4e>
  402bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bc0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402bc2:	68fb      	ldr	r3, [r7, #12]
  402bc4:	f003 031f 	and.w	r3, r3, #31
  402bc8:	2201      	movs	r2, #1
  402bca:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402bcc:	693b      	ldr	r3, [r7, #16]
  402bce:	631a      	str	r2, [r3, #48]	; 0x30
}
  402bd0:	e008      	b.n	402be4 <ioport_set_pin_level+0x60>
  402bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bd4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402bd6:	68bb      	ldr	r3, [r7, #8]
  402bd8:	f003 031f 	and.w	r3, r3, #31
  402bdc:	2201      	movs	r2, #1
  402bde:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402be0:	693b      	ldr	r3, [r7, #16]
  402be2:	635a      	str	r2, [r3, #52]	; 0x34
  402be4:	bf00      	nop
  402be6:	372c      	adds	r7, #44	; 0x2c
  402be8:	46bd      	mov	sp, r7
  402bea:	bc80      	pop	{r7}
  402bec:	4770      	bx	lr
	...

00402bf0 <main>:
#include "camera.h"
#include "wifi.h"
#include "timer_interface.h"

int main (void)
{
  402bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bf2:	af00      	add	r7, sp, #0
	// Initialization
	sysclk_init();
  402bf4:	4b2d      	ldr	r3, [pc, #180]	; (402cac <main+0xbc>)
  402bf6:	4798      	blx	r3
	wdt_disable(WDT);
  402bf8:	482d      	ldr	r0, [pc, #180]	; (402cb0 <main+0xc0>)
  402bfa:	4b2e      	ldr	r3, [pc, #184]	; (402cb4 <main+0xc4>)
  402bfc:	4798      	blx	r3
	board_init();
  402bfe:	4b2e      	ldr	r3, [pc, #184]	; (402cb8 <main+0xc8>)
  402c00:	4798      	blx	r3
	init_camera();
  402c02:	4b2e      	ldr	r3, [pc, #184]	; (402cbc <main+0xcc>)
  402c04:	4798      	blx	r3
	
	// Configure peripheral pins, Initialize WiFi and camera modules
	configure_camera();
  402c06:	4b2e      	ldr	r3, [pc, #184]	; (402cc0 <main+0xd0>)
  402c08:	4798      	blx	r3
	configure_tc();
  402c0a:	4b2e      	ldr	r3, [pc, #184]	; (402cc4 <main+0xd4>)
  402c0c:	4798      	blx	r3
	configure_usart_wifi();
  402c0e:	4b2e      	ldr	r3, [pc, #184]	; (402cc8 <main+0xd8>)
  402c10:	4798      	blx	r3
	configure_wifi_comm_pin();
  402c12:	4b2e      	ldr	r3, [pc, #184]	; (402ccc <main+0xdc>)
  402c14:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  402c16:	4b2e      	ldr	r3, [pc, #184]	; (402cd0 <main+0xe0>)
  402c18:	4798      	blx	r3
	
	
	
	// Reset wifi module
	ioport_set_pin_level(WIFI_RESET_PIN, false);
  402c1a:	2100      	movs	r1, #0
  402c1c:	2013      	movs	r0, #19
  402c1e:	4b2d      	ldr	r3, [pc, #180]	; (402cd4 <main+0xe4>)
  402c20:	4798      	blx	r3
	delay_ms(100);
  402c22:	4b2d      	ldr	r3, [pc, #180]	; (402cd8 <main+0xe8>)
  402c24:	4798      	blx	r3
  402c26:	4603      	mov	r3, r0
  402c28:	4619      	mov	r1, r3
  402c2a:	f04f 0200 	mov.w	r2, #0
  402c2e:	460b      	mov	r3, r1
  402c30:	4614      	mov	r4, r2
  402c32:	18db      	adds	r3, r3, r3
  402c34:	eb44 0404 	adc.w	r4, r4, r4
  402c38:	185b      	adds	r3, r3, r1
  402c3a:	eb44 0402 	adc.w	r4, r4, r2
  402c3e:	0166      	lsls	r6, r4, #5
  402c40:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402c44:	015d      	lsls	r5, r3, #5
  402c46:	195b      	adds	r3, r3, r5
  402c48:	eb44 0406 	adc.w	r4, r4, r6
  402c4c:	185b      	adds	r3, r3, r1
  402c4e:	eb44 0402 	adc.w	r4, r4, r2
  402c52:	f243 61af 	movw	r1, #13999	; 0x36af
  402c56:	f04f 0200 	mov.w	r2, #0
  402c5a:	185d      	adds	r5, r3, r1
  402c5c:	eb44 0602 	adc.w	r6, r4, r2
  402c60:	4628      	mov	r0, r5
  402c62:	4631      	mov	r1, r6
  402c64:	4c1d      	ldr	r4, [pc, #116]	; (402cdc <main+0xec>)
  402c66:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402c6a:	f04f 0300 	mov.w	r3, #0
  402c6e:	47a0      	blx	r4
  402c70:	4603      	mov	r3, r0
  402c72:	460c      	mov	r4, r1
  402c74:	4618      	mov	r0, r3
  402c76:	4b1a      	ldr	r3, [pc, #104]	; (402ce0 <main+0xf0>)
  402c78:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  402c7a:	2101      	movs	r1, #1
  402c7c:	2013      	movs	r0, #19
  402c7e:	4b15      	ldr	r3, [pc, #84]	; (402cd4 <main+0xe4>)
  402c80:	4798      	blx	r3
	
	// Tell the WiFi to turn off the command prompt and command  echo
	write_wifi_command("set sy c p off\r\n",2);
  402c82:	2102      	movs	r1, #2
  402c84:	4817      	ldr	r0, [pc, #92]	; (402ce4 <main+0xf4>)
  402c86:	4b18      	ldr	r3, [pc, #96]	; (402ce8 <main+0xf8>)
  402c88:	4798      	blx	r3
	write_wifi_command("set sy c e off\r\n",2);
  402c8a:	2102      	movs	r1, #2
  402c8c:	4817      	ldr	r0, [pc, #92]	; (402cec <main+0xfc>)
  402c8e:	4b16      	ldr	r3, [pc, #88]	; (402ce8 <main+0xf8>)
  402c90:	4798      	blx	r3
	
	while (1){
		if (wifi_web_setup_flag){
  402c92:	4b17      	ldr	r3, [pc, #92]	; (402cf0 <main+0x100>)
  402c94:	681b      	ldr	r3, [r3, #0]
  402c96:	2b00      	cmp	r3, #0
  402c98:	d0fb      	beq.n	402c92 <main+0xa2>
			wifi_web_setup_flag = 0;
  402c9a:	4b15      	ldr	r3, [pc, #84]	; (402cf0 <main+0x100>)
  402c9c:	2200      	movs	r2, #0
  402c9e:	601a      	str	r2, [r3, #0]
			write_wifi_command("setup web\r\n",3);
  402ca0:	2103      	movs	r1, #3
  402ca2:	4814      	ldr	r0, [pc, #80]	; (402cf4 <main+0x104>)
  402ca4:	4b10      	ldr	r3, [pc, #64]	; (402ce8 <main+0xf8>)
  402ca6:	4798      	blx	r3
		if (wifi_web_setup_flag){
  402ca8:	e7f3      	b.n	402c92 <main+0xa2>
  402caa:	bf00      	nop
  402cac:	00400e7d 	.word	0x00400e7d
  402cb0:	400e1450 	.word	0x400e1450
  402cb4:	00400b79 	.word	0x00400b79
  402cb8:	00402799 	.word	0x00402799
  402cbc:	00401969 	.word	0x00401969
  402cc0:	00401a41 	.word	0x00401a41
  402cc4:	00402135 	.word	0x00402135
  402cc8:	00402369 	.word	0x00402369
  402ccc:	00402419 	.word	0x00402419
  402cd0:	00402469 	.word	0x00402469
  402cd4:	00402b85 	.word	0x00402b85
  402cd8:	00402b71 	.word	0x00402b71
  402cdc:	00402cf9 	.word	0x00402cf9
  402ce0:	20000001 	.word	0x20000001
  402ce4:	00403da8 	.word	0x00403da8
  402ce8:	004024f9 	.word	0x004024f9
  402cec:	00403dbc 	.word	0x00403dbc
  402cf0:	200004dc 	.word	0x200004dc
  402cf4:	00403dd0 	.word	0x00403dd0

00402cf8 <__aeabi_uldivmod>:
  402cf8:	b953      	cbnz	r3, 402d10 <__aeabi_uldivmod+0x18>
  402cfa:	b94a      	cbnz	r2, 402d10 <__aeabi_uldivmod+0x18>
  402cfc:	2900      	cmp	r1, #0
  402cfe:	bf08      	it	eq
  402d00:	2800      	cmpeq	r0, #0
  402d02:	bf1c      	itt	ne
  402d04:	f04f 31ff 	movne.w	r1, #4294967295
  402d08:	f04f 30ff 	movne.w	r0, #4294967295
  402d0c:	f000 b97a 	b.w	403004 <__aeabi_idiv0>
  402d10:	f1ad 0c08 	sub.w	ip, sp, #8
  402d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402d18:	f000 f806 	bl	402d28 <__udivmoddi4>
  402d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  402d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402d24:	b004      	add	sp, #16
  402d26:	4770      	bx	lr

00402d28 <__udivmoddi4>:
  402d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d2c:	468c      	mov	ip, r1
  402d2e:	460d      	mov	r5, r1
  402d30:	4604      	mov	r4, r0
  402d32:	9e08      	ldr	r6, [sp, #32]
  402d34:	2b00      	cmp	r3, #0
  402d36:	d151      	bne.n	402ddc <__udivmoddi4+0xb4>
  402d38:	428a      	cmp	r2, r1
  402d3a:	4617      	mov	r7, r2
  402d3c:	d96d      	bls.n	402e1a <__udivmoddi4+0xf2>
  402d3e:	fab2 fe82 	clz	lr, r2
  402d42:	f1be 0f00 	cmp.w	lr, #0
  402d46:	d00b      	beq.n	402d60 <__udivmoddi4+0x38>
  402d48:	f1ce 0c20 	rsb	ip, lr, #32
  402d4c:	fa01 f50e 	lsl.w	r5, r1, lr
  402d50:	fa20 fc0c 	lsr.w	ip, r0, ip
  402d54:	fa02 f70e 	lsl.w	r7, r2, lr
  402d58:	ea4c 0c05 	orr.w	ip, ip, r5
  402d5c:	fa00 f40e 	lsl.w	r4, r0, lr
  402d60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402d64:	0c25      	lsrs	r5, r4, #16
  402d66:	fbbc f8fa 	udiv	r8, ip, sl
  402d6a:	fa1f f987 	uxth.w	r9, r7
  402d6e:	fb0a cc18 	mls	ip, sl, r8, ip
  402d72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402d76:	fb08 f309 	mul.w	r3, r8, r9
  402d7a:	42ab      	cmp	r3, r5
  402d7c:	d90a      	bls.n	402d94 <__udivmoddi4+0x6c>
  402d7e:	19ed      	adds	r5, r5, r7
  402d80:	f108 32ff 	add.w	r2, r8, #4294967295
  402d84:	f080 8123 	bcs.w	402fce <__udivmoddi4+0x2a6>
  402d88:	42ab      	cmp	r3, r5
  402d8a:	f240 8120 	bls.w	402fce <__udivmoddi4+0x2a6>
  402d8e:	f1a8 0802 	sub.w	r8, r8, #2
  402d92:	443d      	add	r5, r7
  402d94:	1aed      	subs	r5, r5, r3
  402d96:	b2a4      	uxth	r4, r4
  402d98:	fbb5 f0fa 	udiv	r0, r5, sl
  402d9c:	fb0a 5510 	mls	r5, sl, r0, r5
  402da0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402da4:	fb00 f909 	mul.w	r9, r0, r9
  402da8:	45a1      	cmp	r9, r4
  402daa:	d909      	bls.n	402dc0 <__udivmoddi4+0x98>
  402dac:	19e4      	adds	r4, r4, r7
  402dae:	f100 33ff 	add.w	r3, r0, #4294967295
  402db2:	f080 810a 	bcs.w	402fca <__udivmoddi4+0x2a2>
  402db6:	45a1      	cmp	r9, r4
  402db8:	f240 8107 	bls.w	402fca <__udivmoddi4+0x2a2>
  402dbc:	3802      	subs	r0, #2
  402dbe:	443c      	add	r4, r7
  402dc0:	eba4 0409 	sub.w	r4, r4, r9
  402dc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402dc8:	2100      	movs	r1, #0
  402dca:	2e00      	cmp	r6, #0
  402dcc:	d061      	beq.n	402e92 <__udivmoddi4+0x16a>
  402dce:	fa24 f40e 	lsr.w	r4, r4, lr
  402dd2:	2300      	movs	r3, #0
  402dd4:	6034      	str	r4, [r6, #0]
  402dd6:	6073      	str	r3, [r6, #4]
  402dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ddc:	428b      	cmp	r3, r1
  402dde:	d907      	bls.n	402df0 <__udivmoddi4+0xc8>
  402de0:	2e00      	cmp	r6, #0
  402de2:	d054      	beq.n	402e8e <__udivmoddi4+0x166>
  402de4:	2100      	movs	r1, #0
  402de6:	e886 0021 	stmia.w	r6, {r0, r5}
  402dea:	4608      	mov	r0, r1
  402dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402df0:	fab3 f183 	clz	r1, r3
  402df4:	2900      	cmp	r1, #0
  402df6:	f040 808e 	bne.w	402f16 <__udivmoddi4+0x1ee>
  402dfa:	42ab      	cmp	r3, r5
  402dfc:	d302      	bcc.n	402e04 <__udivmoddi4+0xdc>
  402dfe:	4282      	cmp	r2, r0
  402e00:	f200 80fa 	bhi.w	402ff8 <__udivmoddi4+0x2d0>
  402e04:	1a84      	subs	r4, r0, r2
  402e06:	eb65 0503 	sbc.w	r5, r5, r3
  402e0a:	2001      	movs	r0, #1
  402e0c:	46ac      	mov	ip, r5
  402e0e:	2e00      	cmp	r6, #0
  402e10:	d03f      	beq.n	402e92 <__udivmoddi4+0x16a>
  402e12:	e886 1010 	stmia.w	r6, {r4, ip}
  402e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e1a:	b912      	cbnz	r2, 402e22 <__udivmoddi4+0xfa>
  402e1c:	2701      	movs	r7, #1
  402e1e:	fbb7 f7f2 	udiv	r7, r7, r2
  402e22:	fab7 fe87 	clz	lr, r7
  402e26:	f1be 0f00 	cmp.w	lr, #0
  402e2a:	d134      	bne.n	402e96 <__udivmoddi4+0x16e>
  402e2c:	1beb      	subs	r3, r5, r7
  402e2e:	0c3a      	lsrs	r2, r7, #16
  402e30:	fa1f fc87 	uxth.w	ip, r7
  402e34:	2101      	movs	r1, #1
  402e36:	fbb3 f8f2 	udiv	r8, r3, r2
  402e3a:	0c25      	lsrs	r5, r4, #16
  402e3c:	fb02 3318 	mls	r3, r2, r8, r3
  402e40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402e44:	fb0c f308 	mul.w	r3, ip, r8
  402e48:	42ab      	cmp	r3, r5
  402e4a:	d907      	bls.n	402e5c <__udivmoddi4+0x134>
  402e4c:	19ed      	adds	r5, r5, r7
  402e4e:	f108 30ff 	add.w	r0, r8, #4294967295
  402e52:	d202      	bcs.n	402e5a <__udivmoddi4+0x132>
  402e54:	42ab      	cmp	r3, r5
  402e56:	f200 80d1 	bhi.w	402ffc <__udivmoddi4+0x2d4>
  402e5a:	4680      	mov	r8, r0
  402e5c:	1aed      	subs	r5, r5, r3
  402e5e:	b2a3      	uxth	r3, r4
  402e60:	fbb5 f0f2 	udiv	r0, r5, r2
  402e64:	fb02 5510 	mls	r5, r2, r0, r5
  402e68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402e6c:	fb0c fc00 	mul.w	ip, ip, r0
  402e70:	45a4      	cmp	ip, r4
  402e72:	d907      	bls.n	402e84 <__udivmoddi4+0x15c>
  402e74:	19e4      	adds	r4, r4, r7
  402e76:	f100 33ff 	add.w	r3, r0, #4294967295
  402e7a:	d202      	bcs.n	402e82 <__udivmoddi4+0x15a>
  402e7c:	45a4      	cmp	ip, r4
  402e7e:	f200 80b8 	bhi.w	402ff2 <__udivmoddi4+0x2ca>
  402e82:	4618      	mov	r0, r3
  402e84:	eba4 040c 	sub.w	r4, r4, ip
  402e88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402e8c:	e79d      	b.n	402dca <__udivmoddi4+0xa2>
  402e8e:	4631      	mov	r1, r6
  402e90:	4630      	mov	r0, r6
  402e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e96:	f1ce 0420 	rsb	r4, lr, #32
  402e9a:	fa05 f30e 	lsl.w	r3, r5, lr
  402e9e:	fa07 f70e 	lsl.w	r7, r7, lr
  402ea2:	fa20 f804 	lsr.w	r8, r0, r4
  402ea6:	0c3a      	lsrs	r2, r7, #16
  402ea8:	fa25 f404 	lsr.w	r4, r5, r4
  402eac:	ea48 0803 	orr.w	r8, r8, r3
  402eb0:	fbb4 f1f2 	udiv	r1, r4, r2
  402eb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402eb8:	fb02 4411 	mls	r4, r2, r1, r4
  402ebc:	fa1f fc87 	uxth.w	ip, r7
  402ec0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402ec4:	fb01 f30c 	mul.w	r3, r1, ip
  402ec8:	42ab      	cmp	r3, r5
  402eca:	fa00 f40e 	lsl.w	r4, r0, lr
  402ece:	d909      	bls.n	402ee4 <__udivmoddi4+0x1bc>
  402ed0:	19ed      	adds	r5, r5, r7
  402ed2:	f101 30ff 	add.w	r0, r1, #4294967295
  402ed6:	f080 808a 	bcs.w	402fee <__udivmoddi4+0x2c6>
  402eda:	42ab      	cmp	r3, r5
  402edc:	f240 8087 	bls.w	402fee <__udivmoddi4+0x2c6>
  402ee0:	3902      	subs	r1, #2
  402ee2:	443d      	add	r5, r7
  402ee4:	1aeb      	subs	r3, r5, r3
  402ee6:	fa1f f588 	uxth.w	r5, r8
  402eea:	fbb3 f0f2 	udiv	r0, r3, r2
  402eee:	fb02 3310 	mls	r3, r2, r0, r3
  402ef2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402ef6:	fb00 f30c 	mul.w	r3, r0, ip
  402efa:	42ab      	cmp	r3, r5
  402efc:	d907      	bls.n	402f0e <__udivmoddi4+0x1e6>
  402efe:	19ed      	adds	r5, r5, r7
  402f00:	f100 38ff 	add.w	r8, r0, #4294967295
  402f04:	d26f      	bcs.n	402fe6 <__udivmoddi4+0x2be>
  402f06:	42ab      	cmp	r3, r5
  402f08:	d96d      	bls.n	402fe6 <__udivmoddi4+0x2be>
  402f0a:	3802      	subs	r0, #2
  402f0c:	443d      	add	r5, r7
  402f0e:	1aeb      	subs	r3, r5, r3
  402f10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402f14:	e78f      	b.n	402e36 <__udivmoddi4+0x10e>
  402f16:	f1c1 0720 	rsb	r7, r1, #32
  402f1a:	fa22 f807 	lsr.w	r8, r2, r7
  402f1e:	408b      	lsls	r3, r1
  402f20:	fa05 f401 	lsl.w	r4, r5, r1
  402f24:	ea48 0303 	orr.w	r3, r8, r3
  402f28:	fa20 fe07 	lsr.w	lr, r0, r7
  402f2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402f30:	40fd      	lsrs	r5, r7
  402f32:	ea4e 0e04 	orr.w	lr, lr, r4
  402f36:	fbb5 f9fc 	udiv	r9, r5, ip
  402f3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402f3e:	fb0c 5519 	mls	r5, ip, r9, r5
  402f42:	fa1f f883 	uxth.w	r8, r3
  402f46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402f4a:	fb09 f408 	mul.w	r4, r9, r8
  402f4e:	42ac      	cmp	r4, r5
  402f50:	fa02 f201 	lsl.w	r2, r2, r1
  402f54:	fa00 fa01 	lsl.w	sl, r0, r1
  402f58:	d908      	bls.n	402f6c <__udivmoddi4+0x244>
  402f5a:	18ed      	adds	r5, r5, r3
  402f5c:	f109 30ff 	add.w	r0, r9, #4294967295
  402f60:	d243      	bcs.n	402fea <__udivmoddi4+0x2c2>
  402f62:	42ac      	cmp	r4, r5
  402f64:	d941      	bls.n	402fea <__udivmoddi4+0x2c2>
  402f66:	f1a9 0902 	sub.w	r9, r9, #2
  402f6a:	441d      	add	r5, r3
  402f6c:	1b2d      	subs	r5, r5, r4
  402f6e:	fa1f fe8e 	uxth.w	lr, lr
  402f72:	fbb5 f0fc 	udiv	r0, r5, ip
  402f76:	fb0c 5510 	mls	r5, ip, r0, r5
  402f7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402f7e:	fb00 f808 	mul.w	r8, r0, r8
  402f82:	45a0      	cmp	r8, r4
  402f84:	d907      	bls.n	402f96 <__udivmoddi4+0x26e>
  402f86:	18e4      	adds	r4, r4, r3
  402f88:	f100 35ff 	add.w	r5, r0, #4294967295
  402f8c:	d229      	bcs.n	402fe2 <__udivmoddi4+0x2ba>
  402f8e:	45a0      	cmp	r8, r4
  402f90:	d927      	bls.n	402fe2 <__udivmoddi4+0x2ba>
  402f92:	3802      	subs	r0, #2
  402f94:	441c      	add	r4, r3
  402f96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402f9a:	eba4 0408 	sub.w	r4, r4, r8
  402f9e:	fba0 8902 	umull	r8, r9, r0, r2
  402fa2:	454c      	cmp	r4, r9
  402fa4:	46c6      	mov	lr, r8
  402fa6:	464d      	mov	r5, r9
  402fa8:	d315      	bcc.n	402fd6 <__udivmoddi4+0x2ae>
  402faa:	d012      	beq.n	402fd2 <__udivmoddi4+0x2aa>
  402fac:	b156      	cbz	r6, 402fc4 <__udivmoddi4+0x29c>
  402fae:	ebba 030e 	subs.w	r3, sl, lr
  402fb2:	eb64 0405 	sbc.w	r4, r4, r5
  402fb6:	fa04 f707 	lsl.w	r7, r4, r7
  402fba:	40cb      	lsrs	r3, r1
  402fbc:	431f      	orrs	r7, r3
  402fbe:	40cc      	lsrs	r4, r1
  402fc0:	6037      	str	r7, [r6, #0]
  402fc2:	6074      	str	r4, [r6, #4]
  402fc4:	2100      	movs	r1, #0
  402fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402fca:	4618      	mov	r0, r3
  402fcc:	e6f8      	b.n	402dc0 <__udivmoddi4+0x98>
  402fce:	4690      	mov	r8, r2
  402fd0:	e6e0      	b.n	402d94 <__udivmoddi4+0x6c>
  402fd2:	45c2      	cmp	sl, r8
  402fd4:	d2ea      	bcs.n	402fac <__udivmoddi4+0x284>
  402fd6:	ebb8 0e02 	subs.w	lr, r8, r2
  402fda:	eb69 0503 	sbc.w	r5, r9, r3
  402fde:	3801      	subs	r0, #1
  402fe0:	e7e4      	b.n	402fac <__udivmoddi4+0x284>
  402fe2:	4628      	mov	r0, r5
  402fe4:	e7d7      	b.n	402f96 <__udivmoddi4+0x26e>
  402fe6:	4640      	mov	r0, r8
  402fe8:	e791      	b.n	402f0e <__udivmoddi4+0x1e6>
  402fea:	4681      	mov	r9, r0
  402fec:	e7be      	b.n	402f6c <__udivmoddi4+0x244>
  402fee:	4601      	mov	r1, r0
  402ff0:	e778      	b.n	402ee4 <__udivmoddi4+0x1bc>
  402ff2:	3802      	subs	r0, #2
  402ff4:	443c      	add	r4, r7
  402ff6:	e745      	b.n	402e84 <__udivmoddi4+0x15c>
  402ff8:	4608      	mov	r0, r1
  402ffa:	e708      	b.n	402e0e <__udivmoddi4+0xe6>
  402ffc:	f1a8 0802 	sub.w	r8, r8, #2
  403000:	443d      	add	r5, r7
  403002:	e72b      	b.n	402e5c <__udivmoddi4+0x134>

00403004 <__aeabi_idiv0>:
  403004:	4770      	bx	lr
  403006:	bf00      	nop

00403008 <__libc_init_array>:
  403008:	b570      	push	{r4, r5, r6, lr}
  40300a:	4e0f      	ldr	r6, [pc, #60]	; (403048 <__libc_init_array+0x40>)
  40300c:	4d0f      	ldr	r5, [pc, #60]	; (40304c <__libc_init_array+0x44>)
  40300e:	1b76      	subs	r6, r6, r5
  403010:	10b6      	asrs	r6, r6, #2
  403012:	bf18      	it	ne
  403014:	2400      	movne	r4, #0
  403016:	d005      	beq.n	403024 <__libc_init_array+0x1c>
  403018:	3401      	adds	r4, #1
  40301a:	f855 3b04 	ldr.w	r3, [r5], #4
  40301e:	4798      	blx	r3
  403020:	42a6      	cmp	r6, r4
  403022:	d1f9      	bne.n	403018 <__libc_init_array+0x10>
  403024:	4e0a      	ldr	r6, [pc, #40]	; (403050 <__libc_init_array+0x48>)
  403026:	4d0b      	ldr	r5, [pc, #44]	; (403054 <__libc_init_array+0x4c>)
  403028:	1b76      	subs	r6, r6, r5
  40302a:	f000 fed9 	bl	403de0 <_init>
  40302e:	10b6      	asrs	r6, r6, #2
  403030:	bf18      	it	ne
  403032:	2400      	movne	r4, #0
  403034:	d006      	beq.n	403044 <__libc_init_array+0x3c>
  403036:	3401      	adds	r4, #1
  403038:	f855 3b04 	ldr.w	r3, [r5], #4
  40303c:	4798      	blx	r3
  40303e:	42a6      	cmp	r6, r4
  403040:	d1f9      	bne.n	403036 <__libc_init_array+0x2e>
  403042:	bd70      	pop	{r4, r5, r6, pc}
  403044:	bd70      	pop	{r4, r5, r6, pc}
  403046:	bf00      	nop
  403048:	00403dec 	.word	0x00403dec
  40304c:	00403dec 	.word	0x00403dec
  403050:	00403df4 	.word	0x00403df4
  403054:	00403dec 	.word	0x00403dec

00403058 <register_fini>:
  403058:	4b02      	ldr	r3, [pc, #8]	; (403064 <register_fini+0xc>)
  40305a:	b113      	cbz	r3, 403062 <register_fini+0xa>
  40305c:	4802      	ldr	r0, [pc, #8]	; (403068 <register_fini+0x10>)
  40305e:	f000 b805 	b.w	40306c <atexit>
  403062:	4770      	bx	lr
  403064:	00000000 	.word	0x00000000
  403068:	00403079 	.word	0x00403079

0040306c <atexit>:
  40306c:	2300      	movs	r3, #0
  40306e:	4601      	mov	r1, r0
  403070:	461a      	mov	r2, r3
  403072:	4618      	mov	r0, r3
  403074:	f000 b81e 	b.w	4030b4 <__register_exitproc>

00403078 <__libc_fini_array>:
  403078:	b538      	push	{r3, r4, r5, lr}
  40307a:	4c0a      	ldr	r4, [pc, #40]	; (4030a4 <__libc_fini_array+0x2c>)
  40307c:	4d0a      	ldr	r5, [pc, #40]	; (4030a8 <__libc_fini_array+0x30>)
  40307e:	1b64      	subs	r4, r4, r5
  403080:	10a4      	asrs	r4, r4, #2
  403082:	d00a      	beq.n	40309a <__libc_fini_array+0x22>
  403084:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403088:	3b01      	subs	r3, #1
  40308a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40308e:	3c01      	subs	r4, #1
  403090:	f855 3904 	ldr.w	r3, [r5], #-4
  403094:	4798      	blx	r3
  403096:	2c00      	cmp	r4, #0
  403098:	d1f9      	bne.n	40308e <__libc_fini_array+0x16>
  40309a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40309e:	f000 bea9 	b.w	403df4 <_fini>
  4030a2:	bf00      	nop
  4030a4:	00403e04 	.word	0x00403e04
  4030a8:	00403e00 	.word	0x00403e00

004030ac <__retarget_lock_acquire_recursive>:
  4030ac:	4770      	bx	lr
  4030ae:	bf00      	nop

004030b0 <__retarget_lock_release_recursive>:
  4030b0:	4770      	bx	lr
  4030b2:	bf00      	nop

004030b4 <__register_exitproc>:
  4030b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4030b8:	4d2c      	ldr	r5, [pc, #176]	; (40316c <__register_exitproc+0xb8>)
  4030ba:	4606      	mov	r6, r0
  4030bc:	6828      	ldr	r0, [r5, #0]
  4030be:	4698      	mov	r8, r3
  4030c0:	460f      	mov	r7, r1
  4030c2:	4691      	mov	r9, r2
  4030c4:	f7ff fff2 	bl	4030ac <__retarget_lock_acquire_recursive>
  4030c8:	4b29      	ldr	r3, [pc, #164]	; (403170 <__register_exitproc+0xbc>)
  4030ca:	681c      	ldr	r4, [r3, #0]
  4030cc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4030d0:	2b00      	cmp	r3, #0
  4030d2:	d03e      	beq.n	403152 <__register_exitproc+0x9e>
  4030d4:	685a      	ldr	r2, [r3, #4]
  4030d6:	2a1f      	cmp	r2, #31
  4030d8:	dc1c      	bgt.n	403114 <__register_exitproc+0x60>
  4030da:	f102 0e01 	add.w	lr, r2, #1
  4030de:	b176      	cbz	r6, 4030fe <__register_exitproc+0x4a>
  4030e0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4030e4:	2401      	movs	r4, #1
  4030e6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4030ea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4030ee:	4094      	lsls	r4, r2
  4030f0:	4320      	orrs	r0, r4
  4030f2:	2e02      	cmp	r6, #2
  4030f4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4030f8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4030fc:	d023      	beq.n	403146 <__register_exitproc+0x92>
  4030fe:	3202      	adds	r2, #2
  403100:	f8c3 e004 	str.w	lr, [r3, #4]
  403104:	6828      	ldr	r0, [r5, #0]
  403106:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40310a:	f7ff ffd1 	bl	4030b0 <__retarget_lock_release_recursive>
  40310e:	2000      	movs	r0, #0
  403110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403114:	4b17      	ldr	r3, [pc, #92]	; (403174 <__register_exitproc+0xc0>)
  403116:	b30b      	cbz	r3, 40315c <__register_exitproc+0xa8>
  403118:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40311c:	f3af 8000 	nop.w
  403120:	4603      	mov	r3, r0
  403122:	b1d8      	cbz	r0, 40315c <__register_exitproc+0xa8>
  403124:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403128:	6002      	str	r2, [r0, #0]
  40312a:	2100      	movs	r1, #0
  40312c:	6041      	str	r1, [r0, #4]
  40312e:	460a      	mov	r2, r1
  403130:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403134:	f04f 0e01 	mov.w	lr, #1
  403138:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40313c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403140:	2e00      	cmp	r6, #0
  403142:	d0dc      	beq.n	4030fe <__register_exitproc+0x4a>
  403144:	e7cc      	b.n	4030e0 <__register_exitproc+0x2c>
  403146:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40314a:	430c      	orrs	r4, r1
  40314c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403150:	e7d5      	b.n	4030fe <__register_exitproc+0x4a>
  403152:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403156:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40315a:	e7bb      	b.n	4030d4 <__register_exitproc+0x20>
  40315c:	6828      	ldr	r0, [r5, #0]
  40315e:	f7ff ffa7 	bl	4030b0 <__retarget_lock_release_recursive>
  403162:	f04f 30ff 	mov.w	r0, #4294967295
  403166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40316a:	bf00      	nop
  40316c:	20000438 	.word	0x20000438
  403170:	00403ddc 	.word	0x00403ddc
  403174:	00000000 	.word	0x00000000

00403178 <OV2640_JPEG_INIT>:
  403178:	ff2c00ff 01ffdf2e 0111323c 28040209     ..,.....<2.....(
  403188:	4814e513 78330c2c fb3b333a 1143003e     ...H,.3x:3;.>.C.
  403198:	92391016 1a22da35 0023c337 1a36c034     ..9.5.".7.#.4.6.
  4031a8:	c0078806 410e870d 0048004c 0342005b     .......AL.H.[.B.
  4031b8:	9921814a 38254024 005c8226 70610063     J.!.$@%8&.\.c.ap
  4031c8:	057c8062 30288020 806d006c 0270006e     b.|. .(0l.m.n.p.
  4031d8:	c1739471 11174012 00194318 09324b1a     q.s..@...C...K2.
  4031e8:	604fc037 006da850 3f46383d 3c0c604f     7.O`P.m.=8F?O`.<
  4031f8:	7fe500ff 2441c0f9 ff7614e0 2042a033     ......A$..v.3.B 
  403208:	004c1843 3f88d587 10d903d7 08c882d3     C.L....?........
  403218:	007c80c9 037c007d 487d487d 207d087c     ..|.}.|.}H}H|.} 
  403228:	0e7d107d 0e910090 31911a91 69915a91     }.}........1.Z.i
  403238:	7e917591 8f918891 a3919691 c491af91     .u.~............
  403248:	e891d791 00922091 e3930693 05930593     ..... ..........
  403258:	04930093 00930093 00930093 00930093     ................
  403268:	00960093 19970897 0c970297 30972497     .............$.0
  403278:	26972897 98970297 00978097 edc30097     .(.&............
  403288:	00a800a4 51c611c5 10c780bf a5b866b6     .......Q.....f..
  403298:	7cb964b7 97b4afb3 c5b0ffb5 0fb294b1     .d.|............
  4032a8:	64c05cc4 008c4bc1 00503d86 9652c851     .\.d.K...=P.Q.R.
  4032b8:	00540053 c85a0055 005c965b edc300d3     S.T.U.Z.[.\.....
  4032c8:	00da007f 67e11fe5 7fdd00e0 40120005     .......g.......@
  4032d8:	16c004d3 008c12c1 00503d86 24522c51     .........=P.Q,R$
  4032e8:	00540053 2c5a0055 005c245b 0000ffff     S.T.U.Z,[$\.....

004032f8 <OV2640_YUV422>:
  4032f8:	000500ff 03d710da 803300df 77e1403c     ..........3.<@.w
  403308:	ffff0000                                ....

0040330c <OV2640_JPEG>:
  40330c:	77e114e0 03d71fe5 00e010da 080401ff     ...w............
  40331c:	0000ffff                                ....

00403320 <OV2640_JPEG_320x240>:
  403320:	401201ff 43181117 4b1a0019 ca4f0932     ...@...C...K2.O.
  403330:	235aa850 1239006d 1a22da35 0023c337     P.Z#m.9.5.".7.#.
  403340:	1a36c034 c0078806 410e870d 00ff004c     4.6........AL...
  403350:	64c004e0 35864bc1 c8518950 00539652     ...d.K.5P.Q.R.S.
  403360:	00550054 505a0057 005c3c5b ffff00e0     T.U.W.ZP[<\.....

00403370 <OV2640_JPEG_640x480>:
  403370:	011101ff 11170012 36327518 971a0119     .........u26....
  403380:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  403390:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  4033a0:	c8c004e0 3d8696c1 90518950 00532c52     .......=P.Q.R,S.
  4033b0:	88550054 a05a0057 005c785b 00e004d3     T.U.W.Z.[x\.....
  4033c0:	0000ffff                                ....

004033c4 <OV2640_JPEG_800x600>:
  4033c4:	011101ff 11170012 36327518 971a0119     .........u26....
  4033d4:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  4033e4:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  4033f4:	c8c004e0 358696c1 90518950 00532c52     .......5P.Q.R,S.
  403404:	88550054 c85a0057 005c965b 00e002d3     T.U.W.Z.[.\.....
  403414:	0000ffff                                ....

00403418 <OV2640_JPEG_1024x768>:
  403418:	011101ff 11170012 36327518 971a0119     .........u26....
  403428:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  403438:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  403448:	96c1c8c0 3d86008c 90510050 00532c52     .......=P.Q.R,S.
  403458:	88550054 c05b005a 02d3015c 0000ffff     T.U.Z.[.\.......

00403468 <OV2640_JPEG_1280x1024>:
  403468:	011101ff 11170012 36327518 971a0119     .........u26....
  403478:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  403488:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  403498:	c8c004e0 3d8696c1 90510050 00532c52     .......=P.Q.R,S.
  4034a8:	88550054 405a0057 015cf05b 00e002d3     T.U.W.Z@[.\.....
  4034b8:	0000ffff                                ....

004034bc <OV2640_JPEG_1600x1200>:
  4034bc:	011101ff 11170012 36327518 971a0119     .........u26....
  4034cc:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  4034dc:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  4034ec:	c8c004e0 3d8696c1 90510050 00532c52     .......=P.Q.R,S.
  4034fc:	88550054 905a0057 055c2c5b 00e002d3     T.U.W.Z.[,\.....
  40350c:	0000ffff                                ....

00403510 <OV2640_QVGA_YUV422_10FPS>:
  403510:	8012000e 001305fe 00120511 d40c10d5     ................
  403520:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403530:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403540:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403550:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403560:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403570:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403580:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403590:	32823f81 11380183 03860085 05880187     .?.2..8.........
  4035a0:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4035b0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4035c0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4035d0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4035e0:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4035f0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403600 <OV2640_QVGA_YUV422_15FPS>:
  403600:	8012000e 001305fe 00120311 d40c10d5     ................
  403610:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403620:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403630:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403640:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403650:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403660:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403670:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403680:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403690:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4036a0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4036b0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4036c0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4036d0:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4036e0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004036f0 <OV2640_QVGA_YUV422_20FPS>:
  4036f0:	8012000e 001305fe 00120211 d40c10d5     ................
  403700:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403710:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403720:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403730:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403740:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403750:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403760:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403770:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403780:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403790:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4037a0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4037b0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4037c0:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4037d0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004037e0 <OV2640_QVGA_YUV422_30FPS>:
  4037e0:	8012000e 001305fe 00120111 d40c10d5     ................
  4037f0:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403800:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403810:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403820:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403830:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403840:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403850:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403860:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403870:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403880:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403890:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4038a0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4038b0:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4038c0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004038d0 <OV2640_QVGA_RGB888>:
  4038d0:	8012000e 01110013 10d50012 340d120c     ...............4
  4038e0:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  4038f0:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  403900:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  403910:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  403920:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  403930:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  403940:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  403950:	11380183 00857084 01870386 30890588     ..8..p.........0
  403960:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  403970:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  403980:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  403990:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  4039a0:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  4039b0:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  4039c0:	ffff0228                                (...

004039c4 <OV2640_QQVGA_YUV422>:
  4039c4:	8012000e 01110013 10d50012 340d540c     .............T.4
  4039d4:	25170116 0319a018 891bf01a 18290322     ...%........".).
  4039e4:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  4039f4:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  403a04:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  403a14:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  403a24:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  403a34:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  403a44:	01833282 70841138 03860085 05880187     .2..8..p........
  403a54:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403a64:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403a74:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403a84:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403a94:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  403aa4:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  403ab4:	ffff00d9                                ....

00403ab8 <OV2640_QQVGA_RGB888>:
  403ab8:	8012000e 01110013 10d50012 340d120c     ...............4
  403ac8:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  403ad8:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  403ae8:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  403af8:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  403b08:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  403b18:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  403b28:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  403b38:	11380183 00857084 01870386 30890588     ..8..p.........0
  403b48:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  403b58:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  403b68:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  403b78:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  403b88:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  403b98:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  403ba8:	ffff0228                                (...

00403bac <OV2640_TEST_PATTERN>:
  403bac:	8012000e 001305fe 00120211 d40c10d5     ................
  403bbc:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403bcc:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403bdc:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403bec:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403bfc:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403c0c:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  403c1c:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  403c2c:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  403c3c:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  403c4c:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  403c5c:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  403c6c:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  403c7c:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  403c8c:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  403c9c:	ffff0228                                (...

00403ca0 <OV2640_VGA_YUV422_20FPS>:
  403ca0:	8012000e 001305fe 00120211 d40c10d5     ................
  403cb0:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403cc0:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403cd0:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403ce0:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403cf0:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403d00:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403d10:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403d20:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403d30:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403d40:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403d50:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403d60:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403d70:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  403d80:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...
  403d90:	0001c200 000000c0 00000800 00000000     ................
	...
  403da8:	20746573 63207973 6f207020 0a0d6666     set sy c p off..
  403db8:	00000000 20746573 63207973 6f206520     ....set sy c e o
  403dc8:	0a0d6666 00000000 75746573 65772070     ff......setup we
  403dd8:	000a0d62                                b...

00403ddc <_global_impure_ptr>:
  403ddc:	20000010                                ... 

00403de0 <_init>:
  403de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403de2:	bf00      	nop
  403de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403de6:	bc08      	pop	{r3}
  403de8:	469e      	mov	lr, r3
  403dea:	4770      	bx	lr

00403dec <__init_array_start>:
  403dec:	00403059 	.word	0x00403059

00403df0 <__frame_dummy_init_array_entry>:
  403df0:	004000f1                                ..@.

00403df4 <_fini>:
  403df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403df6:	bf00      	nop
  403df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403dfa:	bc08      	pop	{r3}
  403dfc:	469e      	mov	lr, r3
  403dfe:	4770      	bx	lr

00403e00 <__fini_array_start>:
  403e00:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	08d8 2000                                   ... 
