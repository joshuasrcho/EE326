
WebcamFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002704  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402704  00402704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  0040270c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004b4  2000043c  00402b48  0002043c  2**2
                  ALLOC
  4 .stack        00003000  200008f0  00402ffc  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000dfe7  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d57  00000000  00000000  0002e4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005014  00000000  00000000  000301fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008b8  00000000  00000000  00035211  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000858  00000000  00000000  00035ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000432d  00000000  00000000  00036321  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009ac9  00000000  00000000  0003a64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f4f3  00000000  00000000  00044117  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002838  00000000  00000000  0009360c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 38 00 20 09 17 40 00 d1 17 40 00 d1 17 40 00     .8. ..@...@...@.
  400010:	d1 17 40 00 d1 17 40 00 d1 17 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d1 17 40 00 d1 17 40 00 00 00 00 00 d1 17 40 00     ..@...@.......@.
  40003c:	d1 17 40 00 d1 17 40 00 d1 17 40 00 d1 17 40 00     ..@...@...@...@.
  40004c:	d1 17 40 00 d1 17 40 00 d1 17 40 00 d1 17 40 00     ..@...@...@...@.
  40005c:	00 00 00 00 d1 17 40 00 d1 17 40 00 00 00 00 00     ......@...@.....
  40006c:	05 06 40 00 1d 06 40 00 00 00 00 00 95 12 40 00     ..@...@.......@.
  40007c:	d1 17 40 00 00 00 00 00 00 00 00 00 d1 17 40 00     ..@...........@.
  40008c:	d1 17 40 00 d1 17 40 00 d1 17 40 00 d1 17 40 00     ..@...@...@...@.
  40009c:	d1 17 40 00 d1 17 40 00 d1 17 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	d1 17 40 00 d1 17 40 00 d1 17 40 00 d1 17 40 00     ..@...@...@...@.
  4000c4:	d1 17 40 00 d1 17 40 00                             ..@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040270c 	.word	0x0040270c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040270c 	.word	0x0040270c
  40012c:	20000440 	.word	0x20000440
  400130:	0040270c 	.word	0x0040270c
  400134:	00000000 	.word	0x00000000

00400138 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400138:	b480      	push	{r7}
  40013a:	b089      	sub	sp, #36	; 0x24
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400144:	68bb      	ldr	r3, [r7, #8]
  400146:	011a      	lsls	r2, r3, #4
  400148:	687b      	ldr	r3, [r7, #4]
  40014a:	429a      	cmp	r2, r3
  40014c:	d802      	bhi.n	400154 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40014e:	2310      	movs	r3, #16
  400150:	61fb      	str	r3, [r7, #28]
  400152:	e001      	b.n	400158 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400154:	2308      	movs	r3, #8
  400156:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400158:	687b      	ldr	r3, [r7, #4]
  40015a:	00da      	lsls	r2, r3, #3
  40015c:	69fb      	ldr	r3, [r7, #28]
  40015e:	68b9      	ldr	r1, [r7, #8]
  400160:	fb01 f303 	mul.w	r3, r1, r3
  400164:	085b      	lsrs	r3, r3, #1
  400166:	441a      	add	r2, r3
  400168:	69fb      	ldr	r3, [r7, #28]
  40016a:	68b9      	ldr	r1, [r7, #8]
  40016c:	fb01 f303 	mul.w	r3, r1, r3
  400170:	fbb2 f3f3 	udiv	r3, r2, r3
  400174:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400176:	69bb      	ldr	r3, [r7, #24]
  400178:	08db      	lsrs	r3, r3, #3
  40017a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40017c:	69bb      	ldr	r3, [r7, #24]
  40017e:	f003 0307 	and.w	r3, r3, #7
  400182:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400184:	697b      	ldr	r3, [r7, #20]
  400186:	2b00      	cmp	r3, #0
  400188:	d003      	beq.n	400192 <usart_set_async_baudrate+0x5a>
  40018a:	697b      	ldr	r3, [r7, #20]
  40018c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400190:	d301      	bcc.n	400196 <usart_set_async_baudrate+0x5e>
		return 1;
  400192:	2301      	movs	r3, #1
  400194:	e00f      	b.n	4001b6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400196:	69fb      	ldr	r3, [r7, #28]
  400198:	2b08      	cmp	r3, #8
  40019a:	d105      	bne.n	4001a8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40019c:	68fb      	ldr	r3, [r7, #12]
  40019e:	685b      	ldr	r3, [r3, #4]
  4001a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4001a4:	68fb      	ldr	r3, [r7, #12]
  4001a6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4001a8:	693b      	ldr	r3, [r7, #16]
  4001aa:	041a      	lsls	r2, r3, #16
  4001ac:	697b      	ldr	r3, [r7, #20]
  4001ae:	431a      	orrs	r2, r3
  4001b0:	68fb      	ldr	r3, [r7, #12]
  4001b2:	621a      	str	r2, [r3, #32]

	return 0;
  4001b4:	2300      	movs	r3, #0
}
  4001b6:	4618      	mov	r0, r3
  4001b8:	3724      	adds	r7, #36	; 0x24
  4001ba:	46bd      	mov	sp, r7
  4001bc:	bc80      	pop	{r7}
  4001be:	4770      	bx	lr

004001c0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4001c0:	b580      	push	{r7, lr}
  4001c2:	b082      	sub	sp, #8
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4001c8:	6878      	ldr	r0, [r7, #4]
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <usart_reset+0x48>)
  4001cc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4001ce:	687b      	ldr	r3, [r7, #4]
  4001d0:	2200      	movs	r2, #0
  4001d2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4001d4:	687b      	ldr	r3, [r7, #4]
  4001d6:	2200      	movs	r2, #0
  4001d8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4001da:	687b      	ldr	r3, [r7, #4]
  4001dc:	2200      	movs	r2, #0
  4001de:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4001e0:	6878      	ldr	r0, [r7, #4]
  4001e2:	4b0a      	ldr	r3, [pc, #40]	; (40020c <usart_reset+0x4c>)
  4001e4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4001e6:	6878      	ldr	r0, [r7, #4]
  4001e8:	4b09      	ldr	r3, [pc, #36]	; (400210 <usart_reset+0x50>)
  4001ea:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4b09      	ldr	r3, [pc, #36]	; (400214 <usart_reset+0x54>)
  4001f0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4001f2:	6878      	ldr	r0, [r7, #4]
  4001f4:	4b08      	ldr	r3, [pc, #32]	; (400218 <usart_reset+0x58>)
  4001f6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4001f8:	6878      	ldr	r0, [r7, #4]
  4001fa:	4b08      	ldr	r3, [pc, #32]	; (40021c <usart_reset+0x5c>)
  4001fc:	4798      	blx	r3
#endif
}
  4001fe:	bf00      	nop
  400200:	3708      	adds	r7, #8
  400202:	46bd      	mov	sp, r7
  400204:	bd80      	pop	{r7, pc}
  400206:	bf00      	nop
  400208:	00400471 	.word	0x00400471
  40020c:	004002fd 	.word	0x004002fd
  400210:	0040032d 	.word	0x0040032d
  400214:	0040038f 	.word	0x0040038f
  400218:	004003c3 	.word	0x004003c3
  40021c:	004003a9 	.word	0x004003a9

00400220 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400220:	b580      	push	{r7, lr}
  400222:	b084      	sub	sp, #16
  400224:	af00      	add	r7, sp, #0
  400226:	60f8      	str	r0, [r7, #12]
  400228:	60b9      	str	r1, [r7, #8]
  40022a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40022c:	68f8      	ldr	r0, [r7, #12]
  40022e:	4b1a      	ldr	r3, [pc, #104]	; (400298 <usart_init_rs232+0x78>)
  400230:	4798      	blx	r3

	ul_reg_val = 0;
  400232:	4b1a      	ldr	r3, [pc, #104]	; (40029c <usart_init_rs232+0x7c>)
  400234:	2200      	movs	r2, #0
  400236:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400238:	68bb      	ldr	r3, [r7, #8]
  40023a:	2b00      	cmp	r3, #0
  40023c:	d009      	beq.n	400252 <usart_init_rs232+0x32>
  40023e:	68bb      	ldr	r3, [r7, #8]
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	687a      	ldr	r2, [r7, #4]
  400244:	4619      	mov	r1, r3
  400246:	68f8      	ldr	r0, [r7, #12]
  400248:	4b15      	ldr	r3, [pc, #84]	; (4002a0 <usart_init_rs232+0x80>)
  40024a:	4798      	blx	r3
  40024c:	4603      	mov	r3, r0
  40024e:	2b00      	cmp	r3, #0
  400250:	d001      	beq.n	400256 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400252:	2301      	movs	r3, #1
  400254:	e01b      	b.n	40028e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400256:	68bb      	ldr	r3, [r7, #8]
  400258:	685a      	ldr	r2, [r3, #4]
  40025a:	68bb      	ldr	r3, [r7, #8]
  40025c:	689b      	ldr	r3, [r3, #8]
  40025e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400260:	68bb      	ldr	r3, [r7, #8]
  400262:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400264:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400266:	68bb      	ldr	r3, [r7, #8]
  400268:	68db      	ldr	r3, [r3, #12]
  40026a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <usart_init_rs232+0x7c>)
  40026e:	681b      	ldr	r3, [r3, #0]
  400270:	4313      	orrs	r3, r2
  400272:	4a0a      	ldr	r2, [pc, #40]	; (40029c <usart_init_rs232+0x7c>)
  400274:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400276:	4b09      	ldr	r3, [pc, #36]	; (40029c <usart_init_rs232+0x7c>)
  400278:	681b      	ldr	r3, [r3, #0]
  40027a:	4a08      	ldr	r2, [pc, #32]	; (40029c <usart_init_rs232+0x7c>)
  40027c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40027e:	68fb      	ldr	r3, [r7, #12]
  400280:	685a      	ldr	r2, [r3, #4]
  400282:	4b06      	ldr	r3, [pc, #24]	; (40029c <usart_init_rs232+0x7c>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	431a      	orrs	r2, r3
  400288:	68fb      	ldr	r3, [r7, #12]
  40028a:	605a      	str	r2, [r3, #4]

	return 0;
  40028c:	2300      	movs	r3, #0
}
  40028e:	4618      	mov	r0, r3
  400290:	3710      	adds	r7, #16
  400292:	46bd      	mov	sp, r7
  400294:	bd80      	pop	{r7, pc}
  400296:	bf00      	nop
  400298:	004001c1 	.word	0x004001c1
  40029c:	20000458 	.word	0x20000458
  4002a0:	00400139 	.word	0x00400139

004002a4 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4002a4:	b580      	push	{r7, lr}
  4002a6:	b084      	sub	sp, #16
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	60f8      	str	r0, [r7, #12]
  4002ac:	60b9      	str	r1, [r7, #8]
  4002ae:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4002b0:	687a      	ldr	r2, [r7, #4]
  4002b2:	68b9      	ldr	r1, [r7, #8]
  4002b4:	68f8      	ldr	r0, [r7, #12]
  4002b6:	4b0a      	ldr	r3, [pc, #40]	; (4002e0 <usart_init_hw_handshaking+0x3c>)
  4002b8:	4798      	blx	r3
  4002ba:	4603      	mov	r3, r0
  4002bc:	2b00      	cmp	r3, #0
  4002be:	d001      	beq.n	4002c4 <usart_init_hw_handshaking+0x20>
		return 1;
  4002c0:	2301      	movs	r3, #1
  4002c2:	e008      	b.n	4002d6 <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4002c4:	68fb      	ldr	r3, [r7, #12]
  4002c6:	685b      	ldr	r3, [r3, #4]
  4002c8:	f023 030f 	bic.w	r3, r3, #15
  4002cc:	f043 0202 	orr.w	r2, r3, #2
  4002d0:	68fb      	ldr	r3, [r7, #12]
  4002d2:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  4002d4:	2300      	movs	r3, #0
}
  4002d6:	4618      	mov	r0, r3
  4002d8:	3710      	adds	r7, #16
  4002da:	46bd      	mov	sp, r7
  4002dc:	bd80      	pop	{r7, pc}
  4002de:	bf00      	nop
  4002e0:	00400221 	.word	0x00400221

004002e4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4002e4:	b480      	push	{r7}
  4002e6:	b083      	sub	sp, #12
  4002e8:	af00      	add	r7, sp, #0
  4002ea:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	2240      	movs	r2, #64	; 0x40
  4002f0:	601a      	str	r2, [r3, #0]
}
  4002f2:	bf00      	nop
  4002f4:	370c      	adds	r7, #12
  4002f6:	46bd      	mov	sp, r7
  4002f8:	bc80      	pop	{r7}
  4002fa:	4770      	bx	lr

004002fc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4002fc:	b480      	push	{r7}
  4002fe:	b083      	sub	sp, #12
  400300:	af00      	add	r7, sp, #0
  400302:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400304:	687b      	ldr	r3, [r7, #4]
  400306:	2288      	movs	r2, #136	; 0x88
  400308:	601a      	str	r2, [r3, #0]
}
  40030a:	bf00      	nop
  40030c:	370c      	adds	r7, #12
  40030e:	46bd      	mov	sp, r7
  400310:	bc80      	pop	{r7}
  400312:	4770      	bx	lr

00400314 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400314:	b480      	push	{r7}
  400316:	b083      	sub	sp, #12
  400318:	af00      	add	r7, sp, #0
  40031a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40031c:	687b      	ldr	r3, [r7, #4]
  40031e:	2210      	movs	r2, #16
  400320:	601a      	str	r2, [r3, #0]
}
  400322:	bf00      	nop
  400324:	370c      	adds	r7, #12
  400326:	46bd      	mov	sp, r7
  400328:	bc80      	pop	{r7}
  40032a:	4770      	bx	lr

0040032c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40032c:	b480      	push	{r7}
  40032e:	b083      	sub	sp, #12
  400330:	af00      	add	r7, sp, #0
  400332:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400334:	687b      	ldr	r3, [r7, #4]
  400336:	2224      	movs	r2, #36	; 0x24
  400338:	601a      	str	r2, [r3, #0]
}
  40033a:	bf00      	nop
  40033c:	370c      	adds	r7, #12
  40033e:	46bd      	mov	sp, r7
  400340:	bc80      	pop	{r7}
  400342:	4770      	bx	lr

00400344 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400344:	b480      	push	{r7}
  400346:	b083      	sub	sp, #12
  400348:	af00      	add	r7, sp, #0
  40034a:	6078      	str	r0, [r7, #4]
  40034c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40034e:	687b      	ldr	r3, [r7, #4]
  400350:	683a      	ldr	r2, [r7, #0]
  400352:	609a      	str	r2, [r3, #8]
}
  400354:	bf00      	nop
  400356:	370c      	adds	r7, #12
  400358:	46bd      	mov	sp, r7
  40035a:	bc80      	pop	{r7}
  40035c:	4770      	bx	lr

0040035e <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40035e:	b480      	push	{r7}
  400360:	b083      	sub	sp, #12
  400362:	af00      	add	r7, sp, #0
  400364:	6078      	str	r0, [r7, #4]
  400366:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	683a      	ldr	r2, [r7, #0]
  40036c:	60da      	str	r2, [r3, #12]
}
  40036e:	bf00      	nop
  400370:	370c      	adds	r7, #12
  400372:	46bd      	mov	sp, r7
  400374:	bc80      	pop	{r7}
  400376:	4770      	bx	lr

00400378 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400378:	b480      	push	{r7}
  40037a:	b083      	sub	sp, #12
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400380:	687b      	ldr	r3, [r7, #4]
  400382:	695b      	ldr	r3, [r3, #20]
}
  400384:	4618      	mov	r0, r3
  400386:	370c      	adds	r7, #12
  400388:	46bd      	mov	sp, r7
  40038a:	bc80      	pop	{r7}
  40038c:	4770      	bx	lr

0040038e <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40038e:	b480      	push	{r7}
  400390:	b083      	sub	sp, #12
  400392:	af00      	add	r7, sp, #0
  400394:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400396:	687b      	ldr	r3, [r7, #4]
  400398:	f44f 7280 	mov.w	r2, #256	; 0x100
  40039c:	601a      	str	r2, [r3, #0]
}
  40039e:	bf00      	nop
  4003a0:	370c      	adds	r7, #12
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bc80      	pop	{r7}
  4003a6:	4770      	bx	lr

004003a8 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4003a8:	b480      	push	{r7}
  4003aa:	b083      	sub	sp, #12
  4003ac:	af00      	add	r7, sp, #0
  4003ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4003b0:	687b      	ldr	r3, [r7, #4]
  4003b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4003b6:	601a      	str	r2, [r3, #0]
}
  4003b8:	bf00      	nop
  4003ba:	370c      	adds	r7, #12
  4003bc:	46bd      	mov	sp, r7
  4003be:	bc80      	pop	{r7}
  4003c0:	4770      	bx	lr

004003c2 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4003c2:	b480      	push	{r7}
  4003c4:	b083      	sub	sp, #12
  4003c6:	af00      	add	r7, sp, #0
  4003c8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4003ca:	687b      	ldr	r3, [r7, #4]
  4003cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003d0:	601a      	str	r2, [r3, #0]
}
  4003d2:	bf00      	nop
  4003d4:	370c      	adds	r7, #12
  4003d6:	46bd      	mov	sp, r7
  4003d8:	bc80      	pop	{r7}
  4003da:	4770      	bx	lr

004003dc <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  4003dc:	b480      	push	{r7}
  4003de:	b083      	sub	sp, #12
  4003e0:	af00      	add	r7, sp, #0
  4003e2:	6078      	str	r0, [r7, #4]
  4003e4:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4003e6:	bf00      	nop
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	695b      	ldr	r3, [r3, #20]
  4003ec:	f003 0302 	and.w	r3, r3, #2
  4003f0:	2b00      	cmp	r3, #0
  4003f2:	d0f9      	beq.n	4003e8 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4003f4:	683b      	ldr	r3, [r7, #0]
  4003f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4003fa:	687b      	ldr	r3, [r7, #4]
  4003fc:	61da      	str	r2, [r3, #28]

	return 0;
  4003fe:	2300      	movs	r3, #0
}
  400400:	4618      	mov	r0, r3
  400402:	370c      	adds	r7, #12
  400404:	46bd      	mov	sp, r7
  400406:	bc80      	pop	{r7}
  400408:	4770      	bx	lr
	...

0040040c <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	6078      	str	r0, [r7, #4]
  400414:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400416:	e007      	b.n	400428 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400418:	683b      	ldr	r3, [r7, #0]
  40041a:	1c5a      	adds	r2, r3, #1
  40041c:	603a      	str	r2, [r7, #0]
  40041e:	781b      	ldrb	r3, [r3, #0]
  400420:	4619      	mov	r1, r3
  400422:	6878      	ldr	r0, [r7, #4]
  400424:	4b04      	ldr	r3, [pc, #16]	; (400438 <usart_write_line+0x2c>)
  400426:	4798      	blx	r3
	while (*string != '\0') {
  400428:	683b      	ldr	r3, [r7, #0]
  40042a:	781b      	ldrb	r3, [r3, #0]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d1f3      	bne.n	400418 <usart_write_line+0xc>
	}
}
  400430:	bf00      	nop
  400432:	3708      	adds	r7, #8
  400434:	46bd      	mov	sp, r7
  400436:	bd80      	pop	{r7, pc}
  400438:	004003dd 	.word	0x004003dd

0040043c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40043c:	b480      	push	{r7}
  40043e:	b083      	sub	sp, #12
  400440:	af00      	add	r7, sp, #0
  400442:	6078      	str	r0, [r7, #4]
  400444:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400446:	687b      	ldr	r3, [r7, #4]
  400448:	695b      	ldr	r3, [r3, #20]
  40044a:	f003 0301 	and.w	r3, r3, #1
  40044e:	2b00      	cmp	r3, #0
  400450:	d101      	bne.n	400456 <usart_read+0x1a>
		return 1;
  400452:	2301      	movs	r3, #1
  400454:	e006      	b.n	400464 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400456:	687b      	ldr	r3, [r7, #4]
  400458:	699b      	ldr	r3, [r3, #24]
  40045a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40045e:	683b      	ldr	r3, [r7, #0]
  400460:	601a      	str	r2, [r3, #0]

	return 0;
  400462:	2300      	movs	r3, #0
}
  400464:	4618      	mov	r0, r3
  400466:	370c      	adds	r7, #12
  400468:	46bd      	mov	sp, r7
  40046a:	bc80      	pop	{r7}
  40046c:	4770      	bx	lr
	...

00400470 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400470:	b480      	push	{r7}
  400472:	b083      	sub	sp, #12
  400474:	af00      	add	r7, sp, #0
  400476:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400478:	687b      	ldr	r3, [r7, #4]
  40047a:	4a04      	ldr	r2, [pc, #16]	; (40048c <usart_disable_writeprotect+0x1c>)
  40047c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400480:	bf00      	nop
  400482:	370c      	adds	r7, #12
  400484:	46bd      	mov	sp, r7
  400486:	bc80      	pop	{r7}
  400488:	4770      	bx	lr
  40048a:	bf00      	nop
  40048c:	55534100 	.word	0x55534100

00400490 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400490:	b580      	push	{r7, lr}
  400492:	b084      	sub	sp, #16
  400494:	af00      	add	r7, sp, #0
  400496:	6078      	str	r0, [r7, #4]
  400498:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40049a:	6878      	ldr	r0, [r7, #4]
  40049c:	4b2c      	ldr	r3, [pc, #176]	; (400550 <pio_handler_process+0xc0>)
  40049e:	4798      	blx	r3
  4004a0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4004a2:	6878      	ldr	r0, [r7, #4]
  4004a4:	4b2b      	ldr	r3, [pc, #172]	; (400554 <pio_handler_process+0xc4>)
  4004a6:	4798      	blx	r3
  4004a8:	4602      	mov	r2, r0
  4004aa:	68fb      	ldr	r3, [r7, #12]
  4004ac:	4013      	ands	r3, r2
  4004ae:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d03c      	beq.n	400530 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4004b6:	2300      	movs	r3, #0
  4004b8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4004ba:	e034      	b.n	400526 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4004bc:	4a26      	ldr	r2, [pc, #152]	; (400558 <pio_handler_process+0xc8>)
  4004be:	68bb      	ldr	r3, [r7, #8]
  4004c0:	011b      	lsls	r3, r3, #4
  4004c2:	4413      	add	r3, r2
  4004c4:	681a      	ldr	r2, [r3, #0]
  4004c6:	683b      	ldr	r3, [r7, #0]
  4004c8:	429a      	cmp	r2, r3
  4004ca:	d126      	bne.n	40051a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004cc:	4a22      	ldr	r2, [pc, #136]	; (400558 <pio_handler_process+0xc8>)
  4004ce:	68bb      	ldr	r3, [r7, #8]
  4004d0:	011b      	lsls	r3, r3, #4
  4004d2:	4413      	add	r3, r2
  4004d4:	3304      	adds	r3, #4
  4004d6:	681a      	ldr	r2, [r3, #0]
  4004d8:	68fb      	ldr	r3, [r7, #12]
  4004da:	4013      	ands	r3, r2
  4004dc:	2b00      	cmp	r3, #0
  4004de:	d01c      	beq.n	40051a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004e0:	4a1d      	ldr	r2, [pc, #116]	; (400558 <pio_handler_process+0xc8>)
  4004e2:	68bb      	ldr	r3, [r7, #8]
  4004e4:	011b      	lsls	r3, r3, #4
  4004e6:	4413      	add	r3, r2
  4004e8:	330c      	adds	r3, #12
  4004ea:	681b      	ldr	r3, [r3, #0]
  4004ec:	491a      	ldr	r1, [pc, #104]	; (400558 <pio_handler_process+0xc8>)
  4004ee:	68ba      	ldr	r2, [r7, #8]
  4004f0:	0112      	lsls	r2, r2, #4
  4004f2:	440a      	add	r2, r1
  4004f4:	6810      	ldr	r0, [r2, #0]
  4004f6:	4918      	ldr	r1, [pc, #96]	; (400558 <pio_handler_process+0xc8>)
  4004f8:	68ba      	ldr	r2, [r7, #8]
  4004fa:	0112      	lsls	r2, r2, #4
  4004fc:	440a      	add	r2, r1
  4004fe:	3204      	adds	r2, #4
  400500:	6812      	ldr	r2, [r2, #0]
  400502:	4611      	mov	r1, r2
  400504:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400506:	4a14      	ldr	r2, [pc, #80]	; (400558 <pio_handler_process+0xc8>)
  400508:	68bb      	ldr	r3, [r7, #8]
  40050a:	011b      	lsls	r3, r3, #4
  40050c:	4413      	add	r3, r2
  40050e:	3304      	adds	r3, #4
  400510:	681b      	ldr	r3, [r3, #0]
  400512:	43db      	mvns	r3, r3
  400514:	68fa      	ldr	r2, [r7, #12]
  400516:	4013      	ands	r3, r2
  400518:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40051a:	68bb      	ldr	r3, [r7, #8]
  40051c:	3301      	adds	r3, #1
  40051e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400520:	68bb      	ldr	r3, [r7, #8]
  400522:	2b06      	cmp	r3, #6
  400524:	d803      	bhi.n	40052e <pio_handler_process+0x9e>
		while (status != 0) {
  400526:	68fb      	ldr	r3, [r7, #12]
  400528:	2b00      	cmp	r3, #0
  40052a:	d1c7      	bne.n	4004bc <pio_handler_process+0x2c>
  40052c:	e000      	b.n	400530 <pio_handler_process+0xa0>
				break;
  40052e:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400530:	4b0a      	ldr	r3, [pc, #40]	; (40055c <pio_handler_process+0xcc>)
  400532:	681b      	ldr	r3, [r3, #0]
  400534:	2b00      	cmp	r3, #0
  400536:	d007      	beq.n	400548 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400538:	4b09      	ldr	r3, [pc, #36]	; (400560 <pio_handler_process+0xd0>)
  40053a:	681b      	ldr	r3, [r3, #0]
  40053c:	2b00      	cmp	r3, #0
  40053e:	d003      	beq.n	400548 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400540:	4b07      	ldr	r3, [pc, #28]	; (400560 <pio_handler_process+0xd0>)
  400542:	681b      	ldr	r3, [r3, #0]
  400544:	6878      	ldr	r0, [r7, #4]
  400546:	4798      	blx	r3
		}
	}
#endif
}
  400548:	bf00      	nop
  40054a:	3710      	adds	r7, #16
  40054c:	46bd      	mov	sp, r7
  40054e:	bd80      	pop	{r7, pc}
  400550:	00400c63 	.word	0x00400c63
  400554:	00400c79 	.word	0x00400c79
  400558:	2000045c 	.word	0x2000045c
  40055c:	200004e0 	.word	0x200004e0
  400560:	200004d0 	.word	0x200004d0

00400564 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
  400570:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400572:	4b21      	ldr	r3, [pc, #132]	; (4005f8 <pio_handler_set+0x94>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2b06      	cmp	r3, #6
  400578:	d901      	bls.n	40057e <pio_handler_set+0x1a>
		return 1;
  40057a:	2301      	movs	r3, #1
  40057c:	e038      	b.n	4005f0 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40057e:	2300      	movs	r3, #0
  400580:	75fb      	strb	r3, [r7, #23]
  400582:	e011      	b.n	4005a8 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400584:	7dfb      	ldrb	r3, [r7, #23]
  400586:	011b      	lsls	r3, r3, #4
  400588:	4a1c      	ldr	r2, [pc, #112]	; (4005fc <pio_handler_set+0x98>)
  40058a:	4413      	add	r3, r2
  40058c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40058e:	693b      	ldr	r3, [r7, #16]
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	68bb      	ldr	r3, [r7, #8]
  400594:	429a      	cmp	r2, r3
  400596:	d104      	bne.n	4005a2 <pio_handler_set+0x3e>
  400598:	693b      	ldr	r3, [r7, #16]
  40059a:	685a      	ldr	r2, [r3, #4]
  40059c:	687b      	ldr	r3, [r7, #4]
  40059e:	429a      	cmp	r2, r3
  4005a0:	d008      	beq.n	4005b4 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4005a2:	7dfb      	ldrb	r3, [r7, #23]
  4005a4:	3301      	adds	r3, #1
  4005a6:	75fb      	strb	r3, [r7, #23]
  4005a8:	7dfa      	ldrb	r2, [r7, #23]
  4005aa:	4b13      	ldr	r3, [pc, #76]	; (4005f8 <pio_handler_set+0x94>)
  4005ac:	681b      	ldr	r3, [r3, #0]
  4005ae:	429a      	cmp	r2, r3
  4005b0:	d9e8      	bls.n	400584 <pio_handler_set+0x20>
  4005b2:	e000      	b.n	4005b6 <pio_handler_set+0x52>
			break;
  4005b4:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4005b6:	693b      	ldr	r3, [r7, #16]
  4005b8:	68ba      	ldr	r2, [r7, #8]
  4005ba:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4005bc:	693b      	ldr	r3, [r7, #16]
  4005be:	687a      	ldr	r2, [r7, #4]
  4005c0:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4005c2:	693b      	ldr	r3, [r7, #16]
  4005c4:	683a      	ldr	r2, [r7, #0]
  4005c6:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4005c8:	693b      	ldr	r3, [r7, #16]
  4005ca:	6a3a      	ldr	r2, [r7, #32]
  4005cc:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4005ce:	7dfa      	ldrb	r2, [r7, #23]
  4005d0:	4b09      	ldr	r3, [pc, #36]	; (4005f8 <pio_handler_set+0x94>)
  4005d2:	681b      	ldr	r3, [r3, #0]
  4005d4:	3301      	adds	r3, #1
  4005d6:	429a      	cmp	r2, r3
  4005d8:	d104      	bne.n	4005e4 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  4005da:	4b07      	ldr	r3, [pc, #28]	; (4005f8 <pio_handler_set+0x94>)
  4005dc:	681b      	ldr	r3, [r3, #0]
  4005de:	3301      	adds	r3, #1
  4005e0:	4a05      	ldr	r2, [pc, #20]	; (4005f8 <pio_handler_set+0x94>)
  4005e2:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4005e4:	683a      	ldr	r2, [r7, #0]
  4005e6:	6879      	ldr	r1, [r7, #4]
  4005e8:	68f8      	ldr	r0, [r7, #12]
  4005ea:	4b05      	ldr	r3, [pc, #20]	; (400600 <pio_handler_set+0x9c>)
  4005ec:	4798      	blx	r3

	return 0;
  4005ee:	2300      	movs	r3, #0
}
  4005f0:	4618      	mov	r0, r3
  4005f2:	3718      	adds	r7, #24
  4005f4:	46bd      	mov	sp, r7
  4005f6:	bd80      	pop	{r7, pc}
  4005f8:	200004cc 	.word	0x200004cc
  4005fc:	2000045c 	.word	0x2000045c
  400600:	00400bc5 	.word	0x00400bc5

00400604 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400604:	b580      	push	{r7, lr}
  400606:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400608:	210b      	movs	r1, #11
  40060a:	4802      	ldr	r0, [pc, #8]	; (400614 <PIOA_Handler+0x10>)
  40060c:	4b02      	ldr	r3, [pc, #8]	; (400618 <PIOA_Handler+0x14>)
  40060e:	4798      	blx	r3
}
  400610:	bf00      	nop
  400612:	bd80      	pop	{r7, pc}
  400614:	400e0e00 	.word	0x400e0e00
  400618:	00400491 	.word	0x00400491

0040061c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40061c:	b580      	push	{r7, lr}
  40061e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400620:	210c      	movs	r1, #12
  400622:	4802      	ldr	r0, [pc, #8]	; (40062c <PIOB_Handler+0x10>)
  400624:	4b02      	ldr	r3, [pc, #8]	; (400630 <PIOB_Handler+0x14>)
  400626:	4798      	blx	r3
}
  400628:	bf00      	nop
  40062a:	bd80      	pop	{r7, pc}
  40062c:	400e1000 	.word	0x400e1000
  400630:	00400491 	.word	0x00400491

00400634 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400634:	b480      	push	{r7}
  400636:	b083      	sub	sp, #12
  400638:	af00      	add	r7, sp, #0
  40063a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400642:	605a      	str	r2, [r3, #4]

}
  400644:	bf00      	nop
  400646:	370c      	adds	r7, #12
  400648:	46bd      	mov	sp, r7
  40064a:	bc80      	pop	{r7}
  40064c:	4770      	bx	lr
	...

00400650 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400650:	b580      	push	{r7, lr}
  400652:	b082      	sub	sp, #8
  400654:	af00      	add	r7, sp, #0
  400656:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400658:	687b      	ldr	r3, [r7, #4]
  40065a:	2b07      	cmp	r3, #7
  40065c:	d831      	bhi.n	4006c2 <osc_enable+0x72>
  40065e:	a201      	add	r2, pc, #4	; (adr r2, 400664 <osc_enable+0x14>)
  400660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400664:	004006c1 	.word	0x004006c1
  400668:	00400685 	.word	0x00400685
  40066c:	0040068d 	.word	0x0040068d
  400670:	00400695 	.word	0x00400695
  400674:	0040069d 	.word	0x0040069d
  400678:	004006a5 	.word	0x004006a5
  40067c:	004006ad 	.word	0x004006ad
  400680:	004006b7 	.word	0x004006b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400684:	2000      	movs	r0, #0
  400686:	4b11      	ldr	r3, [pc, #68]	; (4006cc <osc_enable+0x7c>)
  400688:	4798      	blx	r3
		break;
  40068a:	e01a      	b.n	4006c2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40068c:	2001      	movs	r0, #1
  40068e:	4b0f      	ldr	r3, [pc, #60]	; (4006cc <osc_enable+0x7c>)
  400690:	4798      	blx	r3
		break;
  400692:	e016      	b.n	4006c2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400694:	2000      	movs	r0, #0
  400696:	4b0e      	ldr	r3, [pc, #56]	; (4006d0 <osc_enable+0x80>)
  400698:	4798      	blx	r3
		break;
  40069a:	e012      	b.n	4006c2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40069c:	2010      	movs	r0, #16
  40069e:	4b0c      	ldr	r3, [pc, #48]	; (4006d0 <osc_enable+0x80>)
  4006a0:	4798      	blx	r3
		break;
  4006a2:	e00e      	b.n	4006c2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4006a4:	2020      	movs	r0, #32
  4006a6:	4b0a      	ldr	r3, [pc, #40]	; (4006d0 <osc_enable+0x80>)
  4006a8:	4798      	blx	r3
		break;
  4006aa:	e00a      	b.n	4006c2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006ac:	213e      	movs	r1, #62	; 0x3e
  4006ae:	2000      	movs	r0, #0
  4006b0:	4b08      	ldr	r3, [pc, #32]	; (4006d4 <osc_enable+0x84>)
  4006b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4006b4:	e005      	b.n	4006c2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4006b6:	213e      	movs	r1, #62	; 0x3e
  4006b8:	2001      	movs	r0, #1
  4006ba:	4b06      	ldr	r3, [pc, #24]	; (4006d4 <osc_enable+0x84>)
  4006bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4006be:	e000      	b.n	4006c2 <osc_enable+0x72>
		break;
  4006c0:	bf00      	nop
	}
}
  4006c2:	bf00      	nop
  4006c4:	3708      	adds	r7, #8
  4006c6:	46bd      	mov	sp, r7
  4006c8:	bd80      	pop	{r7, pc}
  4006ca:	bf00      	nop
  4006cc:	00400ee5 	.word	0x00400ee5
  4006d0:	00400f51 	.word	0x00400f51
  4006d4:	00400fc1 	.word	0x00400fc1

004006d8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4006d8:	b580      	push	{r7, lr}
  4006da:	b082      	sub	sp, #8
  4006dc:	af00      	add	r7, sp, #0
  4006de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4006e0:	687b      	ldr	r3, [r7, #4]
  4006e2:	2b07      	cmp	r3, #7
  4006e4:	d826      	bhi.n	400734 <osc_is_ready+0x5c>
  4006e6:	a201      	add	r2, pc, #4	; (adr r2, 4006ec <osc_is_ready+0x14>)
  4006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4006ec:	0040070d 	.word	0x0040070d
  4006f0:	00400711 	.word	0x00400711
  4006f4:	00400711 	.word	0x00400711
  4006f8:	00400723 	.word	0x00400723
  4006fc:	00400723 	.word	0x00400723
  400700:	00400723 	.word	0x00400723
  400704:	00400723 	.word	0x00400723
  400708:	00400723 	.word	0x00400723
	case OSC_SLCK_32K_RC:
		return 1;
  40070c:	2301      	movs	r3, #1
  40070e:	e012      	b.n	400736 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400710:	4b0b      	ldr	r3, [pc, #44]	; (400740 <osc_is_ready+0x68>)
  400712:	4798      	blx	r3
  400714:	4603      	mov	r3, r0
  400716:	2b00      	cmp	r3, #0
  400718:	bf14      	ite	ne
  40071a:	2301      	movne	r3, #1
  40071c:	2300      	moveq	r3, #0
  40071e:	b2db      	uxtb	r3, r3
  400720:	e009      	b.n	400736 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400722:	4b08      	ldr	r3, [pc, #32]	; (400744 <osc_is_ready+0x6c>)
  400724:	4798      	blx	r3
  400726:	4603      	mov	r3, r0
  400728:	2b00      	cmp	r3, #0
  40072a:	bf14      	ite	ne
  40072c:	2301      	movne	r3, #1
  40072e:	2300      	moveq	r3, #0
  400730:	b2db      	uxtb	r3, r3
  400732:	e000      	b.n	400736 <osc_is_ready+0x5e>
	}

	return 0;
  400734:	2300      	movs	r3, #0
}
  400736:	4618      	mov	r0, r3
  400738:	3708      	adds	r7, #8
  40073a:	46bd      	mov	sp, r7
  40073c:	bd80      	pop	{r7, pc}
  40073e:	bf00      	nop
  400740:	00400f1d 	.word	0x00400f1d
  400744:	00401039 	.word	0x00401039

00400748 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400748:	b480      	push	{r7}
  40074a:	b083      	sub	sp, #12
  40074c:	af00      	add	r7, sp, #0
  40074e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400750:	687b      	ldr	r3, [r7, #4]
  400752:	2b07      	cmp	r3, #7
  400754:	d825      	bhi.n	4007a2 <osc_get_rate+0x5a>
  400756:	a201      	add	r2, pc, #4	; (adr r2, 40075c <osc_get_rate+0x14>)
  400758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40075c:	0040077d 	.word	0x0040077d
  400760:	00400783 	.word	0x00400783
  400764:	00400789 	.word	0x00400789
  400768:	0040078f 	.word	0x0040078f
  40076c:	00400793 	.word	0x00400793
  400770:	00400797 	.word	0x00400797
  400774:	0040079b 	.word	0x0040079b
  400778:	0040079f 	.word	0x0040079f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40077c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400780:	e010      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400786:	e00d      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40078c:	e00a      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40078e:	4b08      	ldr	r3, [pc, #32]	; (4007b0 <osc_get_rate+0x68>)
  400790:	e008      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400792:	4b08      	ldr	r3, [pc, #32]	; (4007b4 <osc_get_rate+0x6c>)
  400794:	e006      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400796:	4b08      	ldr	r3, [pc, #32]	; (4007b8 <osc_get_rate+0x70>)
  400798:	e004      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40079a:	4b07      	ldr	r3, [pc, #28]	; (4007b8 <osc_get_rate+0x70>)
  40079c:	e002      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40079e:	4b06      	ldr	r3, [pc, #24]	; (4007b8 <osc_get_rate+0x70>)
  4007a0:	e000      	b.n	4007a4 <osc_get_rate+0x5c>
	}

	return 0;
  4007a2:	2300      	movs	r3, #0
}
  4007a4:	4618      	mov	r0, r3
  4007a6:	370c      	adds	r7, #12
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bc80      	pop	{r7}
  4007ac:	4770      	bx	lr
  4007ae:	bf00      	nop
  4007b0:	003d0900 	.word	0x003d0900
  4007b4:	007a1200 	.word	0x007a1200
  4007b8:	00b71b00 	.word	0x00b71b00

004007bc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4007bc:	b580      	push	{r7, lr}
  4007be:	b082      	sub	sp, #8
  4007c0:	af00      	add	r7, sp, #0
  4007c2:	4603      	mov	r3, r0
  4007c4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4007c6:	bf00      	nop
  4007c8:	79fb      	ldrb	r3, [r7, #7]
  4007ca:	4618      	mov	r0, r3
  4007cc:	4b05      	ldr	r3, [pc, #20]	; (4007e4 <osc_wait_ready+0x28>)
  4007ce:	4798      	blx	r3
  4007d0:	4603      	mov	r3, r0
  4007d2:	f083 0301 	eor.w	r3, r3, #1
  4007d6:	b2db      	uxtb	r3, r3
  4007d8:	2b00      	cmp	r3, #0
  4007da:	d1f5      	bne.n	4007c8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4007dc:	bf00      	nop
  4007de:	3708      	adds	r7, #8
  4007e0:	46bd      	mov	sp, r7
  4007e2:	bd80      	pop	{r7, pc}
  4007e4:	004006d9 	.word	0x004006d9

004007e8 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4007e8:	b580      	push	{r7, lr}
  4007ea:	b086      	sub	sp, #24
  4007ec:	af00      	add	r7, sp, #0
  4007ee:	60f8      	str	r0, [r7, #12]
  4007f0:	607a      	str	r2, [r7, #4]
  4007f2:	603b      	str	r3, [r7, #0]
  4007f4:	460b      	mov	r3, r1
  4007f6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4007f8:	7afb      	ldrb	r3, [r7, #11]
  4007fa:	4618      	mov	r0, r3
  4007fc:	4b0d      	ldr	r3, [pc, #52]	; (400834 <pll_config_init+0x4c>)
  4007fe:	4798      	blx	r3
  400800:	4602      	mov	r2, r0
  400802:	687b      	ldr	r3, [r7, #4]
  400804:	fbb2 f3f3 	udiv	r3, r2, r3
  400808:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40080a:	697b      	ldr	r3, [r7, #20]
  40080c:	683a      	ldr	r2, [r7, #0]
  40080e:	fb02 f303 	mul.w	r3, r2, r3
  400812:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400814:	683b      	ldr	r3, [r7, #0]
  400816:	3b01      	subs	r3, #1
  400818:	041a      	lsls	r2, r3, #16
  40081a:	4b07      	ldr	r3, [pc, #28]	; (400838 <pll_config_init+0x50>)
  40081c:	4013      	ands	r3, r2
  40081e:	687a      	ldr	r2, [r7, #4]
  400820:	b2d2      	uxtb	r2, r2
  400822:	4313      	orrs	r3, r2
  400824:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400828:	68fb      	ldr	r3, [r7, #12]
  40082a:	601a      	str	r2, [r3, #0]
}
  40082c:	bf00      	nop
  40082e:	3718      	adds	r7, #24
  400830:	46bd      	mov	sp, r7
  400832:	bd80      	pop	{r7, pc}
  400834:	00400749 	.word	0x00400749
  400838:	07ff0000 	.word	0x07ff0000

0040083c <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40083c:	b580      	push	{r7, lr}
  40083e:	b082      	sub	sp, #8
  400840:	af00      	add	r7, sp, #0
  400842:	6078      	str	r0, [r7, #4]
  400844:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400846:	683b      	ldr	r3, [r7, #0]
  400848:	2b00      	cmp	r3, #0
  40084a:	d108      	bne.n	40085e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  40084c:	4b09      	ldr	r3, [pc, #36]	; (400874 <pll_enable+0x38>)
  40084e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400850:	4a09      	ldr	r2, [pc, #36]	; (400878 <pll_enable+0x3c>)
  400852:	687b      	ldr	r3, [r7, #4]
  400854:	681b      	ldr	r3, [r3, #0]
  400856:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40085a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  40085c:	e005      	b.n	40086a <pll_enable+0x2e>
		pmc_disable_pllbck();
  40085e:	4b07      	ldr	r3, [pc, #28]	; (40087c <pll_enable+0x40>)
  400860:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400862:	4a05      	ldr	r2, [pc, #20]	; (400878 <pll_enable+0x3c>)
  400864:	687b      	ldr	r3, [r7, #4]
  400866:	681b      	ldr	r3, [r3, #0]
  400868:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  40086a:	bf00      	nop
  40086c:	3708      	adds	r7, #8
  40086e:	46bd      	mov	sp, r7
  400870:	bd80      	pop	{r7, pc}
  400872:	bf00      	nop
  400874:	00401051 	.word	0x00401051
  400878:	400e0400 	.word	0x400e0400
  40087c:	00401081 	.word	0x00401081

00400880 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400880:	b580      	push	{r7, lr}
  400882:	b082      	sub	sp, #8
  400884:	af00      	add	r7, sp, #0
  400886:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400888:	687b      	ldr	r3, [r7, #4]
  40088a:	2b00      	cmp	r3, #0
  40088c:	d103      	bne.n	400896 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40088e:	4b05      	ldr	r3, [pc, #20]	; (4008a4 <pll_is_locked+0x24>)
  400890:	4798      	blx	r3
  400892:	4603      	mov	r3, r0
  400894:	e002      	b.n	40089c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400896:	4b04      	ldr	r3, [pc, #16]	; (4008a8 <pll_is_locked+0x28>)
  400898:	4798      	blx	r3
  40089a:	4603      	mov	r3, r0
	}
}
  40089c:	4618      	mov	r0, r3
  40089e:	3708      	adds	r7, #8
  4008a0:	46bd      	mov	sp, r7
  4008a2:	bd80      	pop	{r7, pc}
  4008a4:	00401069 	.word	0x00401069
  4008a8:	00401099 	.word	0x00401099

004008ac <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4008ac:	b580      	push	{r7, lr}
  4008ae:	b082      	sub	sp, #8
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	4603      	mov	r3, r0
  4008b4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4008b6:	79fb      	ldrb	r3, [r7, #7]
  4008b8:	3b03      	subs	r3, #3
  4008ba:	2b04      	cmp	r3, #4
  4008bc:	d808      	bhi.n	4008d0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4008be:	79fb      	ldrb	r3, [r7, #7]
  4008c0:	4618      	mov	r0, r3
  4008c2:	4b06      	ldr	r3, [pc, #24]	; (4008dc <pll_enable_source+0x30>)
  4008c4:	4798      	blx	r3
		osc_wait_ready(e_src);
  4008c6:	79fb      	ldrb	r3, [r7, #7]
  4008c8:	4618      	mov	r0, r3
  4008ca:	4b05      	ldr	r3, [pc, #20]	; (4008e0 <pll_enable_source+0x34>)
  4008cc:	4798      	blx	r3
		break;
  4008ce:	e000      	b.n	4008d2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4008d0:	bf00      	nop
	}
}
  4008d2:	bf00      	nop
  4008d4:	3708      	adds	r7, #8
  4008d6:	46bd      	mov	sp, r7
  4008d8:	bd80      	pop	{r7, pc}
  4008da:	bf00      	nop
  4008dc:	00400651 	.word	0x00400651
  4008e0:	004007bd 	.word	0x004007bd

004008e4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4008e4:	b580      	push	{r7, lr}
  4008e6:	b082      	sub	sp, #8
  4008e8:	af00      	add	r7, sp, #0
  4008ea:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4008ec:	bf00      	nop
  4008ee:	6878      	ldr	r0, [r7, #4]
  4008f0:	4b04      	ldr	r3, [pc, #16]	; (400904 <pll_wait_for_lock+0x20>)
  4008f2:	4798      	blx	r3
  4008f4:	4603      	mov	r3, r0
  4008f6:	2b00      	cmp	r3, #0
  4008f8:	d0f9      	beq.n	4008ee <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4008fa:	2300      	movs	r3, #0
}
  4008fc:	4618      	mov	r0, r3
  4008fe:	3708      	adds	r7, #8
  400900:	46bd      	mov	sp, r7
  400902:	bd80      	pop	{r7, pc}
  400904:	00400881 	.word	0x00400881

00400908 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400908:	b580      	push	{r7, lr}
  40090a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40090c:	2006      	movs	r0, #6
  40090e:	4b04      	ldr	r3, [pc, #16]	; (400920 <sysclk_get_main_hz+0x18>)
  400910:	4798      	blx	r3
  400912:	4602      	mov	r2, r0
  400914:	4613      	mov	r3, r2
  400916:	009b      	lsls	r3, r3, #2
  400918:	4413      	add	r3, r2
  40091a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40091c:	4618      	mov	r0, r3
  40091e:	bd80      	pop	{r7, pc}
  400920:	00400749 	.word	0x00400749

00400924 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400924:	b580      	push	{r7, lr}
  400926:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400928:	4b02      	ldr	r3, [pc, #8]	; (400934 <sysclk_get_cpu_hz+0x10>)
  40092a:	4798      	blx	r3
  40092c:	4603      	mov	r3, r0
  40092e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400930:	4618      	mov	r0, r3
  400932:	bd80      	pop	{r7, pc}
  400934:	00400909 	.word	0x00400909

00400938 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400938:	b590      	push	{r4, r7, lr}
  40093a:	b083      	sub	sp, #12
  40093c:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40093e:	4811      	ldr	r0, [pc, #68]	; (400984 <sysclk_init+0x4c>)
  400940:	4b11      	ldr	r3, [pc, #68]	; (400988 <sysclk_init+0x50>)
  400942:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400944:	2006      	movs	r0, #6
  400946:	4b11      	ldr	r3, [pc, #68]	; (40098c <sysclk_init+0x54>)
  400948:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40094a:	1d38      	adds	r0, r7, #4
  40094c:	2314      	movs	r3, #20
  40094e:	2201      	movs	r2, #1
  400950:	2106      	movs	r1, #6
  400952:	4c0f      	ldr	r4, [pc, #60]	; (400990 <sysclk_init+0x58>)
  400954:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400956:	1d3b      	adds	r3, r7, #4
  400958:	2100      	movs	r1, #0
  40095a:	4618      	mov	r0, r3
  40095c:	4b0d      	ldr	r3, [pc, #52]	; (400994 <sysclk_init+0x5c>)
  40095e:	4798      	blx	r3
		pll_wait_for_lock(0);
  400960:	2000      	movs	r0, #0
  400962:	4b0d      	ldr	r3, [pc, #52]	; (400998 <sysclk_init+0x60>)
  400964:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400966:	2010      	movs	r0, #16
  400968:	4b0c      	ldr	r3, [pc, #48]	; (40099c <sysclk_init+0x64>)
  40096a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40096c:	4b0c      	ldr	r3, [pc, #48]	; (4009a0 <sysclk_init+0x68>)
  40096e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400970:	4b0c      	ldr	r3, [pc, #48]	; (4009a4 <sysclk_init+0x6c>)
  400972:	4798      	blx	r3
  400974:	4603      	mov	r3, r0
  400976:	4618      	mov	r0, r3
  400978:	4b03      	ldr	r3, [pc, #12]	; (400988 <sysclk_init+0x50>)
  40097a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40097c:	bf00      	nop
  40097e:	370c      	adds	r7, #12
  400980:	46bd      	mov	sp, r7
  400982:	bd90      	pop	{r4, r7, pc}
  400984:	07270e00 	.word	0x07270e00
  400988:	00401971 	.word	0x00401971
  40098c:	004008ad 	.word	0x004008ad
  400990:	004007e9 	.word	0x004007e9
  400994:	0040083d 	.word	0x0040083d
  400998:	004008e5 	.word	0x004008e5
  40099c:	00400e65 	.word	0x00400e65
  4009a0:	004017d9 	.word	0x004017d9
  4009a4:	00400925 	.word	0x00400925

004009a8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4009a8:	b480      	push	{r7}
  4009aa:	b085      	sub	sp, #20
  4009ac:	af00      	add	r7, sp, #0
  4009ae:	60f8      	str	r0, [r7, #12]
  4009b0:	60b9      	str	r1, [r7, #8]
  4009b2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4009b4:	687b      	ldr	r3, [r7, #4]
  4009b6:	2b00      	cmp	r3, #0
  4009b8:	d003      	beq.n	4009c2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4009ba:	68fb      	ldr	r3, [r7, #12]
  4009bc:	68ba      	ldr	r2, [r7, #8]
  4009be:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4009c0:	e002      	b.n	4009c8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4009c2:	68fb      	ldr	r3, [r7, #12]
  4009c4:	68ba      	ldr	r2, [r7, #8]
  4009c6:	661a      	str	r2, [r3, #96]	; 0x60
}
  4009c8:	bf00      	nop
  4009ca:	3714      	adds	r7, #20
  4009cc:	46bd      	mov	sp, r7
  4009ce:	bc80      	pop	{r7}
  4009d0:	4770      	bx	lr

004009d2 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4009d2:	b480      	push	{r7}
  4009d4:	b087      	sub	sp, #28
  4009d6:	af00      	add	r7, sp, #0
  4009d8:	60f8      	str	r0, [r7, #12]
  4009da:	60b9      	str	r1, [r7, #8]
  4009dc:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009de:	68fb      	ldr	r3, [r7, #12]
  4009e0:	687a      	ldr	r2, [r7, #4]
  4009e2:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009e4:	68bb      	ldr	r3, [r7, #8]
  4009e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4009ea:	d04a      	beq.n	400a82 <pio_set_peripheral+0xb0>
  4009ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4009f0:	d808      	bhi.n	400a04 <pio_set_peripheral+0x32>
  4009f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4009f6:	d016      	beq.n	400a26 <pio_set_peripheral+0x54>
  4009f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4009fc:	d02c      	beq.n	400a58 <pio_set_peripheral+0x86>
  4009fe:	2b00      	cmp	r3, #0
  400a00:	d069      	beq.n	400ad6 <pio_set_peripheral+0x104>
  400a02:	e064      	b.n	400ace <pio_set_peripheral+0xfc>
  400a04:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400a08:	d065      	beq.n	400ad6 <pio_set_peripheral+0x104>
  400a0a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400a0e:	d803      	bhi.n	400a18 <pio_set_peripheral+0x46>
  400a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400a14:	d04a      	beq.n	400aac <pio_set_peripheral+0xda>
  400a16:	e05a      	b.n	400ace <pio_set_peripheral+0xfc>
  400a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400a1c:	d05b      	beq.n	400ad6 <pio_set_peripheral+0x104>
  400a1e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400a22:	d058      	beq.n	400ad6 <pio_set_peripheral+0x104>
  400a24:	e053      	b.n	400ace <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a26:	68fb      	ldr	r3, [r7, #12]
  400a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a2a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a2c:	68fb      	ldr	r3, [r7, #12]
  400a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a30:	687b      	ldr	r3, [r7, #4]
  400a32:	43d9      	mvns	r1, r3
  400a34:	697b      	ldr	r3, [r7, #20]
  400a36:	400b      	ands	r3, r1
  400a38:	401a      	ands	r2, r3
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a3e:	68fb      	ldr	r3, [r7, #12]
  400a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a42:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a44:	68fb      	ldr	r3, [r7, #12]
  400a46:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a48:	687b      	ldr	r3, [r7, #4]
  400a4a:	43d9      	mvns	r1, r3
  400a4c:	697b      	ldr	r3, [r7, #20]
  400a4e:	400b      	ands	r3, r1
  400a50:	401a      	ands	r2, r3
  400a52:	68fb      	ldr	r3, [r7, #12]
  400a54:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a56:	e03a      	b.n	400ace <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a58:	68fb      	ldr	r3, [r7, #12]
  400a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a5c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a5e:	687a      	ldr	r2, [r7, #4]
  400a60:	697b      	ldr	r3, [r7, #20]
  400a62:	431a      	orrs	r2, r3
  400a64:	68fb      	ldr	r3, [r7, #12]
  400a66:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a68:	68fb      	ldr	r3, [r7, #12]
  400a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a6c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a6e:	68fb      	ldr	r3, [r7, #12]
  400a70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a72:	687b      	ldr	r3, [r7, #4]
  400a74:	43d9      	mvns	r1, r3
  400a76:	697b      	ldr	r3, [r7, #20]
  400a78:	400b      	ands	r3, r1
  400a7a:	401a      	ands	r2, r3
  400a7c:	68fb      	ldr	r3, [r7, #12]
  400a7e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a80:	e025      	b.n	400ace <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a82:	68fb      	ldr	r3, [r7, #12]
  400a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a86:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a88:	68fb      	ldr	r3, [r7, #12]
  400a8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a8c:	687b      	ldr	r3, [r7, #4]
  400a8e:	43d9      	mvns	r1, r3
  400a90:	697b      	ldr	r3, [r7, #20]
  400a92:	400b      	ands	r3, r1
  400a94:	401a      	ands	r2, r3
  400a96:	68fb      	ldr	r3, [r7, #12]
  400a98:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a9a:	68fb      	ldr	r3, [r7, #12]
  400a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a9e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400aa0:	687a      	ldr	r2, [r7, #4]
  400aa2:	697b      	ldr	r3, [r7, #20]
  400aa4:	431a      	orrs	r2, r3
  400aa6:	68fb      	ldr	r3, [r7, #12]
  400aa8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400aaa:	e010      	b.n	400ace <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aac:	68fb      	ldr	r3, [r7, #12]
  400aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400ab0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ab2:	687a      	ldr	r2, [r7, #4]
  400ab4:	697b      	ldr	r3, [r7, #20]
  400ab6:	431a      	orrs	r2, r3
  400ab8:	68fb      	ldr	r3, [r7, #12]
  400aba:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400abc:	68fb      	ldr	r3, [r7, #12]
  400abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ac0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ac2:	687a      	ldr	r2, [r7, #4]
  400ac4:	697b      	ldr	r3, [r7, #20]
  400ac6:	431a      	orrs	r2, r3
  400ac8:	68fb      	ldr	r3, [r7, #12]
  400aca:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400acc:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400ace:	68fb      	ldr	r3, [r7, #12]
  400ad0:	687a      	ldr	r2, [r7, #4]
  400ad2:	605a      	str	r2, [r3, #4]
  400ad4:	e000      	b.n	400ad8 <pio_set_peripheral+0x106>
		return;
  400ad6:	bf00      	nop
}
  400ad8:	371c      	adds	r7, #28
  400ada:	46bd      	mov	sp, r7
  400adc:	bc80      	pop	{r7}
  400ade:	4770      	bx	lr

00400ae0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400ae0:	b580      	push	{r7, lr}
  400ae2:	b084      	sub	sp, #16
  400ae4:	af00      	add	r7, sp, #0
  400ae6:	60f8      	str	r0, [r7, #12]
  400ae8:	60b9      	str	r1, [r7, #8]
  400aea:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400aec:	68b9      	ldr	r1, [r7, #8]
  400aee:	68f8      	ldr	r0, [r7, #12]
  400af0:	4b19      	ldr	r3, [pc, #100]	; (400b58 <pio_set_input+0x78>)
  400af2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400af4:	687b      	ldr	r3, [r7, #4]
  400af6:	f003 0301 	and.w	r3, r3, #1
  400afa:	461a      	mov	r2, r3
  400afc:	68b9      	ldr	r1, [r7, #8]
  400afe:	68f8      	ldr	r0, [r7, #12]
  400b00:	4b16      	ldr	r3, [pc, #88]	; (400b5c <pio_set_input+0x7c>)
  400b02:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400b04:	687b      	ldr	r3, [r7, #4]
  400b06:	f003 030a 	and.w	r3, r3, #10
  400b0a:	2b00      	cmp	r3, #0
  400b0c:	d003      	beq.n	400b16 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400b0e:	68fb      	ldr	r3, [r7, #12]
  400b10:	68ba      	ldr	r2, [r7, #8]
  400b12:	621a      	str	r2, [r3, #32]
  400b14:	e002      	b.n	400b1c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400b16:	68fb      	ldr	r3, [r7, #12]
  400b18:	68ba      	ldr	r2, [r7, #8]
  400b1a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400b1c:	687b      	ldr	r3, [r7, #4]
  400b1e:	f003 0302 	and.w	r3, r3, #2
  400b22:	2b00      	cmp	r3, #0
  400b24:	d004      	beq.n	400b30 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400b26:	68fb      	ldr	r3, [r7, #12]
  400b28:	68ba      	ldr	r2, [r7, #8]
  400b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400b2e:	e008      	b.n	400b42 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400b30:	687b      	ldr	r3, [r7, #4]
  400b32:	f003 0308 	and.w	r3, r3, #8
  400b36:	2b00      	cmp	r3, #0
  400b38:	d003      	beq.n	400b42 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400b3a:	68fb      	ldr	r3, [r7, #12]
  400b3c:	68ba      	ldr	r2, [r7, #8]
  400b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400b42:	68fb      	ldr	r3, [r7, #12]
  400b44:	68ba      	ldr	r2, [r7, #8]
  400b46:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400b48:	68fb      	ldr	r3, [r7, #12]
  400b4a:	68ba      	ldr	r2, [r7, #8]
  400b4c:	601a      	str	r2, [r3, #0]
}
  400b4e:	bf00      	nop
  400b50:	3710      	adds	r7, #16
  400b52:	46bd      	mov	sp, r7
  400b54:	bd80      	pop	{r7, pc}
  400b56:	bf00      	nop
  400b58:	00400c49 	.word	0x00400c49
  400b5c:	004009a9 	.word	0x004009a9

00400b60 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400b60:	b580      	push	{r7, lr}
  400b62:	b084      	sub	sp, #16
  400b64:	af00      	add	r7, sp, #0
  400b66:	60f8      	str	r0, [r7, #12]
  400b68:	60b9      	str	r1, [r7, #8]
  400b6a:	607a      	str	r2, [r7, #4]
  400b6c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400b6e:	68b9      	ldr	r1, [r7, #8]
  400b70:	68f8      	ldr	r0, [r7, #12]
  400b72:	4b12      	ldr	r3, [pc, #72]	; (400bbc <pio_set_output+0x5c>)
  400b74:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400b76:	69ba      	ldr	r2, [r7, #24]
  400b78:	68b9      	ldr	r1, [r7, #8]
  400b7a:	68f8      	ldr	r0, [r7, #12]
  400b7c:	4b10      	ldr	r3, [pc, #64]	; (400bc0 <pio_set_output+0x60>)
  400b7e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400b80:	683b      	ldr	r3, [r7, #0]
  400b82:	2b00      	cmp	r3, #0
  400b84:	d003      	beq.n	400b8e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400b86:	68fb      	ldr	r3, [r7, #12]
  400b88:	68ba      	ldr	r2, [r7, #8]
  400b8a:	651a      	str	r2, [r3, #80]	; 0x50
  400b8c:	e002      	b.n	400b94 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400b8e:	68fb      	ldr	r3, [r7, #12]
  400b90:	68ba      	ldr	r2, [r7, #8]
  400b92:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400b94:	687b      	ldr	r3, [r7, #4]
  400b96:	2b00      	cmp	r3, #0
  400b98:	d003      	beq.n	400ba2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400b9a:	68fb      	ldr	r3, [r7, #12]
  400b9c:	68ba      	ldr	r2, [r7, #8]
  400b9e:	631a      	str	r2, [r3, #48]	; 0x30
  400ba0:	e002      	b.n	400ba8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400ba2:	68fb      	ldr	r3, [r7, #12]
  400ba4:	68ba      	ldr	r2, [r7, #8]
  400ba6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400ba8:	68fb      	ldr	r3, [r7, #12]
  400baa:	68ba      	ldr	r2, [r7, #8]
  400bac:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400bae:	68fb      	ldr	r3, [r7, #12]
  400bb0:	68ba      	ldr	r2, [r7, #8]
  400bb2:	601a      	str	r2, [r3, #0]
}
  400bb4:	bf00      	nop
  400bb6:	3710      	adds	r7, #16
  400bb8:	46bd      	mov	sp, r7
  400bba:	bd80      	pop	{r7, pc}
  400bbc:	00400c49 	.word	0x00400c49
  400bc0:	004009a9 	.word	0x004009a9

00400bc4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400bc4:	b480      	push	{r7}
  400bc6:	b085      	sub	sp, #20
  400bc8:	af00      	add	r7, sp, #0
  400bca:	60f8      	str	r0, [r7, #12]
  400bcc:	60b9      	str	r1, [r7, #8]
  400bce:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400bd0:	687b      	ldr	r3, [r7, #4]
  400bd2:	f003 0310 	and.w	r3, r3, #16
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d020      	beq.n	400c1c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400bda:	68fb      	ldr	r3, [r7, #12]
  400bdc:	68ba      	ldr	r2, [r7, #8]
  400bde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400be2:	687b      	ldr	r3, [r7, #4]
  400be4:	f003 0320 	and.w	r3, r3, #32
  400be8:	2b00      	cmp	r3, #0
  400bea:	d004      	beq.n	400bf6 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400bec:	68fb      	ldr	r3, [r7, #12]
  400bee:	68ba      	ldr	r2, [r7, #8]
  400bf0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400bf4:	e003      	b.n	400bfe <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400bf6:	68fb      	ldr	r3, [r7, #12]
  400bf8:	68ba      	ldr	r2, [r7, #8]
  400bfa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400c04:	2b00      	cmp	r3, #0
  400c06:	d004      	beq.n	400c12 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400c08:	68fb      	ldr	r3, [r7, #12]
  400c0a:	68ba      	ldr	r2, [r7, #8]
  400c0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400c10:	e008      	b.n	400c24 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	68ba      	ldr	r2, [r7, #8]
  400c16:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400c1a:	e003      	b.n	400c24 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400c1c:	68fb      	ldr	r3, [r7, #12]
  400c1e:	68ba      	ldr	r2, [r7, #8]
  400c20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400c24:	bf00      	nop
  400c26:	3714      	adds	r7, #20
  400c28:	46bd      	mov	sp, r7
  400c2a:	bc80      	pop	{r7}
  400c2c:	4770      	bx	lr

00400c2e <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400c2e:	b480      	push	{r7}
  400c30:	b083      	sub	sp, #12
  400c32:	af00      	add	r7, sp, #0
  400c34:	6078      	str	r0, [r7, #4]
  400c36:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400c38:	687b      	ldr	r3, [r7, #4]
  400c3a:	683a      	ldr	r2, [r7, #0]
  400c3c:	641a      	str	r2, [r3, #64]	; 0x40
}
  400c3e:	bf00      	nop
  400c40:	370c      	adds	r7, #12
  400c42:	46bd      	mov	sp, r7
  400c44:	bc80      	pop	{r7}
  400c46:	4770      	bx	lr

00400c48 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400c48:	b480      	push	{r7}
  400c4a:	b083      	sub	sp, #12
  400c4c:	af00      	add	r7, sp, #0
  400c4e:	6078      	str	r0, [r7, #4]
  400c50:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400c52:	687b      	ldr	r3, [r7, #4]
  400c54:	683a      	ldr	r2, [r7, #0]
  400c56:	645a      	str	r2, [r3, #68]	; 0x44
}
  400c58:	bf00      	nop
  400c5a:	370c      	adds	r7, #12
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bc80      	pop	{r7}
  400c60:	4770      	bx	lr

00400c62 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400c62:	b480      	push	{r7}
  400c64:	b083      	sub	sp, #12
  400c66:	af00      	add	r7, sp, #0
  400c68:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c6e:	4618      	mov	r0, r3
  400c70:	370c      	adds	r7, #12
  400c72:	46bd      	mov	sp, r7
  400c74:	bc80      	pop	{r7}
  400c76:	4770      	bx	lr

00400c78 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400c78:	b480      	push	{r7}
  400c7a:	b083      	sub	sp, #12
  400c7c:	af00      	add	r7, sp, #0
  400c7e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400c80:	687b      	ldr	r3, [r7, #4]
  400c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400c84:	4618      	mov	r0, r3
  400c86:	370c      	adds	r7, #12
  400c88:	46bd      	mov	sp, r7
  400c8a:	bc80      	pop	{r7}
  400c8c:	4770      	bx	lr
	...

00400c90 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400c90:	b590      	push	{r4, r7, lr}
  400c92:	b087      	sub	sp, #28
  400c94:	af02      	add	r7, sp, #8
  400c96:	6078      	str	r0, [r7, #4]
  400c98:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400c9a:	6878      	ldr	r0, [r7, #4]
  400c9c:	4b63      	ldr	r3, [pc, #396]	; (400e2c <pio_configure_pin+0x19c>)
  400c9e:	4798      	blx	r3
  400ca0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400ca2:	683b      	ldr	r3, [r7, #0]
  400ca4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400cac:	d067      	beq.n	400d7e <pio_configure_pin+0xee>
  400cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400cb2:	d809      	bhi.n	400cc8 <pio_configure_pin+0x38>
  400cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400cb8:	d02b      	beq.n	400d12 <pio_configure_pin+0x82>
  400cba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400cbe:	d043      	beq.n	400d48 <pio_configure_pin+0xb8>
  400cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400cc4:	d00a      	beq.n	400cdc <pio_configure_pin+0x4c>
  400cc6:	e0a9      	b.n	400e1c <pio_configure_pin+0x18c>
  400cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400ccc:	d07e      	beq.n	400dcc <pio_configure_pin+0x13c>
  400cce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400cd2:	d07b      	beq.n	400dcc <pio_configure_pin+0x13c>
  400cd4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400cd8:	d06c      	beq.n	400db4 <pio_configure_pin+0x124>
  400cda:	e09f      	b.n	400e1c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400cdc:	687b      	ldr	r3, [r7, #4]
  400cde:	f003 031f 	and.w	r3, r3, #31
  400ce2:	2201      	movs	r2, #1
  400ce4:	fa02 f303 	lsl.w	r3, r2, r3
  400ce8:	461a      	mov	r2, r3
  400cea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cee:	68f8      	ldr	r0, [r7, #12]
  400cf0:	4b4f      	ldr	r3, [pc, #316]	; (400e30 <pio_configure_pin+0x1a0>)
  400cf2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400cf4:	687b      	ldr	r3, [r7, #4]
  400cf6:	f003 031f 	and.w	r3, r3, #31
  400cfa:	2201      	movs	r2, #1
  400cfc:	fa02 f303 	lsl.w	r3, r2, r3
  400d00:	4619      	mov	r1, r3
  400d02:	683b      	ldr	r3, [r7, #0]
  400d04:	f003 0301 	and.w	r3, r3, #1
  400d08:	461a      	mov	r2, r3
  400d0a:	68f8      	ldr	r0, [r7, #12]
  400d0c:	4b49      	ldr	r3, [pc, #292]	; (400e34 <pio_configure_pin+0x1a4>)
  400d0e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d10:	e086      	b.n	400e20 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400d12:	687b      	ldr	r3, [r7, #4]
  400d14:	f003 031f 	and.w	r3, r3, #31
  400d18:	2201      	movs	r2, #1
  400d1a:	fa02 f303 	lsl.w	r3, r2, r3
  400d1e:	461a      	mov	r2, r3
  400d20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d24:	68f8      	ldr	r0, [r7, #12]
  400d26:	4b42      	ldr	r3, [pc, #264]	; (400e30 <pio_configure_pin+0x1a0>)
  400d28:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400d2a:	687b      	ldr	r3, [r7, #4]
  400d2c:	f003 031f 	and.w	r3, r3, #31
  400d30:	2201      	movs	r2, #1
  400d32:	fa02 f303 	lsl.w	r3, r2, r3
  400d36:	4619      	mov	r1, r3
  400d38:	683b      	ldr	r3, [r7, #0]
  400d3a:	f003 0301 	and.w	r3, r3, #1
  400d3e:	461a      	mov	r2, r3
  400d40:	68f8      	ldr	r0, [r7, #12]
  400d42:	4b3c      	ldr	r3, [pc, #240]	; (400e34 <pio_configure_pin+0x1a4>)
  400d44:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d46:	e06b      	b.n	400e20 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400d48:	687b      	ldr	r3, [r7, #4]
  400d4a:	f003 031f 	and.w	r3, r3, #31
  400d4e:	2201      	movs	r2, #1
  400d50:	fa02 f303 	lsl.w	r3, r2, r3
  400d54:	461a      	mov	r2, r3
  400d56:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400d5a:	68f8      	ldr	r0, [r7, #12]
  400d5c:	4b34      	ldr	r3, [pc, #208]	; (400e30 <pio_configure_pin+0x1a0>)
  400d5e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400d60:	687b      	ldr	r3, [r7, #4]
  400d62:	f003 031f 	and.w	r3, r3, #31
  400d66:	2201      	movs	r2, #1
  400d68:	fa02 f303 	lsl.w	r3, r2, r3
  400d6c:	4619      	mov	r1, r3
  400d6e:	683b      	ldr	r3, [r7, #0]
  400d70:	f003 0301 	and.w	r3, r3, #1
  400d74:	461a      	mov	r2, r3
  400d76:	68f8      	ldr	r0, [r7, #12]
  400d78:	4b2e      	ldr	r3, [pc, #184]	; (400e34 <pio_configure_pin+0x1a4>)
  400d7a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d7c:	e050      	b.n	400e20 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400d7e:	687b      	ldr	r3, [r7, #4]
  400d80:	f003 031f 	and.w	r3, r3, #31
  400d84:	2201      	movs	r2, #1
  400d86:	fa02 f303 	lsl.w	r3, r2, r3
  400d8a:	461a      	mov	r2, r3
  400d8c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400d90:	68f8      	ldr	r0, [r7, #12]
  400d92:	4b27      	ldr	r3, [pc, #156]	; (400e30 <pio_configure_pin+0x1a0>)
  400d94:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400d96:	687b      	ldr	r3, [r7, #4]
  400d98:	f003 031f 	and.w	r3, r3, #31
  400d9c:	2201      	movs	r2, #1
  400d9e:	fa02 f303 	lsl.w	r3, r2, r3
  400da2:	4619      	mov	r1, r3
  400da4:	683b      	ldr	r3, [r7, #0]
  400da6:	f003 0301 	and.w	r3, r3, #1
  400daa:	461a      	mov	r2, r3
  400dac:	68f8      	ldr	r0, [r7, #12]
  400dae:	4b21      	ldr	r3, [pc, #132]	; (400e34 <pio_configure_pin+0x1a4>)
  400db0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400db2:	e035      	b.n	400e20 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400db4:	687b      	ldr	r3, [r7, #4]
  400db6:	f003 031f 	and.w	r3, r3, #31
  400dba:	2201      	movs	r2, #1
  400dbc:	fa02 f303 	lsl.w	r3, r2, r3
  400dc0:	683a      	ldr	r2, [r7, #0]
  400dc2:	4619      	mov	r1, r3
  400dc4:	68f8      	ldr	r0, [r7, #12]
  400dc6:	4b1c      	ldr	r3, [pc, #112]	; (400e38 <pio_configure_pin+0x1a8>)
  400dc8:	4798      	blx	r3
		break;
  400dca:	e029      	b.n	400e20 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400dcc:	687b      	ldr	r3, [r7, #4]
  400dce:	f003 031f 	and.w	r3, r3, #31
  400dd2:	2201      	movs	r2, #1
  400dd4:	fa02 f303 	lsl.w	r3, r2, r3
  400dd8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400dda:	683b      	ldr	r3, [r7, #0]
  400ddc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400de0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400de4:	bf0c      	ite	eq
  400de6:	2301      	moveq	r3, #1
  400de8:	2300      	movne	r3, #0
  400dea:	b2db      	uxtb	r3, r3
  400dec:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  400dee:	683b      	ldr	r3, [r7, #0]
  400df0:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400df4:	2b00      	cmp	r3, #0
  400df6:	bf14      	ite	ne
  400df8:	2301      	movne	r3, #1
  400dfa:	2300      	moveq	r3, #0
  400dfc:	b2db      	uxtb	r3, r3
  400dfe:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400e00:	683b      	ldr	r3, [r7, #0]
  400e02:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400e06:	2b00      	cmp	r3, #0
  400e08:	bf14      	ite	ne
  400e0a:	2301      	movne	r3, #1
  400e0c:	2300      	moveq	r3, #0
  400e0e:	b2db      	uxtb	r3, r3
  400e10:	9300      	str	r3, [sp, #0]
  400e12:	4603      	mov	r3, r0
  400e14:	68f8      	ldr	r0, [r7, #12]
  400e16:	4c09      	ldr	r4, [pc, #36]	; (400e3c <pio_configure_pin+0x1ac>)
  400e18:	47a0      	blx	r4
		break;
  400e1a:	e001      	b.n	400e20 <pio_configure_pin+0x190>

	default:
		return 0;
  400e1c:	2300      	movs	r3, #0
  400e1e:	e000      	b.n	400e22 <pio_configure_pin+0x192>
	}

	return 1;
  400e20:	2301      	movs	r3, #1
}
  400e22:	4618      	mov	r0, r3
  400e24:	3714      	adds	r7, #20
  400e26:	46bd      	mov	sp, r7
  400e28:	bd90      	pop	{r4, r7, pc}
  400e2a:	bf00      	nop
  400e2c:	00400e41 	.word	0x00400e41
  400e30:	004009d3 	.word	0x004009d3
  400e34:	004009a9 	.word	0x004009a9
  400e38:	00400ae1 	.word	0x00400ae1
  400e3c:	00400b61 	.word	0x00400b61

00400e40 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  400e40:	b480      	push	{r7}
  400e42:	b085      	sub	sp, #20
  400e44:	af00      	add	r7, sp, #0
  400e46:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400e48:	687b      	ldr	r3, [r7, #4]
  400e4a:	095b      	lsrs	r3, r3, #5
  400e4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400e50:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400e54:	025b      	lsls	r3, r3, #9
  400e56:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  400e58:	68fb      	ldr	r3, [r7, #12]
}
  400e5a:	4618      	mov	r0, r3
  400e5c:	3714      	adds	r7, #20
  400e5e:	46bd      	mov	sp, r7
  400e60:	bc80      	pop	{r7}
  400e62:	4770      	bx	lr

00400e64 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400e64:	b480      	push	{r7}
  400e66:	b085      	sub	sp, #20
  400e68:	af00      	add	r7, sp, #0
  400e6a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e6c:	491c      	ldr	r1, [pc, #112]	; (400ee0 <pmc_switch_mck_to_pllack+0x7c>)
  400e6e:	4b1c      	ldr	r3, [pc, #112]	; (400ee0 <pmc_switch_mck_to_pllack+0x7c>)
  400e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400e76:	687b      	ldr	r3, [r7, #4]
  400e78:	4313      	orrs	r3, r2
  400e7a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e80:	60fb      	str	r3, [r7, #12]
  400e82:	e007      	b.n	400e94 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e84:	68fb      	ldr	r3, [r7, #12]
  400e86:	2b00      	cmp	r3, #0
  400e88:	d101      	bne.n	400e8e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400e8a:	2301      	movs	r3, #1
  400e8c:	e023      	b.n	400ed6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e8e:	68fb      	ldr	r3, [r7, #12]
  400e90:	3b01      	subs	r3, #1
  400e92:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e94:	4b12      	ldr	r3, [pc, #72]	; (400ee0 <pmc_switch_mck_to_pllack+0x7c>)
  400e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e98:	f003 0308 	and.w	r3, r3, #8
  400e9c:	2b00      	cmp	r3, #0
  400e9e:	d0f1      	beq.n	400e84 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ea0:	4a0f      	ldr	r2, [pc, #60]	; (400ee0 <pmc_switch_mck_to_pllack+0x7c>)
  400ea2:	4b0f      	ldr	r3, [pc, #60]	; (400ee0 <pmc_switch_mck_to_pllack+0x7c>)
  400ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ea6:	f023 0303 	bic.w	r3, r3, #3
  400eaa:	f043 0302 	orr.w	r3, r3, #2
  400eae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400eb4:	60fb      	str	r3, [r7, #12]
  400eb6:	e007      	b.n	400ec8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400eb8:	68fb      	ldr	r3, [r7, #12]
  400eba:	2b00      	cmp	r3, #0
  400ebc:	d101      	bne.n	400ec2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400ebe:	2301      	movs	r3, #1
  400ec0:	e009      	b.n	400ed6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400ec2:	68fb      	ldr	r3, [r7, #12]
  400ec4:	3b01      	subs	r3, #1
  400ec6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ec8:	4b05      	ldr	r3, [pc, #20]	; (400ee0 <pmc_switch_mck_to_pllack+0x7c>)
  400eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ecc:	f003 0308 	and.w	r3, r3, #8
  400ed0:	2b00      	cmp	r3, #0
  400ed2:	d0f1      	beq.n	400eb8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400ed4:	2300      	movs	r3, #0
}
  400ed6:	4618      	mov	r0, r3
  400ed8:	3714      	adds	r7, #20
  400eda:	46bd      	mov	sp, r7
  400edc:	bc80      	pop	{r7}
  400ede:	4770      	bx	lr
  400ee0:	400e0400 	.word	0x400e0400

00400ee4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400ee4:	b480      	push	{r7}
  400ee6:	b083      	sub	sp, #12
  400ee8:	af00      	add	r7, sp, #0
  400eea:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400eec:	687b      	ldr	r3, [r7, #4]
  400eee:	2b01      	cmp	r3, #1
  400ef0:	d107      	bne.n	400f02 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400ef2:	4a08      	ldr	r2, [pc, #32]	; (400f14 <pmc_switch_sclk_to_32kxtal+0x30>)
  400ef4:	4b07      	ldr	r3, [pc, #28]	; (400f14 <pmc_switch_sclk_to_32kxtal+0x30>)
  400ef6:	689b      	ldr	r3, [r3, #8]
  400ef8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400f00:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400f02:	4b04      	ldr	r3, [pc, #16]	; (400f14 <pmc_switch_sclk_to_32kxtal+0x30>)
  400f04:	4a04      	ldr	r2, [pc, #16]	; (400f18 <pmc_switch_sclk_to_32kxtal+0x34>)
  400f06:	601a      	str	r2, [r3, #0]
}
  400f08:	bf00      	nop
  400f0a:	370c      	adds	r7, #12
  400f0c:	46bd      	mov	sp, r7
  400f0e:	bc80      	pop	{r7}
  400f10:	4770      	bx	lr
  400f12:	bf00      	nop
  400f14:	400e1410 	.word	0x400e1410
  400f18:	a5000008 	.word	0xa5000008

00400f1c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400f1c:	b480      	push	{r7}
  400f1e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400f20:	4b09      	ldr	r3, [pc, #36]	; (400f48 <pmc_osc_is_ready_32kxtal+0x2c>)
  400f22:	695b      	ldr	r3, [r3, #20]
  400f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400f28:	2b00      	cmp	r3, #0
  400f2a:	d007      	beq.n	400f3c <pmc_osc_is_ready_32kxtal+0x20>
  400f2c:	4b07      	ldr	r3, [pc, #28]	; (400f4c <pmc_osc_is_ready_32kxtal+0x30>)
  400f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400f34:	2b00      	cmp	r3, #0
  400f36:	d001      	beq.n	400f3c <pmc_osc_is_ready_32kxtal+0x20>
  400f38:	2301      	movs	r3, #1
  400f3a:	e000      	b.n	400f3e <pmc_osc_is_ready_32kxtal+0x22>
  400f3c:	2300      	movs	r3, #0
}
  400f3e:	4618      	mov	r0, r3
  400f40:	46bd      	mov	sp, r7
  400f42:	bc80      	pop	{r7}
  400f44:	4770      	bx	lr
  400f46:	bf00      	nop
  400f48:	400e1410 	.word	0x400e1410
  400f4c:	400e0400 	.word	0x400e0400

00400f50 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400f50:	b480      	push	{r7}
  400f52:	b083      	sub	sp, #12
  400f54:	af00      	add	r7, sp, #0
  400f56:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400f58:	4a18      	ldr	r2, [pc, #96]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400f5a:	4b18      	ldr	r3, [pc, #96]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400f5c:	6a1b      	ldr	r3, [r3, #32]
  400f5e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400f62:	f043 0308 	orr.w	r3, r3, #8
  400f66:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f68:	bf00      	nop
  400f6a:	4b14      	ldr	r3, [pc, #80]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f72:	2b00      	cmp	r3, #0
  400f74:	d0f9      	beq.n	400f6a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f76:	4911      	ldr	r1, [pc, #68]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400f78:	4b10      	ldr	r3, [pc, #64]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400f7a:	6a1b      	ldr	r3, [r3, #32]
  400f7c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400f84:	687a      	ldr	r2, [r7, #4]
  400f86:	4313      	orrs	r3, r2
  400f88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f8c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f8e:	bf00      	nop
  400f90:	4b0a      	ldr	r3, [pc, #40]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d0f9      	beq.n	400f90 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400f9c:	4a07      	ldr	r2, [pc, #28]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400f9e:	4b07      	ldr	r3, [pc, #28]	; (400fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  400fa0:	6a1b      	ldr	r3, [r3, #32]
  400fa2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400faa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400fae:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400fb0:	bf00      	nop
  400fb2:	370c      	adds	r7, #12
  400fb4:	46bd      	mov	sp, r7
  400fb6:	bc80      	pop	{r7}
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop
  400fbc:	400e0400 	.word	0x400e0400

00400fc0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400fc0:	b480      	push	{r7}
  400fc2:	b083      	sub	sp, #12
  400fc4:	af00      	add	r7, sp, #0
  400fc6:	6078      	str	r0, [r7, #4]
  400fc8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	2b00      	cmp	r3, #0
  400fce:	d008      	beq.n	400fe2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fd0:	4916      	ldr	r1, [pc, #88]	; (40102c <pmc_switch_mainck_to_xtal+0x6c>)
  400fd2:	4b16      	ldr	r3, [pc, #88]	; (40102c <pmc_switch_mainck_to_xtal+0x6c>)
  400fd4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fd6:	4a16      	ldr	r2, [pc, #88]	; (401030 <pmc_switch_mainck_to_xtal+0x70>)
  400fd8:	401a      	ands	r2, r3
  400fda:	4b16      	ldr	r3, [pc, #88]	; (401034 <pmc_switch_mainck_to_xtal+0x74>)
  400fdc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fde:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400fe0:	e01e      	b.n	401020 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fe2:	4912      	ldr	r1, [pc, #72]	; (40102c <pmc_switch_mainck_to_xtal+0x6c>)
  400fe4:	4b11      	ldr	r3, [pc, #68]	; (40102c <pmc_switch_mainck_to_xtal+0x6c>)
  400fe6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400fe8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400fec:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400ff0:	683a      	ldr	r2, [r7, #0]
  400ff2:	0212      	lsls	r2, r2, #8
  400ff4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400ff6:	4313      	orrs	r3, r2
  400ff8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400ffc:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401000:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401002:	bf00      	nop
  401004:	4b09      	ldr	r3, [pc, #36]	; (40102c <pmc_switch_mainck_to_xtal+0x6c>)
  401006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401008:	f003 0301 	and.w	r3, r3, #1
  40100c:	2b00      	cmp	r3, #0
  40100e:	d0f9      	beq.n	401004 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401010:	4a06      	ldr	r2, [pc, #24]	; (40102c <pmc_switch_mainck_to_xtal+0x6c>)
  401012:	4b06      	ldr	r3, [pc, #24]	; (40102c <pmc_switch_mainck_to_xtal+0x6c>)
  401014:	6a1b      	ldr	r3, [r3, #32]
  401016:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40101a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40101e:	6213      	str	r3, [r2, #32]
}
  401020:	bf00      	nop
  401022:	370c      	adds	r7, #12
  401024:	46bd      	mov	sp, r7
  401026:	bc80      	pop	{r7}
  401028:	4770      	bx	lr
  40102a:	bf00      	nop
  40102c:	400e0400 	.word	0x400e0400
  401030:	fec8fffc 	.word	0xfec8fffc
  401034:	01370002 	.word	0x01370002

00401038 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401038:	b480      	push	{r7}
  40103a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40103c:	4b03      	ldr	r3, [pc, #12]	; (40104c <pmc_osc_is_ready_mainck+0x14>)
  40103e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401044:	4618      	mov	r0, r3
  401046:	46bd      	mov	sp, r7
  401048:	bc80      	pop	{r7}
  40104a:	4770      	bx	lr
  40104c:	400e0400 	.word	0x400e0400

00401050 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401050:	b480      	push	{r7}
  401052:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401054:	4b03      	ldr	r3, [pc, #12]	; (401064 <pmc_disable_pllack+0x14>)
  401056:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40105a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40105c:	bf00      	nop
  40105e:	46bd      	mov	sp, r7
  401060:	bc80      	pop	{r7}
  401062:	4770      	bx	lr
  401064:	400e0400 	.word	0x400e0400

00401068 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401068:	b480      	push	{r7}
  40106a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40106c:	4b03      	ldr	r3, [pc, #12]	; (40107c <pmc_is_locked_pllack+0x14>)
  40106e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401070:	f003 0302 	and.w	r3, r3, #2
}
  401074:	4618      	mov	r0, r3
  401076:	46bd      	mov	sp, r7
  401078:	bc80      	pop	{r7}
  40107a:	4770      	bx	lr
  40107c:	400e0400 	.word	0x400e0400

00401080 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401080:	b480      	push	{r7}
  401082:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401084:	4b03      	ldr	r3, [pc, #12]	; (401094 <pmc_disable_pllbck+0x14>)
  401086:	2200      	movs	r2, #0
  401088:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40108a:	bf00      	nop
  40108c:	46bd      	mov	sp, r7
  40108e:	bc80      	pop	{r7}
  401090:	4770      	bx	lr
  401092:	bf00      	nop
  401094:	400e0400 	.word	0x400e0400

00401098 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401098:	b480      	push	{r7}
  40109a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40109c:	4b03      	ldr	r3, [pc, #12]	; (4010ac <pmc_is_locked_pllbck+0x14>)
  40109e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010a0:	f003 0304 	and.w	r3, r3, #4
}
  4010a4:	4618      	mov	r0, r3
  4010a6:	46bd      	mov	sp, r7
  4010a8:	bc80      	pop	{r7}
  4010aa:	4770      	bx	lr
  4010ac:	400e0400 	.word	0x400e0400

004010b0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4010b0:	b480      	push	{r7}
  4010b2:	b083      	sub	sp, #12
  4010b4:	af00      	add	r7, sp, #0
  4010b6:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4010b8:	687b      	ldr	r3, [r7, #4]
  4010ba:	2b22      	cmp	r3, #34	; 0x22
  4010bc:	d901      	bls.n	4010c2 <pmc_enable_periph_clk+0x12>
		return 1;
  4010be:	2301      	movs	r3, #1
  4010c0:	e02f      	b.n	401122 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	2b1f      	cmp	r3, #31
  4010c6:	d813      	bhi.n	4010f0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4010c8:	4b18      	ldr	r3, [pc, #96]	; (40112c <pmc_enable_periph_clk+0x7c>)
  4010ca:	699a      	ldr	r2, [r3, #24]
  4010cc:	2101      	movs	r1, #1
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	fa01 f303 	lsl.w	r3, r1, r3
  4010d4:	401a      	ands	r2, r3
  4010d6:	2101      	movs	r1, #1
  4010d8:	687b      	ldr	r3, [r7, #4]
  4010da:	fa01 f303 	lsl.w	r3, r1, r3
  4010de:	429a      	cmp	r2, r3
  4010e0:	d01e      	beq.n	401120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010e2:	4a12      	ldr	r2, [pc, #72]	; (40112c <pmc_enable_periph_clk+0x7c>)
  4010e4:	2101      	movs	r1, #1
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	fa01 f303 	lsl.w	r3, r1, r3
  4010ec:	6113      	str	r3, [r2, #16]
  4010ee:	e017      	b.n	401120 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4010f0:	687b      	ldr	r3, [r7, #4]
  4010f2:	3b20      	subs	r3, #32
  4010f4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010f6:	4b0d      	ldr	r3, [pc, #52]	; (40112c <pmc_enable_periph_clk+0x7c>)
  4010f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4010fc:	2101      	movs	r1, #1
  4010fe:	687b      	ldr	r3, [r7, #4]
  401100:	fa01 f303 	lsl.w	r3, r1, r3
  401104:	401a      	ands	r2, r3
  401106:	2101      	movs	r1, #1
  401108:	687b      	ldr	r3, [r7, #4]
  40110a:	fa01 f303 	lsl.w	r3, r1, r3
  40110e:	429a      	cmp	r2, r3
  401110:	d006      	beq.n	401120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401112:	4a06      	ldr	r2, [pc, #24]	; (40112c <pmc_enable_periph_clk+0x7c>)
  401114:	2101      	movs	r1, #1
  401116:	687b      	ldr	r3, [r7, #4]
  401118:	fa01 f303 	lsl.w	r3, r1, r3
  40111c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401120:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401122:	4618      	mov	r0, r3
  401124:	370c      	adds	r7, #12
  401126:	46bd      	mov	sp, r7
  401128:	bc80      	pop	{r7}
  40112a:	4770      	bx	lr
  40112c:	400e0400 	.word	0x400e0400

00401130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401130:	b480      	push	{r7}
  401132:	b083      	sub	sp, #12
  401134:	af00      	add	r7, sp, #0
  401136:	4603      	mov	r3, r0
  401138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40113e:	2b00      	cmp	r3, #0
  401140:	db0b      	blt.n	40115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401142:	4908      	ldr	r1, [pc, #32]	; (401164 <__NVIC_EnableIRQ+0x34>)
  401144:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401148:	095b      	lsrs	r3, r3, #5
  40114a:	79fa      	ldrb	r2, [r7, #7]
  40114c:	f002 021f 	and.w	r2, r2, #31
  401150:	2001      	movs	r0, #1
  401152:	fa00 f202 	lsl.w	r2, r0, r2
  401156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  40115a:	bf00      	nop
  40115c:	370c      	adds	r7, #12
  40115e:	46bd      	mov	sp, r7
  401160:	bc80      	pop	{r7}
  401162:	4770      	bx	lr
  401164:	e000e100 	.word	0xe000e100

00401168 <osc_get_rate>:
{
  401168:	b480      	push	{r7}
  40116a:	b083      	sub	sp, #12
  40116c:	af00      	add	r7, sp, #0
  40116e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	2b07      	cmp	r3, #7
  401174:	d825      	bhi.n	4011c2 <osc_get_rate+0x5a>
  401176:	a201      	add	r2, pc, #4	; (adr r2, 40117c <osc_get_rate+0x14>)
  401178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40117c:	0040119d 	.word	0x0040119d
  401180:	004011a3 	.word	0x004011a3
  401184:	004011a9 	.word	0x004011a9
  401188:	004011af 	.word	0x004011af
  40118c:	004011b3 	.word	0x004011b3
  401190:	004011b7 	.word	0x004011b7
  401194:	004011bb 	.word	0x004011bb
  401198:	004011bf 	.word	0x004011bf
		return OSC_SLCK_32K_RC_HZ;
  40119c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4011a0:	e010      	b.n	4011c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4011a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011a6:	e00d      	b.n	4011c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4011a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011ac:	e00a      	b.n	4011c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4011ae:	4b08      	ldr	r3, [pc, #32]	; (4011d0 <osc_get_rate+0x68>)
  4011b0:	e008      	b.n	4011c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4011b2:	4b08      	ldr	r3, [pc, #32]	; (4011d4 <osc_get_rate+0x6c>)
  4011b4:	e006      	b.n	4011c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4011b6:	4b08      	ldr	r3, [pc, #32]	; (4011d8 <osc_get_rate+0x70>)
  4011b8:	e004      	b.n	4011c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4011ba:	4b07      	ldr	r3, [pc, #28]	; (4011d8 <osc_get_rate+0x70>)
  4011bc:	e002      	b.n	4011c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4011be:	4b06      	ldr	r3, [pc, #24]	; (4011d8 <osc_get_rate+0x70>)
  4011c0:	e000      	b.n	4011c4 <osc_get_rate+0x5c>
	return 0;
  4011c2:	2300      	movs	r3, #0
}
  4011c4:	4618      	mov	r0, r3
  4011c6:	370c      	adds	r7, #12
  4011c8:	46bd      	mov	sp, r7
  4011ca:	bc80      	pop	{r7}
  4011cc:	4770      	bx	lr
  4011ce:	bf00      	nop
  4011d0:	003d0900 	.word	0x003d0900
  4011d4:	007a1200 	.word	0x007a1200
  4011d8:	00b71b00 	.word	0x00b71b00

004011dc <sysclk_get_main_hz>:
{
  4011dc:	b580      	push	{r7, lr}
  4011de:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4011e0:	2006      	movs	r0, #6
  4011e2:	4b04      	ldr	r3, [pc, #16]	; (4011f4 <sysclk_get_main_hz+0x18>)
  4011e4:	4798      	blx	r3
  4011e6:	4602      	mov	r2, r0
  4011e8:	4613      	mov	r3, r2
  4011ea:	009b      	lsls	r3, r3, #2
  4011ec:	4413      	add	r3, r2
  4011ee:	009b      	lsls	r3, r3, #2
}
  4011f0:	4618      	mov	r0, r3
  4011f2:	bd80      	pop	{r7, pc}
  4011f4:	00401169 	.word	0x00401169

004011f8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4011f8:	b580      	push	{r7, lr}
  4011fa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4011fc:	4b02      	ldr	r3, [pc, #8]	; (401208 <sysclk_get_peripheral_hz+0x10>)
  4011fe:	4798      	blx	r3
  401200:	4603      	mov	r3, r0
  401202:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401204:	4618      	mov	r0, r3
  401206:	bd80      	pop	{r7, pc}
  401208:	004011dd 	.word	0x004011dd

0040120c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40120c:	b580      	push	{r7, lr}
  40120e:	b082      	sub	sp, #8
  401210:	af00      	add	r7, sp, #0
  401212:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401214:	6878      	ldr	r0, [r7, #4]
  401216:	4b03      	ldr	r3, [pc, #12]	; (401224 <sysclk_enable_peripheral_clock+0x18>)
  401218:	4798      	blx	r3
}
  40121a:	bf00      	nop
  40121c:	3708      	adds	r7, #8
  40121e:	46bd      	mov	sp, r7
  401220:	bd80      	pop	{r7, pc}
  401222:	bf00      	nop
  401224:	004010b1 	.word	0x004010b1

00401228 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  401228:	b480      	push	{r7}
  40122a:	b08b      	sub	sp, #44	; 0x2c
  40122c:	af00      	add	r7, sp, #0
  40122e:	6078      	str	r0, [r7, #4]
  401230:	687b      	ldr	r3, [r7, #4]
  401232:	627b      	str	r3, [r7, #36]	; 0x24
  401234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401236:	623b      	str	r3, [r7, #32]
  401238:	6a3b      	ldr	r3, [r7, #32]
  40123a:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40123c:	69fb      	ldr	r3, [r7, #28]
  40123e:	095b      	lsrs	r3, r3, #5
  401240:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401242:	69bb      	ldr	r3, [r7, #24]
  401244:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401248:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40124c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  40124e:	617b      	str	r3, [r7, #20]
  401250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401252:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401254:	693b      	ldr	r3, [r7, #16]
  401256:	f003 031f 	and.w	r3, r3, #31
  40125a:	2201      	movs	r2, #1
  40125c:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401260:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401262:	697b      	ldr	r3, [r7, #20]
  401264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401268:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40126a:	68bb      	ldr	r3, [r7, #8]
  40126c:	f003 031f 	and.w	r3, r3, #31
  401270:	2101      	movs	r1, #1
  401272:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401276:	4013      	ands	r3, r2
  401278:	2b00      	cmp	r3, #0
  40127a:	d003      	beq.n	401284 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  40127c:	697b      	ldr	r3, [r7, #20]
  40127e:	68fa      	ldr	r2, [r7, #12]
  401280:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  401282:	e002      	b.n	40128a <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  401284:	697b      	ldr	r3, [r7, #20]
  401286:	68fa      	ldr	r2, [r7, #12]
  401288:	631a      	str	r2, [r3, #48]	; 0x30
  40128a:	bf00      	nop
  40128c:	372c      	adds	r7, #44	; 0x2c
  40128e:	46bd      	mov	sp, r7
  401290:	bc80      	pop	{r7}
  401292:	4770      	bx	lr

00401294 <USART0_Handler>:
volatile uint32_t received_byte_wifi = 0;
volatile uint32_t wifi_web_setup_flag = 0;
volatile unsigned int input_pos_wifi = 0;

void wifi_usart_handler(void)
{
  401294:	b580      	push	{r7, lr}
  401296:	b082      	sub	sp, #8
  401298:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(WIFI_USART);
  40129a:	480b      	ldr	r0, [pc, #44]	; (4012c8 <USART0_Handler+0x34>)
  40129c:	4b0b      	ldr	r3, [pc, #44]	; (4012cc <USART0_Handler+0x38>)
  40129e:	4798      	blx	r3
  4012a0:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF){
  4012a2:	687b      	ldr	r3, [r7, #4]
  4012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4012a8:	2b00      	cmp	r3, #0
  4012aa:	d009      	beq.n	4012c0 <USART0_Handler+0x2c>
		usart_read(WIFI_USART, &received_byte_wifi);
  4012ac:	4908      	ldr	r1, [pc, #32]	; (4012d0 <USART0_Handler+0x3c>)
  4012ae:	4806      	ldr	r0, [pc, #24]	; (4012c8 <USART0_Handler+0x34>)
  4012b0:	4b08      	ldr	r3, [pc, #32]	; (4012d4 <USART0_Handler+0x40>)
  4012b2:	4798      	blx	r3
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4012b4:	4b06      	ldr	r3, [pc, #24]	; (4012d0 <USART0_Handler+0x3c>)
  4012b6:	681b      	ldr	r3, [r3, #0]
  4012b8:	b2db      	uxtb	r3, r3
  4012ba:	4618      	mov	r0, r3
  4012bc:	4b06      	ldr	r3, [pc, #24]	; (4012d8 <USART0_Handler+0x44>)
  4012be:	4798      	blx	r3
	}
}
  4012c0:	bf00      	nop
  4012c2:	3708      	adds	r7, #8
  4012c4:	46bd      	mov	sp, r7
  4012c6:	bd80      	pop	{r7, pc}
  4012c8:	40024000 	.word	0x40024000
  4012cc:	00400379 	.word	0x00400379
  4012d0:	200004d4 	.word	0x200004d4
  4012d4:	0040043d 	.word	0x0040043d
  4012d8:	00401425 	.word	0x00401425

004012dc <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  4012dc:	b580      	push	{r7, lr}
  4012de:	b084      	sub	sp, #16
  4012e0:	af00      	add	r7, sp, #0
  4012e2:	6078      	str	r0, [r7, #4]
  4012e4:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	process_data_wifi();
  4012e6:	4b0c      	ldr	r3, [pc, #48]	; (401318 <wifi_command_response_handler+0x3c>)
  4012e8:	4798      	blx	r3
	for(int jj=0; jj<1000; jj++) input_line_wifi[jj] = 0;
  4012ea:	2300      	movs	r3, #0
  4012ec:	60fb      	str	r3, [r7, #12]
  4012ee:	e007      	b.n	401300 <wifi_command_response_handler+0x24>
  4012f0:	4a0a      	ldr	r2, [pc, #40]	; (40131c <wifi_command_response_handler+0x40>)
  4012f2:	68fb      	ldr	r3, [r7, #12]
  4012f4:	4413      	add	r3, r2
  4012f6:	2200      	movs	r2, #0
  4012f8:	701a      	strb	r2, [r3, #0]
  4012fa:	68fb      	ldr	r3, [r7, #12]
  4012fc:	3301      	adds	r3, #1
  4012fe:	60fb      	str	r3, [r7, #12]
  401300:	68fb      	ldr	r3, [r7, #12]
  401302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401306:	dbf3      	blt.n	4012f0 <wifi_command_response_handler+0x14>
	input_pos_wifi = 0;
  401308:	4b05      	ldr	r3, [pc, #20]	; (401320 <wifi_command_response_handler+0x44>)
  40130a:	2200      	movs	r2, #0
  40130c:	601a      	str	r2, [r3, #0]
}
  40130e:	bf00      	nop
  401310:	3710      	adds	r7, #16
  401312:	46bd      	mov	sp, r7
  401314:	bd80      	pop	{r7, pc}
  401316:	bf00      	nop
  401318:	00401451 	.word	0x00401451
  40131c:	200004e4 	.word	0x200004e4
  401320:	200004d8 	.word	0x200004d8

00401324 <configure_usart_wifi>:
	
	wifi_web_setup_flag = true;
}

void configure_usart_wifi(void)
{
  401324:	b5b0      	push	{r4, r5, r7, lr}
  401326:	b086      	sub	sp, #24
  401328:	af00      	add	r7, sp, #0
	
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  40132a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40132e:	2005      	movs	r0, #5
  401330:	4b1c      	ldr	r3, [pc, #112]	; (4013a4 <configure_usart_wifi+0x80>)
  401332:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401334:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401338:	2006      	movs	r0, #6
  40133a:	4b1a      	ldr	r3, [pc, #104]	; (4013a4 <configure_usart_wifi+0x80>)
  40133c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  40133e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401342:	2008      	movs	r0, #8
  401344:	4b17      	ldr	r3, [pc, #92]	; (4013a4 <configure_usart_wifi+0x80>)
  401346:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401348:	4b17      	ldr	r3, [pc, #92]	; (4013a8 <configure_usart_wifi+0x84>)
  40134a:	463c      	mov	r4, r7
  40134c:	461d      	mov	r5, r3
  40134e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401352:	e895 0003 	ldmia.w	r5, {r0, r1}
  401356:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  40135a:	4b14      	ldr	r3, [pc, #80]	; (4013ac <configure_usart_wifi+0x88>)
  40135c:	4798      	blx	r3
  40135e:	4602      	mov	r2, r0
  401360:	4b13      	ldr	r3, [pc, #76]	; (4013b0 <configure_usart_wifi+0x8c>)
  401362:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(WIFI_ID_USART);
  401364:	200e      	movs	r0, #14
  401366:	4b13      	ldr	r3, [pc, #76]	; (4013b4 <configure_usart_wifi+0x90>)
  401368:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(WIFI_USART, &usart_console_settings, ul_sysclk);
  40136a:	4b11      	ldr	r3, [pc, #68]	; (4013b0 <configure_usart_wifi+0x8c>)
  40136c:	681a      	ldr	r2, [r3, #0]
  40136e:	463b      	mov	r3, r7
  401370:	4619      	mov	r1, r3
  401372:	4811      	ldr	r0, [pc, #68]	; (4013b8 <configure_usart_wifi+0x94>)
  401374:	4b11      	ldr	r3, [pc, #68]	; (4013bc <configure_usart_wifi+0x98>)
  401376:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  401378:	f04f 31ff 	mov.w	r1, #4294967295
  40137c:	480e      	ldr	r0, [pc, #56]	; (4013b8 <configure_usart_wifi+0x94>)
  40137e:	4b10      	ldr	r3, [pc, #64]	; (4013c0 <configure_usart_wifi+0x9c>)
  401380:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  401382:	480d      	ldr	r0, [pc, #52]	; (4013b8 <configure_usart_wifi+0x94>)
  401384:	4b0f      	ldr	r3, [pc, #60]	; (4013c4 <configure_usart_wifi+0xa0>)
  401386:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  401388:	480b      	ldr	r0, [pc, #44]	; (4013b8 <configure_usart_wifi+0x94>)
  40138a:	4b0f      	ldr	r3, [pc, #60]	; (4013c8 <configure_usart_wifi+0xa4>)
  40138c:	4798      	blx	r3
	
	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  40138e:	2101      	movs	r1, #1
  401390:	4809      	ldr	r0, [pc, #36]	; (4013b8 <configure_usart_wifi+0x94>)
  401392:	4b0e      	ldr	r3, [pc, #56]	; (4013cc <configure_usart_wifi+0xa8>)
  401394:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401396:	200e      	movs	r0, #14
  401398:	4b0d      	ldr	r3, [pc, #52]	; (4013d0 <configure_usart_wifi+0xac>)
  40139a:	4798      	blx	r3
}
  40139c:	bf00      	nop
  40139e:	3718      	adds	r7, #24
  4013a0:	46bd      	mov	sp, r7
  4013a2:	bdb0      	pop	{r4, r5, r7, pc}
  4013a4:	00400c91 	.word	0x00400c91
  4013a8:	004026ac 	.word	0x004026ac
  4013ac:	004011f9 	.word	0x004011f9
  4013b0:	200004dc 	.word	0x200004dc
  4013b4:	0040120d 	.word	0x0040120d
  4013b8:	40024000 	.word	0x40024000
  4013bc:	004002a5 	.word	0x004002a5
  4013c0:	0040035f 	.word	0x0040035f
  4013c4:	004002e5 	.word	0x004002e5
  4013c8:	00400315 	.word	0x00400315
  4013cc:	00400345 	.word	0x00400345
  4013d0:	00401131 	.word	0x00401131

004013d4 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  4013d4:	b590      	push	{r4, r7, lr}
  4013d6:	b083      	sub	sp, #12
  4013d8:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  4013da:	200b      	movs	r0, #11
  4013dc:	4b0b      	ldr	r3, [pc, #44]	; (40140c <configure_wifi_comm_pin+0x38>)
  4013de:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  4013e0:	4b0b      	ldr	r3, [pc, #44]	; (401410 <configure_wifi_comm_pin+0x3c>)
  4013e2:	9300      	str	r3, [sp, #0]
  4013e4:	2370      	movs	r3, #112	; 0x70
  4013e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4013ea:	210b      	movs	r1, #11
  4013ec:	4809      	ldr	r0, [pc, #36]	; (401414 <configure_wifi_comm_pin+0x40>)
  4013ee:	4c0a      	ldr	r4, [pc, #40]	; (401418 <configure_wifi_comm_pin+0x44>)
  4013f0:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  4013f2:	200b      	movs	r0, #11
  4013f4:	4b09      	ldr	r3, [pc, #36]	; (40141c <configure_wifi_comm_pin+0x48>)
  4013f6:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  4013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4013fc:	4805      	ldr	r0, [pc, #20]	; (401414 <configure_wifi_comm_pin+0x40>)
  4013fe:	4b08      	ldr	r3, [pc, #32]	; (401420 <configure_wifi_comm_pin+0x4c>)
  401400:	4798      	blx	r3
}
  401402:	bf00      	nop
  401404:	3704      	adds	r7, #4
  401406:	46bd      	mov	sp, r7
  401408:	bd90      	pop	{r4, r7, pc}
  40140a:	bf00      	nop
  40140c:	004010b1 	.word	0x004010b1
  401410:	004012dd 	.word	0x004012dd
  401414:	400e0e00 	.word	0x400e0e00
  401418:	00400565 	.word	0x00400565
  40141c:	00401131 	.word	0x00401131
  401420:	00400c2f 	.word	0x00400c2f

00401424 <process_incoming_byte_wifi>:
	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_PIN_MSK);
	
}

void process_incoming_byte_wifi(uint8_t in_byte){
  401424:	b480      	push	{r7}
  401426:	b083      	sub	sp, #12
  401428:	af00      	add	r7, sp, #0
  40142a:	4603      	mov	r3, r0
  40142c:	71fb      	strb	r3, [r7, #7]
	input_line_wifi[input_pos_wifi++] = in_byte;
  40142e:	4b06      	ldr	r3, [pc, #24]	; (401448 <process_incoming_byte_wifi+0x24>)
  401430:	681b      	ldr	r3, [r3, #0]
  401432:	1c5a      	adds	r2, r3, #1
  401434:	4904      	ldr	r1, [pc, #16]	; (401448 <process_incoming_byte_wifi+0x24>)
  401436:	600a      	str	r2, [r1, #0]
  401438:	4904      	ldr	r1, [pc, #16]	; (40144c <process_incoming_byte_wifi+0x28>)
  40143a:	79fa      	ldrb	r2, [r7, #7]
  40143c:	54ca      	strb	r2, [r1, r3]
}
  40143e:	bf00      	nop
  401440:	370c      	adds	r7, #12
  401442:	46bd      	mov	sp, r7
  401444:	bc80      	pop	{r7}
  401446:	4770      	bx	lr
  401448:	200004d8 	.word	0x200004d8
  40144c:	200004e4 	.word	0x200004e4

00401450 <process_data_wifi>:

void process_data_wifi(){
  401450:	b580      	push	{r7, lr}
  401452:	af00      	add	r7, sp, #0
	if (strstr(input_line_wifi, "Unknown command")){
  401454:	4905      	ldr	r1, [pc, #20]	; (40146c <process_data_wifi+0x1c>)
  401456:	4806      	ldr	r0, [pc, #24]	; (401470 <process_data_wifi+0x20>)
  401458:	4b06      	ldr	r3, [pc, #24]	; (401474 <process_data_wifi+0x24>)
  40145a:	4798      	blx	r3
  40145c:	4603      	mov	r3, r0
  40145e:	2b00      	cmp	r3, #0
  401460:	d002      	beq.n	401468 <process_data_wifi+0x18>
		ioport_toggle_pin_level(LED_PIN);
  401462:	2014      	movs	r0, #20
  401464:	4b04      	ldr	r3, [pc, #16]	; (401478 <process_data_wifi+0x28>)
  401466:	4798      	blx	r3
	}
}
  401468:	bf00      	nop
  40146a:	bd80      	pop	{r7, pc}
  40146c:	004026c4 	.word	0x004026c4
  401470:	200004e4 	.word	0x200004e4
  401474:	0040218d 	.word	0x0040218d
  401478:	00401229 	.word	0x00401229

0040147c <sysclk_enable_peripheral_clock>:
{
  40147c:	b580      	push	{r7, lr}
  40147e:	b082      	sub	sp, #8
  401480:	af00      	add	r7, sp, #0
  401482:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401484:	6878      	ldr	r0, [r7, #4]
  401486:	4b03      	ldr	r3, [pc, #12]	; (401494 <sysclk_enable_peripheral_clock+0x18>)
  401488:	4798      	blx	r3
}
  40148a:	bf00      	nop
  40148c:	3708      	adds	r7, #8
  40148e:	46bd      	mov	sp, r7
  401490:	bd80      	pop	{r7, pc}
  401492:	bf00      	nop
  401494:	004010b1 	.word	0x004010b1

00401498 <ioport_init>:
{
  401498:	b580      	push	{r7, lr}
  40149a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40149c:	200b      	movs	r0, #11
  40149e:	4b03      	ldr	r3, [pc, #12]	; (4014ac <ioport_init+0x14>)
  4014a0:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  4014a2:	200c      	movs	r0, #12
  4014a4:	4b01      	ldr	r3, [pc, #4]	; (4014ac <ioport_init+0x14>)
  4014a6:	4798      	blx	r3
}
  4014a8:	bf00      	nop
  4014aa:	bd80      	pop	{r7, pc}
  4014ac:	0040147d 	.word	0x0040147d

004014b0 <ioport_set_pin_mode>:
{
  4014b0:	b480      	push	{r7}
  4014b2:	b08d      	sub	sp, #52	; 0x34
  4014b4:	af00      	add	r7, sp, #0
  4014b6:	6078      	str	r0, [r7, #4]
  4014b8:	6039      	str	r1, [r7, #0]
  4014ba:	687b      	ldr	r3, [r7, #4]
  4014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  4014be:	683b      	ldr	r3, [r7, #0]
  4014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  4014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4014c4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4014c8:	095a      	lsrs	r2, r3, #5
  4014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4014cc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4014ce:	6a3b      	ldr	r3, [r7, #32]
  4014d0:	f003 031f 	and.w	r3, r3, #31
  4014d4:	2101      	movs	r1, #1
  4014d6:	fa01 f303 	lsl.w	r3, r1, r3
  4014da:	61fa      	str	r2, [r7, #28]
  4014dc:	61bb      	str	r3, [r7, #24]
  4014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4014e0:	617b      	str	r3, [r7, #20]
  4014e2:	69fb      	ldr	r3, [r7, #28]
  4014e4:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4014e6:	693b      	ldr	r3, [r7, #16]
  4014e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4014ec:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4014f0:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4014f2:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  4014f4:	697b      	ldr	r3, [r7, #20]
  4014f6:	f003 0308 	and.w	r3, r3, #8
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	d003      	beq.n	401506 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4014fe:	68fb      	ldr	r3, [r7, #12]
  401500:	69ba      	ldr	r2, [r7, #24]
  401502:	665a      	str	r2, [r3, #100]	; 0x64
  401504:	e002      	b.n	40150c <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  401506:	68fb      	ldr	r3, [r7, #12]
  401508:	69ba      	ldr	r2, [r7, #24]
  40150a:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  40150c:	697b      	ldr	r3, [r7, #20]
  40150e:	f003 0310 	and.w	r3, r3, #16
  401512:	2b00      	cmp	r3, #0
  401514:	d004      	beq.n	401520 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  401516:	68fb      	ldr	r3, [r7, #12]
  401518:	69ba      	ldr	r2, [r7, #24]
  40151a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40151e:	e003      	b.n	401528 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  401520:	68fb      	ldr	r3, [r7, #12]
  401522:	69ba      	ldr	r2, [r7, #24]
  401524:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401528:	697b      	ldr	r3, [r7, #20]
  40152a:	f003 0320 	and.w	r3, r3, #32
  40152e:	2b00      	cmp	r3, #0
  401530:	d003      	beq.n	40153a <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401532:	68fb      	ldr	r3, [r7, #12]
  401534:	69ba      	ldr	r2, [r7, #24]
  401536:	651a      	str	r2, [r3, #80]	; 0x50
  401538:	e002      	b.n	401540 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  40153a:	68fb      	ldr	r3, [r7, #12]
  40153c:	69ba      	ldr	r2, [r7, #24]
  40153e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401540:	697b      	ldr	r3, [r7, #20]
  401542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401546:	2b00      	cmp	r3, #0
  401548:	d003      	beq.n	401552 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40154a:	68fb      	ldr	r3, [r7, #12]
  40154c:	69ba      	ldr	r2, [r7, #24]
  40154e:	621a      	str	r2, [r3, #32]
  401550:	e002      	b.n	401558 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  401552:	68fb      	ldr	r3, [r7, #12]
  401554:	69ba      	ldr	r2, [r7, #24]
  401556:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401558:	697b      	ldr	r3, [r7, #20]
  40155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40155e:	2b00      	cmp	r3, #0
  401560:	d004      	beq.n	40156c <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  401562:	68fb      	ldr	r3, [r7, #12]
  401564:	69ba      	ldr	r2, [r7, #24]
  401566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40156a:	e003      	b.n	401574 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  40156c:	68fb      	ldr	r3, [r7, #12]
  40156e:	69ba      	ldr	r2, [r7, #24]
  401570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401574:	697b      	ldr	r3, [r7, #20]
  401576:	f003 0301 	and.w	r3, r3, #1
  40157a:	2b00      	cmp	r3, #0
  40157c:	d006      	beq.n	40158c <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40157e:	68fb      	ldr	r3, [r7, #12]
  401580:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401582:	69bb      	ldr	r3, [r7, #24]
  401584:	431a      	orrs	r2, r3
  401586:	68fb      	ldr	r3, [r7, #12]
  401588:	671a      	str	r2, [r3, #112]	; 0x70
  40158a:	e006      	b.n	40159a <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  40158c:	68fb      	ldr	r3, [r7, #12]
  40158e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401590:	69bb      	ldr	r3, [r7, #24]
  401592:	43db      	mvns	r3, r3
  401594:	401a      	ands	r2, r3
  401596:	68fb      	ldr	r3, [r7, #12]
  401598:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  40159a:	697b      	ldr	r3, [r7, #20]
  40159c:	f003 0302 	and.w	r3, r3, #2
  4015a0:	2b00      	cmp	r3, #0
  4015a2:	d006      	beq.n	4015b2 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4015a4:	68fb      	ldr	r3, [r7, #12]
  4015a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4015a8:	69bb      	ldr	r3, [r7, #24]
  4015aa:	431a      	orrs	r2, r3
  4015ac:	68fb      	ldr	r3, [r7, #12]
  4015ae:	675a      	str	r2, [r3, #116]	; 0x74
}
  4015b0:	e006      	b.n	4015c0 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  4015b2:	68fb      	ldr	r3, [r7, #12]
  4015b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4015b6:	69bb      	ldr	r3, [r7, #24]
  4015b8:	43db      	mvns	r3, r3
  4015ba:	401a      	ands	r2, r3
  4015bc:	68fb      	ldr	r3, [r7, #12]
  4015be:	675a      	str	r2, [r3, #116]	; 0x74
  4015c0:	bf00      	nop
  4015c2:	3734      	adds	r7, #52	; 0x34
  4015c4:	46bd      	mov	sp, r7
  4015c6:	bc80      	pop	{r7}
  4015c8:	4770      	bx	lr

004015ca <ioport_set_pin_dir>:
{
  4015ca:	b480      	push	{r7}
  4015cc:	b08d      	sub	sp, #52	; 0x34
  4015ce:	af00      	add	r7, sp, #0
  4015d0:	6078      	str	r0, [r7, #4]
  4015d2:	460b      	mov	r3, r1
  4015d4:	70fb      	strb	r3, [r7, #3]
  4015d6:	687b      	ldr	r3, [r7, #4]
  4015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4015da:	78fb      	ldrb	r3, [r7, #3]
  4015dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4015e2:	627b      	str	r3, [r7, #36]	; 0x24
  4015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4015e6:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4015e8:	6a3b      	ldr	r3, [r7, #32]
  4015ea:	095b      	lsrs	r3, r3, #5
  4015ec:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4015ee:	69fb      	ldr	r3, [r7, #28]
  4015f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4015f4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4015f8:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4015fa:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4015fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401600:	2b01      	cmp	r3, #1
  401602:	d109      	bne.n	401618 <ioport_set_pin_dir+0x4e>
  401604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401606:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401608:	697b      	ldr	r3, [r7, #20]
  40160a:	f003 031f 	and.w	r3, r3, #31
  40160e:	2201      	movs	r2, #1
  401610:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401612:	69bb      	ldr	r3, [r7, #24]
  401614:	611a      	str	r2, [r3, #16]
  401616:	e00c      	b.n	401632 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40161c:	2b00      	cmp	r3, #0
  40161e:	d108      	bne.n	401632 <ioport_set_pin_dir+0x68>
  401620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401622:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401624:	693b      	ldr	r3, [r7, #16]
  401626:	f003 031f 	and.w	r3, r3, #31
  40162a:	2201      	movs	r2, #1
  40162c:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40162e:	69bb      	ldr	r3, [r7, #24]
  401630:	615a      	str	r2, [r3, #20]
  401632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401634:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401636:	68fb      	ldr	r3, [r7, #12]
  401638:	f003 031f 	and.w	r3, r3, #31
  40163c:	2201      	movs	r2, #1
  40163e:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401640:	69bb      	ldr	r3, [r7, #24]
  401642:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401646:	bf00      	nop
  401648:	3734      	adds	r7, #52	; 0x34
  40164a:	46bd      	mov	sp, r7
  40164c:	bc80      	pop	{r7}
  40164e:	4770      	bx	lr

00401650 <ioport_set_pin_level>:
{
  401650:	b480      	push	{r7}
  401652:	b08b      	sub	sp, #44	; 0x2c
  401654:	af00      	add	r7, sp, #0
  401656:	6078      	str	r0, [r7, #4]
  401658:	460b      	mov	r3, r1
  40165a:	70fb      	strb	r3, [r7, #3]
  40165c:	687b      	ldr	r3, [r7, #4]
  40165e:	627b      	str	r3, [r7, #36]	; 0x24
  401660:	78fb      	ldrb	r3, [r7, #3]
  401662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401668:	61fb      	str	r3, [r7, #28]
  40166a:	69fb      	ldr	r3, [r7, #28]
  40166c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40166e:	69bb      	ldr	r3, [r7, #24]
  401670:	095b      	lsrs	r3, r3, #5
  401672:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401674:	697b      	ldr	r3, [r7, #20]
  401676:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40167a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40167e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401680:	613b      	str	r3, [r7, #16]
	if (level) {
  401682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401686:	2b00      	cmp	r3, #0
  401688:	d009      	beq.n	40169e <ioport_set_pin_level+0x4e>
  40168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40168c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40168e:	68fb      	ldr	r3, [r7, #12]
  401690:	f003 031f 	and.w	r3, r3, #31
  401694:	2201      	movs	r2, #1
  401696:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401698:	693b      	ldr	r3, [r7, #16]
  40169a:	631a      	str	r2, [r3, #48]	; 0x30
}
  40169c:	e008      	b.n	4016b0 <ioport_set_pin_level+0x60>
  40169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016a0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4016a2:	68bb      	ldr	r3, [r7, #8]
  4016a4:	f003 031f 	and.w	r3, r3, #31
  4016a8:	2201      	movs	r2, #1
  4016aa:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4016ac:	693b      	ldr	r3, [r7, #16]
  4016ae:	635a      	str	r2, [r3, #52]	; 0x34
  4016b0:	bf00      	nop
  4016b2:	372c      	adds	r7, #44	; 0x2c
  4016b4:	46bd      	mov	sp, r7
  4016b6:	bc80      	pop	{r7}
  4016b8:	4770      	bx	lr
	...

004016bc <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4016bc:	b580      	push	{r7, lr}
  4016be:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	ioport_init();
  4016c0:	4b0d      	ldr	r3, [pc, #52]	; (4016f8 <board_init+0x3c>)
  4016c2:	4798      	blx	r3
	
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  4016c4:	2101      	movs	r1, #1
  4016c6:	2014      	movs	r0, #20
  4016c8:	4b0c      	ldr	r3, [pc, #48]	; (4016fc <board_init+0x40>)
  4016ca:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  4016cc:	2100      	movs	r1, #0
  4016ce:	2014      	movs	r0, #20
  4016d0:	4b0b      	ldr	r3, [pc, #44]	; (401700 <board_init+0x44>)
  4016d2:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_SETUP_BUTTON_PIN, IOPORT_DIR_INPUT);
  4016d4:	2100      	movs	r1, #0
  4016d6:	2000      	movs	r0, #0
  4016d8:	4b08      	ldr	r3, [pc, #32]	; (4016fc <board_init+0x40>)
  4016da:	4798      	blx	r3
	ioport_set_pin_mode(WIFI_SETUP_BUTTON_PIN, IOPORT_MODE_PULLUP);
  4016dc:	2108      	movs	r1, #8
  4016de:	2000      	movs	r0, #0
  4016e0:	4b08      	ldr	r3, [pc, #32]	; (401704 <board_init+0x48>)
  4016e2:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
  4016e4:	2101      	movs	r1, #1
  4016e6:	2007      	movs	r0, #7
  4016e8:	4b04      	ldr	r3, [pc, #16]	; (4016fc <board_init+0x40>)
  4016ea:	4798      	blx	r3
	ioport_set_pin_level(WIFI_CTS_PIN, false);
  4016ec:	2100      	movs	r1, #0
  4016ee:	2007      	movs	r0, #7
  4016f0:	4b03      	ldr	r3, [pc, #12]	; (401700 <board_init+0x44>)
  4016f2:	4798      	blx	r3
}
  4016f4:	bf00      	nop
  4016f6:	bd80      	pop	{r7, pc}
  4016f8:	00401499 	.word	0x00401499
  4016fc:	004015cb 	.word	0x004015cb
  401700:	00401651 	.word	0x00401651
  401704:	004014b1 	.word	0x004014b1

00401708 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401708:	b580      	push	{r7, lr}
  40170a:	b084      	sub	sp, #16
  40170c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40170e:	4b27      	ldr	r3, [pc, #156]	; (4017ac <Reset_Handler+0xa4>)
  401710:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401712:	4b27      	ldr	r3, [pc, #156]	; (4017b0 <Reset_Handler+0xa8>)
  401714:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401716:	68fa      	ldr	r2, [r7, #12]
  401718:	68bb      	ldr	r3, [r7, #8]
  40171a:	429a      	cmp	r2, r3
  40171c:	d90d      	bls.n	40173a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40171e:	e007      	b.n	401730 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401720:	68bb      	ldr	r3, [r7, #8]
  401722:	1d1a      	adds	r2, r3, #4
  401724:	60ba      	str	r2, [r7, #8]
  401726:	68fa      	ldr	r2, [r7, #12]
  401728:	1d11      	adds	r1, r2, #4
  40172a:	60f9      	str	r1, [r7, #12]
  40172c:	6812      	ldr	r2, [r2, #0]
  40172e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401730:	68bb      	ldr	r3, [r7, #8]
  401732:	4a20      	ldr	r2, [pc, #128]	; (4017b4 <Reset_Handler+0xac>)
  401734:	4293      	cmp	r3, r2
  401736:	d3f3      	bcc.n	401720 <Reset_Handler+0x18>
  401738:	e020      	b.n	40177c <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  40173a:	68fa      	ldr	r2, [r7, #12]
  40173c:	68bb      	ldr	r3, [r7, #8]
  40173e:	429a      	cmp	r2, r3
  401740:	d21c      	bcs.n	40177c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401742:	4a1c      	ldr	r2, [pc, #112]	; (4017b4 <Reset_Handler+0xac>)
  401744:	4b1a      	ldr	r3, [pc, #104]	; (4017b0 <Reset_Handler+0xa8>)
  401746:	1ad3      	subs	r3, r2, r3
  401748:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40174a:	68fa      	ldr	r2, [r7, #12]
  40174c:	687b      	ldr	r3, [r7, #4]
  40174e:	4413      	add	r3, r2
  401750:	3b04      	subs	r3, #4
  401752:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401754:	68ba      	ldr	r2, [r7, #8]
  401756:	687b      	ldr	r3, [r7, #4]
  401758:	4413      	add	r3, r2
  40175a:	3b04      	subs	r3, #4
  40175c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40175e:	e00a      	b.n	401776 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401760:	68bb      	ldr	r3, [r7, #8]
  401762:	1f1a      	subs	r2, r3, #4
  401764:	60ba      	str	r2, [r7, #8]
  401766:	68fa      	ldr	r2, [r7, #12]
  401768:	1f11      	subs	r1, r2, #4
  40176a:	60f9      	str	r1, [r7, #12]
  40176c:	6812      	ldr	r2, [r2, #0]
  40176e:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401770:	687b      	ldr	r3, [r7, #4]
  401772:	3b04      	subs	r3, #4
  401774:	607b      	str	r3, [r7, #4]
  401776:	687b      	ldr	r3, [r7, #4]
  401778:	2b00      	cmp	r3, #0
  40177a:	d1f1      	bne.n	401760 <Reset_Handler+0x58>
		}
	}
	__NOP();
  40177c:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40177e:	4b0e      	ldr	r3, [pc, #56]	; (4017b8 <Reset_Handler+0xb0>)
  401780:	60bb      	str	r3, [r7, #8]
  401782:	e004      	b.n	40178e <Reset_Handler+0x86>
		*pDest++ = 0;
  401784:	68bb      	ldr	r3, [r7, #8]
  401786:	1d1a      	adds	r2, r3, #4
  401788:	60ba      	str	r2, [r7, #8]
  40178a:	2200      	movs	r2, #0
  40178c:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40178e:	68bb      	ldr	r3, [r7, #8]
  401790:	4a0a      	ldr	r2, [pc, #40]	; (4017bc <Reset_Handler+0xb4>)
  401792:	4293      	cmp	r3, r2
  401794:	d3f6      	bcc.n	401784 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401796:	4b0a      	ldr	r3, [pc, #40]	; (4017c0 <Reset_Handler+0xb8>)
  401798:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40179a:	4a0a      	ldr	r2, [pc, #40]	; (4017c4 <Reset_Handler+0xbc>)
  40179c:	68fb      	ldr	r3, [r7, #12]
  40179e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4017a0:	4b09      	ldr	r3, [pc, #36]	; (4017c8 <Reset_Handler+0xc0>)
  4017a2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4017a4:	4b09      	ldr	r3, [pc, #36]	; (4017cc <Reset_Handler+0xc4>)
  4017a6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4017a8:	e7fe      	b.n	4017a8 <Reset_Handler+0xa0>
  4017aa:	bf00      	nop
  4017ac:	0040270c 	.word	0x0040270c
  4017b0:	20000000 	.word	0x20000000
  4017b4:	2000043c 	.word	0x2000043c
  4017b8:	2000043c 	.word	0x2000043c
  4017bc:	200008f0 	.word	0x200008f0
  4017c0:	00400000 	.word	0x00400000
  4017c4:	e000ed00 	.word	0xe000ed00
  4017c8:	00401e8d 	.word	0x00401e8d
  4017cc:	00401aa9 	.word	0x00401aa9

004017d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4017d0:	b480      	push	{r7}
  4017d2:	af00      	add	r7, sp, #0
	while (1) {
  4017d4:	e7fe      	b.n	4017d4 <Dummy_Handler+0x4>
	...

004017d8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4017d8:	b480      	push	{r7}
  4017da:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4017dc:	4b5d      	ldr	r3, [pc, #372]	; (401954 <SystemCoreClockUpdate+0x17c>)
  4017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017e0:	f003 0303 	and.w	r3, r3, #3
  4017e4:	2b03      	cmp	r3, #3
  4017e6:	f200 8096 	bhi.w	401916 <SystemCoreClockUpdate+0x13e>
  4017ea:	a201      	add	r2, pc, #4	; (adr r2, 4017f0 <SystemCoreClockUpdate+0x18>)
  4017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017f0:	00401801 	.word	0x00401801
  4017f4:	00401821 	.word	0x00401821
  4017f8:	0040186b 	.word	0x0040186b
  4017fc:	0040186b 	.word	0x0040186b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401800:	4b55      	ldr	r3, [pc, #340]	; (401958 <SystemCoreClockUpdate+0x180>)
  401802:	695b      	ldr	r3, [r3, #20]
  401804:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401808:	2b00      	cmp	r3, #0
  40180a:	d004      	beq.n	401816 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40180c:	4b53      	ldr	r3, [pc, #332]	; (40195c <SystemCoreClockUpdate+0x184>)
  40180e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401812:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401814:	e080      	b.n	401918 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401816:	4b51      	ldr	r3, [pc, #324]	; (40195c <SystemCoreClockUpdate+0x184>)
  401818:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40181c:	601a      	str	r2, [r3, #0]
		break;
  40181e:	e07b      	b.n	401918 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401820:	4b4c      	ldr	r3, [pc, #304]	; (401954 <SystemCoreClockUpdate+0x17c>)
  401822:	6a1b      	ldr	r3, [r3, #32]
  401824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401828:	2b00      	cmp	r3, #0
  40182a:	d003      	beq.n	401834 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40182c:	4b4b      	ldr	r3, [pc, #300]	; (40195c <SystemCoreClockUpdate+0x184>)
  40182e:	4a4c      	ldr	r2, [pc, #304]	; (401960 <SystemCoreClockUpdate+0x188>)
  401830:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401832:	e071      	b.n	401918 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401834:	4b49      	ldr	r3, [pc, #292]	; (40195c <SystemCoreClockUpdate+0x184>)
  401836:	4a4b      	ldr	r2, [pc, #300]	; (401964 <SystemCoreClockUpdate+0x18c>)
  401838:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40183a:	4b46      	ldr	r3, [pc, #280]	; (401954 <SystemCoreClockUpdate+0x17c>)
  40183c:	6a1b      	ldr	r3, [r3, #32]
  40183e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401842:	2b10      	cmp	r3, #16
  401844:	d008      	beq.n	401858 <SystemCoreClockUpdate+0x80>
  401846:	2b20      	cmp	r3, #32
  401848:	d00a      	beq.n	401860 <SystemCoreClockUpdate+0x88>
  40184a:	2b00      	cmp	r3, #0
  40184c:	d000      	beq.n	401850 <SystemCoreClockUpdate+0x78>
			break;
  40184e:	e00b      	b.n	401868 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401850:	4b42      	ldr	r3, [pc, #264]	; (40195c <SystemCoreClockUpdate+0x184>)
  401852:	4a44      	ldr	r2, [pc, #272]	; (401964 <SystemCoreClockUpdate+0x18c>)
  401854:	601a      	str	r2, [r3, #0]
			break;
  401856:	e007      	b.n	401868 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401858:	4b40      	ldr	r3, [pc, #256]	; (40195c <SystemCoreClockUpdate+0x184>)
  40185a:	4a43      	ldr	r2, [pc, #268]	; (401968 <SystemCoreClockUpdate+0x190>)
  40185c:	601a      	str	r2, [r3, #0]
			break;
  40185e:	e003      	b.n	401868 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401860:	4b3e      	ldr	r3, [pc, #248]	; (40195c <SystemCoreClockUpdate+0x184>)
  401862:	4a3f      	ldr	r2, [pc, #252]	; (401960 <SystemCoreClockUpdate+0x188>)
  401864:	601a      	str	r2, [r3, #0]
			break;
  401866:	bf00      	nop
		break;
  401868:	e056      	b.n	401918 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40186a:	4b3a      	ldr	r3, [pc, #232]	; (401954 <SystemCoreClockUpdate+0x17c>)
  40186c:	6a1b      	ldr	r3, [r3, #32]
  40186e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401872:	2b00      	cmp	r3, #0
  401874:	d003      	beq.n	40187e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401876:	4b39      	ldr	r3, [pc, #228]	; (40195c <SystemCoreClockUpdate+0x184>)
  401878:	4a39      	ldr	r2, [pc, #228]	; (401960 <SystemCoreClockUpdate+0x188>)
  40187a:	601a      	str	r2, [r3, #0]
  40187c:	e019      	b.n	4018b2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40187e:	4b37      	ldr	r3, [pc, #220]	; (40195c <SystemCoreClockUpdate+0x184>)
  401880:	4a38      	ldr	r2, [pc, #224]	; (401964 <SystemCoreClockUpdate+0x18c>)
  401882:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401884:	4b33      	ldr	r3, [pc, #204]	; (401954 <SystemCoreClockUpdate+0x17c>)
  401886:	6a1b      	ldr	r3, [r3, #32]
  401888:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40188c:	2b10      	cmp	r3, #16
  40188e:	d008      	beq.n	4018a2 <SystemCoreClockUpdate+0xca>
  401890:	2b20      	cmp	r3, #32
  401892:	d00a      	beq.n	4018aa <SystemCoreClockUpdate+0xd2>
  401894:	2b00      	cmp	r3, #0
  401896:	d000      	beq.n	40189a <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401898:	e00b      	b.n	4018b2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40189a:	4b30      	ldr	r3, [pc, #192]	; (40195c <SystemCoreClockUpdate+0x184>)
  40189c:	4a31      	ldr	r2, [pc, #196]	; (401964 <SystemCoreClockUpdate+0x18c>)
  40189e:	601a      	str	r2, [r3, #0]
					break;
  4018a0:	e007      	b.n	4018b2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4018a2:	4b2e      	ldr	r3, [pc, #184]	; (40195c <SystemCoreClockUpdate+0x184>)
  4018a4:	4a30      	ldr	r2, [pc, #192]	; (401968 <SystemCoreClockUpdate+0x190>)
  4018a6:	601a      	str	r2, [r3, #0]
					break;
  4018a8:	e003      	b.n	4018b2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4018aa:	4b2c      	ldr	r3, [pc, #176]	; (40195c <SystemCoreClockUpdate+0x184>)
  4018ac:	4a2c      	ldr	r2, [pc, #176]	; (401960 <SystemCoreClockUpdate+0x188>)
  4018ae:	601a      	str	r2, [r3, #0]
					break;
  4018b0:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4018b2:	4b28      	ldr	r3, [pc, #160]	; (401954 <SystemCoreClockUpdate+0x17c>)
  4018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018b6:	f003 0303 	and.w	r3, r3, #3
  4018ba:	2b02      	cmp	r3, #2
  4018bc:	d115      	bne.n	4018ea <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4018be:	4b25      	ldr	r3, [pc, #148]	; (401954 <SystemCoreClockUpdate+0x17c>)
  4018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4018c2:	0c1b      	lsrs	r3, r3, #16
  4018c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4018c8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4018ca:	4a24      	ldr	r2, [pc, #144]	; (40195c <SystemCoreClockUpdate+0x184>)
  4018cc:	6812      	ldr	r2, [r2, #0]
  4018ce:	fb02 f303 	mul.w	r3, r2, r3
  4018d2:	4a22      	ldr	r2, [pc, #136]	; (40195c <SystemCoreClockUpdate+0x184>)
  4018d4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4018d6:	4b1f      	ldr	r3, [pc, #124]	; (401954 <SystemCoreClockUpdate+0x17c>)
  4018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4018da:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4018dc:	4a1f      	ldr	r2, [pc, #124]	; (40195c <SystemCoreClockUpdate+0x184>)
  4018de:	6812      	ldr	r2, [r2, #0]
  4018e0:	fbb2 f3f3 	udiv	r3, r2, r3
  4018e4:	4a1d      	ldr	r2, [pc, #116]	; (40195c <SystemCoreClockUpdate+0x184>)
  4018e6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4018e8:	e016      	b.n	401918 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4018ea:	4b1a      	ldr	r3, [pc, #104]	; (401954 <SystemCoreClockUpdate+0x17c>)
  4018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4018ee:	0c1b      	lsrs	r3, r3, #16
  4018f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4018f4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4018f6:	4a19      	ldr	r2, [pc, #100]	; (40195c <SystemCoreClockUpdate+0x184>)
  4018f8:	6812      	ldr	r2, [r2, #0]
  4018fa:	fb02 f303 	mul.w	r3, r2, r3
  4018fe:	4a17      	ldr	r2, [pc, #92]	; (40195c <SystemCoreClockUpdate+0x184>)
  401900:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401902:	4b14      	ldr	r3, [pc, #80]	; (401954 <SystemCoreClockUpdate+0x17c>)
  401904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401906:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401908:	4a14      	ldr	r2, [pc, #80]	; (40195c <SystemCoreClockUpdate+0x184>)
  40190a:	6812      	ldr	r2, [r2, #0]
  40190c:	fbb2 f3f3 	udiv	r3, r2, r3
  401910:	4a12      	ldr	r2, [pc, #72]	; (40195c <SystemCoreClockUpdate+0x184>)
  401912:	6013      	str	r3, [r2, #0]
		break;
  401914:	e000      	b.n	401918 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401916:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401918:	4b0e      	ldr	r3, [pc, #56]	; (401954 <SystemCoreClockUpdate+0x17c>)
  40191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40191c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401920:	2b70      	cmp	r3, #112	; 0x70
  401922:	d108      	bne.n	401936 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401924:	4b0d      	ldr	r3, [pc, #52]	; (40195c <SystemCoreClockUpdate+0x184>)
  401926:	681b      	ldr	r3, [r3, #0]
  401928:	4a10      	ldr	r2, [pc, #64]	; (40196c <SystemCoreClockUpdate+0x194>)
  40192a:	fba2 2303 	umull	r2, r3, r2, r3
  40192e:	085b      	lsrs	r3, r3, #1
  401930:	4a0a      	ldr	r2, [pc, #40]	; (40195c <SystemCoreClockUpdate+0x184>)
  401932:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401934:	e00a      	b.n	40194c <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401936:	4b07      	ldr	r3, [pc, #28]	; (401954 <SystemCoreClockUpdate+0x17c>)
  401938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40193a:	091b      	lsrs	r3, r3, #4
  40193c:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  401940:	4a06      	ldr	r2, [pc, #24]	; (40195c <SystemCoreClockUpdate+0x184>)
  401942:	6812      	ldr	r2, [r2, #0]
  401944:	fa22 f303 	lsr.w	r3, r2, r3
  401948:	4a04      	ldr	r2, [pc, #16]	; (40195c <SystemCoreClockUpdate+0x184>)
  40194a:	6013      	str	r3, [r2, #0]
}
  40194c:	bf00      	nop
  40194e:	46bd      	mov	sp, r7
  401950:	bc80      	pop	{r7}
  401952:	4770      	bx	lr
  401954:	400e0400 	.word	0x400e0400
  401958:	400e1410 	.word	0x400e1410
  40195c:	2000000c 	.word	0x2000000c
  401960:	00b71b00 	.word	0x00b71b00
  401964:	003d0900 	.word	0x003d0900
  401968:	007a1200 	.word	0x007a1200
  40196c:	aaaaaaab 	.word	0xaaaaaaab

00401970 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401970:	b480      	push	{r7}
  401972:	b083      	sub	sp, #12
  401974:	af00      	add	r7, sp, #0
  401976:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401978:	687b      	ldr	r3, [r7, #4]
  40197a:	4a18      	ldr	r2, [pc, #96]	; (4019dc <system_init_flash+0x6c>)
  40197c:	4293      	cmp	r3, r2
  40197e:	d804      	bhi.n	40198a <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401980:	4b17      	ldr	r3, [pc, #92]	; (4019e0 <system_init_flash+0x70>)
  401982:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401986:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401988:	e023      	b.n	4019d2 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40198a:	687b      	ldr	r3, [r7, #4]
  40198c:	4a15      	ldr	r2, [pc, #84]	; (4019e4 <system_init_flash+0x74>)
  40198e:	4293      	cmp	r3, r2
  401990:	d803      	bhi.n	40199a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401992:	4b13      	ldr	r3, [pc, #76]	; (4019e0 <system_init_flash+0x70>)
  401994:	4a14      	ldr	r2, [pc, #80]	; (4019e8 <system_init_flash+0x78>)
  401996:	601a      	str	r2, [r3, #0]
}
  401998:	e01b      	b.n	4019d2 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40199a:	687b      	ldr	r3, [r7, #4]
  40199c:	4a13      	ldr	r2, [pc, #76]	; (4019ec <system_init_flash+0x7c>)
  40199e:	4293      	cmp	r3, r2
  4019a0:	d803      	bhi.n	4019aa <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4019a2:	4b0f      	ldr	r3, [pc, #60]	; (4019e0 <system_init_flash+0x70>)
  4019a4:	4a12      	ldr	r2, [pc, #72]	; (4019f0 <system_init_flash+0x80>)
  4019a6:	601a      	str	r2, [r3, #0]
}
  4019a8:	e013      	b.n	4019d2 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4019aa:	687b      	ldr	r3, [r7, #4]
  4019ac:	4a11      	ldr	r2, [pc, #68]	; (4019f4 <system_init_flash+0x84>)
  4019ae:	4293      	cmp	r3, r2
  4019b0:	d803      	bhi.n	4019ba <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4019b2:	4b0b      	ldr	r3, [pc, #44]	; (4019e0 <system_init_flash+0x70>)
  4019b4:	4a10      	ldr	r2, [pc, #64]	; (4019f8 <system_init_flash+0x88>)
  4019b6:	601a      	str	r2, [r3, #0]
}
  4019b8:	e00b      	b.n	4019d2 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4019ba:	687b      	ldr	r3, [r7, #4]
  4019bc:	4a0f      	ldr	r2, [pc, #60]	; (4019fc <system_init_flash+0x8c>)
  4019be:	4293      	cmp	r3, r2
  4019c0:	d804      	bhi.n	4019cc <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019c2:	4b07      	ldr	r3, [pc, #28]	; (4019e0 <system_init_flash+0x70>)
  4019c4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4019c8:	601a      	str	r2, [r3, #0]
}
  4019ca:	e002      	b.n	4019d2 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4019cc:	4b04      	ldr	r3, [pc, #16]	; (4019e0 <system_init_flash+0x70>)
  4019ce:	4a0c      	ldr	r2, [pc, #48]	; (401a00 <system_init_flash+0x90>)
  4019d0:	601a      	str	r2, [r3, #0]
}
  4019d2:	bf00      	nop
  4019d4:	370c      	adds	r7, #12
  4019d6:	46bd      	mov	sp, r7
  4019d8:	bc80      	pop	{r7}
  4019da:	4770      	bx	lr
  4019dc:	01312cff 	.word	0x01312cff
  4019e0:	400e0a00 	.word	0x400e0a00
  4019e4:	026259ff 	.word	0x026259ff
  4019e8:	04000100 	.word	0x04000100
  4019ec:	039386ff 	.word	0x039386ff
  4019f0:	04000200 	.word	0x04000200
  4019f4:	04c4b3ff 	.word	0x04c4b3ff
  4019f8:	04000300 	.word	0x04000300
  4019fc:	05f5e0ff 	.word	0x05f5e0ff
  401a00:	04000500 	.word	0x04000500

00401a04 <osc_get_rate>:
{
  401a04:	b480      	push	{r7}
  401a06:	b083      	sub	sp, #12
  401a08:	af00      	add	r7, sp, #0
  401a0a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	2b07      	cmp	r3, #7
  401a10:	d825      	bhi.n	401a5e <osc_get_rate+0x5a>
  401a12:	a201      	add	r2, pc, #4	; (adr r2, 401a18 <osc_get_rate+0x14>)
  401a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a18:	00401a39 	.word	0x00401a39
  401a1c:	00401a3f 	.word	0x00401a3f
  401a20:	00401a45 	.word	0x00401a45
  401a24:	00401a4b 	.word	0x00401a4b
  401a28:	00401a4f 	.word	0x00401a4f
  401a2c:	00401a53 	.word	0x00401a53
  401a30:	00401a57 	.word	0x00401a57
  401a34:	00401a5b 	.word	0x00401a5b
		return OSC_SLCK_32K_RC_HZ;
  401a38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a3c:	e010      	b.n	401a60 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a42:	e00d      	b.n	401a60 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a48:	e00a      	b.n	401a60 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401a4a:	4b08      	ldr	r3, [pc, #32]	; (401a6c <osc_get_rate+0x68>)
  401a4c:	e008      	b.n	401a60 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401a4e:	4b08      	ldr	r3, [pc, #32]	; (401a70 <osc_get_rate+0x6c>)
  401a50:	e006      	b.n	401a60 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401a52:	4b08      	ldr	r3, [pc, #32]	; (401a74 <osc_get_rate+0x70>)
  401a54:	e004      	b.n	401a60 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401a56:	4b07      	ldr	r3, [pc, #28]	; (401a74 <osc_get_rate+0x70>)
  401a58:	e002      	b.n	401a60 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401a5a:	4b06      	ldr	r3, [pc, #24]	; (401a74 <osc_get_rate+0x70>)
  401a5c:	e000      	b.n	401a60 <osc_get_rate+0x5c>
	return 0;
  401a5e:	2300      	movs	r3, #0
}
  401a60:	4618      	mov	r0, r3
  401a62:	370c      	adds	r7, #12
  401a64:	46bd      	mov	sp, r7
  401a66:	bc80      	pop	{r7}
  401a68:	4770      	bx	lr
  401a6a:	bf00      	nop
  401a6c:	003d0900 	.word	0x003d0900
  401a70:	007a1200 	.word	0x007a1200
  401a74:	00b71b00 	.word	0x00b71b00

00401a78 <sysclk_get_main_hz>:
{
  401a78:	b580      	push	{r7, lr}
  401a7a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401a7c:	2006      	movs	r0, #6
  401a7e:	4b04      	ldr	r3, [pc, #16]	; (401a90 <sysclk_get_main_hz+0x18>)
  401a80:	4798      	blx	r3
  401a82:	4602      	mov	r2, r0
  401a84:	4613      	mov	r3, r2
  401a86:	009b      	lsls	r3, r3, #2
  401a88:	4413      	add	r3, r2
  401a8a:	009b      	lsls	r3, r3, #2
}
  401a8c:	4618      	mov	r0, r3
  401a8e:	bd80      	pop	{r7, pc}
  401a90:	00401a05 	.word	0x00401a05

00401a94 <sysclk_get_cpu_hz>:
{
  401a94:	b580      	push	{r7, lr}
  401a96:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401a98:	4b02      	ldr	r3, [pc, #8]	; (401aa4 <sysclk_get_cpu_hz+0x10>)
  401a9a:	4798      	blx	r3
  401a9c:	4603      	mov	r3, r0
  401a9e:	085b      	lsrs	r3, r3, #1
}
  401aa0:	4618      	mov	r0, r3
  401aa2:	bd80      	pop	{r7, pc}
  401aa4:	00401a79 	.word	0x00401a79

00401aa8 <main>:
#include "camera.h"
#include "wifi.h"
//#include "timer_interface.h"

int main (void)
{
  401aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401aac:	b083      	sub	sp, #12
  401aae:	af00      	add	r7, sp, #0
	// Initialization
	sysclk_init();
  401ab0:	4b26      	ldr	r3, [pc, #152]	; (401b4c <main+0xa4>)
  401ab2:	4798      	blx	r3
	wdt_disable(WDT);
  401ab4:	4826      	ldr	r0, [pc, #152]	; (401b50 <main+0xa8>)
  401ab6:	4b27      	ldr	r3, [pc, #156]	; (401b54 <main+0xac>)
  401ab8:	4798      	blx	r3
	board_init();
  401aba:	4b27      	ldr	r3, [pc, #156]	; (401b58 <main+0xb0>)
  401abc:	4798      	blx	r3
	
	// Configure peripheral pins
	//configure_tc();
	configure_usart_wifi();
  401abe:	4b27      	ldr	r3, [pc, #156]	; (401b5c <main+0xb4>)
  401ac0:	4798      	blx	r3
	configure_wifi_comm_pin();
  401ac2:	4b27      	ldr	r3, [pc, #156]	; (401b60 <main+0xb8>)
  401ac4:	4798      	blx	r3
	//char stringname[20] = "Hello\r\n";
	while (1){
		delay_ms(500);
  401ac6:	4b27      	ldr	r3, [pc, #156]	; (401b64 <main+0xbc>)
  401ac8:	4798      	blx	r3
  401aca:	4603      	mov	r3, r0
  401acc:	4619      	mov	r1, r3
  401ace:	f04f 0200 	mov.w	r2, #0
  401ad2:	460b      	mov	r3, r1
  401ad4:	4614      	mov	r4, r2
  401ad6:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  401ada:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  401ade:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  401ae2:	4653      	mov	r3, sl
  401ae4:	465c      	mov	r4, fp
  401ae6:	1a5b      	subs	r3, r3, r1
  401ae8:	eb64 0402 	sbc.w	r4, r4, r2
  401aec:	ea4f 0984 	mov.w	r9, r4, lsl #2
  401af0:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  401af4:	ea4f 0883 	mov.w	r8, r3, lsl #2
  401af8:	4643      	mov	r3, r8
  401afa:	464c      	mov	r4, r9
  401afc:	185b      	adds	r3, r3, r1
  401afe:	eb44 0402 	adc.w	r4, r4, r2
  401b02:	00a2      	lsls	r2, r4, #2
  401b04:	607a      	str	r2, [r7, #4]
  401b06:	687a      	ldr	r2, [r7, #4]
  401b08:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
  401b0c:	607a      	str	r2, [r7, #4]
  401b0e:	009b      	lsls	r3, r3, #2
  401b10:	603b      	str	r3, [r7, #0]
  401b12:	e9d7 3400 	ldrd	r3, r4, [r7]
  401b16:	4619      	mov	r1, r3
  401b18:	4622      	mov	r2, r4
  401b1a:	f243 63af 	movw	r3, #13999	; 0x36af
  401b1e:	f04f 0400 	mov.w	r4, #0
  401b22:	18cd      	adds	r5, r1, r3
  401b24:	eb42 0604 	adc.w	r6, r2, r4
  401b28:	4628      	mov	r0, r5
  401b2a:	4631      	mov	r1, r6
  401b2c:	4c0e      	ldr	r4, [pc, #56]	; (401b68 <main+0xc0>)
  401b2e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401b32:	f04f 0300 	mov.w	r3, #0
  401b36:	47a0      	blx	r4
  401b38:	4603      	mov	r3, r0
  401b3a:	460c      	mov	r4, r1
  401b3c:	4618      	mov	r0, r3
  401b3e:	4b0b      	ldr	r3, [pc, #44]	; (401b6c <main+0xc4>)
  401b40:	4798      	blx	r3
		//write_wifi_command(stringname,1);
		usart_write_line(WIFI_USART, "Hello\r\n");
  401b42:	490b      	ldr	r1, [pc, #44]	; (401b70 <main+0xc8>)
  401b44:	480b      	ldr	r0, [pc, #44]	; (401b74 <main+0xcc>)
  401b46:	4b0c      	ldr	r3, [pc, #48]	; (401b78 <main+0xd0>)
  401b48:	4798      	blx	r3
		delay_ms(500);
  401b4a:	e7bc      	b.n	401ac6 <main+0x1e>
  401b4c:	00400939 	.word	0x00400939
  401b50:	400e1450 	.word	0x400e1450
  401b54:	00400635 	.word	0x00400635
  401b58:	004016bd 	.word	0x004016bd
  401b5c:	00401325 	.word	0x00401325
  401b60:	004013d5 	.word	0x004013d5
  401b64:	00401a95 	.word	0x00401a95
  401b68:	00401b7d 	.word	0x00401b7d
  401b6c:	20000001 	.word	0x20000001
  401b70:	004026d4 	.word	0x004026d4
  401b74:	40024000 	.word	0x40024000
  401b78:	0040040d 	.word	0x0040040d

00401b7c <__aeabi_uldivmod>:
  401b7c:	b953      	cbnz	r3, 401b94 <__aeabi_uldivmod+0x18>
  401b7e:	b94a      	cbnz	r2, 401b94 <__aeabi_uldivmod+0x18>
  401b80:	2900      	cmp	r1, #0
  401b82:	bf08      	it	eq
  401b84:	2800      	cmpeq	r0, #0
  401b86:	bf1c      	itt	ne
  401b88:	f04f 31ff 	movne.w	r1, #4294967295
  401b8c:	f04f 30ff 	movne.w	r0, #4294967295
  401b90:	f000 b97a 	b.w	401e88 <__aeabi_idiv0>
  401b94:	f1ad 0c08 	sub.w	ip, sp, #8
  401b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401b9c:	f000 f806 	bl	401bac <__udivmoddi4>
  401ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
  401ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401ba8:	b004      	add	sp, #16
  401baa:	4770      	bx	lr

00401bac <__udivmoddi4>:
  401bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bb0:	468c      	mov	ip, r1
  401bb2:	460d      	mov	r5, r1
  401bb4:	4604      	mov	r4, r0
  401bb6:	9e08      	ldr	r6, [sp, #32]
  401bb8:	2b00      	cmp	r3, #0
  401bba:	d151      	bne.n	401c60 <__udivmoddi4+0xb4>
  401bbc:	428a      	cmp	r2, r1
  401bbe:	4617      	mov	r7, r2
  401bc0:	d96d      	bls.n	401c9e <__udivmoddi4+0xf2>
  401bc2:	fab2 fe82 	clz	lr, r2
  401bc6:	f1be 0f00 	cmp.w	lr, #0
  401bca:	d00b      	beq.n	401be4 <__udivmoddi4+0x38>
  401bcc:	f1ce 0c20 	rsb	ip, lr, #32
  401bd0:	fa01 f50e 	lsl.w	r5, r1, lr
  401bd4:	fa20 fc0c 	lsr.w	ip, r0, ip
  401bd8:	fa02 f70e 	lsl.w	r7, r2, lr
  401bdc:	ea4c 0c05 	orr.w	ip, ip, r5
  401be0:	fa00 f40e 	lsl.w	r4, r0, lr
  401be4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401be8:	0c25      	lsrs	r5, r4, #16
  401bea:	fbbc f8fa 	udiv	r8, ip, sl
  401bee:	fa1f f987 	uxth.w	r9, r7
  401bf2:	fb0a cc18 	mls	ip, sl, r8, ip
  401bf6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401bfa:	fb08 f309 	mul.w	r3, r8, r9
  401bfe:	42ab      	cmp	r3, r5
  401c00:	d90a      	bls.n	401c18 <__udivmoddi4+0x6c>
  401c02:	19ed      	adds	r5, r5, r7
  401c04:	f108 32ff 	add.w	r2, r8, #4294967295
  401c08:	f080 8123 	bcs.w	401e52 <__udivmoddi4+0x2a6>
  401c0c:	42ab      	cmp	r3, r5
  401c0e:	f240 8120 	bls.w	401e52 <__udivmoddi4+0x2a6>
  401c12:	f1a8 0802 	sub.w	r8, r8, #2
  401c16:	443d      	add	r5, r7
  401c18:	1aed      	subs	r5, r5, r3
  401c1a:	b2a4      	uxth	r4, r4
  401c1c:	fbb5 f0fa 	udiv	r0, r5, sl
  401c20:	fb0a 5510 	mls	r5, sl, r0, r5
  401c24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401c28:	fb00 f909 	mul.w	r9, r0, r9
  401c2c:	45a1      	cmp	r9, r4
  401c2e:	d909      	bls.n	401c44 <__udivmoddi4+0x98>
  401c30:	19e4      	adds	r4, r4, r7
  401c32:	f100 33ff 	add.w	r3, r0, #4294967295
  401c36:	f080 810a 	bcs.w	401e4e <__udivmoddi4+0x2a2>
  401c3a:	45a1      	cmp	r9, r4
  401c3c:	f240 8107 	bls.w	401e4e <__udivmoddi4+0x2a2>
  401c40:	3802      	subs	r0, #2
  401c42:	443c      	add	r4, r7
  401c44:	eba4 0409 	sub.w	r4, r4, r9
  401c48:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401c4c:	2100      	movs	r1, #0
  401c4e:	2e00      	cmp	r6, #0
  401c50:	d061      	beq.n	401d16 <__udivmoddi4+0x16a>
  401c52:	fa24 f40e 	lsr.w	r4, r4, lr
  401c56:	2300      	movs	r3, #0
  401c58:	6034      	str	r4, [r6, #0]
  401c5a:	6073      	str	r3, [r6, #4]
  401c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c60:	428b      	cmp	r3, r1
  401c62:	d907      	bls.n	401c74 <__udivmoddi4+0xc8>
  401c64:	2e00      	cmp	r6, #0
  401c66:	d054      	beq.n	401d12 <__udivmoddi4+0x166>
  401c68:	2100      	movs	r1, #0
  401c6a:	e886 0021 	stmia.w	r6, {r0, r5}
  401c6e:	4608      	mov	r0, r1
  401c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c74:	fab3 f183 	clz	r1, r3
  401c78:	2900      	cmp	r1, #0
  401c7a:	f040 808e 	bne.w	401d9a <__udivmoddi4+0x1ee>
  401c7e:	42ab      	cmp	r3, r5
  401c80:	d302      	bcc.n	401c88 <__udivmoddi4+0xdc>
  401c82:	4282      	cmp	r2, r0
  401c84:	f200 80fa 	bhi.w	401e7c <__udivmoddi4+0x2d0>
  401c88:	1a84      	subs	r4, r0, r2
  401c8a:	eb65 0503 	sbc.w	r5, r5, r3
  401c8e:	2001      	movs	r0, #1
  401c90:	46ac      	mov	ip, r5
  401c92:	2e00      	cmp	r6, #0
  401c94:	d03f      	beq.n	401d16 <__udivmoddi4+0x16a>
  401c96:	e886 1010 	stmia.w	r6, {r4, ip}
  401c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c9e:	b912      	cbnz	r2, 401ca6 <__udivmoddi4+0xfa>
  401ca0:	2701      	movs	r7, #1
  401ca2:	fbb7 f7f2 	udiv	r7, r7, r2
  401ca6:	fab7 fe87 	clz	lr, r7
  401caa:	f1be 0f00 	cmp.w	lr, #0
  401cae:	d134      	bne.n	401d1a <__udivmoddi4+0x16e>
  401cb0:	1beb      	subs	r3, r5, r7
  401cb2:	0c3a      	lsrs	r2, r7, #16
  401cb4:	fa1f fc87 	uxth.w	ip, r7
  401cb8:	2101      	movs	r1, #1
  401cba:	fbb3 f8f2 	udiv	r8, r3, r2
  401cbe:	0c25      	lsrs	r5, r4, #16
  401cc0:	fb02 3318 	mls	r3, r2, r8, r3
  401cc4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401cc8:	fb0c f308 	mul.w	r3, ip, r8
  401ccc:	42ab      	cmp	r3, r5
  401cce:	d907      	bls.n	401ce0 <__udivmoddi4+0x134>
  401cd0:	19ed      	adds	r5, r5, r7
  401cd2:	f108 30ff 	add.w	r0, r8, #4294967295
  401cd6:	d202      	bcs.n	401cde <__udivmoddi4+0x132>
  401cd8:	42ab      	cmp	r3, r5
  401cda:	f200 80d1 	bhi.w	401e80 <__udivmoddi4+0x2d4>
  401cde:	4680      	mov	r8, r0
  401ce0:	1aed      	subs	r5, r5, r3
  401ce2:	b2a3      	uxth	r3, r4
  401ce4:	fbb5 f0f2 	udiv	r0, r5, r2
  401ce8:	fb02 5510 	mls	r5, r2, r0, r5
  401cec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401cf0:	fb0c fc00 	mul.w	ip, ip, r0
  401cf4:	45a4      	cmp	ip, r4
  401cf6:	d907      	bls.n	401d08 <__udivmoddi4+0x15c>
  401cf8:	19e4      	adds	r4, r4, r7
  401cfa:	f100 33ff 	add.w	r3, r0, #4294967295
  401cfe:	d202      	bcs.n	401d06 <__udivmoddi4+0x15a>
  401d00:	45a4      	cmp	ip, r4
  401d02:	f200 80b8 	bhi.w	401e76 <__udivmoddi4+0x2ca>
  401d06:	4618      	mov	r0, r3
  401d08:	eba4 040c 	sub.w	r4, r4, ip
  401d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401d10:	e79d      	b.n	401c4e <__udivmoddi4+0xa2>
  401d12:	4631      	mov	r1, r6
  401d14:	4630      	mov	r0, r6
  401d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d1a:	f1ce 0420 	rsb	r4, lr, #32
  401d1e:	fa05 f30e 	lsl.w	r3, r5, lr
  401d22:	fa07 f70e 	lsl.w	r7, r7, lr
  401d26:	fa20 f804 	lsr.w	r8, r0, r4
  401d2a:	0c3a      	lsrs	r2, r7, #16
  401d2c:	fa25 f404 	lsr.w	r4, r5, r4
  401d30:	ea48 0803 	orr.w	r8, r8, r3
  401d34:	fbb4 f1f2 	udiv	r1, r4, r2
  401d38:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401d3c:	fb02 4411 	mls	r4, r2, r1, r4
  401d40:	fa1f fc87 	uxth.w	ip, r7
  401d44:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401d48:	fb01 f30c 	mul.w	r3, r1, ip
  401d4c:	42ab      	cmp	r3, r5
  401d4e:	fa00 f40e 	lsl.w	r4, r0, lr
  401d52:	d909      	bls.n	401d68 <__udivmoddi4+0x1bc>
  401d54:	19ed      	adds	r5, r5, r7
  401d56:	f101 30ff 	add.w	r0, r1, #4294967295
  401d5a:	f080 808a 	bcs.w	401e72 <__udivmoddi4+0x2c6>
  401d5e:	42ab      	cmp	r3, r5
  401d60:	f240 8087 	bls.w	401e72 <__udivmoddi4+0x2c6>
  401d64:	3902      	subs	r1, #2
  401d66:	443d      	add	r5, r7
  401d68:	1aeb      	subs	r3, r5, r3
  401d6a:	fa1f f588 	uxth.w	r5, r8
  401d6e:	fbb3 f0f2 	udiv	r0, r3, r2
  401d72:	fb02 3310 	mls	r3, r2, r0, r3
  401d76:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401d7a:	fb00 f30c 	mul.w	r3, r0, ip
  401d7e:	42ab      	cmp	r3, r5
  401d80:	d907      	bls.n	401d92 <__udivmoddi4+0x1e6>
  401d82:	19ed      	adds	r5, r5, r7
  401d84:	f100 38ff 	add.w	r8, r0, #4294967295
  401d88:	d26f      	bcs.n	401e6a <__udivmoddi4+0x2be>
  401d8a:	42ab      	cmp	r3, r5
  401d8c:	d96d      	bls.n	401e6a <__udivmoddi4+0x2be>
  401d8e:	3802      	subs	r0, #2
  401d90:	443d      	add	r5, r7
  401d92:	1aeb      	subs	r3, r5, r3
  401d94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401d98:	e78f      	b.n	401cba <__udivmoddi4+0x10e>
  401d9a:	f1c1 0720 	rsb	r7, r1, #32
  401d9e:	fa22 f807 	lsr.w	r8, r2, r7
  401da2:	408b      	lsls	r3, r1
  401da4:	fa05 f401 	lsl.w	r4, r5, r1
  401da8:	ea48 0303 	orr.w	r3, r8, r3
  401dac:	fa20 fe07 	lsr.w	lr, r0, r7
  401db0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401db4:	40fd      	lsrs	r5, r7
  401db6:	ea4e 0e04 	orr.w	lr, lr, r4
  401dba:	fbb5 f9fc 	udiv	r9, r5, ip
  401dbe:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401dc2:	fb0c 5519 	mls	r5, ip, r9, r5
  401dc6:	fa1f f883 	uxth.w	r8, r3
  401dca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401dce:	fb09 f408 	mul.w	r4, r9, r8
  401dd2:	42ac      	cmp	r4, r5
  401dd4:	fa02 f201 	lsl.w	r2, r2, r1
  401dd8:	fa00 fa01 	lsl.w	sl, r0, r1
  401ddc:	d908      	bls.n	401df0 <__udivmoddi4+0x244>
  401dde:	18ed      	adds	r5, r5, r3
  401de0:	f109 30ff 	add.w	r0, r9, #4294967295
  401de4:	d243      	bcs.n	401e6e <__udivmoddi4+0x2c2>
  401de6:	42ac      	cmp	r4, r5
  401de8:	d941      	bls.n	401e6e <__udivmoddi4+0x2c2>
  401dea:	f1a9 0902 	sub.w	r9, r9, #2
  401dee:	441d      	add	r5, r3
  401df0:	1b2d      	subs	r5, r5, r4
  401df2:	fa1f fe8e 	uxth.w	lr, lr
  401df6:	fbb5 f0fc 	udiv	r0, r5, ip
  401dfa:	fb0c 5510 	mls	r5, ip, r0, r5
  401dfe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401e02:	fb00 f808 	mul.w	r8, r0, r8
  401e06:	45a0      	cmp	r8, r4
  401e08:	d907      	bls.n	401e1a <__udivmoddi4+0x26e>
  401e0a:	18e4      	adds	r4, r4, r3
  401e0c:	f100 35ff 	add.w	r5, r0, #4294967295
  401e10:	d229      	bcs.n	401e66 <__udivmoddi4+0x2ba>
  401e12:	45a0      	cmp	r8, r4
  401e14:	d927      	bls.n	401e66 <__udivmoddi4+0x2ba>
  401e16:	3802      	subs	r0, #2
  401e18:	441c      	add	r4, r3
  401e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401e1e:	eba4 0408 	sub.w	r4, r4, r8
  401e22:	fba0 8902 	umull	r8, r9, r0, r2
  401e26:	454c      	cmp	r4, r9
  401e28:	46c6      	mov	lr, r8
  401e2a:	464d      	mov	r5, r9
  401e2c:	d315      	bcc.n	401e5a <__udivmoddi4+0x2ae>
  401e2e:	d012      	beq.n	401e56 <__udivmoddi4+0x2aa>
  401e30:	b156      	cbz	r6, 401e48 <__udivmoddi4+0x29c>
  401e32:	ebba 030e 	subs.w	r3, sl, lr
  401e36:	eb64 0405 	sbc.w	r4, r4, r5
  401e3a:	fa04 f707 	lsl.w	r7, r4, r7
  401e3e:	40cb      	lsrs	r3, r1
  401e40:	431f      	orrs	r7, r3
  401e42:	40cc      	lsrs	r4, r1
  401e44:	6037      	str	r7, [r6, #0]
  401e46:	6074      	str	r4, [r6, #4]
  401e48:	2100      	movs	r1, #0
  401e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e4e:	4618      	mov	r0, r3
  401e50:	e6f8      	b.n	401c44 <__udivmoddi4+0x98>
  401e52:	4690      	mov	r8, r2
  401e54:	e6e0      	b.n	401c18 <__udivmoddi4+0x6c>
  401e56:	45c2      	cmp	sl, r8
  401e58:	d2ea      	bcs.n	401e30 <__udivmoddi4+0x284>
  401e5a:	ebb8 0e02 	subs.w	lr, r8, r2
  401e5e:	eb69 0503 	sbc.w	r5, r9, r3
  401e62:	3801      	subs	r0, #1
  401e64:	e7e4      	b.n	401e30 <__udivmoddi4+0x284>
  401e66:	4628      	mov	r0, r5
  401e68:	e7d7      	b.n	401e1a <__udivmoddi4+0x26e>
  401e6a:	4640      	mov	r0, r8
  401e6c:	e791      	b.n	401d92 <__udivmoddi4+0x1e6>
  401e6e:	4681      	mov	r9, r0
  401e70:	e7be      	b.n	401df0 <__udivmoddi4+0x244>
  401e72:	4601      	mov	r1, r0
  401e74:	e778      	b.n	401d68 <__udivmoddi4+0x1bc>
  401e76:	3802      	subs	r0, #2
  401e78:	443c      	add	r4, r7
  401e7a:	e745      	b.n	401d08 <__udivmoddi4+0x15c>
  401e7c:	4608      	mov	r0, r1
  401e7e:	e708      	b.n	401c92 <__udivmoddi4+0xe6>
  401e80:	f1a8 0802 	sub.w	r8, r8, #2
  401e84:	443d      	add	r5, r7
  401e86:	e72b      	b.n	401ce0 <__udivmoddi4+0x134>

00401e88 <__aeabi_idiv0>:
  401e88:	4770      	bx	lr
  401e8a:	bf00      	nop

00401e8c <__libc_init_array>:
  401e8c:	b570      	push	{r4, r5, r6, lr}
  401e8e:	4e0f      	ldr	r6, [pc, #60]	; (401ecc <__libc_init_array+0x40>)
  401e90:	4d0f      	ldr	r5, [pc, #60]	; (401ed0 <__libc_init_array+0x44>)
  401e92:	1b76      	subs	r6, r6, r5
  401e94:	10b6      	asrs	r6, r6, #2
  401e96:	bf18      	it	ne
  401e98:	2400      	movne	r4, #0
  401e9a:	d005      	beq.n	401ea8 <__libc_init_array+0x1c>
  401e9c:	3401      	adds	r4, #1
  401e9e:	f855 3b04 	ldr.w	r3, [r5], #4
  401ea2:	4798      	blx	r3
  401ea4:	42a6      	cmp	r6, r4
  401ea6:	d1f9      	bne.n	401e9c <__libc_init_array+0x10>
  401ea8:	4e0a      	ldr	r6, [pc, #40]	; (401ed4 <__libc_init_array+0x48>)
  401eaa:	4d0b      	ldr	r5, [pc, #44]	; (401ed8 <__libc_init_array+0x4c>)
  401eac:	1b76      	subs	r6, r6, r5
  401eae:	f000 fc17 	bl	4026e0 <_init>
  401eb2:	10b6      	asrs	r6, r6, #2
  401eb4:	bf18      	it	ne
  401eb6:	2400      	movne	r4, #0
  401eb8:	d006      	beq.n	401ec8 <__libc_init_array+0x3c>
  401eba:	3401      	adds	r4, #1
  401ebc:	f855 3b04 	ldr.w	r3, [r5], #4
  401ec0:	4798      	blx	r3
  401ec2:	42a6      	cmp	r6, r4
  401ec4:	d1f9      	bne.n	401eba <__libc_init_array+0x2e>
  401ec6:	bd70      	pop	{r4, r5, r6, pc}
  401ec8:	bd70      	pop	{r4, r5, r6, pc}
  401eca:	bf00      	nop
  401ecc:	004026ec 	.word	0x004026ec
  401ed0:	004026ec 	.word	0x004026ec
  401ed4:	004026f4 	.word	0x004026f4
  401ed8:	004026ec 	.word	0x004026ec

00401edc <critical_factorization>:
  401edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ee0:	f04f 0e01 	mov.w	lr, #1
  401ee4:	4674      	mov	r4, lr
  401ee6:	2500      	movs	r5, #0
  401ee8:	f04f 36ff 	mov.w	r6, #4294967295
  401eec:	192b      	adds	r3, r5, r4
  401eee:	428b      	cmp	r3, r1
  401ef0:	eb00 0706 	add.w	r7, r0, r6
  401ef4:	d20d      	bcs.n	401f12 <critical_factorization+0x36>
  401ef6:	5d3f      	ldrb	r7, [r7, r4]
  401ef8:	f810 c003 	ldrb.w	ip, [r0, r3]
  401efc:	45bc      	cmp	ip, r7
  401efe:	d22d      	bcs.n	401f5c <critical_factorization+0x80>
  401f00:	461d      	mov	r5, r3
  401f02:	2401      	movs	r4, #1
  401f04:	eba3 0e06 	sub.w	lr, r3, r6
  401f08:	192b      	adds	r3, r5, r4
  401f0a:	428b      	cmp	r3, r1
  401f0c:	eb00 0706 	add.w	r7, r0, r6
  401f10:	d3f1      	bcc.n	401ef6 <critical_factorization+0x1a>
  401f12:	f04f 0801 	mov.w	r8, #1
  401f16:	f8c2 e000 	str.w	lr, [r2]
  401f1a:	4644      	mov	r4, r8
  401f1c:	2500      	movs	r5, #0
  401f1e:	f04f 37ff 	mov.w	r7, #4294967295
  401f22:	192b      	adds	r3, r5, r4
  401f24:	4299      	cmp	r1, r3
  401f26:	eb00 0e07 	add.w	lr, r0, r7
  401f2a:	d90e      	bls.n	401f4a <critical_factorization+0x6e>
  401f2c:	f81e e004 	ldrb.w	lr, [lr, r4]
  401f30:	f810 c003 	ldrb.w	ip, [r0, r3]
  401f34:	45f4      	cmp	ip, lr
  401f36:	d918      	bls.n	401f6a <critical_factorization+0x8e>
  401f38:	461d      	mov	r5, r3
  401f3a:	2401      	movs	r4, #1
  401f3c:	eba3 0807 	sub.w	r8, r3, r7
  401f40:	192b      	adds	r3, r5, r4
  401f42:	4299      	cmp	r1, r3
  401f44:	eb00 0e07 	add.w	lr, r0, r7
  401f48:	d8f0      	bhi.n	401f2c <critical_factorization+0x50>
  401f4a:	3701      	adds	r7, #1
  401f4c:	1c70      	adds	r0, r6, #1
  401f4e:	4287      	cmp	r7, r0
  401f50:	bf24      	itt	cs
  401f52:	f8c2 8000 	strcs.w	r8, [r2]
  401f56:	4638      	movcs	r0, r7
  401f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f5c:	d00c      	beq.n	401f78 <critical_factorization+0x9c>
  401f5e:	f04f 0e01 	mov.w	lr, #1
  401f62:	462e      	mov	r6, r5
  401f64:	4674      	mov	r4, lr
  401f66:	4475      	add	r5, lr
  401f68:	e7c0      	b.n	401eec <critical_factorization+0x10>
  401f6a:	d00b      	beq.n	401f84 <critical_factorization+0xa8>
  401f6c:	f04f 0801 	mov.w	r8, #1
  401f70:	462f      	mov	r7, r5
  401f72:	4644      	mov	r4, r8
  401f74:	4445      	add	r5, r8
  401f76:	e7d4      	b.n	401f22 <critical_factorization+0x46>
  401f78:	4574      	cmp	r4, lr
  401f7a:	bf12      	itee	ne
  401f7c:	3401      	addne	r4, #1
  401f7e:	461d      	moveq	r5, r3
  401f80:	2401      	moveq	r4, #1
  401f82:	e7b3      	b.n	401eec <critical_factorization+0x10>
  401f84:	4544      	cmp	r4, r8
  401f86:	bf12      	itee	ne
  401f88:	3401      	addne	r4, #1
  401f8a:	461d      	moveq	r5, r3
  401f8c:	2401      	moveq	r4, #1
  401f8e:	e7c8      	b.n	401f22 <critical_factorization+0x46>

00401f90 <two_way_long_needle>:
  401f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f94:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  401f98:	4616      	mov	r6, r2
  401f9a:	4605      	mov	r5, r0
  401f9c:	468b      	mov	fp, r1
  401f9e:	4610      	mov	r0, r2
  401fa0:	4619      	mov	r1, r3
  401fa2:	aa03      	add	r2, sp, #12
  401fa4:	461c      	mov	r4, r3
  401fa6:	f7ff ff99 	bl	401edc <critical_factorization>
  401faa:	ab03      	add	r3, sp, #12
  401fac:	4681      	mov	r9, r0
  401fae:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  401fb2:	f843 4f04 	str.w	r4, [r3, #4]!
  401fb6:	4293      	cmp	r3, r2
  401fb8:	d1fb      	bne.n	401fb2 <two_way_long_needle+0x22>
  401fba:	b14c      	cbz	r4, 401fd0 <two_way_long_needle+0x40>
  401fbc:	1e63      	subs	r3, r4, #1
  401fbe:	1e72      	subs	r2, r6, #1
  401fc0:	a804      	add	r0, sp, #16
  401fc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  401fc6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  401fca:	f113 33ff 	adds.w	r3, r3, #4294967295
  401fce:	d2f8      	bcs.n	401fc2 <two_way_long_needle+0x32>
  401fd0:	9903      	ldr	r1, [sp, #12]
  401fd2:	464a      	mov	r2, r9
  401fd4:	4431      	add	r1, r6
  401fd6:	4630      	mov	r0, r6
  401fd8:	f000 fa62 	bl	4024a0 <memcmp>
  401fdc:	2800      	cmp	r0, #0
  401fde:	d16f      	bne.n	4020c0 <two_way_long_needle+0x130>
  401fe0:	f109 33ff 	add.w	r3, r9, #4294967295
  401fe4:	9300      	str	r3, [sp, #0]
  401fe6:	18f3      	adds	r3, r6, r3
  401fe8:	4682      	mov	sl, r0
  401fea:	9301      	str	r3, [sp, #4]
  401fec:	4623      	mov	r3, r4
  401fee:	4680      	mov	r8, r0
  401ff0:	4654      	mov	r4, sl
  401ff2:	4658      	mov	r0, fp
  401ff4:	469a      	mov	sl, r3
  401ff6:	eb08 070a 	add.w	r7, r8, sl
  401ffa:	1a3a      	subs	r2, r7, r0
  401ffc:	2100      	movs	r1, #0
  401ffe:	4428      	add	r0, r5
  402000:	f000 f9fe 	bl	402400 <memchr>
  402004:	2800      	cmp	r0, #0
  402006:	d156      	bne.n	4020b6 <two_way_long_needle+0x126>
  402008:	2f00      	cmp	r7, #0
  40200a:	d054      	beq.n	4020b6 <two_way_long_needle+0x126>
  40200c:	19eb      	adds	r3, r5, r7
  40200e:	aa04      	add	r2, sp, #16
  402010:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402018:	b14b      	cbz	r3, 40202e <two_way_long_needle+0x9e>
  40201a:	b124      	cbz	r4, 402026 <two_way_long_needle+0x96>
  40201c:	9a03      	ldr	r2, [sp, #12]
  40201e:	4293      	cmp	r3, r2
  402020:	d201      	bcs.n	402026 <two_way_long_needle+0x96>
  402022:	ebaa 0302 	sub.w	r3, sl, r2
  402026:	4498      	add	r8, r3
  402028:	2400      	movs	r4, #0
  40202a:	4638      	mov	r0, r7
  40202c:	e7e3      	b.n	401ff6 <two_way_long_needle+0x66>
  40202e:	454c      	cmp	r4, r9
  402030:	4623      	mov	r3, r4
  402032:	f10a 3eff 	add.w	lr, sl, #4294967295
  402036:	bf38      	it	cc
  402038:	464b      	movcc	r3, r9
  40203a:	4573      	cmp	r3, lr
  40203c:	d213      	bcs.n	402066 <two_way_long_needle+0xd6>
  40203e:	eb08 0203 	add.w	r2, r8, r3
  402042:	f816 c003 	ldrb.w	ip, [r6, r3]
  402046:	5ca8      	ldrb	r0, [r5, r2]
  402048:	4584      	cmp	ip, r0
  40204a:	442a      	add	r2, r5
  40204c:	eb06 0103 	add.w	r1, r6, r3
  402050:	d006      	beq.n	402060 <two_way_long_needle+0xd0>
  402052:	e02c      	b.n	4020ae <two_way_long_needle+0x11e>
  402054:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  402058:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40205c:	4584      	cmp	ip, r0
  40205e:	d126      	bne.n	4020ae <two_way_long_needle+0x11e>
  402060:	3301      	adds	r3, #1
  402062:	4573      	cmp	r3, lr
  402064:	d3f6      	bcc.n	402054 <two_way_long_needle+0xc4>
  402066:	454c      	cmp	r4, r9
  402068:	9900      	ldr	r1, [sp, #0]
  40206a:	f080 8089 	bcs.w	402180 <two_way_long_needle+0x1f0>
  40206e:	9b00      	ldr	r3, [sp, #0]
  402070:	eb08 0203 	add.w	r2, r8, r3
  402074:	9b01      	ldr	r3, [sp, #4]
  402076:	5ca8      	ldrb	r0, [r5, r2]
  402078:	781b      	ldrb	r3, [r3, #0]
  40207a:	4298      	cmp	r0, r3
  40207c:	442a      	add	r2, r5
  40207e:	d17f      	bne.n	402180 <two_way_long_needle+0x1f0>
  402080:	9801      	ldr	r0, [sp, #4]
  402082:	f104 3bff 	add.w	fp, r4, #4294967295
  402086:	e006      	b.n	402096 <two_way_long_needle+0x106>
  402088:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40208c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  402090:	45f4      	cmp	ip, lr
  402092:	d103      	bne.n	40209c <two_way_long_needle+0x10c>
  402094:	4619      	mov	r1, r3
  402096:	1e4b      	subs	r3, r1, #1
  402098:	459b      	cmp	fp, r3
  40209a:	d1f5      	bne.n	402088 <two_way_long_needle+0xf8>
  40209c:	3401      	adds	r4, #1
  40209e:	428c      	cmp	r4, r1
  4020a0:	d870      	bhi.n	402184 <two_way_long_needle+0x1f4>
  4020a2:	9c03      	ldr	r4, [sp, #12]
  4020a4:	4638      	mov	r0, r7
  4020a6:	44a0      	add	r8, r4
  4020a8:	ebaa 0404 	sub.w	r4, sl, r4
  4020ac:	e7a3      	b.n	401ff6 <two_way_long_needle+0x66>
  4020ae:	f1c9 0201 	rsb	r2, r9, #1
  4020b2:	4490      	add	r8, r2
  4020b4:	e7b7      	b.n	402026 <two_way_long_needle+0x96>
  4020b6:	2000      	movs	r0, #0
  4020b8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4020bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020c0:	eba4 0309 	sub.w	r3, r4, r9
  4020c4:	454b      	cmp	r3, r9
  4020c6:	bf38      	it	cc
  4020c8:	464b      	movcc	r3, r9
  4020ca:	3301      	adds	r3, #1
  4020cc:	f109 38ff 	add.w	r8, r9, #4294967295
  4020d0:	9303      	str	r3, [sp, #12]
  4020d2:	eb06 0308 	add.w	r3, r6, r8
  4020d6:	4658      	mov	r0, fp
  4020d8:	f04f 0a00 	mov.w	sl, #0
  4020dc:	46cb      	mov	fp, r9
  4020de:	4699      	mov	r9, r3
  4020e0:	eb0a 0704 	add.w	r7, sl, r4
  4020e4:	1a3a      	subs	r2, r7, r0
  4020e6:	2100      	movs	r1, #0
  4020e8:	4428      	add	r0, r5
  4020ea:	f000 f989 	bl	402400 <memchr>
  4020ee:	2800      	cmp	r0, #0
  4020f0:	d1e1      	bne.n	4020b6 <two_way_long_needle+0x126>
  4020f2:	2f00      	cmp	r7, #0
  4020f4:	d0df      	beq.n	4020b6 <two_way_long_needle+0x126>
  4020f6:	19eb      	adds	r3, r5, r7
  4020f8:	aa04      	add	r2, sp, #16
  4020fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402102:	bba3      	cbnz	r3, 40216e <two_way_long_needle+0x1de>
  402104:	1e61      	subs	r1, r4, #1
  402106:	458b      	cmp	fp, r1
  402108:	d215      	bcs.n	402136 <two_way_long_needle+0x1a6>
  40210a:	eb0a 020b 	add.w	r2, sl, fp
  40210e:	f816 300b 	ldrb.w	r3, [r6, fp]
  402112:	f815 e002 	ldrb.w	lr, [r5, r2]
  402116:	459e      	cmp	lr, r3
  402118:	442a      	add	r2, r5
  40211a:	eb06 000b 	add.w	r0, r6, fp
  40211e:	465b      	mov	r3, fp
  402120:	d006      	beq.n	402130 <two_way_long_needle+0x1a0>
  402122:	e027      	b.n	402174 <two_way_long_needle+0x1e4>
  402124:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  402128:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40212c:	45f4      	cmp	ip, lr
  40212e:	d121      	bne.n	402174 <two_way_long_needle+0x1e4>
  402130:	3301      	adds	r3, #1
  402132:	428b      	cmp	r3, r1
  402134:	d3f6      	bcc.n	402124 <two_way_long_needle+0x194>
  402136:	f1b8 3fff 	cmp.w	r8, #4294967295
  40213a:	d011      	beq.n	402160 <two_way_long_needle+0x1d0>
  40213c:	eb0a 0208 	add.w	r2, sl, r8
  402140:	f899 1000 	ldrb.w	r1, [r9]
  402144:	5cab      	ldrb	r3, [r5, r2]
  402146:	4299      	cmp	r1, r3
  402148:	442a      	add	r2, r5
  40214a:	d10f      	bne.n	40216c <two_way_long_needle+0x1dc>
  40214c:	464b      	mov	r3, r9
  40214e:	e005      	b.n	40215c <two_way_long_needle+0x1cc>
  402150:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402154:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402158:	4288      	cmp	r0, r1
  40215a:	d107      	bne.n	40216c <two_way_long_needle+0x1dc>
  40215c:	42b3      	cmp	r3, r6
  40215e:	d1f7      	bne.n	402150 <two_way_long_needle+0x1c0>
  402160:	eb05 000a 	add.w	r0, r5, sl
  402164:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40216c:	9b03      	ldr	r3, [sp, #12]
  40216e:	449a      	add	sl, r3
  402170:	4638      	mov	r0, r7
  402172:	e7b5      	b.n	4020e0 <two_way_long_needle+0x150>
  402174:	f1cb 0201 	rsb	r2, fp, #1
  402178:	4492      	add	sl, r2
  40217a:	449a      	add	sl, r3
  40217c:	4638      	mov	r0, r7
  40217e:	e7af      	b.n	4020e0 <two_way_long_needle+0x150>
  402180:	4649      	mov	r1, r9
  402182:	e78b      	b.n	40209c <two_way_long_needle+0x10c>
  402184:	eb05 0008 	add.w	r0, r5, r8
  402188:	e796      	b.n	4020b8 <two_way_long_needle+0x128>
  40218a:	bf00      	nop

0040218c <strstr>:
  40218c:	7802      	ldrb	r2, [r0, #0]
  40218e:	2a00      	cmp	r2, #0
  402190:	f000 8101 	beq.w	402396 <strstr+0x20a>
  402194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402198:	f891 8000 	ldrb.w	r8, [r1]
  40219c:	b085      	sub	sp, #20
  40219e:	4644      	mov	r4, r8
  4021a0:	f1b8 0f00 	cmp.w	r8, #0
  4021a4:	d016      	beq.n	4021d4 <strstr+0x48>
  4021a6:	4686      	mov	lr, r0
  4021a8:	f101 0c01 	add.w	ip, r1, #1
  4021ac:	2701      	movs	r7, #1
  4021ae:	e003      	b.n	4021b8 <strstr+0x2c>
  4021b0:	f813 4b01 	ldrb.w	r4, [r3], #1
  4021b4:	b16c      	cbz	r4, 4021d2 <strstr+0x46>
  4021b6:	469c      	mov	ip, r3
  4021b8:	42a2      	cmp	r2, r4
  4021ba:	bf14      	ite	ne
  4021bc:	2700      	movne	r7, #0
  4021be:	f007 0701 	andeq.w	r7, r7, #1
  4021c2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4021c6:	4663      	mov	r3, ip
  4021c8:	2a00      	cmp	r2, #0
  4021ca:	d1f1      	bne.n	4021b0 <strstr+0x24>
  4021cc:	f89c 3000 	ldrb.w	r3, [ip]
  4021d0:	b9fb      	cbnz	r3, 402212 <strstr+0x86>
  4021d2:	b117      	cbz	r7, 4021da <strstr+0x4e>
  4021d4:	b005      	add	sp, #20
  4021d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021da:	460e      	mov	r6, r1
  4021dc:	4605      	mov	r5, r0
  4021de:	4641      	mov	r1, r8
  4021e0:	3001      	adds	r0, #1
  4021e2:	ebac 0406 	sub.w	r4, ip, r6
  4021e6:	f000 f98b 	bl	402500 <strchr>
  4021ea:	4607      	mov	r7, r0
  4021ec:	b188      	cbz	r0, 402212 <strstr+0x86>
  4021ee:	2c01      	cmp	r4, #1
  4021f0:	d0f0      	beq.n	4021d4 <strstr+0x48>
  4021f2:	1928      	adds	r0, r5, r4
  4021f4:	4287      	cmp	r7, r0
  4021f6:	bf94      	ite	ls
  4021f8:	1bc1      	subls	r1, r0, r7
  4021fa:	2101      	movhi	r1, #1
  4021fc:	2c1f      	cmp	r4, #31
  4021fe:	468b      	mov	fp, r1
  402200:	d90b      	bls.n	40221a <strstr+0x8e>
  402202:	4623      	mov	r3, r4
  402204:	4632      	mov	r2, r6
  402206:	4638      	mov	r0, r7
  402208:	f7ff fec2 	bl	401f90 <two_way_long_needle>
  40220c:	b005      	add	sp, #20
  40220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402212:	2000      	movs	r0, #0
  402214:	b005      	add	sp, #20
  402216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40221a:	aa03      	add	r2, sp, #12
  40221c:	4621      	mov	r1, r4
  40221e:	4630      	mov	r0, r6
  402220:	f7ff fe5c 	bl	401edc <critical_factorization>
  402224:	9903      	ldr	r1, [sp, #12]
  402226:	4680      	mov	r8, r0
  402228:	4602      	mov	r2, r0
  40222a:	4431      	add	r1, r6
  40222c:	4630      	mov	r0, r6
  40222e:	f000 f937 	bl	4024a0 <memcmp>
  402232:	2800      	cmp	r0, #0
  402234:	d157      	bne.n	4022e6 <strstr+0x15a>
  402236:	f108 33ff 	add.w	r3, r8, #4294967295
  40223a:	9300      	str	r3, [sp, #0]
  40223c:	18f3      	adds	r3, r6, r3
  40223e:	4681      	mov	r9, r0
  402240:	4605      	mov	r5, r0
  402242:	9301      	str	r3, [sp, #4]
  402244:	4658      	mov	r0, fp
  402246:	46b2      	mov	sl, r6
  402248:	1966      	adds	r6, r4, r5
  40224a:	1a32      	subs	r2, r6, r0
  40224c:	2100      	movs	r1, #0
  40224e:	4438      	add	r0, r7
  402250:	f000 f8d6 	bl	402400 <memchr>
  402254:	2800      	cmp	r0, #0
  402256:	d1dc      	bne.n	402212 <strstr+0x86>
  402258:	2e00      	cmp	r6, #0
  40225a:	d0da      	beq.n	402212 <strstr+0x86>
  40225c:	45c8      	cmp	r8, r9
  40225e:	4643      	mov	r3, r8
  402260:	bf38      	it	cc
  402262:	464b      	movcc	r3, r9
  402264:	429c      	cmp	r4, r3
  402266:	d912      	bls.n	40228e <strstr+0x102>
  402268:	195a      	adds	r2, r3, r5
  40226a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40226e:	5cb8      	ldrb	r0, [r7, r2]
  402270:	4281      	cmp	r1, r0
  402272:	443a      	add	r2, r7
  402274:	eb0a 0e03 	add.w	lr, sl, r3
  402278:	d006      	beq.n	402288 <strstr+0xfc>
  40227a:	e02c      	b.n	4022d6 <strstr+0x14a>
  40227c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  402280:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402284:	4288      	cmp	r0, r1
  402286:	d126      	bne.n	4022d6 <strstr+0x14a>
  402288:	3301      	adds	r3, #1
  40228a:	429c      	cmp	r4, r3
  40228c:	d1f6      	bne.n	40227c <strstr+0xf0>
  40228e:	45c8      	cmp	r8, r9
  402290:	9900      	ldr	r1, [sp, #0]
  402292:	f240 8083 	bls.w	40239c <strstr+0x210>
  402296:	9b00      	ldr	r3, [sp, #0]
  402298:	18ea      	adds	r2, r5, r3
  40229a:	9b01      	ldr	r3, [sp, #4]
  40229c:	5cb8      	ldrb	r0, [r7, r2]
  40229e:	781b      	ldrb	r3, [r3, #0]
  4022a0:	4298      	cmp	r0, r3
  4022a2:	443a      	add	r2, r7
  4022a4:	d17a      	bne.n	40239c <strstr+0x210>
  4022a6:	9801      	ldr	r0, [sp, #4]
  4022a8:	f109 3bff 	add.w	fp, r9, #4294967295
  4022ac:	e006      	b.n	4022bc <strstr+0x130>
  4022ae:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4022b2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4022b6:	45f4      	cmp	ip, lr
  4022b8:	d103      	bne.n	4022c2 <strstr+0x136>
  4022ba:	4619      	mov	r1, r3
  4022bc:	1e4b      	subs	r3, r1, #1
  4022be:	455b      	cmp	r3, fp
  4022c0:	d1f5      	bne.n	4022ae <strstr+0x122>
  4022c2:	f109 0901 	add.w	r9, r9, #1
  4022c6:	4589      	cmp	r9, r1
  4022c8:	d857      	bhi.n	40237a <strstr+0x1ee>
  4022ca:	9b03      	ldr	r3, [sp, #12]
  4022cc:	4630      	mov	r0, r6
  4022ce:	441d      	add	r5, r3
  4022d0:	eba4 0903 	sub.w	r9, r4, r3
  4022d4:	e7b8      	b.n	402248 <strstr+0xbc>
  4022d6:	f1c8 0201 	rsb	r2, r8, #1
  4022da:	4415      	add	r5, r2
  4022dc:	441d      	add	r5, r3
  4022de:	f04f 0900 	mov.w	r9, #0
  4022e2:	4630      	mov	r0, r6
  4022e4:	e7b0      	b.n	402248 <strstr+0xbc>
  4022e6:	eba4 0308 	sub.w	r3, r4, r8
  4022ea:	4543      	cmp	r3, r8
  4022ec:	bf38      	it	cc
  4022ee:	4643      	movcc	r3, r8
  4022f0:	3301      	adds	r3, #1
  4022f2:	f108 39ff 	add.w	r9, r8, #4294967295
  4022f6:	9303      	str	r3, [sp, #12]
  4022f8:	eb06 0309 	add.w	r3, r6, r9
  4022fc:	4658      	mov	r0, fp
  4022fe:	2500      	movs	r5, #0
  402300:	46bb      	mov	fp, r7
  402302:	469a      	mov	sl, r3
  402304:	1967      	adds	r7, r4, r5
  402306:	1a3a      	subs	r2, r7, r0
  402308:	2100      	movs	r1, #0
  40230a:	4458      	add	r0, fp
  40230c:	f000 f878 	bl	402400 <memchr>
  402310:	2800      	cmp	r0, #0
  402312:	f47f af7e 	bne.w	402212 <strstr+0x86>
  402316:	2f00      	cmp	r7, #0
  402318:	f43f af7b 	beq.w	402212 <strstr+0x86>
  40231c:	4544      	cmp	r4, r8
  40231e:	d915      	bls.n	40234c <strstr+0x1c0>
  402320:	eb08 0205 	add.w	r2, r8, r5
  402324:	f816 3008 	ldrb.w	r3, [r6, r8]
  402328:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40232c:	4298      	cmp	r0, r3
  40232e:	445a      	add	r2, fp
  402330:	eb06 0108 	add.w	r1, r6, r8
  402334:	4643      	mov	r3, r8
  402336:	d006      	beq.n	402346 <strstr+0x1ba>
  402338:	e023      	b.n	402382 <strstr+0x1f6>
  40233a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40233e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402342:	4586      	cmp	lr, r0
  402344:	d11d      	bne.n	402382 <strstr+0x1f6>
  402346:	3301      	adds	r3, #1
  402348:	429c      	cmp	r4, r3
  40234a:	d1f6      	bne.n	40233a <strstr+0x1ae>
  40234c:	f1b9 3fff 	cmp.w	r9, #4294967295
  402350:	d012      	beq.n	402378 <strstr+0x1ec>
  402352:	eb05 0209 	add.w	r2, r5, r9
  402356:	f89a 3000 	ldrb.w	r3, [sl]
  40235a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40235e:	4299      	cmp	r1, r3
  402360:	445a      	add	r2, fp
  402362:	d114      	bne.n	40238e <strstr+0x202>
  402364:	4653      	mov	r3, sl
  402366:	e005      	b.n	402374 <strstr+0x1e8>
  402368:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40236c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402370:	4288      	cmp	r0, r1
  402372:	d10c      	bne.n	40238e <strstr+0x202>
  402374:	42b3      	cmp	r3, r6
  402376:	d1f7      	bne.n	402368 <strstr+0x1dc>
  402378:	465f      	mov	r7, fp
  40237a:	1978      	adds	r0, r7, r5
  40237c:	b005      	add	sp, #20
  40237e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402382:	f1c8 0201 	rsb	r2, r8, #1
  402386:	4415      	add	r5, r2
  402388:	441d      	add	r5, r3
  40238a:	4638      	mov	r0, r7
  40238c:	e7ba      	b.n	402304 <strstr+0x178>
  40238e:	9b03      	ldr	r3, [sp, #12]
  402390:	4638      	mov	r0, r7
  402392:	441d      	add	r5, r3
  402394:	e7b6      	b.n	402304 <strstr+0x178>
  402396:	780b      	ldrb	r3, [r1, #0]
  402398:	b913      	cbnz	r3, 4023a0 <strstr+0x214>
  40239a:	4770      	bx	lr
  40239c:	4641      	mov	r1, r8
  40239e:	e790      	b.n	4022c2 <strstr+0x136>
  4023a0:	2000      	movs	r0, #0
  4023a2:	4770      	bx	lr

004023a4 <register_fini>:
  4023a4:	4b02      	ldr	r3, [pc, #8]	; (4023b0 <register_fini+0xc>)
  4023a6:	b113      	cbz	r3, 4023ae <register_fini+0xa>
  4023a8:	4802      	ldr	r0, [pc, #8]	; (4023b4 <register_fini+0x10>)
  4023aa:	f000 b805 	b.w	4023b8 <atexit>
  4023ae:	4770      	bx	lr
  4023b0:	00000000 	.word	0x00000000
  4023b4:	004023c5 	.word	0x004023c5

004023b8 <atexit>:
  4023b8:	2300      	movs	r3, #0
  4023ba:	4601      	mov	r1, r0
  4023bc:	461a      	mov	r2, r3
  4023be:	4618      	mov	r0, r3
  4023c0:	f000 b912 	b.w	4025e8 <__register_exitproc>

004023c4 <__libc_fini_array>:
  4023c4:	b538      	push	{r3, r4, r5, lr}
  4023c6:	4c0a      	ldr	r4, [pc, #40]	; (4023f0 <__libc_fini_array+0x2c>)
  4023c8:	4d0a      	ldr	r5, [pc, #40]	; (4023f4 <__libc_fini_array+0x30>)
  4023ca:	1b64      	subs	r4, r4, r5
  4023cc:	10a4      	asrs	r4, r4, #2
  4023ce:	d00a      	beq.n	4023e6 <__libc_fini_array+0x22>
  4023d0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4023d4:	3b01      	subs	r3, #1
  4023d6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4023da:	3c01      	subs	r4, #1
  4023dc:	f855 3904 	ldr.w	r3, [r5], #-4
  4023e0:	4798      	blx	r3
  4023e2:	2c00      	cmp	r4, #0
  4023e4:	d1f9      	bne.n	4023da <__libc_fini_array+0x16>
  4023e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4023ea:	f000 b983 	b.w	4026f4 <_fini>
  4023ee:	bf00      	nop
  4023f0:	00402704 	.word	0x00402704
  4023f4:	00402700 	.word	0x00402700

004023f8 <__retarget_lock_acquire_recursive>:
  4023f8:	4770      	bx	lr
  4023fa:	bf00      	nop

004023fc <__retarget_lock_release_recursive>:
  4023fc:	4770      	bx	lr
  4023fe:	bf00      	nop

00402400 <memchr>:
  402400:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402404:	2a10      	cmp	r2, #16
  402406:	db2b      	blt.n	402460 <memchr+0x60>
  402408:	f010 0f07 	tst.w	r0, #7
  40240c:	d008      	beq.n	402420 <memchr+0x20>
  40240e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402412:	3a01      	subs	r2, #1
  402414:	428b      	cmp	r3, r1
  402416:	d02d      	beq.n	402474 <memchr+0x74>
  402418:	f010 0f07 	tst.w	r0, #7
  40241c:	b342      	cbz	r2, 402470 <memchr+0x70>
  40241e:	d1f6      	bne.n	40240e <memchr+0xe>
  402420:	b4f0      	push	{r4, r5, r6, r7}
  402422:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402426:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40242a:	f022 0407 	bic.w	r4, r2, #7
  40242e:	f07f 0700 	mvns.w	r7, #0
  402432:	2300      	movs	r3, #0
  402434:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402438:	3c08      	subs	r4, #8
  40243a:	ea85 0501 	eor.w	r5, r5, r1
  40243e:	ea86 0601 	eor.w	r6, r6, r1
  402442:	fa85 f547 	uadd8	r5, r5, r7
  402446:	faa3 f587 	sel	r5, r3, r7
  40244a:	fa86 f647 	uadd8	r6, r6, r7
  40244e:	faa5 f687 	sel	r6, r5, r7
  402452:	b98e      	cbnz	r6, 402478 <memchr+0x78>
  402454:	d1ee      	bne.n	402434 <memchr+0x34>
  402456:	bcf0      	pop	{r4, r5, r6, r7}
  402458:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40245c:	f002 0207 	and.w	r2, r2, #7
  402460:	b132      	cbz	r2, 402470 <memchr+0x70>
  402462:	f810 3b01 	ldrb.w	r3, [r0], #1
  402466:	3a01      	subs	r2, #1
  402468:	ea83 0301 	eor.w	r3, r3, r1
  40246c:	b113      	cbz	r3, 402474 <memchr+0x74>
  40246e:	d1f8      	bne.n	402462 <memchr+0x62>
  402470:	2000      	movs	r0, #0
  402472:	4770      	bx	lr
  402474:	3801      	subs	r0, #1
  402476:	4770      	bx	lr
  402478:	2d00      	cmp	r5, #0
  40247a:	bf06      	itte	eq
  40247c:	4635      	moveq	r5, r6
  40247e:	3803      	subeq	r0, #3
  402480:	3807      	subne	r0, #7
  402482:	f015 0f01 	tst.w	r5, #1
  402486:	d107      	bne.n	402498 <memchr+0x98>
  402488:	3001      	adds	r0, #1
  40248a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40248e:	bf02      	ittt	eq
  402490:	3001      	addeq	r0, #1
  402492:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402496:	3001      	addeq	r0, #1
  402498:	bcf0      	pop	{r4, r5, r6, r7}
  40249a:	3801      	subs	r0, #1
  40249c:	4770      	bx	lr
  40249e:	bf00      	nop

004024a0 <memcmp>:
  4024a0:	2a03      	cmp	r2, #3
  4024a2:	b470      	push	{r4, r5, r6}
  4024a4:	d922      	bls.n	4024ec <memcmp+0x4c>
  4024a6:	ea40 0301 	orr.w	r3, r0, r1
  4024aa:	079b      	lsls	r3, r3, #30
  4024ac:	d011      	beq.n	4024d2 <memcmp+0x32>
  4024ae:	7803      	ldrb	r3, [r0, #0]
  4024b0:	780c      	ldrb	r4, [r1, #0]
  4024b2:	42a3      	cmp	r3, r4
  4024b4:	d11d      	bne.n	4024f2 <memcmp+0x52>
  4024b6:	440a      	add	r2, r1
  4024b8:	3101      	adds	r1, #1
  4024ba:	e005      	b.n	4024c8 <memcmp+0x28>
  4024bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4024c0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4024c4:	42a3      	cmp	r3, r4
  4024c6:	d114      	bne.n	4024f2 <memcmp+0x52>
  4024c8:	4291      	cmp	r1, r2
  4024ca:	d1f7      	bne.n	4024bc <memcmp+0x1c>
  4024cc:	2000      	movs	r0, #0
  4024ce:	bc70      	pop	{r4, r5, r6}
  4024d0:	4770      	bx	lr
  4024d2:	680d      	ldr	r5, [r1, #0]
  4024d4:	6806      	ldr	r6, [r0, #0]
  4024d6:	42ae      	cmp	r6, r5
  4024d8:	460c      	mov	r4, r1
  4024da:	4603      	mov	r3, r0
  4024dc:	f101 0104 	add.w	r1, r1, #4
  4024e0:	f100 0004 	add.w	r0, r0, #4
  4024e4:	d108      	bne.n	4024f8 <memcmp+0x58>
  4024e6:	3a04      	subs	r2, #4
  4024e8:	2a03      	cmp	r2, #3
  4024ea:	d8f2      	bhi.n	4024d2 <memcmp+0x32>
  4024ec:	2a00      	cmp	r2, #0
  4024ee:	d1de      	bne.n	4024ae <memcmp+0xe>
  4024f0:	e7ec      	b.n	4024cc <memcmp+0x2c>
  4024f2:	1b18      	subs	r0, r3, r4
  4024f4:	bc70      	pop	{r4, r5, r6}
  4024f6:	4770      	bx	lr
  4024f8:	4621      	mov	r1, r4
  4024fa:	4618      	mov	r0, r3
  4024fc:	e7d7      	b.n	4024ae <memcmp+0xe>
  4024fe:	bf00      	nop

00402500 <strchr>:
  402500:	b2c9      	uxtb	r1, r1
  402502:	2900      	cmp	r1, #0
  402504:	d041      	beq.n	40258a <strchr+0x8a>
  402506:	0782      	lsls	r2, r0, #30
  402508:	b4f0      	push	{r4, r5, r6, r7}
  40250a:	d067      	beq.n	4025dc <strchr+0xdc>
  40250c:	7803      	ldrb	r3, [r0, #0]
  40250e:	2b00      	cmp	r3, #0
  402510:	d068      	beq.n	4025e4 <strchr+0xe4>
  402512:	4299      	cmp	r1, r3
  402514:	d037      	beq.n	402586 <strchr+0x86>
  402516:	1c43      	adds	r3, r0, #1
  402518:	e004      	b.n	402524 <strchr+0x24>
  40251a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40251e:	b390      	cbz	r0, 402586 <strchr+0x86>
  402520:	4281      	cmp	r1, r0
  402522:	d02f      	beq.n	402584 <strchr+0x84>
  402524:	079a      	lsls	r2, r3, #30
  402526:	461c      	mov	r4, r3
  402528:	d1f7      	bne.n	40251a <strchr+0x1a>
  40252a:	6825      	ldr	r5, [r4, #0]
  40252c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  402530:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  402534:	ea83 0605 	eor.w	r6, r3, r5
  402538:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40253c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  402540:	ea20 0006 	bic.w	r0, r0, r6
  402544:	ea22 0205 	bic.w	r2, r2, r5
  402548:	4302      	orrs	r2, r0
  40254a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40254e:	d111      	bne.n	402574 <strchr+0x74>
  402550:	4620      	mov	r0, r4
  402552:	f850 6f04 	ldr.w	r6, [r0, #4]!
  402556:	ea83 0706 	eor.w	r7, r3, r6
  40255a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40255e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  402562:	ea25 0507 	bic.w	r5, r5, r7
  402566:	ea22 0206 	bic.w	r2, r2, r6
  40256a:	432a      	orrs	r2, r5
  40256c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402570:	d0ef      	beq.n	402552 <strchr+0x52>
  402572:	4604      	mov	r4, r0
  402574:	7820      	ldrb	r0, [r4, #0]
  402576:	b918      	cbnz	r0, 402580 <strchr+0x80>
  402578:	e005      	b.n	402586 <strchr+0x86>
  40257a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40257e:	b110      	cbz	r0, 402586 <strchr+0x86>
  402580:	4281      	cmp	r1, r0
  402582:	d1fa      	bne.n	40257a <strchr+0x7a>
  402584:	4620      	mov	r0, r4
  402586:	bcf0      	pop	{r4, r5, r6, r7}
  402588:	4770      	bx	lr
  40258a:	0783      	lsls	r3, r0, #30
  40258c:	d024      	beq.n	4025d8 <strchr+0xd8>
  40258e:	7803      	ldrb	r3, [r0, #0]
  402590:	2b00      	cmp	r3, #0
  402592:	d0f9      	beq.n	402588 <strchr+0x88>
  402594:	1c43      	adds	r3, r0, #1
  402596:	e003      	b.n	4025a0 <strchr+0xa0>
  402598:	7802      	ldrb	r2, [r0, #0]
  40259a:	3301      	adds	r3, #1
  40259c:	2a00      	cmp	r2, #0
  40259e:	d0f3      	beq.n	402588 <strchr+0x88>
  4025a0:	0799      	lsls	r1, r3, #30
  4025a2:	4618      	mov	r0, r3
  4025a4:	d1f8      	bne.n	402598 <strchr+0x98>
  4025a6:	6819      	ldr	r1, [r3, #0]
  4025a8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4025ac:	ea22 0201 	bic.w	r2, r2, r1
  4025b0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4025b4:	d108      	bne.n	4025c8 <strchr+0xc8>
  4025b6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4025ba:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4025be:	ea22 0201 	bic.w	r2, r2, r1
  4025c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4025c6:	d0f6      	beq.n	4025b6 <strchr+0xb6>
  4025c8:	781a      	ldrb	r2, [r3, #0]
  4025ca:	4618      	mov	r0, r3
  4025cc:	b142      	cbz	r2, 4025e0 <strchr+0xe0>
  4025ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	d1fb      	bne.n	4025ce <strchr+0xce>
  4025d6:	4770      	bx	lr
  4025d8:	4603      	mov	r3, r0
  4025da:	e7e4      	b.n	4025a6 <strchr+0xa6>
  4025dc:	4604      	mov	r4, r0
  4025de:	e7a4      	b.n	40252a <strchr+0x2a>
  4025e0:	4618      	mov	r0, r3
  4025e2:	4770      	bx	lr
  4025e4:	4618      	mov	r0, r3
  4025e6:	e7ce      	b.n	402586 <strchr+0x86>

004025e8 <__register_exitproc>:
  4025e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4025ec:	4d2c      	ldr	r5, [pc, #176]	; (4026a0 <__register_exitproc+0xb8>)
  4025ee:	4606      	mov	r6, r0
  4025f0:	6828      	ldr	r0, [r5, #0]
  4025f2:	4698      	mov	r8, r3
  4025f4:	460f      	mov	r7, r1
  4025f6:	4691      	mov	r9, r2
  4025f8:	f7ff fefe 	bl	4023f8 <__retarget_lock_acquire_recursive>
  4025fc:	4b29      	ldr	r3, [pc, #164]	; (4026a4 <__register_exitproc+0xbc>)
  4025fe:	681c      	ldr	r4, [r3, #0]
  402600:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402604:	2b00      	cmp	r3, #0
  402606:	d03e      	beq.n	402686 <__register_exitproc+0x9e>
  402608:	685a      	ldr	r2, [r3, #4]
  40260a:	2a1f      	cmp	r2, #31
  40260c:	dc1c      	bgt.n	402648 <__register_exitproc+0x60>
  40260e:	f102 0e01 	add.w	lr, r2, #1
  402612:	b176      	cbz	r6, 402632 <__register_exitproc+0x4a>
  402614:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402618:	2401      	movs	r4, #1
  40261a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40261e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402622:	4094      	lsls	r4, r2
  402624:	4320      	orrs	r0, r4
  402626:	2e02      	cmp	r6, #2
  402628:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40262c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402630:	d023      	beq.n	40267a <__register_exitproc+0x92>
  402632:	3202      	adds	r2, #2
  402634:	f8c3 e004 	str.w	lr, [r3, #4]
  402638:	6828      	ldr	r0, [r5, #0]
  40263a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40263e:	f7ff fedd 	bl	4023fc <__retarget_lock_release_recursive>
  402642:	2000      	movs	r0, #0
  402644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402648:	4b17      	ldr	r3, [pc, #92]	; (4026a8 <__register_exitproc+0xc0>)
  40264a:	b30b      	cbz	r3, 402690 <__register_exitproc+0xa8>
  40264c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402650:	f3af 8000 	nop.w
  402654:	4603      	mov	r3, r0
  402656:	b1d8      	cbz	r0, 402690 <__register_exitproc+0xa8>
  402658:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40265c:	6002      	str	r2, [r0, #0]
  40265e:	2100      	movs	r1, #0
  402660:	6041      	str	r1, [r0, #4]
  402662:	460a      	mov	r2, r1
  402664:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402668:	f04f 0e01 	mov.w	lr, #1
  40266c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402670:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402674:	2e00      	cmp	r6, #0
  402676:	d0dc      	beq.n	402632 <__register_exitproc+0x4a>
  402678:	e7cc      	b.n	402614 <__register_exitproc+0x2c>
  40267a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40267e:	430c      	orrs	r4, r1
  402680:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402684:	e7d5      	b.n	402632 <__register_exitproc+0x4a>
  402686:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40268a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40268e:	e7bb      	b.n	402608 <__register_exitproc+0x20>
  402690:	6828      	ldr	r0, [r5, #0]
  402692:	f7ff feb3 	bl	4023fc <__retarget_lock_release_recursive>
  402696:	f04f 30ff 	mov.w	r0, #4294967295
  40269a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40269e:	bf00      	nop
  4026a0:	20000438 	.word	0x20000438
  4026a4:	004026dc 	.word	0x004026dc
  4026a8:	00000000 	.word	0x00000000
  4026ac:	0001c200 	.word	0x0001c200
  4026b0:	000000c0 	.word	0x000000c0
  4026b4:	00000800 	.word	0x00000800
	...
  4026c4:	6e6b6e55 	.word	0x6e6b6e55
  4026c8:	206e776f 	.word	0x206e776f
  4026cc:	6d6d6f63 	.word	0x6d6d6f63
  4026d0:	00646e61 	.word	0x00646e61
  4026d4:	6c6c6548 	.word	0x6c6c6548
  4026d8:	000a0d6f 	.word	0x000a0d6f

004026dc <_global_impure_ptr>:
  4026dc:	20000010                                ... 

004026e0 <_init>:
  4026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4026e2:	bf00      	nop
  4026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4026e6:	bc08      	pop	{r3}
  4026e8:	469e      	mov	lr, r3
  4026ea:	4770      	bx	lr

004026ec <__init_array_start>:
  4026ec:	004023a5 	.word	0x004023a5

004026f0 <__frame_dummy_init_array_entry>:
  4026f0:	004000f1                                ..@.

004026f4 <_fini>:
  4026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4026f6:	bf00      	nop
  4026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4026fa:	bc08      	pop	{r3}
  4026fc:	469e      	mov	lr, r3
  4026fe:	4770      	bx	lr

00402700 <__fini_array_start>:
  402700:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	08cc 2000                                   ... 
