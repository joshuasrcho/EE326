
OV7740_IMAGESENSOR_CAPTURE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20000000  004029f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000488  20000444  00402e3c  00020444  2**2
                  ALLOC
  3 .stack        00003004  200008cc  004032c4  00020444  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001394b  00000000  00000000  000204c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002985  00000000  00000000  00033e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000055be  00000000  00000000  00036797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000808  00000000  00000000  0003bd55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000908  00000000  00000000  0003c55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000153e7  00000000  00000000  0003ce65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000be22  00000000  00000000  0005224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005acc0  00000000  00000000  0005e06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013ec  00000000  00000000  000b8d30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 38 00 20 35 11 40 00 31 11 40 00 31 11 40 00     .8. 5.@.1.@.1.@.
  400010:	31 11 40 00 31 11 40 00 31 11 40 00 00 00 00 00     1.@.1.@.1.@.....
	...
  40002c:	31 11 40 00 31 11 40 00 00 00 00 00 31 11 40 00     1.@.1.@.....1.@.
  40003c:	31 11 40 00 31 11 40 00 31 11 40 00 31 11 40 00     1.@.1.@.1.@.1.@.
  40004c:	31 11 40 00 31 11 40 00 31 11 40 00 31 11 40 00     1.@.1.@.1.@.1.@.
  40005c:	00 00 00 00 31 11 40 00 31 11 40 00 00 00 00 00     ....1.@.1.@.....
  40006c:	25 0d 40 00 39 0d 40 00 4d 0d 40 00 31 11 40 00     %.@.9.@.M.@.1.@.
  40007c:	31 11 40 00 00 00 00 00 00 00 00 00 31 11 40 00     1.@.........1.@.
  40008c:	31 11 40 00 31 11 40 00 31 11 40 00 31 11 40 00     1.@.1.@.1.@.1.@.
  40009c:	31 11 40 00 31 11 40 00 31 11 40 00 31 11 40 00     1.@.1.@.1.@.1.@.
  4000ac:	31 11 40 00 31 11 40 00 31 11 40 00 31 11 40 00     1.@.1.@.1.@.1.@.
  4000bc:	31 11 40 00 31 11 40 00 31 11 40 00 31 11 40 00     1.@.1.@.1.@.1.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000444 	.word	0x20000444
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004029f8 	.word	0x004029f8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004029f8 	.word	0x004029f8
  40012c:	20000448 	.word	0x20000448
  400130:	004029f8 	.word	0x004029f8
  400134:	00000000 	.word	0x00000000

00400138 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400138:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013a:	480e      	ldr	r0, [pc, #56]	; (400174 <sysclk_init+0x3c>)
  40013c:	4b0e      	ldr	r3, [pc, #56]	; (400178 <sysclk_init+0x40>)
  40013e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400140:	213e      	movs	r1, #62	; 0x3e
  400142:	2000      	movs	r0, #0
  400144:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x44>)
  400146:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400148:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x48>)
  40014a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40014c:	2800      	cmp	r0, #0
  40014e:	d0fc      	beq.n	40014a <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400150:	4b0c      	ldr	r3, [pc, #48]	; (400184 <sysclk_init+0x4c>)
  400152:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400154:	4a0c      	ldr	r2, [pc, #48]	; (400188 <sysclk_init+0x50>)
  400156:	4b0d      	ldr	r3, [pc, #52]	; (40018c <sysclk_init+0x54>)
  400158:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  40015a:	4c0d      	ldr	r4, [pc, #52]	; (400190 <sysclk_init+0x58>)
  40015c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40015e:	2800      	cmp	r0, #0
  400160:	d0fc      	beq.n	40015c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  400162:	2010      	movs	r0, #16
  400164:	4b0b      	ldr	r3, [pc, #44]	; (400194 <sysclk_init+0x5c>)
  400166:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400168:	4b0b      	ldr	r3, [pc, #44]	; (400198 <sysclk_init+0x60>)
  40016a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40016c:	4801      	ldr	r0, [pc, #4]	; (400174 <sysclk_init+0x3c>)
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <sysclk_init+0x40>)
  400170:	4798      	blx	r3
  400172:	bd10      	pop	{r4, pc}
  400174:	07270e00 	.word	0x07270e00
  400178:	004012f1 	.word	0x004012f1
  40017c:	00400dc1 	.word	0x00400dc1
  400180:	00400e15 	.word	0x00400e15
  400184:	00400e5d 	.word	0x00400e5d
  400188:	00133f01 	.word	0x00133f01
  40018c:	400e0400 	.word	0x400e0400
  400190:	00400e69 	.word	0x00400e69
  400194:	00400d61 	.word	0x00400d61
  400198:	004011e1 	.word	0x004011e1

0040019c <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
  40019c:	b570      	push	{r4, r5, r6, lr}
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  40019e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4001a2:	4b67      	ldr	r3, [pc, #412]	; (400340 <board_init+0x1a4>)
  4001a4:	605a      	str	r2, [r3, #4]
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4001a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001aa:	204c      	movs	r0, #76	; 0x4c
  4001ac:	4c65      	ldr	r4, [pc, #404]	; (400344 <board_init+0x1a8>)
  4001ae:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4001b0:	4965      	ldr	r1, [pc, #404]	; (400348 <board_init+0x1ac>)
  4001b2:	2002      	movs	r0, #2
  4001b4:	47a0      	blx	r4
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
#endif

	/* Configure TWI pins */
#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4001b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001ba:	2003      	movs	r0, #3
  4001bc:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4001be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001c2:	2004      	movs	r0, #4
  4001c4:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
#endif

	/* Configure PCK0 pins */
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  4001c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001ca:	202d      	movs	r0, #45	; 0x2d
  4001cc:	47a0      	blx	r4
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4001ce:	4d5f      	ldr	r5, [pc, #380]	; (40034c <board_init+0x1b0>)
  4001d0:	4629      	mov	r1, r5
  4001d2:	2040      	movs	r0, #64	; 0x40
  4001d4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4001d6:	4629      	mov	r1, r5
  4001d8:	2041      	movs	r0, #65	; 0x41
  4001da:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4001dc:	4629      	mov	r1, r5
  4001de:	2042      	movs	r0, #66	; 0x42
  4001e0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4001e2:	4629      	mov	r1, r5
  4001e4:	2043      	movs	r0, #67	; 0x43
  4001e6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4001e8:	4629      	mov	r1, r5
  4001ea:	2044      	movs	r0, #68	; 0x44
  4001ec:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4001ee:	4629      	mov	r1, r5
  4001f0:	2045      	movs	r0, #69	; 0x45
  4001f2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4001f4:	4629      	mov	r1, r5
  4001f6:	2046      	movs	r0, #70	; 0x46
  4001f8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4001fa:	4629      	mov	r1, r5
  4001fc:	2047      	movs	r0, #71	; 0x47
  4001fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400200:	4629      	mov	r1, r5
  400202:	204b      	movs	r0, #75	; 0x4b
  400204:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400206:	4629      	mov	r1, r5
  400208:	2048      	movs	r0, #72	; 0x48
  40020a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  40020c:	4e50      	ldr	r6, [pc, #320]	; (400350 <board_init+0x1b4>)
  40020e:	4631      	mov	r1, r6
  400210:	2016      	movs	r0, #22
  400212:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400214:	4629      	mov	r1, r5
  400216:	2053      	movs	r0, #83	; 0x53
  400218:	47a0      	blx	r4
#endif

	/* Configure Backlight control pin */
#ifdef CONF_BOARD_AAT3155
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  40021a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40021e:	204d      	movs	r0, #77	; 0x4d
  400220:	47a0      	blx	r4
#endif

	/* Configure SRAM pins */
#ifdef CONF_BOARD_SRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400222:	4629      	mov	r1, r5
  400224:	2040      	movs	r0, #64	; 0x40
  400226:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400228:	4629      	mov	r1, r5
  40022a:	2041      	movs	r0, #65	; 0x41
  40022c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40022e:	4629      	mov	r1, r5
  400230:	2042      	movs	r0, #66	; 0x42
  400232:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400234:	4629      	mov	r1, r5
  400236:	2043      	movs	r0, #67	; 0x43
  400238:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  40023a:	4629      	mov	r1, r5
  40023c:	2044      	movs	r0, #68	; 0x44
  40023e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  400240:	4629      	mov	r1, r5
  400242:	2045      	movs	r0, #69	; 0x45
  400244:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400246:	4629      	mov	r1, r5
  400248:	2046      	movs	r0, #70	; 0x46
  40024a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40024c:	4629      	mov	r1, r5
  40024e:	2047      	movs	r0, #71	; 0x47
  400250:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400252:	4629      	mov	r1, r5
  400254:	204b      	movs	r0, #75	; 0x4b
  400256:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400258:	4629      	mov	r1, r5
  40025a:	2048      	movs	r0, #72	; 0x48
  40025c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
  40025e:	4629      	mov	r1, r5
  400260:	204e      	movs	r0, #78	; 0x4e
  400262:	47a0      	blx	r4
	gpio_configure_pin(SRAM_VCC_GPIO, SRAM_VCC_FLAGS);
  400264:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400268:	2049      	movs	r0, #73	; 0x49
  40026a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  40026c:	4629      	mov	r1, r5
  40026e:	2052      	movs	r0, #82	; 0x52
  400270:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  400272:	4629      	mov	r1, r5
  400274:	2053      	movs	r0, #83	; 0x53
  400276:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  400278:	4629      	mov	r1, r5
  40027a:	2054      	movs	r0, #84	; 0x54
  40027c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  40027e:	4629      	mov	r1, r5
  400280:	2055      	movs	r0, #85	; 0x55
  400282:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  400284:	4629      	mov	r1, r5
  400286:	2056      	movs	r0, #86	; 0x56
  400288:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  40028a:	4629      	mov	r1, r5
  40028c:	2057      	movs	r0, #87	; 0x57
  40028e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  400290:	4629      	mov	r1, r5
  400292:	2058      	movs	r0, #88	; 0x58
  400294:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  400296:	4629      	mov	r1, r5
  400298:	2059      	movs	r0, #89	; 0x59
  40029a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG1);
  40029c:	4629      	mov	r1, r5
  40029e:	205a      	movs	r0, #90	; 0x5a
  4002a0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG1);
  4002a2:	4629      	mov	r1, r5
  4002a4:	205b      	movs	r0, #91	; 0x5b
  4002a6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG1);
  4002a8:	4629      	mov	r1, r5
  4002aa:	205c      	movs	r0, #92	; 0x5c
  4002ac:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG1);
  4002ae:	4629      	mov	r1, r5
  4002b0:	205d      	movs	r0, #93	; 0x5d
  4002b2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG1);
  4002b4:	4629      	mov	r1, r5
  4002b6:	205e      	movs	r0, #94	; 0x5e
  4002b8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG1);
  4002ba:	4629      	mov	r1, r5
  4002bc:	205f      	movs	r0, #95	; 0x5f
  4002be:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
  4002c0:	4631      	mov	r1, r6
  4002c2:	2012      	movs	r0, #18
  4002c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
  4002c6:	4631      	mov	r1, r6
  4002c8:	2013      	movs	r0, #19
  4002ca:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
  4002cc:	4631      	mov	r1, r6
  4002ce:	2014      	movs	r0, #20
  4002d0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
  4002d2:	4631      	mov	r1, r6
  4002d4:	2000      	movs	r0, #0
  4002d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
  4002d8:	4631      	mov	r1, r6
  4002da:	2001      	movs	r0, #1
  4002dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG1);
  4002de:	4629      	mov	r1, r5
  4002e0:	2050      	movs	r0, #80	; 0x50
  4002e2:	47a0      	blx	r4
#endif

	/* Configure Image sensor pins */
#ifdef CONF_BOARD_OV7740_IMAGE_SENSOR
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
  4002e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002e8:	204a      	movs	r0, #74	; 0x4a
  4002ea:	47a0      	blx	r4
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  4002ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002f0:	204f      	movs	r0, #79	; 0x4f
  4002f2:	47a0      	blx	r4
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
  4002f4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002f8:	2015      	movs	r0, #21
  4002fa:	47a0      	blx	r4
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  4002fc:	2171      	movs	r1, #113	; 0x71
  4002fe:	2010      	movs	r0, #16
  400300:	47a0      	blx	r4
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  400302:	2171      	movs	r1, #113	; 0x71
  400304:	200f      	movs	r0, #15
  400306:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  400308:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  40030c:	4629      	mov	r1, r5
  40030e:	2018      	movs	r0, #24
  400310:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  400312:	4629      	mov	r1, r5
  400314:	2019      	movs	r0, #25
  400316:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  400318:	4629      	mov	r1, r5
  40031a:	201a      	movs	r0, #26
  40031c:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  40031e:	4629      	mov	r1, r5
  400320:	201b      	movs	r0, #27
  400322:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  400324:	4629      	mov	r1, r5
  400326:	201c      	movs	r0, #28
  400328:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  40032a:	4629      	mov	r1, r5
  40032c:	201d      	movs	r0, #29
  40032e:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  400330:	4629      	mov	r1, r5
  400332:	201e      	movs	r0, #30
  400334:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  400336:	4629      	mov	r1, r5
  400338:	201f      	movs	r0, #31
  40033a:	47a0      	blx	r4
  40033c:	bd70      	pop	{r4, r5, r6, pc}
  40033e:	bf00      	nop
  400340:	400e1450 	.word	0x400e1450
  400344:	00400afd 	.word	0x00400afd
  400348:	28000079 	.word	0x28000079
  40034c:	08000001 	.word	0x08000001
  400350:	18000001 	.word	0x18000001

00400354 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400354:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400356:	4b01      	ldr	r3, [pc, #4]	; (40035c <ov_read_reg+0x8>)
  400358:	4798      	blx	r3

	return ul_status;
}
  40035a:	bd08      	pop	{r3, pc}
  40035c:	00400fe9 	.word	0x00400fe9

00400360 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400360:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400362:	4b01      	ldr	r3, [pc, #4]	; (400368 <ov_write_reg+0x8>)
  400364:	4798      	blx	r3

	return ul_status;
}
  400366:	bd08      	pop	{r3, pc}
  400368:	004010a9 	.word	0x004010a9

0040036c <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  40036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400370:	b086      	sub	sp, #24
  400372:	4607      	mov	r7, r0
  400374:	1c4c      	adds	r4, r1, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  400376:	2501      	movs	r5, #1
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400378:	4e11      	ldr	r6, [pc, #68]	; (4003c0 <ov_write_regs+0x54>)
			delay_ms(5);
  40037a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4003c4 <ov_write_regs+0x58>
	while (!((p_next->reg == OV_REG_TERM) &&
  40037e:	e010      	b.n	4003a2 <ov_write_regs+0x36>
  400380:	7821      	ldrb	r1, [r4, #0]
  400382:	29ff      	cmp	r1, #255	; 0xff
  400384:	d018      	beq.n	4003b8 <ov_write_regs+0x4c>
			twi_packet_regs.addr[0] = p_next->reg;
  400386:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  40038a:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  40038c:	2321      	movs	r3, #33	; 0x21
  40038e:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  400392:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  400394:	9203      	str	r2, [sp, #12]
			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400396:	a901      	add	r1, sp, #4
  400398:	4638      	mov	r0, r7
  40039a:	47b0      	blx	r6
			ul_size++;

			if (ul_err == TWI_BUSY) {
  40039c:	2808      	cmp	r0, #8
  40039e:	d00c      	beq.n	4003ba <ov_write_regs+0x4e>
  4003a0:	3402      	adds	r4, #2
  4003a2:	4622      	mov	r2, r4
	while (!((p_next->reg == OV_REG_TERM) &&
  4003a4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4003a8:	2bff      	cmp	r3, #255	; 0xff
  4003aa:	d0e9      	beq.n	400380 <ov_write_regs+0x14>
		if (p_next->reg == 0xFE) {
  4003ac:	2bfe      	cmp	r3, #254	; 0xfe
  4003ae:	d1ea      	bne.n	400386 <ov_write_regs+0x1a>
			delay_ms(5);
  4003b0:	f24a 706a 	movw	r0, #42858	; 0xa76a
  4003b4:	47c0      	blx	r8
  4003b6:	e7f3      	b.n	4003a0 <ov_write_regs+0x34>
			}
		}

		p_next++;
	}
	return 0;
  4003b8:	2000      	movs	r0, #0
}
  4003ba:	b006      	add	sp, #24
  4003bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003c0:	00400361 	.word	0x00400361
  4003c4:	20000001 	.word	0x20000001

004003c8 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  4003c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003ca:	b08d      	sub	sp, #52	; 0x34
  4003cc:	4607      	mov	r7, r0
	uint32_t ul_id = 0;
  4003ce:	2300      	movs	r3, #0
  4003d0:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  4003d2:	9301      	str	r3, [sp, #4]
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  4003d4:	2621      	movs	r6, #33	; 0x21
  4003d6:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_pid.addr[0] = OV7740_PIDH;
  4003da:	230a      	movs	r3, #10
  4003dc:	f88d 3008 	strb.w	r3, [sp, #8]
	packet_pid.addr_length = 1;
  4003e0:	2401      	movs	r4, #1
  4003e2:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
  4003e4:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  4003e8:	9405      	str	r4, [sp, #20]
	ov_read_reg(p_twi, &packet_pid);
  4003ea:	a902      	add	r1, sp, #8
  4003ec:	4d39      	ldr	r5, [pc, #228]	; (4004d4 <ov_init+0x10c>)
  4003ee:	47a8      	blx	r5
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  4003f0:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV7740_PIDL;
  4003f4:	230b      	movs	r3, #11
  4003f6:	f88d 301c 	strb.w	r3, [sp, #28]
	packet_ver.addr_length = 1;
  4003fa:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
  4003fc:	ab01      	add	r3, sp, #4
  4003fe:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  400400:	940a      	str	r4, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &packet_ver);
  400402:	a907      	add	r1, sp, #28
  400404:	4638      	mov	r0, r7
  400406:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  400408:	9b01      	ldr	r3, [sp, #4]
  40040a:	9a00      	ldr	r2, [sp, #0]
  40040c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
  400410:	f3c3 2307 	ubfx	r3, r3, #8, #8
  400414:	2b77      	cmp	r3, #119	; 0x77
  400416:	d002      	beq.n	40041e <ov_init+0x56>
				return 0;
			}
		}
	}

	return 1;
  400418:	2001      	movs	r0, #1
}
  40041a:	b00d      	add	sp, #52	; 0x34
  40041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t ul_midh = 0;
  40041e:	2300      	movs	r3, #0
  400420:	9301      	str	r3, [sp, #4]
	uint32_t ul_midl = 0;
  400422:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = OV7740_MIDH;
  400424:	231c      	movs	r3, #28
  400426:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  40042a:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  40042c:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
  400430:	ab01      	add	r3, sp, #4
  400432:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  400434:	940a      	str	r4, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &twi_packet);
  400436:	a907      	add	r1, sp, #28
  400438:	4638      	mov	r0, r7
  40043a:	47a8      	blx	r5
	twi_packet.addr[0] = OV7740_MIDL;
  40043c:	231d      	movs	r3, #29
  40043e:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400442:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400444:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  400448:	ab02      	add	r3, sp, #8
  40044a:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  40044c:	940a      	str	r4, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &twi_packet);
  40044e:	a907      	add	r1, sp, #28
  400450:	4638      	mov	r0, r7
  400452:	47a8      	blx	r5
	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  400454:	9b01      	ldr	r3, [sp, #4]
  400456:	2b7f      	cmp	r3, #127	; 0x7f
  400458:	d001      	beq.n	40045e <ov_init+0x96>
	return 1;
  40045a:	2001      	movs	r0, #1
  40045c:	e7dd      	b.n	40041a <ov_init+0x52>
	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  40045e:	9b02      	ldr	r3, [sp, #8]
  400460:	2ba2      	cmp	r3, #162	; 0xa2
  400462:	d1fa      	bne.n	40045a <ov_init+0x92>
	uint32_t ul_value = 0;
  400464:	2300      	movs	r3, #0
  400466:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  400468:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  40046a:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = 0x01;
  40046c:	2301      	movs	r3, #1
  40046e:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400472:	9308      	str	r3, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400474:	2221      	movs	r2, #33	; 0x21
  400476:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  40047a:	930a      	str	r3, [sp, #40]	; 0x28
	twi_packet.buffer = &ul_oldvalue;
  40047c:	ab01      	add	r3, sp, #4
  40047e:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400480:	a907      	add	r1, sp, #28
  400482:	4638      	mov	r0, r7
  400484:	4c13      	ldr	r4, [pc, #76]	; (4004d4 <ov_init+0x10c>)
  400486:	47a0      	blx	r4
	ul_entervalue = 0xAD;
  400488:	ab0c      	add	r3, sp, #48	; 0x30
  40048a:	22ad      	movs	r2, #173	; 0xad
  40048c:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  400490:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400492:	a907      	add	r1, sp, #28
  400494:	4638      	mov	r0, r7
  400496:	4b10      	ldr	r3, [pc, #64]	; (4004d8 <ov_init+0x110>)
  400498:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  40049a:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  40049e:	a907      	add	r1, sp, #28
  4004a0:	4638      	mov	r0, r7
  4004a2:	47a0      	blx	r4
	if (ul_value != ul_entervalue) {
  4004a4:	9b02      	ldr	r3, [sp, #8]
  4004a6:	9a00      	ldr	r2, [sp, #0]
  4004a8:	429a      	cmp	r2, r3
  4004aa:	d001      	beq.n	4004b0 <ov_init+0xe8>
		return 1;
  4004ac:	2001      	movs	r0, #1
  4004ae:	e7b4      	b.n	40041a <ov_init+0x52>
	twi_packet.buffer = &ul_oldvalue;
  4004b0:	ab01      	add	r3, sp, #4
  4004b2:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4004b4:	a907      	add	r1, sp, #28
  4004b6:	4638      	mov	r0, r7
  4004b8:	4b07      	ldr	r3, [pc, #28]	; (4004d8 <ov_init+0x110>)
  4004ba:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  4004bc:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4004c0:	a907      	add	r1, sp, #28
  4004c2:	4638      	mov	r0, r7
  4004c4:	4b03      	ldr	r3, [pc, #12]	; (4004d4 <ov_init+0x10c>)
  4004c6:	4798      	blx	r3
	if (ul_value != ul_oldvalue) {
  4004c8:	9b01      	ldr	r3, [sp, #4]
  4004ca:	9800      	ldr	r0, [sp, #0]
  4004cc:	1ac0      	subs	r0, r0, r3
  4004ce:	bf18      	it	ne
  4004d0:	2001      	movne	r0, #1
  4004d2:	e7a2      	b.n	40041a <ov_init+0x52>
  4004d4:	00400355 	.word	0x00400355
  4004d8:	00400361 	.word	0x00400361

004004dc <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_ov7740_format format)
{
  4004dc:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  4004de:	2908      	cmp	r1, #8
  4004e0:	d814      	bhi.n	40050c <ov_configure+0x30>
  4004e2:	e8df f001 	tbb	[pc, r1]
  4004e6:	0515      	.short	0x0515
  4004e8:	0b090717 	.word	0x0b090717
  4004ec:	0f0d      	.short	0x0f0d
  4004ee:	11          	.byte	0x11
  4004ef:	00          	.byte	0x00
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
		break;

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
  4004f0:	490b      	ldr	r1, [pc, #44]	; (400520 <ov_configure+0x44>)
  4004f2:	e010      	b.n	400516 <ov_configure+0x3a>
	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
		break;

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV7740_QVGA_YUV422_30FPS;
  4004f4:	490b      	ldr	r1, [pc, #44]	; (400524 <ov_configure+0x48>)
		break;
  4004f6:	e00e      	b.n	400516 <ov_configure+0x3a>

	case QVGA_RGB888:
		p_regs_conf = OV7740_QVGA_RGB888;
  4004f8:	490b      	ldr	r1, [pc, #44]	; (400528 <ov_configure+0x4c>)
		break;
  4004fa:	e00c      	b.n	400516 <ov_configure+0x3a>

	case QQVGA_YUV422:
		p_regs_conf = OV7740_QQVGA_YUV422;
  4004fc:	490b      	ldr	r1, [pc, #44]	; (40052c <ov_configure+0x50>)
		break;
  4004fe:	e00a      	b.n	400516 <ov_configure+0x3a>

	case QQVGA_RGB888:
		p_regs_conf = OV7740_QQVGA_RGB888;
  400500:	490b      	ldr	r1, [pc, #44]	; (400530 <ov_configure+0x54>)
		break;
  400502:	e008      	b.n	400516 <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  400504:	490b      	ldr	r1, [pc, #44]	; (400534 <ov_configure+0x58>)
		break;
  400506:	e006      	b.n	400516 <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  400508:	490b      	ldr	r1, [pc, #44]	; (400538 <ov_configure+0x5c>)
		break;
  40050a:	e004      	b.n	400516 <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  40050c:	2001      	movs	r0, #1
  40050e:	bd08      	pop	{r3, pc}
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
  400510:	490a      	ldr	r1, [pc, #40]	; (40053c <ov_configure+0x60>)
  400512:	e000      	b.n	400516 <ov_configure+0x3a>
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
  400514:	490a      	ldr	r1, [pc, #40]	; (400540 <ov_configure+0x64>)
		ov_write_regs( p_twi, p_regs_conf );
  400516:	4b0b      	ldr	r3, [pc, #44]	; (400544 <ov_configure+0x68>)
  400518:	4798      	blx	r3
		return 0;
  40051a:	2000      	movs	r0, #0
}
  40051c:	bd08      	pop	{r3, pc}
  40051e:	bf00      	nop
  400520:	00401d20 	.word	0x00401d20
  400524:	00401f00 	.word	0x00401f00
  400528:	00401b3c 	.word	0x00401b3c
  40052c:	00401a48 	.word	0x00401a48
  400530:	00401954 	.word	0x00401954
  400534:	00401ff0 	.word	0x00401ff0
  400538:	004020e4 	.word	0x004020e4
  40053c:	00401c30 	.word	0x00401c30
  400540:	00401e10 	.word	0x00401e10
  400544:	0040036d 	.word	0x0040036d

00400548 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400548:	b4f0      	push	{r4, r5, r6, r7}
  40054a:	b082      	sub	sp, #8
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  40054c:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  400550:	2810      	cmp	r0, #16
  400552:	bf28      	it	cs
  400554:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  400556:	2800      	cmp	r0, #0
  400558:	bf08      	it	eq
  40055a:	2001      	moveq	r0, #1
{
  40055c:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40055e:	4d10      	ldr	r5, [pc, #64]	; (4005a0 <aat31xx_set_backlight+0x58>)
  400560:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  400564:	4637      	mov	r7, r6

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  400566:	2418      	movs	r4, #24
  400568:	636f      	str	r7, [r5, #52]	; 0x34
  40056a:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40056c:	9b01      	ldr	r3, [sp, #4]
  40056e:	1e5a      	subs	r2, r3, #1
  400570:	9201      	str	r2, [sp, #4]
  400572:	2b00      	cmp	r3, #0
  400574:	d1fa      	bne.n	40056c <aat31xx_set_backlight+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400576:	632e      	str	r6, [r5, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  400578:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40057a:	9b01      	ldr	r3, [sp, #4]
  40057c:	1e5a      	subs	r2, r3, #1
  40057e:	9201      	str	r2, [sp, #4]
  400580:	2b00      	cmp	r3, #0
  400582:	d1fa      	bne.n	40057a <aat31xx_set_backlight+0x32>
	for (i = 0; i < ul_level; i++) {
  400584:	3101      	adds	r1, #1
  400586:	4281      	cmp	r1, r0
  400588:	d3ee      	bcc.n	400568 <aat31xx_set_backlight+0x20>
		}
	}

	ul_delay = DELAY_ENABLE;
  40058a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40058e:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400590:	9b01      	ldr	r3, [sp, #4]
  400592:	1e5a      	subs	r2, r3, #1
  400594:	9201      	str	r2, [sp, #4]
  400596:	2b00      	cmp	r3, #0
  400598:	d1fa      	bne.n	400590 <aat31xx_set_backlight+0x48>
	}
}
  40059a:	b002      	add	sp, #8
  40059c:	bcf0      	pop	{r4, r5, r6, r7}
  40059e:	4770      	bx	lr
  4005a0:	400e1200 	.word	0x400e1200

004005a4 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  4005a4:	b082      	sub	sp, #8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4005aa:	4b06      	ldr	r3, [pc, #24]	; (4005c4 <aat31xx_disable_backlight+0x20>)
  4005ac:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  4005ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4005b2:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4005b4:	9b01      	ldr	r3, [sp, #4]
  4005b6:	1e5a      	subs	r2, r3, #1
  4005b8:	9201      	str	r2, [sp, #4]
  4005ba:	2b00      	cmp	r3, #0
  4005bc:	d1fa      	bne.n	4005b4 <aat31xx_disable_backlight+0x10>
	}
}
  4005be:	b002      	add	sp, #8
  4005c0:	4770      	bx	lr
  4005c2:	bf00      	nop
  4005c4:	400e1200 	.word	0x400e1200

004005c8 <ili9325_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  4005c8:	f3c0 4207 	ubfx	r2, r0, #16, #8
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4005cc:	4b03      	ldr	r3, [pc, #12]	; (4005dc <ili9325_write_ram+0x14>)
  4005ce:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  4005d0:	f3c0 2207 	ubfx	r2, r0, #8, #8
  4005d4:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  4005d6:	b2c0      	uxtb	r0, r0
  4005d8:	7018      	strb	r0, [r3, #0]
  4005da:	4770      	bx	lr
  4005dc:	62000002 	.word	0x62000002

004005e0 <ili9325_write_register>:
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4005e0:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4005e4:	2200      	movs	r2, #0
  4005e6:	701a      	strb	r2, [r3, #0]
  4005e8:	7018      	strb	r0, [r3, #0]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  4005ea:	0a0a      	lsrs	r2, r1, #8
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4005ec:	3302      	adds	r3, #2
  4005ee:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  4005f0:	b2c9      	uxtb	r1, r1
  4005f2:	7019      	strb	r1, [r3, #0]
  4005f4:	4770      	bx	lr
	...

004005f8 <ili9325_delay>:

/**
 * \brief Delay function.
 */
static void ili9325_delay(uint32_t ul_ms)
{
  4005f8:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  4005fa:	2300      	movs	r3, #0
  4005fc:	9301      	str	r3, [sp, #4]
  4005fe:	9b01      	ldr	r3, [sp, #4]
  400600:	4298      	cmp	r0, r3
  400602:	d911      	bls.n	400628 <ili9325_delay+0x30>
		for(i = 0; i < 100000; i++) {
  400604:	2100      	movs	r1, #0
  400606:	4a09      	ldr	r2, [pc, #36]	; (40062c <ili9325_delay+0x34>)
  400608:	9101      	str	r1, [sp, #4]
  40060a:	9b01      	ldr	r3, [sp, #4]
  40060c:	4293      	cmp	r3, r2
  40060e:	d805      	bhi.n	40061c <ili9325_delay+0x24>
  400610:	9b01      	ldr	r3, [sp, #4]
  400612:	3301      	adds	r3, #1
  400614:	9301      	str	r3, [sp, #4]
  400616:	9b01      	ldr	r3, [sp, #4]
  400618:	4293      	cmp	r3, r2
  40061a:	d9f9      	bls.n	400610 <ili9325_delay+0x18>
	for(i = 0; i < ul_ms; i++) {
  40061c:	9b01      	ldr	r3, [sp, #4]
  40061e:	3301      	adds	r3, #1
  400620:	9301      	str	r3, [sp, #4]
  400622:	9b01      	ldr	r3, [sp, #4]
  400624:	4283      	cmp	r3, r0
  400626:	d3ef      	bcc.n	400608 <ili9325_delay+0x10>
		}
	}
}
  400628:	b002      	add	sp, #8
  40062a:	4770      	bx	lr
  40062c:	0001869f 	.word	0x0001869f

00400630 <ili9325_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9325_display_on(void)
{
  400630:	b508      	push	{r3, lr}
	ili9325_write_register(ILI9325_DISP_CTRL1,
  400632:	f240 1133 	movw	r1, #307	; 0x133
  400636:	2007      	movs	r0, #7
  400638:	4b01      	ldr	r3, [pc, #4]	; (400640 <ili9325_display_on+0x10>)
  40063a:	4798      	blx	r3
  40063c:	bd08      	pop	{r3, pc}
  40063e:	bf00      	nop
  400640:	004005e1 	.word	0x004005e1

00400644 <ili9325_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
  400644:	4a04      	ldr	r2, [pc, #16]	; (400658 <ili9325_set_foreground_color+0x14>)
  400646:	1f13      	subs	r3, r2, #4
  400648:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  40064c:	f843 0f04 	str.w	r0, [r3, #4]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400650:	4293      	cmp	r3, r2
  400652:	d1fb      	bne.n	40064c <ili9325_set_foreground_color+0x8>
	}
}
  400654:	4770      	bx	lr
  400656:	bf00      	nop
  400658:	20000460 	.word	0x20000460

0040065c <ili9325_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  40065c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400660:	460c      	mov	r4, r1
  400662:	4690      	mov	r8, r2
  400664:	461f      	mov	r7, r3
	Assert(ul_y <= 0x13f);
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);
  400666:	b286      	uxth	r6, r0
  400668:	4631      	mov	r1, r6
  40066a:	2050      	movs	r0, #80	; 0x50
  40066c:	4d09      	ldr	r5, [pc, #36]	; (400694 <ili9325_set_window+0x38>)
  40066e:	47a8      	blx	r5

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  400670:	f108 31ff 	add.w	r1, r8, #4294967295
  400674:	4431      	add	r1, r6
  400676:	b289      	uxth	r1, r1
  400678:	2051      	movs	r0, #81	; 0x51
  40067a:	47a8      	blx	r5

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);
  40067c:	b2a4      	uxth	r4, r4
  40067e:	4621      	mov	r1, r4
  400680:	2052      	movs	r0, #82	; 0x52
  400682:	47a8      	blx	r5

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  400684:	1e79      	subs	r1, r7, #1
  400686:	4421      	add	r1, r4
  400688:	b289      	uxth	r1, r1
  40068a:	2053      	movs	r0, #83	; 0x53
  40068c:	47a8      	blx	r5
  40068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400692:	bf00      	nop
  400694:	004005e1 	.word	0x004005e1

00400698 <ili9325_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili9325_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  400698:	b538      	push	{r3, r4, r5, lr}
  40069a:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9325_write_register(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x); /* column */
  40069c:	4601      	mov	r1, r0
  40069e:	2020      	movs	r0, #32
  4006a0:	4c02      	ldr	r4, [pc, #8]	; (4006ac <ili9325_set_cursor_position+0x14>)
  4006a2:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y); /* row */
  4006a4:	4629      	mov	r1, r5
  4006a6:	2021      	movs	r0, #33	; 0x21
  4006a8:	47a0      	blx	r4
  4006aa:	bd38      	pop	{r3, r4, r5, pc}
  4006ac:	004005e1 	.word	0x004005e1

004006b0 <ili9325_init>:
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4006b0:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4006b4:	2200      	movs	r2, #0
  4006b6:	701a      	strb	r2, [r3, #0]
  4006b8:	701a      	strb	r2, [r3, #0]
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  4006ba:	4a5f      	ldr	r2, [pc, #380]	; (400838 <ili9325_init+0x188>)
  4006bc:	7811      	ldrb	r1, [r2, #0]
  4006be:	7813      	ldrb	r3, [r2, #0]
	us_value = (us_value << 8) | LCD_RD();
  4006c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (chipid != ILI9325_DEVICE_CODE) {
  4006c4:	b21b      	sxth	r3, r3
  4006c6:	4a5d      	ldr	r2, [pc, #372]	; (40083c <ili9325_init+0x18c>)
  4006c8:	4293      	cmp	r3, r2
  4006ca:	d001      	beq.n	4006d0 <ili9325_init+0x20>
		return 1;
  4006cc:	2001      	movs	r0, #1
  4006ce:	4770      	bx	lr
{
  4006d0:	b570      	push	{r4, r5, r6, lr}
  4006d2:	4605      	mov	r5, r0
	ili9325_write_register(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  4006d4:	2133      	movs	r1, #51	; 0x33
  4006d6:	2007      	movs	r0, #7
  4006d8:	4c59      	ldr	r4, [pc, #356]	; (400840 <ili9325_init+0x190>)
  4006da:	47a0      	blx	r4
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  4006dc:	2100      	movs	r1, #0
  4006de:	2010      	movs	r0, #16
  4006e0:	47a0      	blx	r4
	ili9325_write_register(ILI9325_START_OSC_CTRL, ILI9325_START_OSC_CTRL_EN);
  4006e2:	2101      	movs	r1, #1
  4006e4:	2000      	movs	r0, #0
  4006e6:	47a0      	blx	r4
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL1, ILI9325_DRIVER_OUTPUT_CTRL1_SS);
  4006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4006ec:	2001      	movs	r0, #1
  4006ee:	47a0      	blx	r4
	ili9325_write_register(ILI9325_LCD_DRIVING_CTRL, ILI9325_LCD_DRIVING_CTRL_BIT10 |
  4006f0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  4006f4:	2002      	movs	r0, #2
  4006f6:	47a0      	blx	r4
	ili9325_write_register(ILI9325_RESIZE_CTRL, 0x0000);
  4006f8:	2100      	movs	r1, #0
  4006fa:	2004      	movs	r0, #4
  4006fc:	47a0      	blx	r4
	ili9325_write_register(ILI9325_DISP_CTRL2, ILI9325_DISP_CTRL2_BP(0x07) |
  4006fe:	f240 2107 	movw	r1, #519	; 0x207
  400702:	2008      	movs	r0, #8
  400704:	47a0      	blx	r4
	ili9325_write_register(ILI9325_DISP_CTRL3, 0x0000);
  400706:	2100      	movs	r1, #0
  400708:	2009      	movs	r0, #9
  40070a:	47a0      	blx	r4
	ili9325_write_register(ILI9325_DISP_CTRL4, 0x0000);
  40070c:	2100      	movs	r1, #0
  40070e:	200a      	movs	r0, #10
  400710:	47a0      	blx	r4
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL1, 0x0000);
  400712:	2100      	movs	r1, #0
  400714:	200c      	movs	r0, #12
  400716:	47a0      	blx	r4
	ili9325_write_register(ILI9325_FRAME_MAKER_POS, 0x0000);
  400718:	2100      	movs	r1, #0
  40071a:	200d      	movs	r0, #13
  40071c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL2, 0x0000);
  40071e:	2100      	movs	r1, #0
  400720:	200f      	movs	r0, #15
  400722:	47a0      	blx	r4
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  400724:	2100      	movs	r1, #0
  400726:	2010      	movs	r0, #16
  400728:	47a0      	blx	r4
	ili9325_write_register(ILI9325_POWER_CTRL2, 0x0000);
  40072a:	2100      	movs	r1, #0
  40072c:	2011      	movs	r0, #17
  40072e:	47a0      	blx	r4
	ili9325_write_register(ILI9325_POWER_CTRL3, 0x0000);
  400730:	2100      	movs	r1, #0
  400732:	2012      	movs	r0, #18
  400734:	47a0      	blx	r4
	ili9325_write_register(ILI9325_POWER_CTRL4, 0x0000);
  400736:	2100      	movs	r1, #0
  400738:	2013      	movs	r0, #19
  40073a:	47a0      	blx	r4
	ili9325_delay(200);
  40073c:	20c8      	movs	r0, #200	; 0xc8
  40073e:	4e41      	ldr	r6, [pc, #260]	; (400844 <ili9325_init+0x194>)
  400740:	47b0      	blx	r6
	ili9325_write_register(ILI9325_POWER_CTRL1, ILI9325_POWER_CTRL1_SAP |
  400742:	f241 2190 	movw	r1, #4752	; 0x1290
  400746:	2010      	movs	r0, #16
  400748:	47a0      	blx	r4
	ili9325_write_register(ILI9325_POWER_CTRL2, ILI9325_POWER_CTRL2_DC1(0x02) |
  40074a:	f240 2127 	movw	r1, #551	; 0x227
  40074e:	2011      	movs	r0, #17
  400750:	47a0      	blx	r4
	ili9325_delay(50);
  400752:	2032      	movs	r0, #50	; 0x32
  400754:	47b0      	blx	r6
	ili9325_write_register(ILI9325_POWER_CTRL3, ILI9325_POWER_CTRL3_PON |
  400756:	211b      	movs	r1, #27
  400758:	2012      	movs	r0, #18
  40075a:	47a0      	blx	r4
	ili9325_delay(50);
  40075c:	2032      	movs	r0, #50	; 0x32
  40075e:	47b0      	blx	r6
	ili9325_write_register(ILI9325_POWER_CTRL4, ILI9325_POWER_CTRL4_VDV(0x11));
  400760:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  400764:	2013      	movs	r0, #19
  400766:	47a0      	blx	r4
	ili9325_write_register(ILI9325_POWER_CTRL7, ILI9325_POWER_CTRL7_VCM(0x19));
  400768:	2119      	movs	r1, #25
  40076a:	2029      	movs	r0, #41	; 0x29
  40076c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  40076e:	210d      	movs	r1, #13
  400770:	202b      	movs	r0, #43	; 0x2b
  400772:	47a0      	blx	r4
	ili9325_delay(50);
  400774:	2032      	movs	r0, #50	; 0x32
  400776:	47b0      	blx	r6
	ili9325_write_register(ILI9325_GAMMA_CTRL1, 0x0000);
  400778:	2100      	movs	r1, #0
  40077a:	2030      	movs	r0, #48	; 0x30
  40077c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL2, ILI9325_GAMMA_CTRL2_KP3(0x02) |
  40077e:	f44f 7101 	mov.w	r1, #516	; 0x204
  400782:	2031      	movs	r0, #49	; 0x31
  400784:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL3, ILI9325_GAMMA_CTRL3_KP5(0x02) |
  400786:	f44f 7100 	mov.w	r1, #512	; 0x200
  40078a:	2032      	movs	r0, #50	; 0x32
  40078c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL4, ILI9325_GAMMA_CTRL4_RP1(0x00) |
  40078e:	2107      	movs	r1, #7
  400790:	2035      	movs	r0, #53	; 0x35
  400792:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL5, ILI9325_GAMMA_CTRL5_VRP1(0x14) |
  400794:	f241 4104 	movw	r1, #5124	; 0x1404
  400798:	2036      	movs	r0, #54	; 0x36
  40079a:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL6, ILI9325_GAMMA_CTRL6_KN1(0x07) |
  40079c:	f240 7105 	movw	r1, #1797	; 0x705
  4007a0:	2037      	movs	r0, #55	; 0x37
  4007a2:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL7, ILI9325_GAMMA_CTRL7_KN3(0x03) |
  4007a4:	f240 3105 	movw	r1, #773	; 0x305
  4007a8:	2038      	movs	r0, #56	; 0x38
  4007aa:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL8, ILI9325_GAMMA_CTRL8_KN5(0x07) |
  4007ac:	f240 7107 	movw	r1, #1799	; 0x707
  4007b0:	2039      	movs	r0, #57	; 0x39
  4007b2:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL9, ILI9325_GAMMA_CTRL9_RN1(0x07) |
  4007b4:	f240 7101 	movw	r1, #1793	; 0x701
  4007b8:	203c      	movs	r0, #60	; 0x3c
  4007ba:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL10, ILI9325_GAMMA_CTRL10_VRN1(0x00) |
  4007bc:	210e      	movs	r1, #14
  4007be:	203d      	movs	r0, #61	; 0x3d
  4007c0:	47a0      	blx	r4
	ili9325_write_register(ILI9325_ENTRY_MODE, ILI9325_ENTRY_MODE_TRI |
  4007c2:	f24d 0110 	movw	r1, #53264	; 0xd010
  4007c6:	2003      	movs	r0, #3
  4007c8:	47a0      	blx	r4
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL2, ILI9325_DRIVER_OUTPUT_CTRL2_GS |
  4007ca:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  4007ce:	2060      	movs	r0, #96	; 0x60
  4007d0:	47a0      	blx	r4
	ili9325_write_register(ILI9325_BASE_IMG_DISP_CTRL, ILI9325_BASE_IMG_DISP_CTRL_REV);
  4007d2:	2101      	movs	r1, #1
  4007d4:	2061      	movs	r0, #97	; 0x61
  4007d6:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_SCROLL_CTRL, 0x0000);
  4007d8:	2100      	movs	r1, #0
  4007da:	206a      	movs	r0, #106	; 0x6a
  4007dc:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_DISP_POS, 0x0000);
  4007de:	2100      	movs	r1, #0
  4007e0:	2080      	movs	r0, #128	; 0x80
  4007e2:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_START_LINE, 0x0000);
  4007e4:	2100      	movs	r1, #0
  4007e6:	2081      	movs	r0, #129	; 0x81
  4007e8:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_END_LINE, 0x0000);
  4007ea:	2100      	movs	r1, #0
  4007ec:	2082      	movs	r0, #130	; 0x82
  4007ee:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_DISP_POS, 0x0000);
  4007f0:	2100      	movs	r1, #0
  4007f2:	2083      	movs	r0, #131	; 0x83
  4007f4:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_START_LINE, 0x0000);
  4007f6:	2100      	movs	r1, #0
  4007f8:	2084      	movs	r0, #132	; 0x84
  4007fa:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_END_LINE, 0x0000);
  4007fc:	2100      	movs	r1, #0
  4007fe:	2085      	movs	r0, #133	; 0x85
  400800:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL1,
  400802:	2110      	movs	r1, #16
  400804:	2090      	movs	r0, #144	; 0x90
  400806:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL2,
  400808:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40080c:	2092      	movs	r0, #146	; 0x92
  40080e:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
  400810:	f44f 7188 	mov.w	r1, #272	; 0x110
  400814:	2095      	movs	r0, #149	; 0x95
  400816:	47a0      	blx	r4
	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400818:	686b      	ldr	r3, [r5, #4]
  40081a:	682a      	ldr	r2, [r5, #0]
  40081c:	2100      	movs	r1, #0
  40081e:	4608      	mov	r0, r1
  400820:	4c09      	ldr	r4, [pc, #36]	; (400848 <ili9325_init+0x198>)
  400822:	47a0      	blx	r4
	ili9325_set_foreground_color(p_opt->foreground_color);
  400824:	68a8      	ldr	r0, [r5, #8]
  400826:	4b09      	ldr	r3, [pc, #36]	; (40084c <ili9325_init+0x19c>)
  400828:	4798      	blx	r3
	ili9325_set_cursor_position(0, 0);
  40082a:	2100      	movs	r1, #0
  40082c:	4608      	mov	r0, r1
  40082e:	4b08      	ldr	r3, [pc, #32]	; (400850 <ili9325_init+0x1a0>)
  400830:	4798      	blx	r3
	return 0;
  400832:	2000      	movs	r0, #0
  400834:	bd70      	pop	{r4, r5, r6, pc}
  400836:	bf00      	nop
  400838:	62000002 	.word	0x62000002
  40083c:	ffff9325 	.word	0xffff9325
  400840:	004005e1 	.word	0x004005e1
  400844:	004005f9 	.word	0x004005f9
  400848:	0040065d 	.word	0x0040065d
  40084c:	00400645 	.word	0x00400645
  400850:	00400699 	.word	0x00400699

00400854 <ili9325_fill>:
{
  400854:	b570      	push	{r4, r5, r6, lr}
  400856:	4606      	mov	r6, r0
	ili9325_set_cursor_position(0, 0);
  400858:	2100      	movs	r1, #0
  40085a:	4608      	mov	r0, r1
  40085c:	4b07      	ldr	r3, [pc, #28]	; (40087c <ili9325_fill+0x28>)
  40085e:	4798      	blx	r3
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400860:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400864:	2200      	movs	r2, #0
  400866:	701a      	strb	r2, [r3, #0]
  400868:	2222      	movs	r2, #34	; 0x22
  40086a:	701a      	strb	r2, [r3, #0]
  40086c:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
		ili9325_write_ram(ul_color);
  400870:	4d03      	ldr	r5, [pc, #12]	; (400880 <ili9325_fill+0x2c>)
  400872:	4630      	mov	r0, r6
  400874:	47a8      	blx	r5
	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
  400876:	3c01      	subs	r4, #1
  400878:	d1fb      	bne.n	400872 <ili9325_fill+0x1e>
}
  40087a:	bd70      	pop	{r4, r5, r6, pc}
  40087c:	00400699 	.word	0x00400699
  400880:	004005c9 	.word	0x004005c9

00400884 <ili9325_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  400884:	28ef      	cmp	r0, #239	; 0xef
  400886:	d815      	bhi.n	4008b4 <ili9325_draw_pixel+0x30>
  400888:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  40088c:	d301      	bcc.n	400892 <ili9325_draw_pixel+0xe>
		return 1;
  40088e:	2001      	movs	r0, #1
  400890:	4770      	bx	lr
{
  400892:	b510      	push	{r4, lr}
	}

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  400894:	b289      	uxth	r1, r1
  400896:	b280      	uxth	r0, r0
  400898:	4b07      	ldr	r3, [pc, #28]	; (4008b8 <ili9325_draw_pixel+0x34>)
  40089a:	4798      	blx	r3
  40089c:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4008a0:	2400      	movs	r4, #0
  4008a2:	701c      	strb	r4, [r3, #0]
  4008a4:	2222      	movs	r2, #34	; 0x22
  4008a6:	701a      	strb	r2, [r3, #0]

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  4008a8:	4b04      	ldr	r3, [pc, #16]	; (4008bc <ili9325_draw_pixel+0x38>)
  4008aa:	6818      	ldr	r0, [r3, #0]
  4008ac:	4b04      	ldr	r3, [pc, #16]	; (4008c0 <ili9325_draw_pixel+0x3c>)
  4008ae:	4798      	blx	r3
	return 0;
  4008b0:	4620      	mov	r0, r4
  4008b2:	bd10      	pop	{r4, pc}
		return 1;
  4008b4:	2001      	movs	r0, #1
  4008b6:	4770      	bx	lr
  4008b8:	00400699 	.word	0x00400699
  4008bc:	20000460 	.word	0x20000460
  4008c0:	004005c9 	.word	0x004005c9

004008c4 <ili9325_draw_prepare>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_draw_prepare(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  4008c4:	b570      	push	{r4, r5, r6, lr}
  4008c6:	4604      	mov	r4, r0
  4008c8:	460d      	mov	r5, r1
	/* Determine the refresh window area */
	ili9325_set_window(ul_x, ul_y, ul_width, ul_height);
  4008ca:	4e06      	ldr	r6, [pc, #24]	; (4008e4 <ili9325_draw_prepare+0x20>)
  4008cc:	47b0      	blx	r6

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  4008ce:	b2a9      	uxth	r1, r5
  4008d0:	b2a0      	uxth	r0, r4
  4008d2:	4b05      	ldr	r3, [pc, #20]	; (4008e8 <ili9325_draw_prepare+0x24>)
  4008d4:	4798      	blx	r3
  4008d6:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4008da:	2200      	movs	r2, #0
  4008dc:	701a      	strb	r2, [r3, #0]
  4008de:	2222      	movs	r2, #34	; 0x22
  4008e0:	701a      	strb	r2, [r3, #0]
  4008e2:	bd70      	pop	{r4, r5, r6, pc}
  4008e4:	0040065d 	.word	0x0040065d
  4008e8:	00400699 	.word	0x00400699

004008ec <ili9325_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  4008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008f0:	b085      	sub	sp, #20
  4008f2:	9003      	str	r0, [sp, #12]
  4008f4:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4008f6:	7813      	ldrb	r3, [r2, #0]
  4008f8:	2b00      	cmp	r3, #0
  4008fa:	d048      	beq.n	40098e <ili9325_draw_string+0xa2>
  4008fc:	468b      	mov	fp, r1
  4008fe:	9001      	str	r0, [sp, #4]
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  400900:	f8df 8094 	ldr.w	r8, [pc, #148]	; 400998 <ili9325_draw_string+0xac>
  400904:	e033      	b.n	40096e <ili9325_draw_string+0x82>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  400906:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  40090a:	9b03      	ldr	r3, [sp, #12]
  40090c:	9301      	str	r3, [sp, #4]
  40090e:	e029      	b.n	400964 <ili9325_draw_string+0x78>
  400910:	3c01      	subs	r4, #1
		for (row = 0; row < 8; row++) {
  400912:	f1b4 3fff 	cmp.w	r4, #4294967295
  400916:	d009      	beq.n	40092c <ili9325_draw_string+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400918:	782b      	ldrb	r3, [r5, #0]
  40091a:	4123      	asrs	r3, r4
  40091c:	f013 0f01 	tst.w	r3, #1
  400920:	d0f6      	beq.n	400910 <ili9325_draw_string+0x24>
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  400922:	ebaa 0104 	sub.w	r1, sl, r4
  400926:	4630      	mov	r0, r6
  400928:	47c0      	blx	r8
  40092a:	e7f1      	b.n	400910 <ili9325_draw_string+0x24>
		for (row = 0; row < 8; row++) {
  40092c:	2407      	movs	r4, #7
				ili9325_draw_pixel(ul_x + col, ul_y + row + 8);
  40092e:	f10b 090f 	add.w	r9, fp, #15
  400932:	e002      	b.n	40093a <ili9325_draw_string+0x4e>
  400934:	3c01      	subs	r4, #1
		for (row = 0; row < 6; row++) {
  400936:	2c01      	cmp	r4, #1
  400938:	d009      	beq.n	40094e <ili9325_draw_string+0x62>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  40093a:	787b      	ldrb	r3, [r7, #1]
  40093c:	4123      	asrs	r3, r4
  40093e:	f013 0f01 	tst.w	r3, #1
  400942:	d0f7      	beq.n	400934 <ili9325_draw_string+0x48>
				ili9325_draw_pixel(ul_x + col, ul_y + row + 8);
  400944:	eba9 0104 	sub.w	r1, r9, r4
  400948:	4630      	mov	r0, r6
  40094a:	47c0      	blx	r8
  40094c:	e7f2      	b.n	400934 <ili9325_draw_string+0x48>
  40094e:	3502      	adds	r5, #2
  400950:	3601      	adds	r6, #1
	for (col = 0; col < 10; col++) {
  400952:	9b00      	ldr	r3, [sp, #0]
  400954:	42b3      	cmp	r3, r6
  400956:	d002      	beq.n	40095e <ili9325_draw_string+0x72>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400958:	2407      	movs	r4, #7
  40095a:	462f      	mov	r7, r5
  40095c:	e7dc      	b.n	400918 <ili9325_draw_string+0x2c>
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  40095e:	9b01      	ldr	r3, [sp, #4]
  400960:	330c      	adds	r3, #12
  400962:	9301      	str	r3, [sp, #4]
	while (*p_str != 0) {
  400964:	9a02      	ldr	r2, [sp, #8]
  400966:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40096a:	9202      	str	r2, [sp, #8]
  40096c:	b17b      	cbz	r3, 40098e <ili9325_draw_string+0xa2>
		if (*p_str == '\n') {
  40096e:	2b0a      	cmp	r3, #10
  400970:	d0c9      	beq.n	400906 <ili9325_draw_string+0x1a>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400972:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400976:	4d07      	ldr	r5, [pc, #28]	; (400994 <ili9325_draw_string+0xa8>)
  400978:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  40097c:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
  400980:	9e01      	ldr	r6, [sp, #4]
  400982:	4633      	mov	r3, r6
  400984:	330a      	adds	r3, #10
  400986:	9300      	str	r3, [sp, #0]
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  400988:	f10b 0a07 	add.w	sl, fp, #7
  40098c:	e7e4      	b.n	400958 <ili9325_draw_string+0x6c>
		}
		p_str++;
	}
}
  40098e:	b005      	add	sp, #20
  400990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400994:	004021d4 	.word	0x004021d4
  400998:	00400885 	.word	0x00400885

0040099c <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  40099c:	0109      	lsls	r1, r1, #4
  40099e:	5042      	str	r2, [r0, r1]
  4009a0:	4770      	bx	lr

004009a2 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  4009a2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009a6:	604a      	str	r2, [r1, #4]
  4009a8:	4770      	bx	lr

004009aa <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  4009aa:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009ae:	608a      	str	r2, [r1, #8]
  4009b0:	4770      	bx	lr

004009b2 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  4009b2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009b6:	60ca      	str	r2, [r1, #12]
  4009b8:	4770      	bx	lr

004009ba <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4009ba:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4009be:	0053      	lsls	r3, r2, #1
  4009c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009c4:	fbb2 f2f3 	udiv	r2, r2, r3
  4009c8:	3a01      	subs	r2, #1
  4009ca:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4009ce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4009d2:	4770      	bx	lr

004009d4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009d4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009d6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4009da:	d039      	beq.n	400a50 <pio_set_peripheral+0x7c>
  4009dc:	d813      	bhi.n	400a06 <pio_set_peripheral+0x32>
  4009de:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4009e2:	d025      	beq.n	400a30 <pio_set_peripheral+0x5c>
  4009e4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4009e8:	d10a      	bne.n	400a00 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4009ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4009ec:	4313      	orrs	r3, r2
  4009ee:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4009f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4009f2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4009f4:	400b      	ands	r3, r1
  4009f6:	ea23 0302 	bic.w	r3, r3, r2
  4009fa:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4009fc:	6042      	str	r2, [r0, #4]
  4009fe:	4770      	bx	lr
	switch (ul_type) {
  400a00:	2900      	cmp	r1, #0
  400a02:	d1fb      	bne.n	4009fc <pio_set_peripheral+0x28>
  400a04:	4770      	bx	lr
  400a06:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400a0a:	d020      	beq.n	400a4e <pio_set_peripheral+0x7a>
  400a0c:	d809      	bhi.n	400a22 <pio_set_peripheral+0x4e>
  400a0e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a12:	d1f3      	bne.n	4009fc <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a14:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a16:	4313      	orrs	r3, r2
  400a18:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a1a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a1c:	4313      	orrs	r3, r2
  400a1e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a20:	e7ec      	b.n	4009fc <pio_set_peripheral+0x28>
	switch (ul_type) {
  400a22:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a26:	d012      	beq.n	400a4e <pio_set_peripheral+0x7a>
  400a28:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a2c:	d00f      	beq.n	400a4e <pio_set_peripheral+0x7a>
  400a2e:	e7e5      	b.n	4009fc <pio_set_peripheral+0x28>
{
  400a30:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a32:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a34:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400a36:	43d3      	mvns	r3, r2
  400a38:	4021      	ands	r1, r4
  400a3a:	461c      	mov	r4, r3
  400a3c:	4019      	ands	r1, r3
  400a3e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a40:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a42:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a44:	400b      	ands	r3, r1
  400a46:	4023      	ands	r3, r4
  400a48:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400a4a:	6042      	str	r2, [r0, #4]
}
  400a4c:	bc10      	pop	{r4}
  400a4e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a50:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a52:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400a54:	400b      	ands	r3, r1
  400a56:	ea23 0302 	bic.w	r3, r3, r2
  400a5a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a5c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a5e:	4313      	orrs	r3, r2
  400a60:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a62:	e7cb      	b.n	4009fc <pio_set_peripheral+0x28>

00400a64 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400a64:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400a66:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400a6a:	bf14      	ite	ne
  400a6c:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400a6e:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400a70:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400a74:	bf14      	ite	ne
  400a76:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400a78:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400a7a:	f012 0f02 	tst.w	r2, #2
  400a7e:	d107      	bne.n	400a90 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400a80:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400a84:	bf18      	it	ne
  400a86:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400a8a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400a8c:	6001      	str	r1, [r0, #0]
  400a8e:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400a90:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400a94:	e7f9      	b.n	400a8a <pio_set_input+0x26>

00400a96 <pio_set_output>:
{
  400a96:	b410      	push	{r4}
  400a98:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400a9a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400a9c:	b944      	cbnz	r4, 400ab0 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400a9e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400aa0:	b143      	cbz	r3, 400ab4 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400aa2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400aa4:	b942      	cbnz	r2, 400ab8 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  400aa6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400aa8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400aaa:	6001      	str	r1, [r0, #0]
}
  400aac:	bc10      	pop	{r4}
  400aae:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400ab0:	6641      	str	r1, [r0, #100]	; 0x64
  400ab2:	e7f5      	b.n	400aa0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400ab4:	6541      	str	r1, [r0, #84]	; 0x54
  400ab6:	e7f5      	b.n	400aa4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400ab8:	6301      	str	r1, [r0, #48]	; 0x30
  400aba:	e7f5      	b.n	400aa8 <pio_set_output+0x12>

00400abc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400abc:	f012 0f10 	tst.w	r2, #16
  400ac0:	d010      	beq.n	400ae4 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  400ac2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400ac6:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  400aca:	bf14      	ite	ne
  400acc:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  400ad0:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  400ad4:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  400ad8:	bf14      	ite	ne
  400ada:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  400ade:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400ae2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400ae4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400ae8:	4770      	bx	lr

00400aea <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400aea:	6401      	str	r1, [r0, #64]	; 0x40
  400aec:	4770      	bx	lr

00400aee <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  400aee:	6441      	str	r1, [r0, #68]	; 0x44
  400af0:	4770      	bx	lr

00400af2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400af2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400af4:	4770      	bx	lr

00400af6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400af6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400af8:	4770      	bx	lr
	...

00400afc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400afc:	b570      	push	{r4, r5, r6, lr}
  400afe:	b082      	sub	sp, #8
  400b00:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b02:	0943      	lsrs	r3, r0, #5
  400b04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b08:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b0c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400b0e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b16:	d053      	beq.n	400bc0 <pio_configure_pin+0xc4>
  400b18:	d80a      	bhi.n	400b30 <pio_configure_pin+0x34>
  400b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b1e:	d02d      	beq.n	400b7c <pio_configure_pin+0x80>
  400b20:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400b24:	d03b      	beq.n	400b9e <pio_configure_pin+0xa2>
  400b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400b2a:	d015      	beq.n	400b58 <pio_configure_pin+0x5c>
		return 0;
  400b2c:	2000      	movs	r0, #0
  400b2e:	e023      	b.n	400b78 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400b30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b34:	d055      	beq.n	400be2 <pio_configure_pin+0xe6>
  400b36:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400b3a:	d052      	beq.n	400be2 <pio_configure_pin+0xe6>
  400b3c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b40:	d1f4      	bne.n	400b2c <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400b42:	f000 011f 	and.w	r1, r0, #31
  400b46:	2601      	movs	r6, #1
  400b48:	462a      	mov	r2, r5
  400b4a:	fa06 f101 	lsl.w	r1, r6, r1
  400b4e:	4620      	mov	r0, r4
  400b50:	4b2f      	ldr	r3, [pc, #188]	; (400c10 <pio_configure_pin+0x114>)
  400b52:	4798      	blx	r3
	return 1;
  400b54:	4630      	mov	r0, r6
		break;
  400b56:	e00f      	b.n	400b78 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400b58:	f000 001f 	and.w	r0, r0, #31
  400b5c:	2601      	movs	r6, #1
  400b5e:	4086      	lsls	r6, r0
  400b60:	4632      	mov	r2, r6
  400b62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b66:	4620      	mov	r0, r4
  400b68:	4b2a      	ldr	r3, [pc, #168]	; (400c14 <pio_configure_pin+0x118>)
  400b6a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400b6c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b70:	bf14      	ite	ne
  400b72:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400b74:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400b76:	2001      	movs	r0, #1
}
  400b78:	b002      	add	sp, #8
  400b7a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400b7c:	f000 001f 	and.w	r0, r0, #31
  400b80:	2601      	movs	r6, #1
  400b82:	4086      	lsls	r6, r0
  400b84:	4632      	mov	r2, r6
  400b86:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b8a:	4620      	mov	r0, r4
  400b8c:	4b21      	ldr	r3, [pc, #132]	; (400c14 <pio_configure_pin+0x118>)
  400b8e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400b90:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b94:	bf14      	ite	ne
  400b96:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400b98:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400b9a:	2001      	movs	r0, #1
  400b9c:	e7ec      	b.n	400b78 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400b9e:	f000 001f 	and.w	r0, r0, #31
  400ba2:	2601      	movs	r6, #1
  400ba4:	4086      	lsls	r6, r0
  400ba6:	4632      	mov	r2, r6
  400ba8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400bac:	4620      	mov	r0, r4
  400bae:	4b19      	ldr	r3, [pc, #100]	; (400c14 <pio_configure_pin+0x118>)
  400bb0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400bb2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bb6:	bf14      	ite	ne
  400bb8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400bba:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400bbc:	2001      	movs	r0, #1
  400bbe:	e7db      	b.n	400b78 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400bc0:	f000 001f 	and.w	r0, r0, #31
  400bc4:	2601      	movs	r6, #1
  400bc6:	4086      	lsls	r6, r0
  400bc8:	4632      	mov	r2, r6
  400bca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400bce:	4620      	mov	r0, r4
  400bd0:	4b10      	ldr	r3, [pc, #64]	; (400c14 <pio_configure_pin+0x118>)
  400bd2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400bd4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bd8:	bf14      	ite	ne
  400bda:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400bdc:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400bde:	2001      	movs	r0, #1
  400be0:	e7ca      	b.n	400b78 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400be2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400be6:	f000 011f 	and.w	r1, r0, #31
  400bea:	2601      	movs	r6, #1
  400bec:	ea05 0306 	and.w	r3, r5, r6
  400bf0:	9300      	str	r3, [sp, #0]
  400bf2:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400bf6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400bfa:	bf14      	ite	ne
  400bfc:	2200      	movne	r2, #0
  400bfe:	2201      	moveq	r2, #1
  400c00:	fa06 f101 	lsl.w	r1, r6, r1
  400c04:	4620      	mov	r0, r4
  400c06:	4c04      	ldr	r4, [pc, #16]	; (400c18 <pio_configure_pin+0x11c>)
  400c08:	47a0      	blx	r4
	return 1;
  400c0a:	4630      	mov	r0, r6
		break;
  400c0c:	e7b4      	b.n	400b78 <pio_configure_pin+0x7c>
  400c0e:	bf00      	nop
  400c10:	00400a65 	.word	0x00400a65
  400c14:	004009d5 	.word	0x004009d5
  400c18:	00400a97 	.word	0x00400a97

00400c1c <pio_capture_enable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  400c1c:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400c20:	f043 0301 	orr.w	r3, r3, #1
  400c24:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = true;
  400c28:	2201      	movs	r2, #1
  400c2a:	4b01      	ldr	r3, [pc, #4]	; (400c30 <pio_capture_enable+0x14>)
  400c2c:	601a      	str	r2, [r3, #0]
  400c2e:	4770      	bx	lr
  400c30:	200008a0 	.word	0x200008a0

00400c34 <pio_capture_disable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  400c34:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400c38:	f023 0301 	bic.w	r3, r3, #1
  400c3c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = false;
  400c40:	2200      	movs	r2, #0
  400c42:	4b01      	ldr	r3, [pc, #4]	; (400c48 <pio_capture_disable+0x14>)
  400c44:	601a      	str	r2, [r3, #0]
  400c46:	4770      	bx	lr
  400c48:	200008a0 	.word	0x200008a0

00400c4c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c50:	4681      	mov	r9, r0
  400c52:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c54:	4b12      	ldr	r3, [pc, #72]	; (400ca0 <pio_handler_process+0x54>)
  400c56:	4798      	blx	r3
  400c58:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c5a:	4648      	mov	r0, r9
  400c5c:	4b11      	ldr	r3, [pc, #68]	; (400ca4 <pio_handler_process+0x58>)
  400c5e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c60:	4005      	ands	r5, r0
  400c62:	d013      	beq.n	400c8c <pio_handler_process+0x40>
  400c64:	4c10      	ldr	r4, [pc, #64]	; (400ca8 <pio_handler_process+0x5c>)
  400c66:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c6a:	e003      	b.n	400c74 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c6c:	42b4      	cmp	r4, r6
  400c6e:	d00d      	beq.n	400c8c <pio_handler_process+0x40>
  400c70:	3410      	adds	r4, #16
		while (status != 0) {
  400c72:	b15d      	cbz	r5, 400c8c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c74:	6820      	ldr	r0, [r4, #0]
  400c76:	42b8      	cmp	r0, r7
  400c78:	d1f8      	bne.n	400c6c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c7a:	6861      	ldr	r1, [r4, #4]
  400c7c:	4229      	tst	r1, r5
  400c7e:	d0f5      	beq.n	400c6c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c80:	68e3      	ldr	r3, [r4, #12]
  400c82:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c84:	6863      	ldr	r3, [r4, #4]
  400c86:	ea25 0503 	bic.w	r5, r5, r3
  400c8a:	e7ef      	b.n	400c6c <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c8c:	4b07      	ldr	r3, [pc, #28]	; (400cac <pio_handler_process+0x60>)
  400c8e:	681b      	ldr	r3, [r3, #0]
  400c90:	b123      	cbz	r3, 400c9c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400c92:	4b07      	ldr	r3, [pc, #28]	; (400cb0 <pio_handler_process+0x64>)
  400c94:	681b      	ldr	r3, [r3, #0]
  400c96:	b10b      	cbz	r3, 400c9c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400c98:	4648      	mov	r0, r9
  400c9a:	4798      	blx	r3
  400c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ca0:	00400af3 	.word	0x00400af3
  400ca4:	00400af7 	.word	0x00400af7
  400ca8:	20000820 	.word	0x20000820
  400cac:	200008a0 	.word	0x200008a0
  400cb0:	20000894 	.word	0x20000894

00400cb4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400cb6:	4c18      	ldr	r4, [pc, #96]	; (400d18 <pio_handler_set+0x64>)
  400cb8:	6826      	ldr	r6, [r4, #0]
  400cba:	2e06      	cmp	r6, #6
  400cbc:	d829      	bhi.n	400d12 <pio_handler_set+0x5e>
  400cbe:	f04f 0c00 	mov.w	ip, #0
  400cc2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400cc4:	4f15      	ldr	r7, [pc, #84]	; (400d1c <pio_handler_set+0x68>)
  400cc6:	e004      	b.n	400cd2 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400cc8:	3401      	adds	r4, #1
  400cca:	b2e4      	uxtb	r4, r4
  400ccc:	46a4      	mov	ip, r4
  400cce:	42a6      	cmp	r6, r4
  400cd0:	d309      	bcc.n	400ce6 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400cd2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400cd4:	0125      	lsls	r5, r4, #4
  400cd6:	597d      	ldr	r5, [r7, r5]
  400cd8:	428d      	cmp	r5, r1
  400cda:	d1f5      	bne.n	400cc8 <pio_handler_set+0x14>
  400cdc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400ce0:	686d      	ldr	r5, [r5, #4]
  400ce2:	4295      	cmp	r5, r2
  400ce4:	d1f0      	bne.n	400cc8 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400ce6:	4d0d      	ldr	r5, [pc, #52]	; (400d1c <pio_handler_set+0x68>)
  400ce8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400cec:	eb05 040e 	add.w	r4, r5, lr
  400cf0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400cf4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400cf6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400cf8:	9906      	ldr	r1, [sp, #24]
  400cfa:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400cfc:	3601      	adds	r6, #1
  400cfe:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  400d00:	bf04      	itt	eq
  400d02:	4905      	ldreq	r1, [pc, #20]	; (400d18 <pio_handler_set+0x64>)
  400d04:	600e      	streq	r6, [r1, #0]
  400d06:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400d08:	461a      	mov	r2, r3
  400d0a:	4b05      	ldr	r3, [pc, #20]	; (400d20 <pio_handler_set+0x6c>)
  400d0c:	4798      	blx	r3

	return 0;
  400d0e:	2000      	movs	r0, #0
  400d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  400d12:	2001      	movs	r0, #1
}
  400d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d16:	bf00      	nop
  400d18:	20000890 	.word	0x20000890
  400d1c:	20000820 	.word	0x20000820
  400d20:	00400abd 	.word	0x00400abd

00400d24 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d24:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d26:	210b      	movs	r1, #11
  400d28:	4801      	ldr	r0, [pc, #4]	; (400d30 <PIOA_Handler+0xc>)
  400d2a:	4b02      	ldr	r3, [pc, #8]	; (400d34 <PIOA_Handler+0x10>)
  400d2c:	4798      	blx	r3
  400d2e:	bd08      	pop	{r3, pc}
  400d30:	400e0e00 	.word	0x400e0e00
  400d34:	00400c4d 	.word	0x00400c4d

00400d38 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d38:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d3a:	210c      	movs	r1, #12
  400d3c:	4801      	ldr	r0, [pc, #4]	; (400d44 <PIOB_Handler+0xc>)
  400d3e:	4b02      	ldr	r3, [pc, #8]	; (400d48 <PIOB_Handler+0x10>)
  400d40:	4798      	blx	r3
  400d42:	bd08      	pop	{r3, pc}
  400d44:	400e1000 	.word	0x400e1000
  400d48:	00400c4d 	.word	0x00400c4d

00400d4c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d4e:	210d      	movs	r1, #13
  400d50:	4801      	ldr	r0, [pc, #4]	; (400d58 <PIOC_Handler+0xc>)
  400d52:	4b02      	ldr	r3, [pc, #8]	; (400d5c <PIOC_Handler+0x10>)
  400d54:	4798      	blx	r3
  400d56:	bd08      	pop	{r3, pc}
  400d58:	400e1200 	.word	0x400e1200
  400d5c:	00400c4d 	.word	0x00400c4d

00400d60 <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d60:	4a16      	ldr	r2, [pc, #88]	; (400dbc <pmc_switch_mck_to_pllbck+0x5c>)
  400d62:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d68:	4318      	orrs	r0, r3
  400d6a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d6c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d6e:	f013 0f08 	tst.w	r3, #8
  400d72:	d10a      	bne.n	400d8a <pmc_switch_mck_to_pllbck+0x2a>
  400d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d78:	4910      	ldr	r1, [pc, #64]	; (400dbc <pmc_switch_mck_to_pllbck+0x5c>)
  400d7a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d7c:	f012 0f08 	tst.w	r2, #8
  400d80:	d103      	bne.n	400d8a <pmc_switch_mck_to_pllbck+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d82:	3b01      	subs	r3, #1
  400d84:	d1f9      	bne.n	400d7a <pmc_switch_mck_to_pllbck+0x1a>
			return 1;
  400d86:	2001      	movs	r0, #1
  400d88:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d8a:	4b0c      	ldr	r3, [pc, #48]	; (400dbc <pmc_switch_mck_to_pllbck+0x5c>)
  400d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d8e:	f042 0203 	orr.w	r2, r2, #3
  400d92:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d96:	f013 0f08 	tst.w	r3, #8
  400d9a:	d10a      	bne.n	400db2 <pmc_switch_mck_to_pllbck+0x52>
  400d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400da0:	4906      	ldr	r1, [pc, #24]	; (400dbc <pmc_switch_mck_to_pllbck+0x5c>)
  400da2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400da4:	f012 0f08 	tst.w	r2, #8
  400da8:	d105      	bne.n	400db6 <pmc_switch_mck_to_pllbck+0x56>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400daa:	3b01      	subs	r3, #1
  400dac:	d1f9      	bne.n	400da2 <pmc_switch_mck_to_pllbck+0x42>
			return 1;
  400dae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400db0:	4770      	bx	lr
	return 0;
  400db2:	2000      	movs	r0, #0
  400db4:	4770      	bx	lr
  400db6:	2000      	movs	r0, #0
  400db8:	4770      	bx	lr
  400dba:	bf00      	nop
  400dbc:	400e0400 	.word	0x400e0400

00400dc0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dc0:	b9c8      	cbnz	r0, 400df6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dc2:	4a11      	ldr	r2, [pc, #68]	; (400e08 <pmc_switch_mainck_to_xtal+0x48>)
  400dc4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400dc6:	0209      	lsls	r1, r1, #8
  400dc8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400dce:	f023 0303 	bic.w	r3, r3, #3
  400dd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400dd6:	f043 0301 	orr.w	r3, r3, #1
  400dda:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ddc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400dde:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400de0:	f013 0f01 	tst.w	r3, #1
  400de4:	d0fb      	beq.n	400dde <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400de6:	4a08      	ldr	r2, [pc, #32]	; (400e08 <pmc_switch_mainck_to_xtal+0x48>)
  400de8:	6a13      	ldr	r3, [r2, #32]
  400dea:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400df2:	6213      	str	r3, [r2, #32]
  400df4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400df6:	4904      	ldr	r1, [pc, #16]	; (400e08 <pmc_switch_mainck_to_xtal+0x48>)
  400df8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400dfa:	4a04      	ldr	r2, [pc, #16]	; (400e0c <pmc_switch_mainck_to_xtal+0x4c>)
  400dfc:	401a      	ands	r2, r3
  400dfe:	4b04      	ldr	r3, [pc, #16]	; (400e10 <pmc_switch_mainck_to_xtal+0x50>)
  400e00:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e02:	620b      	str	r3, [r1, #32]
  400e04:	4770      	bx	lr
  400e06:	bf00      	nop
  400e08:	400e0400 	.word	0x400e0400
  400e0c:	fec8fffc 	.word	0xfec8fffc
  400e10:	01370002 	.word	0x01370002

00400e14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e14:	4b02      	ldr	r3, [pc, #8]	; (400e20 <pmc_osc_is_ready_mainck+0xc>)
  400e16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e1c:	4770      	bx	lr
  400e1e:	bf00      	nop
  400e20:	400e0400 	.word	0x400e0400

00400e24 <pmc_enable_pllack>:
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  400e24:	b410      	push	{r4}
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e26:	4c0b      	ldr	r4, [pc, #44]	; (400e54 <pmc_enable_pllack+0x30>)
  400e28:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  400e2c:	62a3      	str	r3, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400e2e:	4b0a      	ldr	r3, [pc, #40]	; (400e58 <pmc_enable_pllack+0x34>)
  400e30:	ea03 4000 	and.w	r0, r3, r0, lsl #16
  400e34:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400e38:	b2d2      	uxtb	r2, r2
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400e3a:	4310      	orrs	r0, r2
  400e3c:	0209      	lsls	r1, r1, #8
  400e3e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
  400e42:	4308      	orrs	r0, r1
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400e44:	62a0      	str	r0, [r4, #40]	; 0x28
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  400e46:	4622      	mov	r2, r4
  400e48:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e4a:	f013 0f02 	tst.w	r3, #2
  400e4e:	d0fb      	beq.n	400e48 <pmc_enable_pllack+0x24>
}
  400e50:	bc10      	pop	{r4}
  400e52:	4770      	bx	lr
  400e54:	400e0400 	.word	0x400e0400
  400e58:	07ff0000 	.word	0x07ff0000

00400e5c <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400e5c:	2200      	movs	r2, #0
  400e5e:	4b01      	ldr	r3, [pc, #4]	; (400e64 <pmc_disable_pllbck+0x8>)
  400e60:	62da      	str	r2, [r3, #44]	; 0x2c
  400e62:	4770      	bx	lr
  400e64:	400e0400 	.word	0x400e0400

00400e68 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400e68:	4b02      	ldr	r3, [pc, #8]	; (400e74 <pmc_is_locked_pllbck+0xc>)
  400e6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e6c:	f000 0004 	and.w	r0, r0, #4
  400e70:	4770      	bx	lr
  400e72:	bf00      	nop
  400e74:	400e0400 	.word	0x400e0400

00400e78 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400e78:	2822      	cmp	r0, #34	; 0x22
  400e7a:	d81e      	bhi.n	400eba <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400e7c:	281f      	cmp	r0, #31
  400e7e:	d80c      	bhi.n	400e9a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e80:	4b11      	ldr	r3, [pc, #68]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400e82:	699a      	ldr	r2, [r3, #24]
  400e84:	2301      	movs	r3, #1
  400e86:	4083      	lsls	r3, r0
  400e88:	4393      	bics	r3, r2
  400e8a:	d018      	beq.n	400ebe <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e8c:	2301      	movs	r3, #1
  400e8e:	fa03 f000 	lsl.w	r0, r3, r0
  400e92:	4b0d      	ldr	r3, [pc, #52]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400e94:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400e96:	2000      	movs	r0, #0
  400e98:	4770      	bx	lr
		ul_id -= 32;
  400e9a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e9c:	4b0a      	ldr	r3, [pc, #40]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400e9e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ea2:	2301      	movs	r3, #1
  400ea4:	4083      	lsls	r3, r0
  400ea6:	4393      	bics	r3, r2
  400ea8:	d00b      	beq.n	400ec2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400eaa:	2301      	movs	r3, #1
  400eac:	fa03 f000 	lsl.w	r0, r3, r0
  400eb0:	4b05      	ldr	r3, [pc, #20]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400eb2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400eb6:	2000      	movs	r0, #0
  400eb8:	4770      	bx	lr
		return 1;
  400eba:	2001      	movs	r0, #1
  400ebc:	4770      	bx	lr
	return 0;
  400ebe:	2000      	movs	r0, #0
  400ec0:	4770      	bx	lr
  400ec2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400ec4:	4770      	bx	lr
  400ec6:	bf00      	nop
  400ec8:	400e0400 	.word	0x400e0400

00400ecc <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400ecc:	4b2a      	ldr	r3, [pc, #168]	; (400f78 <twi_set_speed+0xac>)
  400ece:	4299      	cmp	r1, r3
  400ed0:	d849      	bhi.n	400f66 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400ed2:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400ed6:	4299      	cmp	r1, r3
  400ed8:	d92b      	bls.n	400f32 <twi_set_speed+0x66>
{
  400eda:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400edc:	4c27      	ldr	r4, [pc, #156]	; (400f7c <twi_set_speed+0xb0>)
  400ede:	fba4 3402 	umull	r3, r4, r4, r2
  400ee2:	0ba4      	lsrs	r4, r4, #14
  400ee4:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400ee6:	4b26      	ldr	r3, [pc, #152]	; (400f80 <twi_set_speed+0xb4>)
  400ee8:	440b      	add	r3, r1
  400eea:	009b      	lsls	r3, r3, #2
  400eec:	fbb2 f2f3 	udiv	r2, r2, r3
  400ef0:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ef2:	2cff      	cmp	r4, #255	; 0xff
  400ef4:	d939      	bls.n	400f6a <twi_set_speed+0x9e>
  400ef6:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400ef8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400efa:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400efc:	2cff      	cmp	r4, #255	; 0xff
  400efe:	d90d      	bls.n	400f1c <twi_set_speed+0x50>
  400f00:	2907      	cmp	r1, #7
  400f02:	d1f9      	bne.n	400ef8 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400f04:	0213      	lsls	r3, r2, #8
  400f06:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400f08:	0409      	lsls	r1, r1, #16
  400f0a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400f0e:	430b      	orrs	r3, r1
  400f10:	b2e4      	uxtb	r4, r4
  400f12:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  400f14:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400f16:	2000      	movs	r0, #0
}
  400f18:	bc10      	pop	{r4}
  400f1a:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f1c:	2aff      	cmp	r2, #255	; 0xff
  400f1e:	d9f1      	bls.n	400f04 <twi_set_speed+0x38>
  400f20:	2906      	cmp	r1, #6
  400f22:	d8ef      	bhi.n	400f04 <twi_set_speed+0x38>
			ckdiv++;
  400f24:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  400f26:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f28:	2aff      	cmp	r2, #255	; 0xff
  400f2a:	d9eb      	bls.n	400f04 <twi_set_speed+0x38>
  400f2c:	2906      	cmp	r1, #6
  400f2e:	d9f9      	bls.n	400f24 <twi_set_speed+0x58>
  400f30:	e7e8      	b.n	400f04 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400f32:	0049      	lsls	r1, r1, #1
  400f34:	fbb2 f2f1 	udiv	r2, r2, r1
  400f38:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f3a:	2aff      	cmp	r2, #255	; 0xff
  400f3c:	d911      	bls.n	400f62 <twi_set_speed+0x96>
  400f3e:	2300      	movs	r3, #0
			ckdiv++;
  400f40:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  400f42:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f44:	2aff      	cmp	r2, #255	; 0xff
  400f46:	d901      	bls.n	400f4c <twi_set_speed+0x80>
  400f48:	2b07      	cmp	r3, #7
  400f4a:	d1f9      	bne.n	400f40 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400f4c:	0211      	lsls	r1, r2, #8
  400f4e:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  400f50:	041b      	lsls	r3, r3, #16
  400f52:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400f56:	430b      	orrs	r3, r1
  400f58:	b2d2      	uxtb	r2, r2
  400f5a:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  400f5c:	6102      	str	r2, [r0, #16]
	return PASS;
  400f5e:	2000      	movs	r0, #0
  400f60:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400f62:	2300      	movs	r3, #0
  400f64:	e7f2      	b.n	400f4c <twi_set_speed+0x80>
		return FAIL;
  400f66:	2001      	movs	r0, #1
  400f68:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f6a:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  400f6c:	bf88      	it	hi
  400f6e:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f70:	d8d8      	bhi.n	400f24 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
  400f72:	2100      	movs	r1, #0
  400f74:	e7c6      	b.n	400f04 <twi_set_speed+0x38>
  400f76:	bf00      	nop
  400f78:	00061a80 	.word	0x00061a80
  400f7c:	057619f1 	.word	0x057619f1
  400f80:	3ffd1200 	.word	0x3ffd1200

00400f84 <twi_master_init>:
{
  400f84:	b538      	push	{r3, r4, r5, lr}
  400f86:	4604      	mov	r4, r0
  400f88:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  400f8a:	f04f 33ff 	mov.w	r3, #4294967295
  400f8e:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  400f90:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400f92:	2380      	movs	r3, #128	; 0x80
  400f94:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400f96:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400f98:	2308      	movs	r3, #8
  400f9a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400f9c:	2320      	movs	r3, #32
  400f9e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  400fa0:	2304      	movs	r3, #4
  400fa2:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400fa4:	680a      	ldr	r2, [r1, #0]
  400fa6:	6849      	ldr	r1, [r1, #4]
  400fa8:	4b05      	ldr	r3, [pc, #20]	; (400fc0 <twi_master_init+0x3c>)
  400faa:	4798      	blx	r3
  400fac:	2801      	cmp	r0, #1
  400fae:	bf14      	ite	ne
  400fb0:	2000      	movne	r0, #0
  400fb2:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  400fb4:	7a6b      	ldrb	r3, [r5, #9]
  400fb6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400fb8:	bf04      	itt	eq
  400fba:	2340      	moveq	r3, #64	; 0x40
  400fbc:	6023      	streq	r3, [r4, #0]
}
  400fbe:	bd38      	pop	{r3, r4, r5, pc}
  400fc0:	00400ecd 	.word	0x00400ecd

00400fc4 <twi_mk_addr>:
	if (len == 0)
  400fc4:	460a      	mov	r2, r1
  400fc6:	b159      	cbz	r1, 400fe0 <twi_mk_addr+0x1c>
	val = addr[0];
  400fc8:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  400fca:	2901      	cmp	r1, #1
		val |= addr[1];
  400fcc:	bfc4      	itt	gt
  400fce:	7841      	ldrbgt	r1, [r0, #1]
  400fd0:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  400fd4:	2a02      	cmp	r2, #2
  400fd6:	dd04      	ble.n	400fe2 <twi_mk_addr+0x1e>
		val |= addr[2];
  400fd8:	7882      	ldrb	r2, [r0, #2]
  400fda:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  400fde:	e000      	b.n	400fe2 <twi_mk_addr+0x1e>
		return 0;
  400fe0:	2300      	movs	r3, #0
}
  400fe2:	4618      	mov	r0, r3
  400fe4:	4770      	bx	lr
	...

00400fe8 <twi_master_read>:
{
  400fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  400fea:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  400fec:	2c00      	cmp	r4, #0
  400fee:	d04f      	beq.n	401090 <twi_master_read+0xa8>
  400ff0:	460b      	mov	r3, r1
  400ff2:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  400ff4:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  400ff6:	2000      	movs	r0, #0
  400ff8:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400ffa:	684a      	ldr	r2, [r1, #4]
  400ffc:	0212      	lsls	r2, r2, #8
  400ffe:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401002:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  401006:	7c09      	ldrb	r1, [r1, #16]
  401008:	0409      	lsls	r1, r1, #16
  40100a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  40100e:	430a      	orrs	r2, r1
  401010:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  401012:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401014:	6859      	ldr	r1, [r3, #4]
  401016:	4618      	mov	r0, r3
  401018:	4b22      	ldr	r3, [pc, #136]	; (4010a4 <twi_master_read+0xbc>)
  40101a:	4798      	blx	r3
  40101c:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  40101e:	2c01      	cmp	r4, #1
  401020:	d00f      	beq.n	401042 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  401022:	2301      	movs	r3, #1
  401024:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401026:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  401028:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  40102a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40102e:	d136      	bne.n	40109e <twi_master_read+0xb6>
  401030:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  401034:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  401038:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  40103c:	f04f 0c02 	mov.w	ip, #2
  401040:	e019      	b.n	401076 <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401042:	2303      	movs	r3, #3
  401044:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401046:	2001      	movs	r0, #1
  401048:	e7ee      	b.n	401028 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  40104a:	460a      	mov	r2, r1
  40104c:	4670      	mov	r0, lr
  40104e:	e00c      	b.n	40106a <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  401050:	b908      	cbnz	r0, 401056 <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  401052:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  401056:	f013 0f02 	tst.w	r3, #2
  40105a:	d0f6      	beq.n	40104a <twi_master_read+0x62>
  40105c:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  40105e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401060:	7033      	strb	r3, [r6, #0]
		cnt--;
  401062:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  401064:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  401066:	463a      	mov	r2, r7
	while (cnt > 0) {
  401068:	b164      	cbz	r4, 401084 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  40106a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  40106c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401070:	d111      	bne.n	401096 <twi_master_read+0xae>
		if (!timeout--) {
  401072:	1e51      	subs	r1, r2, #1
  401074:	b18a      	cbz	r2, 40109a <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
  401076:	2c01      	cmp	r4, #1
  401078:	d0ea      	beq.n	401050 <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  40107a:	f013 0f02 	tst.w	r3, #2
  40107e:	d1ee      	bne.n	40105e <twi_master_read+0x76>
  401080:	460a      	mov	r2, r1
  401082:	e7f1      	b.n	401068 <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401084:	6a2b      	ldr	r3, [r5, #32]
  401086:	f013 0f01 	tst.w	r3, #1
  40108a:	d0fb      	beq.n	401084 <twi_master_read+0x9c>
	p_twi->TWI_SR;
  40108c:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
  40108e:	e000      	b.n	401092 <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
  401090:	2401      	movs	r4, #1
}
  401092:	4620      	mov	r0, r4
  401094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  401096:	2405      	movs	r4, #5
  401098:	e7fb      	b.n	401092 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
  40109a:	2409      	movs	r4, #9
  40109c:	e7f9      	b.n	401092 <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
  40109e:	2405      	movs	r4, #5
  4010a0:	e7f7      	b.n	401092 <twi_master_read+0xaa>
  4010a2:	bf00      	nop
  4010a4:	00400fc5 	.word	0x00400fc5

004010a8 <twi_master_write>:
{
  4010a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t cnt = p_packet->length;
  4010aa:	68cd      	ldr	r5, [r1, #12]
	if (cnt == 0) {
  4010ac:	2d00      	cmp	r5, #0
  4010ae:	d035      	beq.n	40111c <twi_master_write+0x74>
  4010b0:	460b      	mov	r3, r1
  4010b2:	4604      	mov	r4, r0
	uint8_t *buffer = p_packet->buffer;
  4010b4:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  4010b6:	2000      	movs	r0, #0
  4010b8:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4010ba:	7c0a      	ldrb	r2, [r1, #16]
  4010bc:	0412      	lsls	r2, r2, #16
  4010be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4010c2:	6849      	ldr	r1, [r1, #4]
  4010c4:	0209      	lsls	r1, r1, #8
  4010c6:	f401 7140 	and.w	r1, r1, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4010ca:	430a      	orrs	r2, r1
  4010cc:	6062      	str	r2, [r4, #4]
	p_twi->TWI_IADR = 0;
  4010ce:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4010d0:	6859      	ldr	r1, [r3, #4]
  4010d2:	4618      	mov	r0, r3
  4010d4:	4b15      	ldr	r3, [pc, #84]	; (40112c <twi_master_write+0x84>)
  4010d6:	4798      	blx	r3
  4010d8:	60e0      	str	r0, [r4, #12]
		status = p_twi->TWI_SR;
  4010da:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4010dc:	f413 7f80 	tst.w	r3, #256	; 0x100
  4010e0:	d006      	beq.n	4010f0 <twi_master_write+0x48>
			return TWI_RECEIVE_NACK;
  4010e2:	2505      	movs	r5, #5
  4010e4:	e01b      	b.n	40111e <twi_master_write+0x76>
	while (cnt > 0) {
  4010e6:	b15d      	cbz	r5, 401100 <twi_master_write+0x58>
		status = p_twi->TWI_SR;
  4010e8:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4010ea:	f413 7f80 	tst.w	r3, #256	; 0x100
  4010ee:	d118      	bne.n	401122 <twi_master_write+0x7a>
		if (!(status & TWI_SR_TXRDY)) {
  4010f0:	f013 0f04 	tst.w	r3, #4
  4010f4:	d0f7      	beq.n	4010e6 <twi_master_write+0x3e>
		p_twi->TWI_THR = *buffer++;
  4010f6:	7833      	ldrb	r3, [r6, #0]
  4010f8:	6363      	str	r3, [r4, #52]	; 0x34
		cnt--;
  4010fa:	3d01      	subs	r5, #1
		p_twi->TWI_THR = *buffer++;
  4010fc:	3601      	adds	r6, #1
  4010fe:	e7f2      	b.n	4010e6 <twi_master_write+0x3e>
		status = p_twi->TWI_SR;
  401100:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401102:	f413 7f80 	tst.w	r3, #256	; 0x100
  401106:	d10e      	bne.n	401126 <twi_master_write+0x7e>
		if (status & TWI_SR_TXRDY) {
  401108:	f013 0f04 	tst.w	r3, #4
  40110c:	d0f8      	beq.n	401100 <twi_master_write+0x58>
	p_twi->TWI_CR = TWI_CR_STOP;
  40110e:	2302      	movs	r3, #2
  401110:	6023      	str	r3, [r4, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401112:	6a23      	ldr	r3, [r4, #32]
  401114:	f013 0f01 	tst.w	r3, #1
  401118:	d0fb      	beq.n	401112 <twi_master_write+0x6a>
  40111a:	e000      	b.n	40111e <twi_master_write+0x76>
		return TWI_INVALID_ARGUMENT;
  40111c:	2501      	movs	r5, #1
}
  40111e:	4628      	mov	r0, r5
  401120:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
  401122:	2505      	movs	r5, #5
  401124:	e7fb      	b.n	40111e <twi_master_write+0x76>
			return TWI_RECEIVE_NACK;
  401126:	2505      	movs	r5, #5
  401128:	e7f9      	b.n	40111e <twi_master_write+0x76>
  40112a:	bf00      	nop
  40112c:	00400fc5 	.word	0x00400fc5

00401130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401130:	e7fe      	b.n	401130 <Dummy_Handler>
	...

00401134 <Reset_Handler>:
{
  401134:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  401136:	4b21      	ldr	r3, [pc, #132]	; (4011bc <Reset_Handler+0x88>)
  401138:	4a21      	ldr	r2, [pc, #132]	; (4011c0 <Reset_Handler+0x8c>)
  40113a:	429a      	cmp	r2, r3
  40113c:	d928      	bls.n	401190 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  40113e:	4b21      	ldr	r3, [pc, #132]	; (4011c4 <Reset_Handler+0x90>)
  401140:	4a1e      	ldr	r2, [pc, #120]	; (4011bc <Reset_Handler+0x88>)
  401142:	429a      	cmp	r2, r3
  401144:	d20c      	bcs.n	401160 <Reset_Handler+0x2c>
  401146:	3b01      	subs	r3, #1
  401148:	1a9b      	subs	r3, r3, r2
  40114a:	f023 0303 	bic.w	r3, r3, #3
  40114e:	3304      	adds	r3, #4
  401150:	4413      	add	r3, r2
  401152:	491b      	ldr	r1, [pc, #108]	; (4011c0 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  401154:	f851 0b04 	ldr.w	r0, [r1], #4
  401158:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40115c:	429a      	cmp	r2, r3
  40115e:	d1f9      	bne.n	401154 <Reset_Handler+0x20>
	__NOP();
  401160:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  401162:	4b19      	ldr	r3, [pc, #100]	; (4011c8 <Reset_Handler+0x94>)
  401164:	4a19      	ldr	r2, [pc, #100]	; (4011cc <Reset_Handler+0x98>)
  401166:	429a      	cmp	r2, r3
  401168:	d20a      	bcs.n	401180 <Reset_Handler+0x4c>
  40116a:	3b01      	subs	r3, #1
  40116c:	1a9b      	subs	r3, r3, r2
  40116e:	f023 0303 	bic.w	r3, r3, #3
  401172:	3304      	adds	r3, #4
  401174:	4413      	add	r3, r2
		*pDest++ = 0;
  401176:	2100      	movs	r1, #0
  401178:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  40117c:	429a      	cmp	r2, r3
  40117e:	d1fb      	bne.n	401178 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  401180:	4b13      	ldr	r3, [pc, #76]	; (4011d0 <Reset_Handler+0x9c>)
  401182:	4a14      	ldr	r2, [pc, #80]	; (4011d4 <Reset_Handler+0xa0>)
  401184:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  401186:	4b14      	ldr	r3, [pc, #80]	; (4011d8 <Reset_Handler+0xa4>)
  401188:	4798      	blx	r3
	main();
  40118a:	4b14      	ldr	r3, [pc, #80]	; (4011dc <Reset_Handler+0xa8>)
  40118c:	4798      	blx	r3
  40118e:	e7fe      	b.n	40118e <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  401190:	4b0a      	ldr	r3, [pc, #40]	; (4011bc <Reset_Handler+0x88>)
  401192:	4a0b      	ldr	r2, [pc, #44]	; (4011c0 <Reset_Handler+0x8c>)
  401194:	429a      	cmp	r2, r3
  401196:	d2e3      	bcs.n	401160 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401198:	4b0a      	ldr	r3, [pc, #40]	; (4011c4 <Reset_Handler+0x90>)
  40119a:	4808      	ldr	r0, [pc, #32]	; (4011bc <Reset_Handler+0x88>)
  40119c:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40119e:	4611      	mov	r1, r2
  4011a0:	3a04      	subs	r2, #4
  4011a2:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  4011a4:	2800      	cmp	r0, #0
  4011a6:	d0db      	beq.n	401160 <Reset_Handler+0x2c>
  4011a8:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  4011ac:	f852 0904 	ldr.w	r0, [r2], #-4
  4011b0:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  4011b4:	42ca      	cmn	r2, r1
  4011b6:	d1f9      	bne.n	4011ac <Reset_Handler+0x78>
  4011b8:	e7d2      	b.n	401160 <Reset_Handler+0x2c>
  4011ba:	bf00      	nop
  4011bc:	20000000 	.word	0x20000000
  4011c0:	004029f8 	.word	0x004029f8
  4011c4:	20000444 	.word	0x20000444
  4011c8:	200008cc 	.word	0x200008cc
  4011cc:	20000444 	.word	0x20000444
  4011d0:	e000ed00 	.word	0xe000ed00
  4011d4:	00400000 	.word	0x00400000
  4011d8:	004017e5 	.word	0x004017e5
  4011dc:	0040137d 	.word	0x0040137d

004011e0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4011e0:	4b3c      	ldr	r3, [pc, #240]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  4011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011e4:	f003 0303 	and.w	r3, r3, #3
  4011e8:	2b03      	cmp	r3, #3
  4011ea:	d80e      	bhi.n	40120a <SystemCoreClockUpdate+0x2a>
  4011ec:	e8df f003 	tbb	[pc, r3]
  4011f0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4011f4:	4b38      	ldr	r3, [pc, #224]	; (4012d8 <SystemCoreClockUpdate+0xf8>)
  4011f6:	695b      	ldr	r3, [r3, #20]
  4011f8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4011fc:	bf14      	ite	ne
  4011fe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401202:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401206:	4b35      	ldr	r3, [pc, #212]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  401208:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40120a:	4b32      	ldr	r3, [pc, #200]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  40120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40120e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401212:	2b70      	cmp	r3, #112	; 0x70
  401214:	d055      	beq.n	4012c2 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401216:	4b2f      	ldr	r3, [pc, #188]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  40121a:	4930      	ldr	r1, [pc, #192]	; (4012dc <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40121c:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  401220:	680b      	ldr	r3, [r1, #0]
  401222:	40d3      	lsrs	r3, r2
  401224:	600b      	str	r3, [r1, #0]
  401226:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401228:	4b2a      	ldr	r3, [pc, #168]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  40122a:	6a1b      	ldr	r3, [r3, #32]
  40122c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401230:	d003      	beq.n	40123a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401232:	4a2b      	ldr	r2, [pc, #172]	; (4012e0 <SystemCoreClockUpdate+0x100>)
  401234:	4b29      	ldr	r3, [pc, #164]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  401236:	601a      	str	r2, [r3, #0]
  401238:	e7e7      	b.n	40120a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40123a:	4a2a      	ldr	r2, [pc, #168]	; (4012e4 <SystemCoreClockUpdate+0x104>)
  40123c:	4b27      	ldr	r3, [pc, #156]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  40123e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401240:	4b24      	ldr	r3, [pc, #144]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401242:	6a1b      	ldr	r3, [r3, #32]
  401244:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401248:	2b10      	cmp	r3, #16
  40124a:	d005      	beq.n	401258 <SystemCoreClockUpdate+0x78>
  40124c:	2b20      	cmp	r3, #32
  40124e:	d1dc      	bne.n	40120a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401250:	4a23      	ldr	r2, [pc, #140]	; (4012e0 <SystemCoreClockUpdate+0x100>)
  401252:	4b22      	ldr	r3, [pc, #136]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  401254:	601a      	str	r2, [r3, #0]
			break;
  401256:	e7d8      	b.n	40120a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401258:	4a23      	ldr	r2, [pc, #140]	; (4012e8 <SystemCoreClockUpdate+0x108>)
  40125a:	4b20      	ldr	r3, [pc, #128]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  40125c:	601a      	str	r2, [r3, #0]
			break;
  40125e:	e7d4      	b.n	40120a <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401260:	4b1c      	ldr	r3, [pc, #112]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401262:	6a1b      	ldr	r3, [r3, #32]
  401264:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401268:	d018      	beq.n	40129c <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40126a:	4a1d      	ldr	r2, [pc, #116]	; (4012e0 <SystemCoreClockUpdate+0x100>)
  40126c:	4b1b      	ldr	r3, [pc, #108]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  40126e:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401270:	4b18      	ldr	r3, [pc, #96]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401274:	f003 0303 	and.w	r3, r3, #3
  401278:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40127a:	4a16      	ldr	r2, [pc, #88]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  40127c:	bf07      	ittee	eq
  40127e:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401280:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401282:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401284:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401286:	4815      	ldr	r0, [pc, #84]	; (4012dc <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401288:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40128c:	6803      	ldr	r3, [r0, #0]
  40128e:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  401292:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401294:	fbb3 f3f2 	udiv	r3, r3, r2
  401298:	6003      	str	r3, [r0, #0]
  40129a:	e7b6      	b.n	40120a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40129c:	4a11      	ldr	r2, [pc, #68]	; (4012e4 <SystemCoreClockUpdate+0x104>)
  40129e:	4b0f      	ldr	r3, [pc, #60]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  4012a0:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4012a2:	4b0c      	ldr	r3, [pc, #48]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  4012a4:	6a1b      	ldr	r3, [r3, #32]
  4012a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012aa:	2b10      	cmp	r3, #16
  4012ac:	d005      	beq.n	4012ba <SystemCoreClockUpdate+0xda>
  4012ae:	2b20      	cmp	r3, #32
  4012b0:	d1de      	bne.n	401270 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4012b2:	4a0b      	ldr	r2, [pc, #44]	; (4012e0 <SystemCoreClockUpdate+0x100>)
  4012b4:	4b09      	ldr	r3, [pc, #36]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  4012b6:	601a      	str	r2, [r3, #0]
					break;
  4012b8:	e7da      	b.n	401270 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4012ba:	4a0b      	ldr	r2, [pc, #44]	; (4012e8 <SystemCoreClockUpdate+0x108>)
  4012bc:	4b07      	ldr	r3, [pc, #28]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  4012be:	601a      	str	r2, [r3, #0]
					break;
  4012c0:	e7d6      	b.n	401270 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4012c2:	4a06      	ldr	r2, [pc, #24]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  4012c4:	6813      	ldr	r3, [r2, #0]
  4012c6:	4909      	ldr	r1, [pc, #36]	; (4012ec <SystemCoreClockUpdate+0x10c>)
  4012c8:	fba1 1303 	umull	r1, r3, r1, r3
  4012cc:	085b      	lsrs	r3, r3, #1
  4012ce:	6013      	str	r3, [r2, #0]
  4012d0:	4770      	bx	lr
  4012d2:	bf00      	nop
  4012d4:	400e0400 	.word	0x400e0400
  4012d8:	400e1410 	.word	0x400e1410
  4012dc:	2000000c 	.word	0x2000000c
  4012e0:	00b71b00 	.word	0x00b71b00
  4012e4:	003d0900 	.word	0x003d0900
  4012e8:	007a1200 	.word	0x007a1200
  4012ec:	aaaaaaab 	.word	0xaaaaaaab

004012f0 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4012f0:	4b12      	ldr	r3, [pc, #72]	; (40133c <system_init_flash+0x4c>)
  4012f2:	4298      	cmp	r0, r3
  4012f4:	d911      	bls.n	40131a <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4012f6:	4b12      	ldr	r3, [pc, #72]	; (401340 <system_init_flash+0x50>)
  4012f8:	4298      	cmp	r0, r3
  4012fa:	d913      	bls.n	401324 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4012fc:	4b11      	ldr	r3, [pc, #68]	; (401344 <system_init_flash+0x54>)
  4012fe:	4298      	cmp	r0, r3
  401300:	d914      	bls.n	40132c <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401302:	4b11      	ldr	r3, [pc, #68]	; (401348 <system_init_flash+0x58>)
  401304:	4298      	cmp	r0, r3
  401306:	d915      	bls.n	401334 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401308:	4b10      	ldr	r3, [pc, #64]	; (40134c <system_init_flash+0x5c>)
  40130a:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40130c:	bf94      	ite	ls
  40130e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401312:	4a0f      	ldrhi	r2, [pc, #60]	; (401350 <system_init_flash+0x60>)
  401314:	4b0f      	ldr	r3, [pc, #60]	; (401354 <system_init_flash+0x64>)
  401316:	601a      	str	r2, [r3, #0]
  401318:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40131a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40131e:	4b0d      	ldr	r3, [pc, #52]	; (401354 <system_init_flash+0x64>)
  401320:	601a      	str	r2, [r3, #0]
  401322:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401324:	4a0c      	ldr	r2, [pc, #48]	; (401358 <system_init_flash+0x68>)
  401326:	4b0b      	ldr	r3, [pc, #44]	; (401354 <system_init_flash+0x64>)
  401328:	601a      	str	r2, [r3, #0]
  40132a:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40132c:	4a0b      	ldr	r2, [pc, #44]	; (40135c <system_init_flash+0x6c>)
  40132e:	4b09      	ldr	r3, [pc, #36]	; (401354 <system_init_flash+0x64>)
  401330:	601a      	str	r2, [r3, #0]
  401332:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401334:	4a0a      	ldr	r2, [pc, #40]	; (401360 <system_init_flash+0x70>)
  401336:	4b07      	ldr	r3, [pc, #28]	; (401354 <system_init_flash+0x64>)
  401338:	601a      	str	r2, [r3, #0]
  40133a:	4770      	bx	lr
  40133c:	01312cff 	.word	0x01312cff
  401340:	026259ff 	.word	0x026259ff
  401344:	039386ff 	.word	0x039386ff
  401348:	04c4b3ff 	.word	0x04c4b3ff
  40134c:	05f5e0ff 	.word	0x05f5e0ff
  401350:	04000500 	.word	0x04000500
  401354:	400e0a00 	.word	0x400e0a00
  401358:	04000100 	.word	0x04000100
  40135c:	04000200 	.word	0x04000200
  401360:	04000300 	.word	0x04000300

00401364 <vsync_handler>:
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  401364:	2201      	movs	r2, #1
  401366:	4b01      	ldr	r3, [pc, #4]	; (40136c <vsync_handler+0x8>)
  401368:	601a      	str	r2, [r3, #0]
  40136a:	4770      	bx	lr
  40136c:	2000089c 	.word	0x2000089c

00401370 <button_handler>:
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_push_button_trigger = true;
  401370:	2201      	movs	r2, #1
  401372:	4b01      	ldr	r3, [pc, #4]	; (401378 <button_handler+0x8>)
  401374:	601a      	str	r2, [r3, #0]
  401376:	4770      	bx	lr
  401378:	20000898 	.word	0x20000898

0040137c <main>:
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  40137c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  401380:	b087      	sub	sp, #28
	sysclk_init();
  401382:	4bb0      	ldr	r3, [pc, #704]	; (401644 <main+0x2c8>)
  401384:	4798      	blx	r3
	board_init();
  401386:	4bb0      	ldr	r3, [pc, #704]	; (401648 <main+0x2cc>)
  401388:	4798      	blx	r3

	/* OV7740 send image sensor data at 24 Mhz. For best performances, PCK0
	 * which will capture OV7740 data, has to work at 24Mhz. It's easier and
	 * optimum to use one PLL for core (PLLB) and one other for PCK0 (PLLA).
	 */
	pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  40138a:	2201      	movs	r2, #1
  40138c:	4611      	mov	r1, r2
  40138e:	2007      	movs	r0, #7
  401390:	4bae      	ldr	r3, [pc, #696]	; (40164c <main+0x2d0>)
  401392:	4798      	blx	r3
	pmc_enable_periph_clk( ID_SMC );
  401394:	200a      	movs	r0, #10
  401396:	4eae      	ldr	r6, [pc, #696]	; (401650 <main+0x2d4>)
  401398:	47b0      	blx	r6
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  40139a:	4cae      	ldr	r4, [pc, #696]	; (401654 <main+0x2d8>)
  40139c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  4013a0:	2102      	movs	r1, #2
  4013a2:	4620      	mov	r0, r4
  4013a4:	f8df a350 	ldr.w	sl, [pc, #848]	; 4016f8 <main+0x37c>
  4013a8:	47d0      	blx	sl
	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  4013aa:	4aab      	ldr	r2, [pc, #684]	; (401658 <main+0x2dc>)
  4013ac:	2102      	movs	r1, #2
  4013ae:	4620      	mov	r0, r4
  4013b0:	f8df 9348 	ldr.w	r9, [pc, #840]	; 4016fc <main+0x380>
  4013b4:	47c8      	blx	r9
	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  4013b6:	4aa9      	ldr	r2, [pc, #676]	; (40165c <main+0x2e0>)
  4013b8:	2102      	movs	r1, #2
  4013ba:	4620      	mov	r0, r4
  4013bc:	f8df 8340 	ldr.w	r8, [pc, #832]	; 401700 <main+0x384>
  4013c0:	47c0      	blx	r8
	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
  4013c2:	2203      	movs	r2, #3
  4013c4:	2102      	movs	r1, #2
  4013c6:	4620      	mov	r0, r4
  4013c8:	4fa5      	ldr	r7, [pc, #660]	; (401660 <main+0x2e4>)
  4013ca:	47b8      	blx	r7
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  4013cc:	23f0      	movs	r3, #240	; 0xf0
  4013ce:	9302      	str	r3, [sp, #8]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  4013d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4013d4:	9303      	str	r3, [sp, #12]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  4013d6:	2500      	movs	r5, #0
  4013d8:	9504      	str	r5, [sp, #16]
	ili9325_display_opt.background_color = COLOR_WHITE;
  4013da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4013de:	9305      	str	r3, [sp, #20]
	aat31xx_disable_backlight();
  4013e0:	4ba0      	ldr	r3, [pc, #640]	; (401664 <main+0x2e8>)
  4013e2:	4798      	blx	r3
	ili9325_init(&ili9325_display_opt);
  4013e4:	a802      	add	r0, sp, #8
  4013e6:	4ba0      	ldr	r3, [pc, #640]	; (401668 <main+0x2ec>)
  4013e8:	4798      	blx	r3
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  4013ea:	2010      	movs	r0, #16
  4013ec:	4b9f      	ldr	r3, [pc, #636]	; (40166c <main+0x2f0>)
  4013ee:	4798      	blx	r3
	ili9325_display_on();
  4013f0:	4b9f      	ldr	r3, [pc, #636]	; (401670 <main+0x2f4>)
  4013f2:	4798      	blx	r3

	/* LCD display initialization */
	display_init();

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
  4013f4:	489f      	ldr	r0, [pc, #636]	; (401674 <main+0x2f8>)
  4013f6:	4ba0      	ldr	r3, [pc, #640]	; (401678 <main+0x2fc>)
  4013f8:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  4013fa:	4aa0      	ldr	r2, [pc, #640]	; (40167c <main+0x300>)
  4013fc:	2114      	movs	r1, #20
  4013fe:	4628      	mov	r0, r5
  401400:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 4016c8 <main+0x34c>
  401404:	47d8      	blx	fp
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  401406:	4a9e      	ldr	r2, [pc, #632]	; (401680 <main+0x304>)
  401408:	2150      	movs	r1, #80	; 0x50
  40140a:	4628      	mov	r0, r5
  40140c:	47d8      	blx	fp
	pmc_enable_periph_clk( ID_SMC );
  40140e:	200a      	movs	r0, #10
  401410:	47b0      	blx	r6
	smc_set_setup_timing(SMC, SRAM_CS, SMC_SETUP_NWE_SETUP(2)
  401412:	4a9c      	ldr	r2, [pc, #624]	; (401684 <main+0x308>)
  401414:	4629      	mov	r1, r5
  401416:	4620      	mov	r0, r4
  401418:	47d0      	blx	sl
	smc_set_pulse_timing(SMC, SRAM_CS, SMC_PULSE_NWE_PULSE(4)
  40141a:	4a9b      	ldr	r2, [pc, #620]	; (401688 <main+0x30c>)
  40141c:	4629      	mov	r1, r5
  40141e:	4620      	mov	r0, r4
  401420:	47c8      	blx	r9
	smc_set_cycle_timing(SMC, SRAM_CS, SMC_CYCLE_NWE_CYCLE(6)
  401422:	4a9a      	ldr	r2, [pc, #616]	; (40168c <main+0x310>)
  401424:	4629      	mov	r1, r5
  401426:	4620      	mov	r0, r4
  401428:	47c0      	blx	r8
	smc_set_mode(SMC, SRAM_CS, SMC_MODE_READ_MODE
  40142a:	2203      	movs	r2, #3
  40142c:	4629      	mov	r1, r5
  40142e:	4620      	mov	r0, r4
  401430:	47b8      	blx	r7
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  401432:	200b      	movs	r0, #11
  401434:	47b0      	blx	r6
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  401436:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
  40143a:	220a      	movs	r2, #10
  40143c:	2104      	movs	r1, #4
  40143e:	4620      	mov	r0, r4
  401440:	4b93      	ldr	r3, [pc, #588]	; (401690 <main+0x314>)
  401442:	4798      	blx	r3
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  401444:	4b93      	ldr	r3, [pc, #588]	; (401694 <main+0x318>)
  401446:	9300      	str	r3, [sp, #0]
  401448:	2379      	movs	r3, #121	; 0x79
  40144a:	2204      	movs	r2, #4
  40144c:	210b      	movs	r1, #11
  40144e:	4620      	mov	r0, r4
  401450:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 401704 <main+0x388>
  401454:	47c0      	blx	r8
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401456:	4d90      	ldr	r5, [pc, #576]	; (401698 <main+0x31c>)
  401458:	f44f 6700 	mov.w	r7, #2048	; 0x800
  40145c:	602f      	str	r7, [r5, #0]
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  40145e:	2104      	movs	r1, #4
  401460:	4620      	mov	r0, r4
  401462:	4b8e      	ldr	r3, [pc, #568]	; (40169c <main+0x320>)
  401464:	4798      	blx	r3
	pio_handler_set(OV7740_VSYNC_PIO, OV7740_VSYNC_ID, OV7740_VSYNC_MASK,
  401466:	4b8e      	ldr	r3, [pc, #568]	; (4016a0 <main+0x324>)
  401468:	9300      	str	r3, [sp, #0]
  40146a:	2301      	movs	r3, #1
  40146c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401470:	210b      	movs	r1, #11
  401472:	4620      	mov	r0, r4
  401474:	47c0      	blx	r8
  401476:	602f      	str	r7, [r5, #0]
	pmc_enable_periph_clk(ul_id);
  401478:	200b      	movs	r0, #11
  40147a:	47b0      	blx	r6
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  40147c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401480:	f023 0301 	bic.w	r3, r3, #1
  401484:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  401488:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  40148c:	f043 0308 	orr.w	r3, r3, #8
  401490:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  401494:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401498:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  40149c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4014a0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  4014a4:	f043 0320 	orr.w	r3, r3, #32
  4014a8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4014ac:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  4014b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  4014b4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4014b8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  4014bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4014c0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  4014c4:	4b77      	ldr	r3, [pc, #476]	; (4016a4 <main+0x328>)
  4014c6:	2222      	movs	r2, #34	; 0x22
  4014c8:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  4014ca:	f44f 7280 	mov.w	r2, #256	; 0x100
  4014ce:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  4014d0:	689a      	ldr	r2, [r3, #8]
  4014d2:	f412 7f80 	tst.w	r2, #256	; 0x100
  4014d6:	d0fb      	beq.n	4014d0 <main+0x154>
	pmc_enable_periph_clk(ID_BOARD_TWI);
  4014d8:	2013      	movs	r0, #19
  4014da:	4b5d      	ldr	r3, [pc, #372]	; (401650 <main+0x2d4>)
  4014dc:	4798      	blx	r3
	opt.master_clk = sysclk_get_cpu_hz();
  4014de:	4b72      	ldr	r3, [pc, #456]	; (4016a8 <main+0x32c>)
  4014e0:	9302      	str	r3, [sp, #8]
	opt.speed      = TWI_CLK;
  4014e2:	4b72      	ldr	r3, [pc, #456]	; (4016ac <main+0x330>)
  4014e4:	9303      	str	r3, [sp, #12]
	twi_master_init(BOARD_TWI, &opt);
  4014e6:	a902      	add	r1, sp, #8
  4014e8:	4871      	ldr	r0, [pc, #452]	; (4016b0 <main+0x334>)
  4014ea:	4b72      	ldr	r3, [pc, #456]	; (4016b4 <main+0x338>)
  4014ec:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014ee:	4b6a      	ldr	r3, [pc, #424]	; (401698 <main+0x31c>)
  4014f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4014f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4014f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4014fc:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401500:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401504:	2100      	movs	r1, #0
  401506:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40150a:	601a      	str	r2, [r3, #0]
	while (ov_init(BOARD_TWI) == 1) {
  40150c:	4d68      	ldr	r5, [pc, #416]	; (4016b0 <main+0x334>)
  40150e:	4c6a      	ldr	r4, [pc, #424]	; (4016b8 <main+0x33c>)
  401510:	4628      	mov	r0, r5
  401512:	47a0      	blx	r4
  401514:	2801      	cmp	r0, #1
  401516:	d0fb      	beq.n	401510 <main+0x194>
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  401518:	2102      	movs	r1, #2
  40151a:	4865      	ldr	r0, [pc, #404]	; (4016b0 <main+0x334>)
  40151c:	4b67      	ldr	r3, [pc, #412]	; (4016bc <main+0x340>)
  40151e:	4798      	blx	r3
	delay_ms(3000);
  401520:	4867      	ldr	r0, [pc, #412]	; (4016c0 <main+0x344>)
  401522:	4b68      	ldr	r3, [pc, #416]	; (4016c4 <main+0x348>)
  401524:	4798      	blx	r3

	/* OV7740 image sensor initialization*/
	capture_init();

	/* LCD display information*/
	ili9325_fill(COLOR_TURQUOISE);
  401526:	4853      	ldr	r0, [pc, #332]	; (401674 <main+0x2f8>)
  401528:	4b53      	ldr	r3, [pc, #332]	; (401678 <main+0x2fc>)
  40152a:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  40152c:	4a53      	ldr	r2, [pc, #332]	; (40167c <main+0x300>)
  40152e:	2114      	movs	r1, #20
  401530:	2000      	movs	r0, #0
  401532:	4c65      	ldr	r4, [pc, #404]	; (4016c8 <main+0x34c>)
  401534:	47a0      	blx	r4
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  401536:	4a65      	ldr	r2, [pc, #404]	; (4016cc <main+0x350>)
  401538:	2150      	movs	r1, #80	; 0x50
  40153a:	2000      	movs	r0, #0
  40153c:	47a0      	blx	r4
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40153e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 401708 <main+0x38c>
			(uint8_t *)"Please Press button\nto take and display\na picture");

	while (1) {
		while (!g_ul_push_button_trigger) { /* Press push button to get
  401542:	4b63      	ldr	r3, [pc, #396]	; (4016d0 <main+0x354>)
  401544:	681b      	ldr	r3, [r3, #0]
  401546:	2b00      	cmp	r3, #0
  401548:	d0fb      	beq.n	401542 <main+0x1c6>
			                             * out */
		}
		/* Reset push button trigger flag */
		g_ul_push_button_trigger = false;
  40154a:	2300      	movs	r3, #0
  40154c:	4a60      	ldr	r2, [pc, #384]	; (4016d0 <main+0x354>)
  40154e:	6013      	str	r3, [r2, #0]
	g_p_uc_cap_dest_buf = (uint8_t *)CAP_DEST;
  401550:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  401554:	4a5f      	ldr	r2, [pc, #380]	; (4016d4 <main+0x358>)
  401556:	6013      	str	r3, [r2, #0]
	g_us_cap_rows = IMAGE_HEIGHT;
  401558:	23f0      	movs	r3, #240	; 0xf0
  40155a:	4a5f      	ldr	r2, [pc, #380]	; (4016d8 <main+0x35c>)
  40155c:	8013      	strh	r3, [r2, #0]
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  40155e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401562:	485e      	ldr	r0, [pc, #376]	; (4016dc <main+0x360>)
  401564:	4b4d      	ldr	r3, [pc, #308]	; (40169c <main+0x320>)
  401566:	4798      	blx	r3
	while (!g_ul_vsync_flag) {
  401568:	4a5d      	ldr	r2, [pc, #372]	; (4016e0 <main+0x364>)
  40156a:	6813      	ldr	r3, [r2, #0]
  40156c:	2b00      	cmp	r3, #0
  40156e:	d0fc      	beq.n	40156a <main+0x1ee>
	pio_disable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  401570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401574:	4859      	ldr	r0, [pc, #356]	; (4016dc <main+0x360>)
  401576:	4b5b      	ldr	r3, [pc, #364]	; (4016e4 <main+0x368>)
  401578:	4798      	blx	r3
	pio_capture_enable(OV7740_DATA_BUS_PIO);
  40157a:	4858      	ldr	r0, [pc, #352]	; (4016dc <main+0x360>)
  40157c:	4b5a      	ldr	r3, [pc, #360]	; (4016e8 <main+0x36c>)
  40157e:	4798      	blx	r3
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
  401580:	4b54      	ldr	r3, [pc, #336]	; (4016d4 <main+0x358>)
  401582:	6819      	ldr	r1, [r3, #0]
			(g_us_cap_line * g_us_cap_rows) >> 2);
  401584:	4b59      	ldr	r3, [pc, #356]	; (4016ec <main+0x370>)
  401586:	881a      	ldrh	r2, [r3, #0]
  401588:	4b53      	ldr	r3, [pc, #332]	; (4016d8 <main+0x35c>)
  40158a:	881b      	ldrh	r3, [r3, #0]
  40158c:	fb03 f302 	mul.w	r3, r3, r2
  401590:	109b      	asrs	r3, r3, #2
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  401592:	4a52      	ldr	r2, [pc, #328]	; (4016dc <main+0x360>)
  401594:	f8d2 216c 	ldr.w	r2, [r2, #364]	; 0x16c
  401598:	b922      	cbnz	r2, 4015a4 <main+0x228>
  40159a:	4a50      	ldr	r2, [pc, #320]	; (4016dc <main+0x360>)
  40159c:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
  4015a0:	2a00      	cmp	r2, #0
  4015a2:	d036      	beq.n	401612 <main+0x296>
	} else if (p_pio->PIO_RNCR == 0) {
  4015a4:	4a4d      	ldr	r2, [pc, #308]	; (4016dc <main+0x360>)
  4015a6:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
  4015aa:	b922      	cbnz	r2, 4015b6 <main+0x23a>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  4015ac:	4a4b      	ldr	r2, [pc, #300]	; (4016dc <main+0x360>)
  4015ae:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  4015b2:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
	while (!((OV7740_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  4015b6:	4b49      	ldr	r3, [pc, #292]	; (4016dc <main+0x360>)
  4015b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  4015bc:	f013 0f08 	tst.w	r3, #8
  4015c0:	d0f9      	beq.n	4015b6 <main+0x23a>
	pio_capture_disable(OV7740_DATA_BUS_PIO);
  4015c2:	4846      	ldr	r0, [pc, #280]	; (4016dc <main+0x360>)
  4015c4:	4b4a      	ldr	r3, [pc, #296]	; (4016f0 <main+0x374>)
  4015c6:	4798      	blx	r3
	g_ul_vsync_flag = false;
  4015c8:	2000      	movs	r0, #0
  4015ca:	4b45      	ldr	r3, [pc, #276]	; (4016e0 <main+0x364>)
  4015cc:	6018      	str	r0, [r3, #0]
	p_uc_data = (uint8_t *)g_p_uc_cap_dest_buf;
  4015ce:	4b41      	ldr	r3, [pc, #260]	; (4016d4 <main+0x358>)
  4015d0:	681d      	ldr	r5, [r3, #0]
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4015d2:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4015d6:	7018      	strb	r0, [r3, #0]
  4015d8:	2203      	movs	r2, #3
  4015da:	701a      	strb	r2, [r3, #0]
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4015dc:	23d0      	movs	r3, #208	; 0xd0
  4015de:	f88a 3000 	strb.w	r3, [sl]
  4015e2:	2388      	movs	r3, #136	; 0x88
  4015e4:	f88a 3000 	strb.w	r3, [sl]
	ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  4015e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4015ec:	22f0      	movs	r2, #240	; 0xf0
  4015ee:	4601      	mov	r1, r0
  4015f0:	4c40      	ldr	r4, [pc, #256]	; (4016f4 <main+0x378>)
  4015f2:	47a0      	blx	r4
  4015f4:	1d2c      	adds	r4, r5, #4
  4015f6:	f505 3e16 	add.w	lr, r5, #153600	; 0x25800
  4015fa:	f10e 0e04 	add.w	lr, lr, #4
		l_green = -100 * l_v - 208 * l_u + 128;
  4015fe:	f06f 0963 	mvn.w	r9, #99	; 0x63
  401602:	f06f 08cf 	mvn.w	r8, #207	; 0xcf
		l_red = 409 * l_u + 128;
  401606:	f240 1c99 	movw	ip, #409	; 0x199
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
  40160a:	f44f 7695 	mov.w	r6, #298	; 0x12a
		return 255;
  40160e:	25ff      	movs	r5, #255	; 0xff
  401610:	e0c0      	b.n	401794 <main+0x418>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  401612:	4a32      	ldr	r2, [pc, #200]	; (4016dc <main+0x360>)
  401614:	f8c2 1168 	str.w	r1, [r2, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  401618:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  40161c:	2301      	movs	r3, #1
  40161e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  401622:	e7c8      	b.n	4015b6 <main+0x23a>
		return 255;
  401624:	46ab      	mov	fp, r5
  401626:	f88a b000 	strb.w	fp, [sl]
		LCD_WD( clip32_to_8((298 * l_y1 + l_green) >> 8));
  40162a:	eb03 0b01 	add.w	fp, r3, r1
  40162e:	ea4f 2b2b 	mov.w	fp, fp, asr #8
	if (i > 255) {
  401632:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  401636:	dc6c      	bgt.n	401712 <main+0x396>
	if (i < 0) {
  401638:	f1bb 0f00 	cmp.w	fp, #0
  40163c:	db74      	blt.n	401728 <main+0x3ac>
	return (uint8_t)i;
  40163e:	fa5f fb8b 	uxtb.w	fp, fp
  401642:	e067      	b.n	401714 <main+0x398>
  401644:	00400139 	.word	0x00400139
  401648:	0040019d 	.word	0x0040019d
  40164c:	00400e25 	.word	0x00400e25
  401650:	00400e79 	.word	0x00400e79
  401654:	400e0000 	.word	0x400e0000
  401658:	0a0a0404 	.word	0x0a0a0404
  40165c:	0016000a 	.word	0x0016000a
  401660:	004009b3 	.word	0x004009b3
  401664:	004005a5 	.word	0x004005a5
  401668:	004006b1 	.word	0x004006b1
  40166c:	00400549 	.word	0x00400549
  401670:	00400631 	.word	0x00400631
  401674:	0040e0d0 	.word	0x0040e0d0
  401678:	00400855 	.word	0x00400855
  40167c:	00402954 	.word	0x00402954
  401680:	00402978 	.word	0x00402978
  401684:	00030002 	.word	0x00030002
  401688:	06040504 	.word	0x06040504
  40168c:	00070006 	.word	0x00070006
  401690:	004009bb 	.word	0x004009bb
  401694:	00401371 	.word	0x00401371
  401698:	e000e100 	.word	0xe000e100
  40169c:	00400aeb 	.word	0x00400aeb
  4016a0:	00401365 	.word	0x00401365
  4016a4:	400e0400 	.word	0x400e0400
  4016a8:	07270e00 	.word	0x07270e00
  4016ac:	00061a80 	.word	0x00061a80
  4016b0:	40018000 	.word	0x40018000
  4016b4:	00400f85 	.word	0x00400f85
  4016b8:	004003c9 	.word	0x004003c9
  4016bc:	004004dd 	.word	0x004004dd
  4016c0:	01885e6e 	.word	0x01885e6e
  4016c4:	20000001 	.word	0x20000001
  4016c8:	004008ed 	.word	0x004008ed
  4016cc:	0040299c 	.word	0x0040299c
  4016d0:	20000898 	.word	0x20000898
  4016d4:	200008a4 	.word	0x200008a4
  4016d8:	20000012 	.word	0x20000012
  4016dc:	400e0e00 	.word	0x400e0e00
  4016e0:	2000089c 	.word	0x2000089c
  4016e4:	00400aef 	.word	0x00400aef
  4016e8:	00400c1d 	.word	0x00400c1d
  4016ec:	20000010 	.word	0x20000010
  4016f0:	00400c35 	.word	0x00400c35
  4016f4:	004008c5 	.word	0x004008c5
  4016f8:	0040099d 	.word	0x0040099d
  4016fc:	004009a3 	.word	0x004009a3
  401700:	004009ab 	.word	0x004009ab
  401704:	00400cb5 	.word	0x00400cb5
  401708:	62000002 	.word	0x62000002
		return 0;
  40170c:	f04f 0b00 	mov.w	fp, #0
  401710:	e789      	b.n	401626 <main+0x2aa>
		return 255;
  401712:	46ab      	mov	fp, r5
  401714:	f88a b000 	strb.w	fp, [sl]
		LCD_WD( clip32_to_8((298 * l_y1 + l_red) >> 8));
  401718:	4411      	add	r1, r2
  40171a:	1209      	asrs	r1, r1, #8
	if (i > 255) {
  40171c:	29ff      	cmp	r1, #255	; 0xff
  40171e:	dc06      	bgt.n	40172e <main+0x3b2>
	if (i < 0) {
  401720:	2900      	cmp	r1, #0
  401722:	db14      	blt.n	40174e <main+0x3d2>
	return (uint8_t)i;
  401724:	b2c9      	uxtb	r1, r1
  401726:	e003      	b.n	401730 <main+0x3b4>
		return 0;
  401728:	f04f 0b00 	mov.w	fp, #0
  40172c:	e7f2      	b.n	401714 <main+0x398>
		return 255;
  40172e:	4629      	mov	r1, r5
  401730:	f88a 1000 	strb.w	r1, [sl]
		l_y2 = p_uc_data[2]; /* Y2 */
  401734:	f817 1c02 	ldrb.w	r1, [r7, #-2]
		l_y2 -= 16;
  401738:	3910      	subs	r1, #16
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
  40173a:	fb06 f101 	mul.w	r1, r6, r1
  40173e:	4408      	add	r0, r1
  401740:	1200      	asrs	r0, r0, #8
	if (i > 255) {
  401742:	28ff      	cmp	r0, #255	; 0xff
  401744:	dc05      	bgt.n	401752 <main+0x3d6>
	if (i < 0) {
  401746:	2800      	cmp	r0, #0
  401748:	db0e      	blt.n	401768 <main+0x3ec>
	return (uint8_t)i;
  40174a:	b2c0      	uxtb	r0, r0
  40174c:	e002      	b.n	401754 <main+0x3d8>
		return 0;
  40174e:	2100      	movs	r1, #0
  401750:	e7ee      	b.n	401730 <main+0x3b4>
		return 255;
  401752:	4628      	mov	r0, r5
  401754:	f88a 0000 	strb.w	r0, [sl]
		LCD_WD( clip32_to_8((298 * l_y2 + l_green) >> 8));
  401758:	440b      	add	r3, r1
  40175a:	121b      	asrs	r3, r3, #8
	if (i > 255) {
  40175c:	2bff      	cmp	r3, #255	; 0xff
  40175e:	dc05      	bgt.n	40176c <main+0x3f0>
	if (i < 0) {
  401760:	2b00      	cmp	r3, #0
  401762:	db0e      	blt.n	401782 <main+0x406>
	return (uint8_t)i;
  401764:	b2db      	uxtb	r3, r3
  401766:	e002      	b.n	40176e <main+0x3f2>
		return 0;
  401768:	2000      	movs	r0, #0
  40176a:	e7f3      	b.n	401754 <main+0x3d8>
		return 255;
  40176c:	462b      	mov	r3, r5
  40176e:	f88a 3000 	strb.w	r3, [sl]
		LCD_WD( clip32_to_8((298 * l_y2 + l_red) >> 8));
  401772:	440a      	add	r2, r1
  401774:	1212      	asrs	r2, r2, #8
	if (i > 255) {
  401776:	2aff      	cmp	r2, #255	; 0xff
  401778:	dc05      	bgt.n	401786 <main+0x40a>
	if (i < 0) {
  40177a:	2a00      	cmp	r2, #0
  40177c:	db30      	blt.n	4017e0 <main+0x464>
	return (uint8_t)i;
  40177e:	b2d2      	uxtb	r2, r2
  401780:	e002      	b.n	401788 <main+0x40c>
		return 0;
  401782:	2300      	movs	r3, #0
  401784:	e7f3      	b.n	40176e <main+0x3f2>
		return 255;
  401786:	462a      	mov	r2, r5
  401788:	f88a 2000 	strb.w	r2, [sl]
  40178c:	3404      	adds	r4, #4
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  40178e:	4574      	cmp	r4, lr
  401790:	f43f aed7 	beq.w	401542 <main+0x1c6>
  401794:	4627      	mov	r7, r4
		l_y1 = p_uc_data[0]; /* Y1 */
  401796:	f814 1c04 	ldrb.w	r1, [r4, #-4]
		l_v = p_uc_data[3]; /* V */
  40179a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
		l_v -= 128;
  40179e:	3b80      	subs	r3, #128	; 0x80
		l_u = p_uc_data[1]; /* U */
  4017a0:	f814 2c03 	ldrb.w	r2, [r4, #-3]
		l_u -= 128;
  4017a4:	3a80      	subs	r2, #128	; 0x80
		l_blue = 516 * l_v + 128;
  4017a6:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
  4017aa:	0080      	lsls	r0, r0, #2
  4017ac:	3080      	adds	r0, #128	; 0x80
		l_green = -100 * l_v - 208 * l_u + 128;
  4017ae:	fb08 fb02 	mul.w	fp, r8, r2
  4017b2:	fb09 b303 	mla	r3, r9, r3, fp
  4017b6:	3380      	adds	r3, #128	; 0x80
		l_red = 409 * l_u + 128;
  4017b8:	fb0c f202 	mul.w	r2, ip, r2
  4017bc:	3280      	adds	r2, #128	; 0x80
		l_y1 -= 16;
  4017be:	3910      	subs	r1, #16
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
  4017c0:	fb06 f101 	mul.w	r1, r6, r1
  4017c4:	eb00 0b01 	add.w	fp, r0, r1
  4017c8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
	if (i > 255) {
  4017cc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  4017d0:	f73f af28 	bgt.w	401624 <main+0x2a8>
	if (i < 0) {
  4017d4:	f1bb 0f00 	cmp.w	fp, #0
  4017d8:	db98      	blt.n	40170c <main+0x390>
	return (uint8_t)i;
  4017da:	fa5f fb8b 	uxtb.w	fp, fp
  4017de:	e722      	b.n	401626 <main+0x2aa>
		return 0;
  4017e0:	2200      	movs	r2, #0
  4017e2:	e7d1      	b.n	401788 <main+0x40c>

004017e4 <__libc_init_array>:
  4017e4:	b570      	push	{r4, r5, r6, lr}
  4017e6:	4e0f      	ldr	r6, [pc, #60]	; (401824 <__libc_init_array+0x40>)
  4017e8:	4d0f      	ldr	r5, [pc, #60]	; (401828 <__libc_init_array+0x44>)
  4017ea:	1b76      	subs	r6, r6, r5
  4017ec:	10b6      	asrs	r6, r6, #2
  4017ee:	bf18      	it	ne
  4017f0:	2400      	movne	r4, #0
  4017f2:	d005      	beq.n	401800 <__libc_init_array+0x1c>
  4017f4:	3401      	adds	r4, #1
  4017f6:	f855 3b04 	ldr.w	r3, [r5], #4
  4017fa:	4798      	blx	r3
  4017fc:	42a6      	cmp	r6, r4
  4017fe:	d1f9      	bne.n	4017f4 <__libc_init_array+0x10>
  401800:	4e0a      	ldr	r6, [pc, #40]	; (40182c <__libc_init_array+0x48>)
  401802:	4d0b      	ldr	r5, [pc, #44]	; (401830 <__libc_init_array+0x4c>)
  401804:	1b76      	subs	r6, r6, r5
  401806:	f001 f8e5 	bl	4029d4 <_init>
  40180a:	10b6      	asrs	r6, r6, #2
  40180c:	bf18      	it	ne
  40180e:	2400      	movne	r4, #0
  401810:	d006      	beq.n	401820 <__libc_init_array+0x3c>
  401812:	3401      	adds	r4, #1
  401814:	f855 3b04 	ldr.w	r3, [r5], #4
  401818:	4798      	blx	r3
  40181a:	42a6      	cmp	r6, r4
  40181c:	d1f9      	bne.n	401812 <__libc_init_array+0x2e>
  40181e:	bd70      	pop	{r4, r5, r6, pc}
  401820:	bd70      	pop	{r4, r5, r6, pc}
  401822:	bf00      	nop
  401824:	004029e0 	.word	0x004029e0
  401828:	004029e0 	.word	0x004029e0
  40182c:	004029e8 	.word	0x004029e8
  401830:	004029e0 	.word	0x004029e0

00401834 <register_fini>:
  401834:	4b02      	ldr	r3, [pc, #8]	; (401840 <register_fini+0xc>)
  401836:	b113      	cbz	r3, 40183e <register_fini+0xa>
  401838:	4802      	ldr	r0, [pc, #8]	; (401844 <register_fini+0x10>)
  40183a:	f000 b805 	b.w	401848 <atexit>
  40183e:	4770      	bx	lr
  401840:	00000000 	.word	0x00000000
  401844:	00401855 	.word	0x00401855

00401848 <atexit>:
  401848:	2300      	movs	r3, #0
  40184a:	4601      	mov	r1, r0
  40184c:	461a      	mov	r2, r3
  40184e:	4618      	mov	r0, r3
  401850:	f000 b81e 	b.w	401890 <__register_exitproc>

00401854 <__libc_fini_array>:
  401854:	b538      	push	{r3, r4, r5, lr}
  401856:	4c0a      	ldr	r4, [pc, #40]	; (401880 <__libc_fini_array+0x2c>)
  401858:	4d0a      	ldr	r5, [pc, #40]	; (401884 <__libc_fini_array+0x30>)
  40185a:	1b64      	subs	r4, r4, r5
  40185c:	10a4      	asrs	r4, r4, #2
  40185e:	d00a      	beq.n	401876 <__libc_fini_array+0x22>
  401860:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401864:	3b01      	subs	r3, #1
  401866:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40186a:	3c01      	subs	r4, #1
  40186c:	f855 3904 	ldr.w	r3, [r5], #-4
  401870:	4798      	blx	r3
  401872:	2c00      	cmp	r4, #0
  401874:	d1f9      	bne.n	40186a <__libc_fini_array+0x16>
  401876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40187a:	f001 b8b5 	b.w	4029e8 <_fini>
  40187e:	bf00      	nop
  401880:	004029f8 	.word	0x004029f8
  401884:	004029f4 	.word	0x004029f4

00401888 <__retarget_lock_acquire_recursive>:
  401888:	4770      	bx	lr
  40188a:	bf00      	nop

0040188c <__retarget_lock_release_recursive>:
  40188c:	4770      	bx	lr
  40188e:	bf00      	nop

00401890 <__register_exitproc>:
  401890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401894:	4d2c      	ldr	r5, [pc, #176]	; (401948 <__register_exitproc+0xb8>)
  401896:	4606      	mov	r6, r0
  401898:	6828      	ldr	r0, [r5, #0]
  40189a:	4698      	mov	r8, r3
  40189c:	460f      	mov	r7, r1
  40189e:	4691      	mov	r9, r2
  4018a0:	f7ff fff2 	bl	401888 <__retarget_lock_acquire_recursive>
  4018a4:	4b29      	ldr	r3, [pc, #164]	; (40194c <__register_exitproc+0xbc>)
  4018a6:	681c      	ldr	r4, [r3, #0]
  4018a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4018ac:	2b00      	cmp	r3, #0
  4018ae:	d03e      	beq.n	40192e <__register_exitproc+0x9e>
  4018b0:	685a      	ldr	r2, [r3, #4]
  4018b2:	2a1f      	cmp	r2, #31
  4018b4:	dc1c      	bgt.n	4018f0 <__register_exitproc+0x60>
  4018b6:	f102 0e01 	add.w	lr, r2, #1
  4018ba:	b176      	cbz	r6, 4018da <__register_exitproc+0x4a>
  4018bc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4018c0:	2401      	movs	r4, #1
  4018c2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4018c6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4018ca:	4094      	lsls	r4, r2
  4018cc:	4320      	orrs	r0, r4
  4018ce:	2e02      	cmp	r6, #2
  4018d0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4018d4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4018d8:	d023      	beq.n	401922 <__register_exitproc+0x92>
  4018da:	3202      	adds	r2, #2
  4018dc:	f8c3 e004 	str.w	lr, [r3, #4]
  4018e0:	6828      	ldr	r0, [r5, #0]
  4018e2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4018e6:	f7ff ffd1 	bl	40188c <__retarget_lock_release_recursive>
  4018ea:	2000      	movs	r0, #0
  4018ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4018f0:	4b17      	ldr	r3, [pc, #92]	; (401950 <__register_exitproc+0xc0>)
  4018f2:	b30b      	cbz	r3, 401938 <__register_exitproc+0xa8>
  4018f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4018f8:	f3af 8000 	nop.w
  4018fc:	4603      	mov	r3, r0
  4018fe:	b1d8      	cbz	r0, 401938 <__register_exitproc+0xa8>
  401900:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401904:	6002      	str	r2, [r0, #0]
  401906:	2100      	movs	r1, #0
  401908:	6041      	str	r1, [r0, #4]
  40190a:	460a      	mov	r2, r1
  40190c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401910:	f04f 0e01 	mov.w	lr, #1
  401914:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401918:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40191c:	2e00      	cmp	r6, #0
  40191e:	d0dc      	beq.n	4018da <__register_exitproc+0x4a>
  401920:	e7cc      	b.n	4018bc <__register_exitproc+0x2c>
  401922:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401926:	430c      	orrs	r4, r1
  401928:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40192c:	e7d5      	b.n	4018da <__register_exitproc+0x4a>
  40192e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401932:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401936:	e7bb      	b.n	4018b0 <__register_exitproc+0x20>
  401938:	6828      	ldr	r0, [r5, #0]
  40193a:	f7ff ffa7 	bl	40188c <__retarget_lock_release_recursive>
  40193e:	f04f 30ff 	mov.w	r0, #4294967295
  401942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401946:	bf00      	nop
  401948:	20000440 	.word	0x20000440
  40194c:	004029d0 	.word	0x004029d0
  401950:	00000000 	.word	0x00000000

00401954 <OV7740_QQVGA_RGB888>:
  401954:	8012000e 01110013 10d50012 340d120c     ...............4
  401964:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  401974:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  401984:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  401994:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  4019a4:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  4019b4:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  4019c4:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  4019d4:	11380183 00857084 01870386 30890588     ..8..p.........0
  4019e4:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  4019f4:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  401a04:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  401a14:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  401a24:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  401a34:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  401a44:	ffff0228                                (...

00401a48 <OV7740_QQVGA_YUV422>:
  401a48:	8012000e 01110013 10d50012 340d540c     .............T.4
  401a58:	25170116 0319a018 891bf01a 18290322     ...%........".).
  401a68:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  401a78:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  401a88:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  401a98:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  401aa8:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  401ab8:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  401ac8:	01833282 70841138 03860085 05880187     .2..8..p........
  401ad8:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  401ae8:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  401af8:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  401b08:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  401b18:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  401b28:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  401b38:	ffff00d9                                ....

00401b3c <OV7740_QVGA_RGB888>:
  401b3c:	8012000e 01110013 10d50012 340d120c     ...............4
  401b4c:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  401b5c:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  401b6c:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  401b7c:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  401b8c:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  401b9c:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  401bac:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  401bbc:	11380183 00857084 01870386 30890588     ..8..p.........0
  401bcc:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  401bdc:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  401bec:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  401bfc:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  401c0c:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  401c1c:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  401c2c:	ffff0228                                (...

00401c30 <OV7740_QVGA_YUV422_10FPS>:
  401c30:	8012000e 001305fe 00120511 d40c10d5     ................
  401c40:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  401c50:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  401c60:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  401c70:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  401c80:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  401c90:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  401ca0:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  401cb0:	32823f81 11380183 03860085 05880187     .?.2..8.........
  401cc0:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  401cd0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  401ce0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  401cf0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  401d00:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  401d10:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00401d20 <OV7740_QVGA_YUV422_15FPS>:
  401d20:	8012000e 001305fe 00120311 d40c10d5     ................
  401d30:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  401d40:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  401d50:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  401d60:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  401d70:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  401d80:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  401d90:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  401da0:	32823f81 11380183 03860085 05880187     .?.2..8.........
  401db0:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  401dc0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  401dd0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  401de0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  401df0:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  401e00:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00401e10 <OV7740_QVGA_YUV422_20FPS>:
  401e10:	8012000e 001305fe 00120211 d40c10d5     ................
  401e20:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  401e30:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  401e40:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  401e50:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  401e60:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  401e70:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  401e80:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  401e90:	32823f81 11380183 03860085 05880187     .?.2..8.........
  401ea0:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  401eb0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  401ec0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  401ed0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  401ee0:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  401ef0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00401f00 <OV7740_QVGA_YUV422_30FPS>:
  401f00:	8012000e 001305fe 00120111 d40c10d5     ................
  401f10:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  401f20:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  401f30:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  401f40:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  401f50:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  401f60:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  401f70:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  401f80:	32823f81 11380183 03860085 05880187     .?.2..8.........
  401f90:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  401fa0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  401fb0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  401fc0:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  401fd0:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  401fe0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00401ff0 <OV7740_TEST_PATTERN>:
  401ff0:	8012000e 001305fe 00120211 d40c10d5     ................
  402000:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  402010:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  402020:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  402030:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  402040:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  402050:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  402060:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  402070:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  402080:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  402090:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  4020a0:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  4020b0:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  4020c0:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  4020d0:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  4020e0:	ffff0228                                (...

004020e4 <OV7740_VGA_YUV422_20FPS>:
  4020e4:	8012000e 001305fe 00120211 d40c10d5     ................
  4020f4:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  402104:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  402114:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  402124:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  402134:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  402144:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  402154:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  402164:	32823f81 11380183 03860085 05880187     .?.2..8.........
  402174:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  402184:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  402194:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4021a4:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4021b4:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  4021c4:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004021d4 <p_uc_charset10x14>:
	...
  4021f0:	ccffccff 00000000 00000000 00000000     ................
  402200:	00f000f0 00000000 00f000f0 00000000     ................
  402210:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  402220:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  402230:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  402240:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  402250:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  402260:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  402278:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  402288:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  402298:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  4022a8:	c0078003 600ce00e 00030003 00030003     .......`........
  4022b8:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  4022c8:	7000f800 00000000 00000000 00000000     ...p............
  4022d8:	00030003 00030003 00030003 00030003     ................
  4022e8:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  402300:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  402310:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  402320:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  402330:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  402340:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  402350:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  402360:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  402370:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  402380:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  402390:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  4023a0:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  4023b0:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  4023c0:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  4023d0:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  4023e0:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  4023f0:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  402400:	00000000 00030000 c00f8007 7038e01c     ..............8p
  402410:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  402420:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  402430:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  402440:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  402450:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  402460:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  402470:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  402480:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  402490:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4024a0:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  4024b0:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  4024c0:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  4024d0:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  4024e0:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  4024f0:	f033f873 fcfffcff 00030003 00030003     s.3.............
  402500:	00030003 fcfffcff 00000000 0cc00cc0     ................
  402510:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  402520:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  402530:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  402540:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  402550:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  402560:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  402570:	000e001c 80030007 e000c001 fcfffcff     ................
  402580:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  402590:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  4025a0:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  4025b0:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  4025c0:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  4025d0:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  4025e0:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  4025f0:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  402600:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  402610:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  402620:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  402630:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  402640:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  402650:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  402660:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  402670:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  402680:	00000000 00300030 000c000c 00030003     ....0.0.........
  402690:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  4026a0:	fcff0cc0 0000fcff 00000000 001c000c     ................
  4026b0:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  4026c0:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  4026d0:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  4026e0:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  4026f0:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  402700:	0c030c03 0c030c03 9c030c03 f000f801     ................
  402710:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402720:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  402730:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  402740:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  402750:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  402760:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  402770:	f007f80f fcfffcff 00030003 00030003     ................
  402780:	fc018003 0000fc00 00000000 00000000     ................
  402790:	fc1bfc1b 00000000 00000000 30000000     ...............0
  4027a0:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  4027b0:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  4027c0:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  4027d0:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  4027e0:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  4027f0:	00070003 000c000e 000e000c fc03fc07     ................
  402800:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402810:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  402820:	c00fc00c 00038007 80070003 c00cc00f     ................
  402830:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  402840:	00078003 000c000e 000e000c 00030007     ................
  402850:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  402860:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  402870:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  402880:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  402890:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  4028a0:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  4028b0:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  4028c0:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  4028d0:	f001f801 00078003 000c000e 1c0c0c0c     ................
  4028e0:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  4028f0:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  402900:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  402910:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  402920:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  402930:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  402940:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  402950:	fcfffcff 3737564f 69203034 6567616d     ....OV7740 image
  402960:	6e657320 0a726f73 74706163 20657275      sensor.capture 
  402970:	6d617865 00656c70 61656c50 57206573     example.Please W
  402980:	20746961 69727564 0a20676e 74696e69     ait during .init
  402990:	696c6169 6974617a 00006e6f 61656c50     ialization..Plea
  4029a0:	50206573 73736572 74756220 0a6e6f74     se Press button.
  4029b0:	74206f74 20656b61 20646e61 70736964     to take and disp
  4029c0:	0a79616c 69702061 72757463 00000065     lay.a picture...

004029d0 <_global_impure_ptr>:
  4029d0:	20000018                                ... 

004029d4 <_init>:
  4029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4029d6:	bf00      	nop
  4029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4029da:	bc08      	pop	{r3}
  4029dc:	469e      	mov	lr, r3
  4029de:	4770      	bx	lr

004029e0 <__init_array_start>:
  4029e0:	00401835 	.word	0x00401835

004029e4 <__frame_dummy_init_array_entry>:
  4029e4:	004000f1                                ..@.

004029e8 <_fini>:
  4029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4029ea:	bf00      	nop
  4029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4029ee:	bc08      	pop	{r3}
  4029f0:	469e      	mov	lr, r3
  4029f2:	4770      	bx	lr

004029f4 <__fini_array_start>:
  4029f4:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <g_us_cap_line>:
20000010:	0280                                        ..

20000012 <g_us_cap_rows>:
20000012:	00f0 0000 0000                              ......

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	08a8 2000                                   ... 
